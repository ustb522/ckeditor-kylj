{"version":3,"sources":["webpack://DecoupledEditor/webpack/universalModuleDefinition","webpack://DecoupledEditor/webpack/bootstrap","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/ckeditorerror.js","webpack://DecoupledEditor/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack://DecoupledEditor/./node_modules/lodash-es/_root.js","webpack://DecoupledEditor/./node_modules/lodash-es/_nodeUtil.js","webpack://DecoupledEditor/./node_modules/lodash-es/isBuffer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/version.js","webpack://DecoupledEditor/./node_modules/lodash-es/_freeGlobal.js","webpack://DecoupledEditor/(webpack)/buildin/harmony-module.js","webpack://DecoupledEditor/(webpack)/buildin/global.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/theme/heading.css?3817","webpack://DecoupledEditor/./node_modules/lodash-es/stubFalse.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cloneBuffer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css?e043","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/theme/placeholder.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css?0c98","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/globals/globals.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css?9b58","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/editorui/editorui.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css?ab63","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/dropdown.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css?dcba","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/icon/icon.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css?a250","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/tooltip/tooltip.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css?c37e","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/button.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css?fc0e","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/list/list.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css?7150","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/button/switchbutton.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css?4d56","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/toolbardropdown.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css?92e1","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/listdropdown.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css?a52e","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/toolbar/toolbar.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css?5123","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/colorgrid/colorgrid.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css?a80d","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/label/label.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/fontcolor.css?2db3","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/fontcolor.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/fontsize.css?139a","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/fontsize.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-block-quote/theme/blockquote.css?98c3","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-block-quote/theme/blockquote.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/link.css?9ecb","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/link.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css?1b9a","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widget.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledinput/labeledinput.css?6a85","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/labeledinput/labeledinput.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css?f229","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/inputtext/inputtext.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/textalternativeform.css?ec83","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/textalternativeform.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css?9810","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonpanel.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css?270e","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/balloonrotator.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css?e8ce","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/panel/fakepanel.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/image.css?4996","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/image.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadprogress.css?fc17","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadprogress.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadicon.css?0258","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadicon.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadloader.css?9840","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageuploadloader.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/theme/heading.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imagecaption.css?2a2f","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imagecaption.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imagestyle.css?453e","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imagestyle.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css?454c","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/widgetresize.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageresize.css?ad23","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/imageresize.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/linkform.css?806e","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/linkform.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/linkactions.css?72c0","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/linkactions.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css?5c83","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/tableediting.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css?6096","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/inserttable.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/table.css?cbbb","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/table.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css?a3ed","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/components/dropdown/splitbutton.css","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/theme/highlight.css?c7b4","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/theme/highlight.css","webpack://DecoupledEditor/./node_modules/lodash-es/_Symbol.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getRawTag.js","webpack://DecoupledEditor/./node_modules/lodash-es/_objectToString.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseGetTag.js","webpack://DecoupledEditor/./node_modules/lodash-es/_overArg.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getPrototype.js","webpack://DecoupledEditor/./node_modules/lodash-es/isObjectLike.js","webpack://DecoupledEditor/./node_modules/lodash-es/isPlainObject.js","webpack://DecoupledEditor/./node_modules/lodash-es/_listCacheClear.js","webpack://DecoupledEditor/./node_modules/lodash-es/eq.js","webpack://DecoupledEditor/./node_modules/lodash-es/_assocIndexOf.js","webpack://DecoupledEditor/./node_modules/lodash-es/_listCacheDelete.js","webpack://DecoupledEditor/./node_modules/lodash-es/_listCacheGet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_listCacheHas.js","webpack://DecoupledEditor/./node_modules/lodash-es/_listCacheSet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_ListCache.js","webpack://DecoupledEditor/./node_modules/lodash-es/_stackClear.js","webpack://DecoupledEditor/./node_modules/lodash-es/_stackDelete.js","webpack://DecoupledEditor/./node_modules/lodash-es/_stackGet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_stackHas.js","webpack://DecoupledEditor/./node_modules/lodash-es/isObject.js","webpack://DecoupledEditor/./node_modules/lodash-es/isFunction.js","webpack://DecoupledEditor/./node_modules/lodash-es/_coreJsData.js","webpack://DecoupledEditor/./node_modules/lodash-es/_isMasked.js","webpack://DecoupledEditor/./node_modules/lodash-es/_toSource.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsNative.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getValue.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getNative.js","webpack://DecoupledEditor/./node_modules/lodash-es/_Map.js","webpack://DecoupledEditor/./node_modules/lodash-es/_nativeCreate.js","webpack://DecoupledEditor/./node_modules/lodash-es/_hashClear.js","webpack://DecoupledEditor/./node_modules/lodash-es/_hashDelete.js","webpack://DecoupledEditor/./node_modules/lodash-es/_hashGet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_hashHas.js","webpack://DecoupledEditor/./node_modules/lodash-es/_hashSet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_Hash.js","webpack://DecoupledEditor/./node_modules/lodash-es/_mapCacheClear.js","webpack://DecoupledEditor/./node_modules/lodash-es/_isKeyable.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getMapData.js","webpack://DecoupledEditor/./node_modules/lodash-es/_mapCacheDelete.js","webpack://DecoupledEditor/./node_modules/lodash-es/_mapCacheGet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_mapCacheHas.js","webpack://DecoupledEditor/./node_modules/lodash-es/_mapCacheSet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_MapCache.js","webpack://DecoupledEditor/./node_modules/lodash-es/_stackSet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_Stack.js","webpack://DecoupledEditor/./node_modules/lodash-es/_arrayEach.js","webpack://DecoupledEditor/./node_modules/lodash-es/_defineProperty.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseAssignValue.js","webpack://DecoupledEditor/./node_modules/lodash-es/_assignValue.js","webpack://DecoupledEditor/./node_modules/lodash-es/_copyObject.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseTimes.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsArguments.js","webpack://DecoupledEditor/./node_modules/lodash-es/isArguments.js","webpack://DecoupledEditor/./node_modules/lodash-es/isArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_isIndex.js","webpack://DecoupledEditor/./node_modules/lodash-es/isLength.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsTypedArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseUnary.js","webpack://DecoupledEditor/./node_modules/lodash-es/isTypedArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_arrayLikeKeys.js","webpack://DecoupledEditor/./node_modules/lodash-es/_isPrototype.js","webpack://DecoupledEditor/./node_modules/lodash-es/_nativeKeys.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseKeys.js","webpack://DecoupledEditor/./node_modules/lodash-es/isArrayLike.js","webpack://DecoupledEditor/./node_modules/lodash-es/keys.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseAssign.js","webpack://DecoupledEditor/./node_modules/lodash-es/_nativeKeysIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseKeysIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/keysIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseAssignIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/_copyArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_arrayFilter.js","webpack://DecoupledEditor/./node_modules/lodash-es/stubArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getSymbols.js","webpack://DecoupledEditor/./node_modules/lodash-es/_copySymbols.js","webpack://DecoupledEditor/./node_modules/lodash-es/_arrayPush.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getSymbolsIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/_copySymbolsIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseGetAllKeys.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getAllKeys.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getAllKeysIn.js","webpack://DecoupledEditor/./node_modules/lodash-es/_DataView.js","webpack://DecoupledEditor/./node_modules/lodash-es/_Promise.js","webpack://DecoupledEditor/./node_modules/lodash-es/_Set.js","webpack://DecoupledEditor/./node_modules/lodash-es/_WeakMap.js","webpack://DecoupledEditor/./node_modules/lodash-es/_getTag.js","webpack://DecoupledEditor/./node_modules/lodash-es/_initCloneArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_Uint8Array.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cloneArrayBuffer.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cloneDataView.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cloneRegExp.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cloneSymbol.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cloneTypedArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_initCloneByTag.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseCreate.js","webpack://DecoupledEditor/./node_modules/lodash-es/_initCloneObject.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsMap.js","webpack://DecoupledEditor/./node_modules/lodash-es/isMap.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsSet.js","webpack://DecoupledEditor/./node_modules/lodash-es/isSet.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseClone.js","webpack://DecoupledEditor/./node_modules/lodash-es/cloneDeepWith.js","webpack://DecoupledEditor/./node_modules/lodash-es/isElement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/config.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/spy.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/eventinfo.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/uid.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/priorities.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/emittermixin.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/mix.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/comparearrays.js","webpack://DecoupledEditor/./node_modules/lodash-es/clone.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/node.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/text.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/textproxy.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/objecttomap.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/isiterable.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/matcher.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/element.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/containerelement.js","webpack://DecoupledEditor/./node_modules/lodash-es/identity.js","webpack://DecoupledEditor/./node_modules/lodash-es/_apply.js","webpack://DecoupledEditor/./node_modules/lodash-es/_overRest.js","webpack://DecoupledEditor/./node_modules/lodash-es/constant.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseSetToString.js","webpack://DecoupledEditor/./node_modules/lodash-es/_shortOut.js","webpack://DecoupledEditor/./node_modules/lodash-es/_setToString.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseRest.js","webpack://DecoupledEditor/./node_modules/lodash-es/_isIterateeCall.js","webpack://DecoupledEditor/./node_modules/lodash-es/_createAssigner.js","webpack://DecoupledEditor/./node_modules/lodash-es/assignIn.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/observablemixin.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/editableelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/rooteditableelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/treewalker.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/position.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/range.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/count.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/selection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/documentselection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/collection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/document.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/attributeelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/emptyelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/env.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/keyboard.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/uielement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/documentfragment.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/downcastwriter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/istext.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/filler.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/fastdiff.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/diff.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/insertat.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/remove.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isnode.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/renderer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/global.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/indexof.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getancestors.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/domconverter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getcommonancestor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/iswindow.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/emittermixin.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/observer.js","webpack://DecoupledEditor/./node_modules/lodash-es/_setCacheAdd.js","webpack://DecoupledEditor/./node_modules/lodash-es/_setCacheHas.js","webpack://DecoupledEditor/./node_modules/lodash-es/_SetCache.js","webpack://DecoupledEditor/./node_modules/lodash-es/_arraySome.js","webpack://DecoupledEditor/./node_modules/lodash-es/_cacheHas.js","webpack://DecoupledEditor/./node_modules/lodash-es/_equalArrays.js","webpack://DecoupledEditor/./node_modules/lodash-es/_mapToArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_setToArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_equalByTag.js","webpack://DecoupledEditor/./node_modules/lodash-es/_equalObjects.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsEqualDeep.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseIsEqual.js","webpack://DecoupledEditor/./node_modules/lodash-es/isEqualWith.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mutationobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventdata.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/keyobserver.js","webpack://DecoupledEditor/./node_modules/lodash-es/now.js","webpack://DecoupledEditor/./node_modules/lodash-es/isSymbol.js","webpack://DecoupledEditor/./node_modules/lodash-es/toNumber.js","webpack://DecoupledEditor/./node_modules/lodash-es/debounce.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/fakeselectionobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/selectionobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/focusobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/compositionobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/inputobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/isrange.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getborderwidths.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/rect.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/scroll.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/view.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/tomap.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/node.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/text.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/textproxy.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/nodelist.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/element.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/treewalker.js","webpack://DecoupledEditor/./node_modules/lodash-es/last.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/position.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/range.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/mapper.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/modelconsumable.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcastdispatcher.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/selection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/liverange.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/documentselection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversionhelpers.js","webpack://DecoupledEditor/./node_modules/lodash-es/cloneDeep.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/downcasthelpers.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcasthelpers.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/controller/editingcontroller.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/plugincollection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/commandcollection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/translation-service.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/locale.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/viewconsumable.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/schema.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/upcastdispatcher.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/controller/datacontroller.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/conversion/conversion.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/batch.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/operation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/documentfragment.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/utils.js","webpack://DecoupledEditor/./node_modules/lodash-es/isEqual.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/attributeoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/detachoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/moveoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/insertoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/markeroperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/renameoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/rootattributeoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/mergeoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/splitoperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/rootelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/writer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/differ.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/history.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/unicode.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/document.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/markercollection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/liveposition.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/insertcontent.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/deletecontent.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/modifyselection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/getselectedcontent.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/utils/selection-post-fixer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/model.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/keystrokehandler.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/editingkeystrokehandler.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/editor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/basichtmlwriter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/componentfactory.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/focustracker.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/editorui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/placeholder.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-editor-decoupled/src/decouplededitorui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/viewcollection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/template.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/view.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editorui/editoruiview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editableui/editableuiview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/focuscycler.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getresizeobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/dropdownpanelview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/position.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getpositionedancestor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/dropdownview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/icon/iconview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/tooltip/tooltipview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/button/buttonview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/dropdown-arrow.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/dropdownbuttonview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/list/listview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/list/listitemview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/list/listseparatorview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/button/switchbuttonview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/toolbar/toolbarview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/preventdefault.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-editor-decoupled/src/decouplededitoruiview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/editor/utils/securesourceelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/setdatainelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/getdatafromelement.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/plugin.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/datatransfer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboardobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/viewtoplaintext.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/clipboard.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/normalizeclipboarddata.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-clipboard/src/utils/plaintexttohtml.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/command.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-enter/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-enter/src/entercommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-enter/src/enterobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-enter/src/enter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-enter/src/shiftentercommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-enter/src/shiftenter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/changebuffer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/inputcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/injectunsafekeystrokeshandling.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/difftochanges.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/injecttypingmutationshandling.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/input.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/deletecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/deleteobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/delete.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/typing.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/nooperation.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/model/operation/transform.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/src/basecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undocommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/src/redocommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undoediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/theme/icons/undo.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/theme/icons/redo.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undoui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-undo/src/undo.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/pendingactions.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-upload/src/filereader.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-upload/src/filerepository.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-adapter-ckfinder/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-autoformat/src/blockautoformatediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-autoformat/src/inlineautoformatediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-typing/src/utils/getlasttextline.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-autoformat/src/autoformat.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/first.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/src/alignmentcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/src/alignmentediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/theme/icons/align-left.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/theme/icons/align-right.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/src/alignmentui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/theme/icons/align-center.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/theme/icons/align-justify.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/color-tile-check.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/colorgrid/colortileview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/colorgrid/colorgridview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/label/labelview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/documentcolorcollection.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/eraser.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/ui/colortableview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontfamily/fontfamilycommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontfamily/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/model.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/icons/font-family.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontfamily/fontfamilyui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontfamily.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontsize/fontsizecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontsize/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontsize/fontsizeediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/icons/font-size.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontsize/fontsizeui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontsize.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontcolor/fontcolorcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontcolor/fontcolorediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/ui/colorui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/icons/font-color.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontcolor/fontcolorui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontcolor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontbackgroundcolor/fontbackgroundcolorcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontbackgroundcolor/fontbackgroundcolorediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/theme/icons/font-background.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontbackgroundcolor/fontbackgroundcolorui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/fontbackgroundcolor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/attributecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/bold.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold/boldui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/italic.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic/italicui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-block-quote/src/blockquotecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-block-quote/src/blockquoteediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/quote.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-block-quote/src/blockquoteui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/theme/icons/browse-files.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfinderui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/imageloadobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/converters.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/highlightstack.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/theme/icons/drag-handle.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/imageinsertcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/imageediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/findlinkrange.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/linkcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/unlinkcommand.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseSlice.js","webpack://DecoupledEditor/./node_modules/lodash-es/_castSlice.js","webpack://DecoupledEditor/./node_modules/lodash-es/_hasUnicode.js","webpack://DecoupledEditor/./node_modules/lodash-es/_asciiToArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_unicodeToArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_stringToArray.js","webpack://DecoupledEditor/./node_modules/lodash-es/_arrayMap.js","webpack://DecoupledEditor/./node_modules/lodash-es/_baseToString.js","webpack://DecoupledEditor/./node_modules/lodash-es/toString.js","webpack://DecoupledEditor/./node_modules/lodash-es/_createCaseFirst.js","webpack://DecoupledEditor/./node_modules/lodash-es/upperFirst.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/utils/automaticdecorators.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/utils/manualdecorator.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/linkediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/notification/notification.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfindercommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfinderediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor-cloud-services-core/src/uploadgateway/fileuploader.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor-cloud-services-core/src/token/token.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-cloud-services/src/cloudservices.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-easy-image/src/cloudservicesuploadadapter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor-cloud-services-core/src/uploadgateway/uploadgateway.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widget.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativeediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/inputtext/inputtextview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/bindings/submithandler.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/check.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/cancel.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/ui/textalternativeformview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-utils/src/dom/tounit.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/previous-arrow.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/theme/icons/next-arrow.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/low-vision.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image/ui/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative/imagetextalternativeui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetextalternative.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/image.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/image.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/theme/icons/image_placeholder.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadprogress.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/upcastwriter.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload/imageuploadediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageupload.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paragraph/src/paragraphcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paragraph/src/paragraph.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/src/headingcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/src/headingediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/src/headingui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagecaption/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagecaption/imagecaptionediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestylecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/converters.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-left.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-center.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/object-right.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle/imagestyleui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgettoolbarrepository.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizerstate.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize/resizer.js","webpack://DecoupledEditor/./node_modules/lodash-es/throttle.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-widget/src/widgetresize.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageresize/imageresizecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/src/multicommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-indent/src/indentediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-indent/theme/icons/indent.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-indent/theme/icons/outdent.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-indent/src/indentui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-engine/src/view/observer/clickobserver.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/ui/linkformview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/icons/unlink.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-core/theme/icons/pencil.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/ui/linkactionsview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/theme/icons/link.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/linkui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/listcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/indentcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/converters.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/listediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/theme/icons/numberedlist.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/theme/icons/bulletedlist.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/listui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/list.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/normalizers/googledocsnormalizer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/removeboldwrapper.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/space.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/parse.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/filters/image.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/normalizers/mswordnormalizer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/upcasttable.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/tablewalker.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/utils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/downcast.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/inserttablecommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/insertrowcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/insertcolumncommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/splitcellcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/mergecellcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/removerowcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/removecolumncommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/setheaderrowcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/commands/setheadercolumncommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/tableutils.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-layout-post-fixer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-paragraph-post-fixer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/converters/table-cell-refresh-post-fixer.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/tableediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/ui/inserttableview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-column.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-row.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/theme/icons/table-merge-cell.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/tableui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/underline/underlineediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/underline.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/underline/underlineui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/strikethrough/strikethroughediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/theme/icons/strikethrough.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/strikethrough/strikethroughui.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/src/highlightcommand.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/src/highlightediting.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/theme/icons/marker.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/theme/icons/pen.svg","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ui/src/dropdown/button/splitbuttonview.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/src/highlightui.js","webpack://DecoupledEditor/./src/ckeditor.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-essentials/src/essentials.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/bold.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/italic.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-block-quote/src/blockquote.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-ckfinder/src/ckfinder.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-easy-image/src/easyimage.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-heading/src/heading.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagecaption.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagestyle.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imagetoolbar.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-indent/src/indent.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-link/src/link.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-list/src/list.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/table.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-table/src/tabletoolbar.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-image/src/imageresize.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-font/src/font.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-alignment/src/alignment.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/underline.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-basic-styles/src/strikethrough.js","webpack://DecoupledEditor/./node_modules/@ckeditor/ckeditor5-highlight/src/highlight.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","CKEditorError","attachLinkToDocumentation","DOCUMENTATION_URL","Error","[object Object]","message","context","data","JSON","stringify","super","this","type","err","is","originalError","stack","matchedErrorName","match","stylesInDom","isOldIE","memo","Boolean","document","all","atob","getTarget","target","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","listToStyles","list","options","styles","newStyles","length","item","id","base","part","css","media","sourceMap","parts","push","addStylesToDom","domStyle","j","refs","addStyle","insertStyleElement","style","createElement","attributes","nonce","nc","keys","forEach","setAttribute","insert","appendChild","replaceText","textStore","index","replacement","filter","join","applyToSingletonTag","remove","obj","styleSheet","cssText","cssNode","createTextNode","childNodes","removeChild","insertBefore","singleton","singletonCounter","update","styleIndex","btoa","concat","unescape","encodeURIComponent","firstChild","parentNode","removeStyleElement","newObj","newList","mayRemove","_i","_domStyle","_freeGlobal_js__WEBPACK_IMPORTED_MODULE_0__","freeSelf","self","freeGlobal","Function","freeExports","nodeType","freeModule","freeProcess","process","nodeUtil","types","require","binding","_root_js__WEBPACK_IMPORTED_MODULE_0__","_stubFalse_js__WEBPACK_IMPORTED_MODULE_1__","Buffer","undefined","isBuffer","stubFalse","global","ckeditor5_package_json__WEBPACK_IMPORTED_MODULE_0__","_ckeditorerror__WEBPACK_IMPORTED_MODULE_1__","windowOrGlobal","CKEDITOR_VERSION","originalModule","webpackPolyfill","children","g","content","injectType","locals","allocUnsafe","cloneBuffer","buffer","isDeep","slice","result","constructor","copy","objectProto","nativeObjectToString","toString","symToStringTag","getRawTag","isOwn","tag","unmasked","objectToString","nullTag","undefinedTag","baseGetTag","overArg","func","transform","arg","getPrototype","getPrototypeOf","isObjectLike","objectTag","funcProto","funcToString","objectCtorString","isPlainObject","proto","Ctor","listCacheClear","__data__","size","eq","other","assocIndexOf","array","splice","Array","listCacheDelete","pop","listCacheGet","listCacheHas","listCacheSet","ListCache","entries","clear","entry","set","has","stackClear","stackDelete","stackGet","stackHas","isObject","asyncTag","funcTag","genTag","proxyTag","isFunction","coreJsData","maskSrcKey","uid","exec","IE_PROTO","isMasked","toSource","reIsHostCtor","reIsNative","RegExp","replace","baseIsNative","test","getValue","getNative","Map","nativeCreate","hashClear","hashDelete","HASH_UNDEFINED","hashGet","hashHas","hashSet","Hash","mapCacheClear","hash","map","string","isKeyable","getMapData","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","MapCache","LARGE_ARRAY_SIZE","stackSet","pairs","Stack","arrayEach","iteratee","baseAssignValue","configurable","writable","assignValue","objValue","copyObject","source","props","customizer","isNew","newValue","baseTimes","argsTag","baseIsArguments","propertyIsEnumerable","isArguments","arguments","isArray","MAX_SAFE_INTEGER","reIsUint","isIndex","isLength","typedArrayTags","baseIsTypedArray","baseUnary","nodeIsTypedArray","isTypedArray","arrayLikeKeys","inherited","isArr","isArg","isBuff","isType","skipIndexes","String","isPrototype","nativeKeys","baseKeys","isArrayLike","baseAssign","nativeKeysIn","baseKeysIn","isProto","keysIn","baseAssignIn","copyArray","arrayFilter","predicate","resIndex","stubArray","nativeGetSymbols","getOwnPropertySymbols","getSymbols","symbol","copySymbols","arrayPush","values","offset","getSymbolsIn","copySymbolsIn","baseGetAllKeys","keysFunc","symbolsFunc","getAllKeys","getAllKeysIn","DataView","Promise","Set","WeakMap","dataViewCtorString","mapCtorString","promiseCtorString","setCtorString","weakMapCtorString","getTag","ArrayBuffer","resolve","ctorString","initCloneArray","input","Uint8Array","cloneArrayBuffer","arrayBuffer","byteLength","cloneDataView","dataView","byteOffset","reFlags","cloneRegExp","regexp","lastIndex","symbolProto","symbolValueOf","valueOf","cloneSymbol","cloneTypedArray","typedArray","boolTag","dateTag","mapTag","numberTag","regexpTag","setTag","stringTag","symbolTag","arrayBufferTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","initCloneByTag","objectCreate","baseCreate","initCloneObject","baseIsMap","nodeIsMap","isMap","baseIsSet","nodeIsSet","isSet","CLONE_DEEP_FLAG","CLONE_FLAT_FLAG","CLONE_SYMBOLS_FLAG","cloneableTags","baseClone","bitmask","isFlat","isFull","isFunc","stacked","subValue","add","cloneDeepWith","isElement","config_Config","configurations","defaultConfigurations","_config","_setObjectToTarget","_setToTarget","_getFromSource","isDefine","lodash_es_isPlainObject","split","lodash_es_cloneDeepWith","leaveDOMReferences","cloneConfig","configuration","lodash_es_isElement","src_spy","spy","called","eventinfo_EventInfo","path","stop","off","uid_uid","uuid","Math","floor","random","substring","src_priorities","priority","normal","highest","high","low","lowest","_listeningTo","_emitterId","emittermixin","event","callback","listenTo","wasFired","args","stopListening","emitter","emitterInfo","eventCallbacks","emitters","_getEmitterId","_setEmitterId","emitterId","callbacks","eventName","events","getEvents","childEventName","newEventNodes","childEvents","substr","lastIndexOf","node","createEventNamespace","lists","getCallbacksListsForNamespace","callbackDefinition","added","removeCallback","eventOrInfo","eventInfo","getCallbacksForEvent","_events","indexOf","callbackArgs","from","apply","_delegations","destinations","passAllDestinations","fireDelegatedEvents","return","ckeditorerror","rethrowUnexpectedError","to","nameOrFunction","delete","eventNode","callbacksLists","childCallbacksLists","fireArgs","delegatedInfo","fire","mix","baseClass","mixins","mixin","getOwnPropertyNames","sourceDescriptor","getOwnPropertyDescriptor","compareArrays","a","b","minLen","min","clone","node_Node","parent","pos","getChildIndex","nextSibling","getChild","previousSibling","unshift","includeSelf","parentFirst","ancestors","ancestorsA","getAncestors","ancestorsB","thisPath","getPath","nodePath","isBefore","_removeChildren","_fireChange","json","lodash_es_clone","text_Text","_textData","_data","otherNode","textproxy_TextProxy","textNode","offsetInText","offsetSize","isPartial","objectToMap","isIterable","iterator","Matcher","pattern","_patterns","classes","element","singleElement","isElementMatching","results","matchName","patterns","hasAttribute","attribute","getAttribute","matchAttributes","getClassNames","hasClass","matchClasses","hasStyle","getStyle","matchStyles","element_Element","attrs","_attrs","parseAttributes","_children","_insertChild","_classes","classString","parseClasses","_styles","parseInlineStyles","_customProperties","childCount","isEmpty","cutType","styleString","otherElement","className","matcher","sort","deep","childrenClone","child","getChildren","_clone","cloned","getFillerOffset","items","count","nodes","normalize","_remove","howMany","stylesMap","stylesString","quoteType","propertyNameStart","propertyValueStart","propertyName","charAt","char","propertyValue","trim","classesSet","classesString","classArray","containerelement_ContainerElement","lastChild","identity","thisArg","nativeMax","max","overRest","start","otherArgs","constant","baseSetToString","HOT_COUNT","HOT_SPAN","nativeNow","Date","now","shortOut","setToString","lastCalled","stamp","remaining","baseRest","isIterateeCall","createAssigner","assignIn","assigner","sources","guard","observablePropertiesSymbol","boundObservablesSymbol","boundPropertiesSymbol","ObservableMixin","lodash_es_isObject","initObservable","properties","oldValue","bindProperties","isStringArray","boundProperties","bindings","bindTo","toMany","bindToMany","_observable","_bindProperties","_to","_bindings","unbindProperties","boundObservables","toObservable","toProperty","toProperties","toPropertyBindings","boundObservable","methodName","originalMethod","on","evt","lodash_es_assignIn","observablemixin","observable","parsedArgs","parsed","lastObservable","parseBindToArgs","bindingsKeys","numberOfBindings","toBindings","updateBoundObservableProperty","attachBindToListeners","chain","toPropertyName","bindingsToObservable","updateBoundObservables","updateBindToBound","observables","observableAndAttributePairs","getBindingTargets","arr","every","documentSymbol","editableelement_EditableElement","getCustomProperty","_document","_setCustomProperty","isFocused","selection","editableElement","rootNameSymbol","rooteditableelement_RootEditableElement","rootName","_name","treewalker_TreeWalker","boundaries","startPosition","direction","position","position_Position","_createAt","singleCharacters","shallow","ignoreElementEnd","_boundaryStartParent","_boundaryEndParent","end","skip","done","prevPosition","next","_next","_previous","previousPosition","isAtEnd","_createAfter","_formatReturnValue","charactersCount","textLength","textProxy","isAtStart","_createBefore","startOffset","nextPosition","isEqual","nodeAfter","nodeBefore","endOffset","editable","shift","shifted","treeWalker","otherPosition","compareWith","otherPath","itemOrPosition","range_Range","isCollapsed","getLastMatchingPosition","enlargeTrimSkip","isAfter","nodeAfterStart","nodeBeforeEnd","otherRange","loose","containsStart","containsPosition","containsEnd","ranges","isIntersecting","commonRangeStart","commonRangeEnd","getCommonAncestor","startElement","endElement","getShiftedBy","_createFromParentsAndOffsets","_createFromPositionAndShift","count_count","_","selection_Selection","selectable","placeOrOffset","_ranges","_lastRangeBackward","_isFake","_fakeSelectionLabel","setTo","isFake","fakeSelectionLabel","anchor","range","focus","rangeCount","isBackward","first","last","firstRange","getFirstRange","lastRange","getLastRange","otherSelection","thisRange","found","numOfRangesA","getRanges","rangeA","getTrimmed","rangeB","_setRanges","_setFakeOptions","documentselection_DocumentSelection","fake","label","backward","_createIn","_createOn","newFocus","_addRange","newRanges","isLastBackward","_pushRange","storedRange","addedRange","intersectingRange","_selection","delegate","getFirstPosition","getLastPosition","getSelectedElement","isSimilar","setFocus","collection_Collection","_items","_itemMap","_idProperty","idProperty","_bindToExternalToInternalMap","_bindToInternalToExternalMap","_skippedIndexesFromExternal","itemId","idOrIndex","itemOrId","subject","itemDoesNotExist","externalItem","ctx","find","_bindToCollection","externalCollection","as","Class","_setUpBindToBinding","using","callbackOrProperty","addItem","isExternalBoundToThis","externalItemBound","finalIndex","skipped","getIndex","reduce","document_Document","roots","_postFixers","postFixer","destroy","writer","wasFixed","DEFAULT_PRIORITY","attributeelement_AttributeElement","attributeelement_getFillerOffset","_priority","_id","_clonesGroup","nonUiChildrenCount","emptyelement_EmptyElement","emptyelement_getFillerOffset","userAgent","navigator","toLowerCase","src_env","isMac","isEdge","isGecko","isSafari","isAndroid","features","isRegExpUnicodePropertySupported","isSupported","search","error","macGlyphsToModifiers","⌘","⇧","⌥","modifiersToMacGlyphs","ctrl","alt","keyCodes","arrowleft","arrowup","arrowright","arrowdown","backspace","enter","space","esc","tab","cmd","code","letter","fromCharCode","generateKnownKeyCodes","getCode","keyCode","altKey","ctrlKey","shiftKey","parseKeystroke","keystroke","splitKeystrokeText","sum","uielement_UIElement","uielement_getFillerOffset","domDocument","toDomElement","domElement","getAttributeKeys","injectUiElementHandling","view","domConverter","domSelection","domTarget","ownerDocument","defaultView","getSelection","domSelectionCollapsed","getRangeAt","collapsed","domParent","focusNode","domOffset","focusOffset","viewPosition","domPositionToView","jumpedOverAnyUiElement","nextViewPosition","newDomPosition","viewPositionToDom","collapse","extend","jumpOverUiElement","documentfragment_DocumentFragment","documentfragment_normalize","downcastwriter_DowncastWriter","_cloneGroups","_setTo","_setFocus","attributeElement","renderFunction","uiElement","render","_setAttribute","_removeAttribute","_addClass","_removeClass","_setStyle","_removeStyle","_removeCustomProperty","positionOrRange","_breakAttributes","_breakAttributesRange","newElement","sourceRange","targetPosition","move","positionOffset","positionParent","_removeFromClonedElementsGroup","mergeAttributes","mergeTextNodes","_appendChild","prev","newPosition","validateNodesToInsert","errorContext","validNodesToInsert","some","validNode","container","getParentContainer","insertionPosition","_addToClonedElementsGroup","endPosition","rangeOrItem","validateRangeContainer","breakStart","breakEnd","parentContainer","removed","mergePosition","walker","getWalker","current","rangeToRemove","parentElement","ancestor","countBefore","_hasNonUiChildren","_wrapPosition","viewSelection","setSelection","_wrapRange","newRange","_unwrapChildren","newName","viewElement","getAttributes","groupName","wrapElement","wrapPositions","isText","isAttribute","isUI","_wrapAttributeElement","shouldABeOutsideB","newAttribute","_wrapChildren","offsetChange","unwrapElement","unwrapPositions","unwrapped","_unwrapAttributeElement","movePositionToTextNode","breakTextNode","fakePosition","createAttributeElement","Number","POSITIVE_INFINITY","wrapRange","wrap","wrapper","toWrap","canBeJoined","getStyleNames","setStyle","addClass","toUnwrap","removeAttribute","removeClass","removeStyle","forceSplitText","rangeStart","rangeEnd","isContainerOrFragment","offsetAfter","clonedNode","nodesToMove","group","getIdentity","textToMove","t1","t2","nodeBeforeLength","startContainer","endContainer","istext_isText","NBSP_FILLER","BR_FILLER","fillerBr","dataset","ckeFiller","INLINE_FILLER_LENGTH","INLINE_FILLER","inlineFiller","startsWithFiller","domNode","isInlineFiller","domText","getDataWithoutFiller","jumpOverInlineFiller","fastDiff","cmp","atomicChanges","changeIndexes","arr1","arr2","firstIndex","findFirstDifferenceIndex","lastIndexOld","lastIndexNew","oldArrayReversed","cutAndReverse","newArrayReversed","findChangeBoundaryIndexes","newLength","fill","changeIndexesToAtomicChanges","newArray","changeIndexesToChanges","reverse","diff_diff","aLength","bLength","_insert","_delete","tmp","delta","es","fp","snake","k","y1","y2","dir","y","x","insertat_insertAt","nodeToInsert","remove_remove","isNode","Document","Node","renderer_Renderer","domDocuments","markedAttributes","markedChildren","markedTexts","_inlineFiller","_fakeSelectionContainer","mapViewToDom","inlineFillerPosition","_updateChildrenMappings","_isSelectionInInlineFiller","_removeInlineFiller","_getInlineFillerPosition","_needsInlineFillerAtSelection","_updateAttrs","_updateChildren","_updateText","fillerDomPosition","addInlineFiller","_updateSelection","_updateFocus","actualDomChildren","expectedDomChildren","viewChildrenToDom","withChildren","diff","_diffNodeLists","actions","_findReplaceActions","counter","equal","action","insertIndex","deleteIndex","viewChild","_updateElementMappings","unbindDomElement","bindElements","firstPos","selectionPosition","domFillerNode","selectionParent","selectionOffset","findAncestor","isEditable","viewText","findCorrespondingDomText","newDomText","viewToDom","actualText","expectedText","filler","insertData","deleteData","domAttrKeys","attr","viewAttrKeys","nodesToUnbind","_markDescendantTextToSync","domToView","domChildList","fakeSelectionContainer","childList","filterOutFakeSelectionContainer","actualDomChild","expectedDomChild","isBlockFiller","actualDom","expectedDom","newActions","actualSlice","expectedSlice","areSimilar","viewNode","_removeDomSelection","_removeFakeSelection","domRoot","_updateFakeSelection","_updateDomSelection","assign","top","left","width","textContent","createFakeSelectionContainer","bindFakeSelection","_fakeSelectionNeedsUpdate","domRange","createRange","removeAllRanges","selectNodeContents","addRange","_domSelectionNeedsUpdate","ELEMENT_NODE","childAtOffset","tagName","fixGeckoSelectionAfterBr","isDomSelectionCorrect","oldViewSelection","domSelectionToView","anchorNode","contains","doc","activeDomElement","activeElement","mapDomToView","domParentOrArray","nodeAfterFiller","fillerNode","node1","node2","DOCUMENT_NODE","BR_FILLER_REF","domconverter_DomConverter","blockFillerMode","preElements","blockElements","_blockFiller","_domToViewMapping","_viewToDomMapping","_fakeSelectionMapping","viewDocumentSelection","domFragment","viewFragment","textData","_processDataFromViewText","createDocumentFragment","bindDocumentFragments","createElementNS","fillerPositionOffset","childView","viewRange","domStart","domEnd","setStart","setEnd","viewParent","domBefore","domAfter","getParentUIElement","_processDataFromDomText","isComment","isDocumentFragment","viewName","keepOriginalCase","domChildrenToView","domChild","fakeSelectionToView","isDomSelectionBackward","viewRanges","domRangeToView","viewStart","viewEnd","findCorrespondingViewText","viewBefore","domElementOrDocumentFragment","documentFragmentOrElement","viewEditable","domEditable","scrollX","scrollY","scrollPositions","forEachDomNodeAncestor","scrollLeft","scrollTop","scrollTo","DOCUMENT_FRAGMENT_NODE","COMMENT_NODE","isEqualNode","includes","hasBlockParent","isNbspBlockFiller","anchorOffset","detach","_isDomSelectionPositionCorrect","prevNode","_getTouchingViewTextNode","_nodeEndsWithSpace","nextNode","_hasDomParentOfType","_getTouchingInlineDomNode","shouldLeftTrim","_checkShouldLeftTrimDomText","shouldRightTrim","_checkShouldRightTrimDomText","Text","getNext","topmostParent","createTreeWalker","NodeFilter","SHOW_TEXT","SHOW_ELEMENT","acceptNode","FILTER_ACCEPT","FILTER_SKIP","currentNode","touchingNode","lca","nodeA","nodeB","boundaryParent","parents","isWindow","stringifiedObject","dom_emittermixin","rest","proxy","_getProxyEmitter","emittermixin_ProxyEmitter","attach","listeningEmitter","listenedToEmitterId","_getEmitterListenedTo","getNodeUID","_domNode","_domListeners","domListener","_createDomListener","useCapture","addEventListener","removeListener","domEvt","removeEventListener","Observer","isEnabled","disable","setCacheAdd","setCacheHas","SetCache","arraySome","cacheHas","cache","COMPARE_PARTIAL_FLAG","COMPARE_UNORDERED_FLAG","equalArrays","equalFunc","arrLength","othLength","seen","arrValue","othValue","compared","othIndex","mapToArray","setToArray","errorTag","equalByTag","convert","equalObjects","objProps","objLength","skipCtor","objCtor","othCtor","arrayTag","baseIsEqualDeep","objIsArr","othIsArr","objTag","othTag","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","objUnwrapped","othUnwrapped","baseIsEqual","isEqualWith","mutationobserver_MutationObserver","characterData","characterDataOldValue","subtree","renderer","_renderer","_domElements","_mutationObserver","MutationObserver","_onMutations","takeRecords","observe","enable","disconnect","domMutations","mutatedTexts","mutatedElements","mutation","_isBogusBrMutation","text","oldText","newText","viewMutations","mutatedText","markToSync","viewChildren","newViewChildren","lodash_es_isEqualWith","sameNodes","oldChildren","newChildren","viewSelectionAnchor","viewSelectionFocus","child1","child2","forceRender","addedNode","removedNodes","addedNodes","domeventdata_DomEventData","domEvent","additionalData","preventDefault","stopPropagation","domeventobserver_DomEventObserver","domEventType","onDomEvent","eventType","keyobserver_KeyObserver","metaKey","isSymbol","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","toNumber","isBinary","FUNC_ERROR_TEXT","nativeMin","debounce","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","leadingEdge","clearTimeout","cancel","flush","fakeselectionobserver_FakeSelectionObserver","_fireSelectionChangeDoneDebounced","lodash_es_debounce","_isArrowKeyCode","_handleSelectionMove","newSelection","oldSelection","selectionobserver_SelectionObserver","mutationObserver","getObserver","_documents","WeakSet","_clearInfiniteLoopInterval","setInterval","_clearInfiniteLoop","_loopbackCounter","_handleSelectionChange","clearInterval","isReadOnly","newViewSelection","focusobserver_FocusObserver","_renderTimeoutId","selectedEditable","compositionobserver_CompositionObserver","isComposing","inputobserver_InputObserver","isRange","getBorderWidths","getComputedStyle","borderTopWidth","right","borderRightWidth","bottom","borderBottomWidth","borderLeftWidth","rectProperties","rect_Rect","isSourceRange","_source","copyRectProperties","getDomRangeRects","getBoundingClientRect","innerWidth","innerHeight","height","anotherRect","rect","getIntersection","getArea","visibleRect","isBody","commonAncestorContainer","parentRect","intersectionRect","prop","intersectRect","scrollBarWidth","scrollBarHeight","documentElement","clientWidth","clientHeight","borderWidths","offsetWidth","offsetHeight","rects","clientRects","getClientRects","elementOrRange","body","scrollViewportToShowTarget","viewportOffset","targetWindow","getWindow","currentWindow","currentFrame","firstAncestorToScroll","scrollAncestorsToShowRect","getParentElement","getRectRelativeToWindow","targetRect","scrollWindowToShowRect","frameElement","targetShiftedDownRect","moveBy","targetShiftedUpRect","viewportRect","excludeScrollbarsAndBorders","isAbove","isBelow","isLeftOf","isRightOf","getRect","parentWindow","firstRect","secondRect","relativeWindow","frame","frameRect","scrollAncestorsToShowTarget","view_View","domRoots","_initialDomRootAttributes","_observers","_ongoingChange","_postFixersInProgress","_renderingDisabled","_hasChangedSinceTheLastRendering","_writer","addObserver","injectQuirksHandling","_render","viewRoot","getRoot","initialDomRootAttributes","updateContenteditableAttribute","change","observer","viewRangeToDom","isRenderingInProgress","callbackResult","_callPostFixers","flag","disableObservers","enableObservers","toMap","model_node_Node","getChildStartOffset","model_text_Text","toJSON","model_textproxy_TextProxy","nodelist_NodeList","_nodes","_insertNodes","maxOffset","getNodeIndex","getNodeStartOffset","totalOffset","nodeList","indexStart","model_element_Element","getNode","offsetToIndex","relativePath","element_normalize","_removeNodes","fromJSON","model_treewalker_TreeWalker","model_position_Position","stickiness","_visitedParent","prevVisitedParent","formatReturnValue","offsetInTextNode","lodash_es_last","newOffset","diffAt","leftParent","getParentPath","operation","_getTransformedByInsertOperation","_getTransformedByMoveOperation","_getTransformedBySplitOperation","_getTransformedByMergeOperation","_getTransformedByInsertion","_getTransformedByMove","sourcePosition","movedRange","_getCombined","splitPosition","moveTargetPosition","graveyardPosition","_getTransformedByDeletion","deletionPosition","deletePosition","transformed","insertPosition","combined","graveyard","model_range_Range","getCommonPath","posParent","operations","getTransformedByOperation","containsRange","spread","newPos","moveRange","differenceSet","getDifference","difference","common","transformedCommon","newStart","newEnd","ref","refIndex","mapper_Mapper","_modelToViewMapping","_viewToModelMapping","_viewToModelLengthCallbacks","_markerNameToElements","_elementToMarkerNames","_unboundMarkerNames","viewContainer","modelPosition","_findPositionIn","viewBlock","findMappedViewAncestor","modelParent","modelOffset","_toModelOffset","modelElement","toModelElement","markerName","toViewElement","elements","names","nameToElements","elementToNames","markerNames","toModelPosition","modelRange","toViewPosition","mapper","isPhantom","boundElements","getElementsWithSameId","viewElementName","lengthCallback","viewOffset","getModelLength","len","expectedOffset","lastLength","_moveViewPositionToTextNode","modelconsumable_ModelConsumable","_consumable","_textProxyRegistry","_normalizeConsumableType","_getSymbolForTextProxy","itemConsumables","startMap","endMap","_addSymbolForTextProxy","downcastdispatcher_DowncastDispatcher","conversionApi","dispatcher","differ","markers","getMarkersToRemove","convertMarkerRemove","getChanges","convertInsert","convertRemove","convertAttribute","attributeKey","attributeOldValue","attributeNewValue","flushUnboundMarkerNames","markerRange","getRange","convertMarkerAdd","getMarkersToAdd","consumable","_createInsertConsumable","_testAndFire","_clearConversionApi","_createConsumableForRange","markersAtSelection","getMarkersAtPosition","_createSelectionConsumable","marker","shouldMarkerChangeBeConverted","getItems","containsItem","model_selection_Selection","anyNewRange","oldRange","_removeAllRanges","directChange","_popRange","attributeKeys","visited","startBlock","getParentBlock","isTopBlockInRange","block","isUnvisitedTopBlock","endBlock","isTouching","limitStartPosition","limitEndPosition","_checkRange","isUnvisitedBlock","model","schema","isBlock","hasParentLimit","isLimit","parentBlock","findAncestorBlock","liverange_LiveRange","isDocumentOperation","_createFromRanges","boundariesChanged","contentChanged","doesOperationChangeRangeContent","toRange","storePrefix","model_documentselection_DocumentSelection","documentselection_LiveSelection","hasOwnRange","isGravityOverridden","getSelectedBlocks","containsEntireContent","_updateMarkers","_updateAttributes","_getStoredAttributes","overrideGravity","restoreGravity","startsWith","_model","_attributePriority","_fixGraveyardRangesData","_hasChangedRange","_overriddenGravityRegister","liveRange","_fixGraveyardSelection","_validateSelectionRange","batch","changeParent","isNoLongerEmpty","enqueueChange","storedAttributes","clearAttributesStoredInElement","_getDefaultRange","optionsOrPlaceOrOffset","overrideUid","_prepareRange","fromRange","selectionRange","clearAll","newAttributes","_getSurroundingAttributes","oldAttributes","_setAttributesTo","changed","newKey","oldKey","getAttrsIfCharacter","removedRangeStart","positionCandidate","getNearestSelectionRange","ConversionHelpers","dispatchers","_dispatchers","conversionHelper","cloneDeep","downcasthelpers_DowncastHelpers","config","lodash_es_cloneDeep","normalizeToElementConfig","elementCreator","consume","insertElement","converterPriority","downcastElementToElement","modelValue","getFromAttributeCreator","oldViewElement","newViewElement","viewWriter","toViewRange","unwrap","downcastAttributeToElement","normalizeToAttributeConfig","attributeCreator","oldAttribute","changeAttribute","downcastAttributeToAttribute","isOpening","viewStartElement","viewEndElement","bindElementToMarker","insertUIElement","markerNameToElements","unbindElementFromMarkerName","createRangeOn","clearClonedElementsGroup","downcastMarkerToElement","highlightDescriptor","descriptor","prepareDescriptor","createViewElementFromHighlightDescriptor","rangeAfterWrap","highlightText","highlightElement","viewHighlightElement","removeHighlight","downcastMarkerToHighlight","viewElementType","modelData","viewElementDefinition","createContainerElement","createUIElement","createViewElementFromDefinition","modelAttributeValue","upcasthelpers_UpcastHelpers","upcastElementToElement","normalizeModelAttributeConfig","converter","prepareToAttributeConverter","elementName","getViewElementNameFromConfig","upcastElementToAttribute","viewKey","normalized","keyName","normalizeViewAttributeKeyValueConfig","upcastAttributeToAttribute","oldModel","modelWriter","data-name","normalizeToMarkerConfig","upcastElementToMarker","matcherResult","viewItem","getModelElement","splitResult","splitToAllowedParent","modelCursor","convertChildren","createPositionAt","getSplitParts","createPositionBefore","createPositionAfter","cursorParent","prepareToElementConverter","viewConfig","viewAttributeKeyToCopy","defaultModelValue","modelKey","configToTest","onlyViewNameIsDefined","modelAttribute","checkAttribute","setAttributeOn","editingcontroller_EditingController","downcastDispatcher","_disableRendering","convertChanges","convertSelection","modelSelection","toModelRange","convertSelectionChange","createText","modelEnd","createRangeIn","unbindViewElement","brokenPosition","breakAttributes","plugincollection_PluginCollection","editor","availablePlugins","_editor","_availablePlugins","_plugins","PluginConstructor","pluginName","plugin","errorMsg","plugins","removePlugins","that","loading","loaded","pluginConstructors","mapToAvailableConstructors","removePluginConstructors","missingPlugins","pluginNameOrConstructor","getPluginConstructor","getMissingPluginNames","console","reject","loadPlugin","then","initPlugins","requires","RequiredPluginConstructorOrName","RequiredPluginConstructor","requiredBy","_add","instantiatePlugin","catch","loadedPlugins","method","promise","PluginConstructorOrName","promises","pluginInstance","plugin1","plugin2","commandcollection_CommandCollection","_commands","commandName","command","execute","commands","translate","language","translationKey","numberOfLanguages","CKEDITOR_TRANSLATIONS","hasTranslation","RTL_LANGUAGE_CODES","locale_Locale","uiLanguage","contentLanguage","uiLanguageDirection","getLanguageDirection","contentLanguageDirection","_t","warn","str","translatedString","languageCode","ViewConsumable","_consumables","consumables","elementConsumables","viewconsumable_ViewElementConsumables","revert","instance","consumablesFromElement","createFrom","_canConsumeName","_test","_consume","_revert","lodash_es_isArray","consumableName","schema_Schema","_sourceDefinitions","_attributeProperties","decorate","SchemaContext","getDefinition","itemName","definition","_clearCache","_compiledDefinitions","_compile","getDefinitions","def","isInline","_checkContextMatch","attributeName","allowAttributes","positionOrBaseElement","elementToMerge","checkMerge","checkChild","childDef","retValue","getAttributeProperties","selectionOrRangeOrPosition","rangeCommonAncestor","getMinimalFlatRanges","convertToMinimalFlatRanges","_getValidRangesForRange","backwardWalker","forwardWalker","forward","step","combineWalkers","removeDisallowedAttributeFromNode","positionsInRange","getPositions","compiledDefinitions","sourceRules","itemNames","compileBaseItemRule","compileAllowContentOf","compileAllowWhere","compileAllowAttributesOf","compileInheritPropertiesFrom","cleanUpAllowIn","cleanUpAllowAttributes","contextItemIndex","contextItem","getItem","allowIn","parentRule","mapContextItem","query","getNames","endsWith","sourceItemRules","itemRule","allowContentOf","allowWhere","allowAttributesOf","inheritTypesFrom","sourceItemRule","typeNames","copyTypes","copyProperty","inheritFrom","inheritAllFrom","makeInheritAllWork","allowContentOfItemName","getAllowedChildren","allowedItem","allowWhereItemName","allowedIn","allowAttributeOfItem","inheritAttributes","inheritPropertiesOfItem","existingItems","itemToCheck","getValues","ctxItem","upcastdispatcher_UpcastDispatcher","_splitParts","_modelCursor","convertItem","_convertItem","_convertChildren","_splitToAllowedParent","_getSplitParts","contextDefinition","append","createContextTree","store","documentFragment","_removeEmptyElements","modelItem","markerElements","markerElement","currentPosition","extractMarkersFromModelFragment","nextModelCursor","allowedParent","findAllowedParent","treeWalkerValue","originalPart","splitPart","_registerSplitPair","anyRemoved","datacontroller_DataController","dataProcessor","processor","upcastDispatcher","_checkIfRootsExists","hasContent","ignoreWhitespaces","modelElementOrFragment","viewDocumentFragment","toView","toData","clearBindings","elementRange","intersection","_getMarkersRelativeToElement","version","initialData","main","modelRoot","parse","newData","removeSelectionAttribute","toModel","viewElementOrFragment","rootNames","getRootNames","conversion_Conversion","downcastDispatchers","upcastDispatchers","_helpers","_downcast","_createConversionHelpers","isDowncast","_upcast","alias","for","elementToElement","_getAllUpcastDefinitions","attributeToElement","elementToAttribute","attributeToAttribute","helpers","_getUpcastDefinition","upcastAlso","upcastAlsoItem","Batch","baseVersion","op","Operation","__className","model_documentfragment_DocumentFragment","model_documentfragment_normalize","_normalizeNodes","_splitNodeAtPosition","_mergeNodesAtIndex","_move","_haveSameAttributes","mergedNode","offsetDiff","firstPart","secondPart","iteratorA","iteratorB","attributeoperation_AttributeOperation","lodash_es_isEqual","detachoperation_DetachOperation","moveoperation_MoveOperation","newTargetPosition","getMovedRangeStart","sourceElement","targetElement","sourceOffset","targetOffset","insertoperation_InsertOperation","shouldReceiveAttributes","gyPosition","originalNodes","markeroperation_MarkerOperation","affectsData","_markers","renameoperation_RenameOperation","oldName","rootattributeoperation_RootAttributeOperation","mergeoperation_MergeOperation","splitoperation_SplitOperation","mergedElement","getInsertionPosition","splitElement","rootelement_RootElement","_doc","writer_Writer","_assertWriterUsedCorrectly","isSameTree","addOperation","applyOperation","rangeRootPosition","usingOperation","updateMarker","addMarker","itemOrRange","setAttributeOnRange","setAttributeOnItem","val","removeAttributesFromItem","_addOperationForAffectedMarkers","flat","applyRemoveOperation","_merge","_mergeDetached","createPositionFromPath","createSelection","merge","renameOperation","limitElement","firstSplitElement","firstCopyElement","elementOrString","shiftedRange","applyMarkerOperation","_set","markerOrName","currentMarker","_refresh","hasUsingOperationDefined","affectsDataDefined","currentRange","updatedRange","managedUsingOperations","keyOrObjectOrIterable","_setSelectionAttribute","keyOrIterableOfKeys","_removeSelectionAttribute","_overrideGravity","_restoreGravity","storeKey","_getStoreAttributeKey","_currentWriter","isAffected","elementBefore","elementAfter","affectedInLeftElement","affectedInRightElement","affectedAfterLeftElement","affectedBeforeRightElement","valueBefore","valueAfter","lastSplitPosition","previousValue","rootA","rootB","differ_Differ","markerCollection","_markerCollection","_changesInElement","_elementSnapshots","_changedMarkers","_changeCount","_cachedChanges","_cachedChangesWithGraveyard","_isInInsertedElement","_markRemove","_markInsert","getMarkersIntersectingRange","bufferMarkerChange","_markAttribute","sourceParentInserted","targetParentInserted","graveyardParent","mergedIntoElement","buffered","includeChangesInGraveyard","diffSet","changes","snapshotChildren","elementChildren","_getChildrenSnapshot","_generateActionsFromChanges","_getInsertDiff","_getRemoveDiff","elementAttributes","snapshotAttributes","_getAttributesDiff","changeCount","prevDiff","thisDiff","isConsecutiveTextRemove","isConsecutiveTextAdd","isConsecutiveAttributeChange","_changesInGraveyardFilter","changeItem","_markChange","_removeAllNestedChanges","_makeSnapshot","_getChangesForElement","_handleChange","inc","nodesToHandle","old","incEnd","oldEnd","intersectionLength","howManyAfter","attributePart","diffs","snapshot","oldChildrenLength","oldChildrenHandled","repeat","posInGy","rangeInGy","History","_operations","_undoPairs","_undoneOperations","undoneOperation","undoingOperation","isInsideSurrogatePair","character","isHighSurrogateHalf","isLowSurrogateHalf","isInsideCombinedSymbol","isCombiningMark","graveyardName","model_document_Document","history","_hasSelectionChangedFromTheLastChangeBlock","createRoot","bufferOperation","_hasDocumentChangedFromTheLastChangeBlock","refresh","hasDataChanges","reset","defaultRoot","_getDefaultRoot","validateTextNodePosition","rangeBoundary","markercollection_MarkerCollection","markercollection_Marker","oldMarker","hasChanged","_attachLiveRange","_managedUsingOperations","_affectsData","_destroyMarker","prefix","_detachLiveRange","_liveRange","stopDelegating","liveposition_LivePosition","oldPosition","toPosition","insertcontent_Insertion","canMergeWith","_filterAttributesOf","_affectedStart","_affectedEnd","parentContext","_handleNode","isFirst","isLast","removeDisallowedAttributes","nodeToSelect","_handleObject","_checkAndSplitToAllowedPosition","_mergeSiblingsOf","_handleDisallowedNode","_tryAutoparagraphing","handleNodes","livePos","fromPosition","_setAffectedBoundaries","mergeLeft","_canMergeLeft","mergeRight","_canMergeRight","mergePosLeft","mergePosRight","livePosition","paragraph","_getAllowedIn","tempPos","deleteContent","selRange","doNotResetEntireContent","getLimitElement","shouldEntireContentBeReplacedWithParagraph","insertParagraph","replaceEntireContentWithParagraph","startPos","endPos","leaveUnmerged","mergeBranches","startParent","endParent","leftPos","rightPos","rangeToCheck","checkCanBeMerged","parentToRemove","collapseSelectionAt","isTextAllowed","isParagraphAllowed","shouldAutoparagraph","validSelectionRange","doNotAutoparagraph","wordBoundaryCharacters","modifySelection","isForward","unit","searchEnd","getSearchRange","tryExtendingTo","setSelectionFocus","isAtWordBoundary","isAtNodeBoundary","boundaryChar","getCorrectWordBreakPosition","getCorrectPosition","offsetToCheck","removeRangeContent","parentsToCheck","itemRange","parentToCheck","removeRange","injectSelectionPostFixer","registerPostFixer","correctedRange","tryFixingRange","fixedRanges","selectionStart","selectionEnd","selectionPostFixer","originalPosition","nearestSelectionRange","fixedPosition","tryFixingCollapsedRange","isTextAllowedOnStart","isTextAllowedOnEnd","startLimitElement","endLimitElement","startIsOnBlock","endIsOnBlock","checkSelectionOnNonLimitElements","isStartObject","fixedStart","isEndObject","fixedEnd","isStartInLimit","isEndInLimit","bothInSameParent","expandStart","isInObject","expandEnd","findOutermostLimitAncestor","tryFixingNonCollapsedRage","startingNode","isLimitNode","model_Model","_pendingChanges","_validate","register","addChildCheck","childDefinition","_runPendingChanges","batchOrType","_execute","insertion","nodesToInsert","getSelectionRange","affectedRange","getAffectedRange","insertContent","frag","commonPath","commonParent","getNodeByPath","flatSubtreeRange","appendText","leftExcessRange","getSelectedContent","rangeOrElement","intersectingMarker","ret","currentBatch","callbackReturnValue","_handleChangeBlock","keystrokehandler_KeystrokeHandler","_listener","keyEvtData","editingkeystrokehandler_EditingKeystrokeHandler","evtData","editor_Editor","builtinPlugins","defaultConfig","languageConfig","locale","ui","once","state","editing","conversion","addAlias","keystrokes","extraPlugins","init","readyPromise","dataapimixin","BasicHtmlWriter","fragment","implementation","createHTMLDocument","innerHTML","htmldataprocessor_HtmlDataProcessor","_domParser","DOMParser","_domConverter","_htmlWriter","getHtml","_toDom","parseFromString","componentfactory_ComponentFactory","_components","originalName","getNormalized","focustracker_FocusTracker","_elements","_nextEventLoopTimeout","_focus","_blur","focusedElement","editorui_EditorUI","componentFactory","focusTracker","_editableElementsMap","ckeditorInstance","_editableElements","editorUI","documentPlaceholders","enablePlaceholder","isDirectHost","updateDocumentPlaceholders","hidePlaceholder","placeholders","wasViewModified","updatePlaceholder","hostElement","getChildPlaceholderHostSubstitute","isEmptyish","selectionAnchor","needsPlaceholder","showPlaceholder","decouplededitorui_DecoupledEditorUI","_toolbarConfig","normalizeToolbarConfig","editingView","editingRoot","setEditableElement","attachDomRoot","_initPlaceholder","_initToolbar","detachDomRoot","toolbar","fillFromConfig","origin","originKeystrokeHandler","originFocusTracker","beforeFocus","afterBlur","enableToolbarKeyboardFocus","placeholderText","viewcollection_ViewCollection","isRendered","_parentElement","elementOrDocFragment","viewcollection_isStringArray","dest","evtName","xhtmlNs","template_Template","template_normalize","template_clone","_isRendered","_revertData","_renderNode","intoFragment","isApplying","revertData","_revertTemplateFromNode","isView","isTemplate","eventNameOrFunctionOrAttribute","TemplateToBinding","eventNameOrFunction","if","valueIfTrue","TemplateIfBinding","template","extendTemplate","extendObjectValueArray","eventListeners","childIndex","isInvalid","_renderText","_renderElement","_renderAttributes","_renderElementChildren","_setUpListeners","hasTemplateBinding","_bindToObservable","updater","getTextUpdater","attrName","attrValue","domAttrValue","attrNs","valueToBind","shouldExtend","getAttributeUpdater","_renderStyleAttribute","isFalsy","arrayValueReducer","setAttributeNS","styleName","styleValue","getStyleUpdater","isViewCollection","setParent","childRevertData","revertBindings","schemaItem","domEvtName","domSelector","activateDomEventListener","syncValueSchemaValue","templateBinding","activateAttributeListener","revertBinding","TemplateBinding","matches","getValueSchemaValue","el","removeAttributeNS","normalizePlainTextDefinition","normalizeTextDefinition","listeners","arrayify","normalizeListeners","normalizeAttributes","cur","ext","src_view_View","_viewCollections","_unboundChildren","createCollection","collection","bindTemplate","_bindTemplate","registerChild","getViews","editoruiview_EditorUIView","_renderBodyCollection","_bodyCollectionContainer","bodyElement","class","editableuiview_EditableUIView","setTemplate","lang","_editableElement","_hasExternalElement","_editingView","_updateIsFocusedClasses","updateAfterRender","inlineeditableuiview_InlineEditableUIView","role","FocusCycler","keystrokeHandler","focusables","isFocusable","_getFocusableItem","previous","viewIndex","focused","collectionLength","display","toolbarseparatorview_ToolbarSeparatorView","RESIZE_CHECK_INTERVAL","getresizeobserver_ResizeObserverPolyfill","_callback","_previousRects","_periodicCheckTimeout","_startPeriodicCheck","_stopPeriodicCheck","unobserve","periodicCheck","_checkElementRectsAndExecuteCallback","_hasRectChanged","contentRect","currentRect","previousRect","dropdownpanelview_DropdownPanelView","selectstart","focusLast","getOptimalPosition","positions","limiter","fitInViewport","lodash_es_isFunction","positionedElementAncestor","getPositionedAncestor","elementRect","bestPosition","limiterRect","getVisible","bestPositionRect","bestPositionName","maxLimiterIntersectArea","maxViewportIntersectArea","elementRectArea","positionName","positionRect","getPosition","limiterIntersectArea","viewportIntersectArea","limiterViewportIntersectRect","getIntersectionArea","setBestPosition","getBestPosition","getAbsoluteRectCoordinates","ancestorPosition","ancestorBorderWidths","moveTo","dropdownview_DropdownView","buttonView","panelView","isOpen","panelPosition","_getOptimalPosition","_panelPositions","closeDropdown","southEast","southWest","northEast","northWest","defaultPanelPositions","buttonRect","panelRect","iconview_IconView","viewBox","_updateXMLContent","_colorFillPaths","svg","fillColor","querySelectorAll","tooltipview_TooltipView","buttonview_ButtonView","ariaLabelUid","tooltipView","_createTooltipView","labelView","_createLabelView","iconView","_getTooltipString","tabindex","aria-labelledby","aria-disabled","aria-pressed","isToggleable","mousedown","click","icon","tooltip","getEnvKeystrokeText","dropdown_arrow","dropdownbuttonview_DropdownButtonView","arrowView","_createArrowView","aria-haspopup","listview_ListView","_focusCycler","focusPrevious","focusNext","focusFirst","listitemview_ListItemView","listseparatorview_ListSeparatorView","switchbuttonview_SwitchButtonView","toggleSwitchView","_createToggleView","clickOutsideHandler","activator","contextElements","contextElement","createDropdown","ButtonClass","dropdownView","closeDropdownOnBlur","closeDropdownOnExecute","focusDropdownContentsOnArrows","addDefaultBehavior","addToolbarToDropdown","buttons","toolbarView","toolbarview_ToolbarView","addListToDropdown","listView","listItemView","three_vertical_dots","itemsView","toolbarview_ItemsView","aria-label","_behavior","shouldGroupWhenFull","toolbarview_DynamicGrouping","StaticLayout","viewFocusables","viewItemsView","viewFocusTracker","viewLocale","ungroupedItems","groupedItems","groupedItemsDropdown","_createGroupedItemsDropdown","resizeObserver","cachedPadding","_updateFocusCycleableItems","_updateGrouping","_enableGroupingOnResize","wereItemsGrouped","_areItemsOverflowing","_groupLastItem","_ungroupFirstItem","lastChildRect","toolbarRect","computedStyle","paddingProperty","previousWidth","ResizeObserver","getResizeObserver","dropdown","decouplededitoruiview_DecoupledEditorUIView","decouplededitor_DecoupledEditor","sourceElementOrData","secureSourceElement","getData","HTMLTextAreaElement","setDataInElement","isHTMLElement","getDataFromElement","getInitialData","Plugin","DataTransfer","nativeDataTransfer","files","kind","getAsFile","getFiles","_native","setData","clipboardobserver_ClipboardObserver","viewDocument","handleInput","targetRanges","dropRange","dataTransfer","clipboardData","domDoc","clientX","clientY","caretRangeFromPoint","rangeParent","rangeOffset","getDropViewRange","smallPaddingElements","clipboard_Clipboard","modelDocument","onCopyCut","_htmlDataProcessor","fullMatch","spaces","normalizeClipboardData","plainTextToHtml","scrollToTheSelection","dataController","modelFragment","viewToPlainText","childText","Command","_disableStack","forceDisabled","clearForceDisabled","forceDisable","getCopyOnEnterAttributes","allAttributes","copyOnEnter","entercommand_EnterCommand","isSelectionEmpty","attributesToCopy","splitBlock","setSelectionAttribute","isContainedWithinOneElement","enterBlock","splitPos","enterobserver_EnterObserver","isSoft","enter_Enter","shiftentercommand_ShiftEnterCommand","insertBreak","softBreakAction","anchorPos","isInsideLimitElement","breakLineElement","shiftenter_ShiftEnter","createEmptyElement","ChangeBuffer","limit","isLocked","_changeCallback","_batch","_reset","_selectionChangeCallback","createBatch","ignoreLock","inputcommand_InputCommand","undoStepSize","_buffer","_batches","textInsertions","resultRange","isCollapsedRange","lock","unlock","injectUnsafeKeystrokesHandling","latestCompositionSelection","inputCommand","handleUnsafeKeystroke","isSelectionUnchanged","keyData","safeKeycodes","isSafeKeystroke","deleteSelectionContent","isFlatSelection","getSingleTextNodeChange","output","lastOperation","pushLast","isContinuationOf","expected","diffToChanges","compareChildNodes","oldChild","newChild","injecttypingmutationshandling_MutationHandler","mutations","containerChildrenMutated","_handleContainerChildrenMutations","_handleTextMutation","_handleTextNodeInsertion","mutationsCommonAncestor","commonAncestor","getMutationsContainer","domMutationCommonAncestor","freshDomConverter","modelFromCurrentDom","currentModel","modelFromDomChildren","currentModelChildren","lastDomChild","lastCurrentChild","isSafeForTextMutation","diffResult","firstChangeAt","insertions","deletions","calculateChanges","modelSelectionRange","insertText","viewPos","modelPos","insertedText","lastChangeAt","input_Input","handle","injectTypingMutationsHandling","deletecommand_DeleteCommand","_shouldEntireContentBeReplacedWithParagraph","sequence","_replaceEntireContentWithParagraph","limitElementFirstChild","deleteobserver_DeleteObserver","fireViewDeleteEvent","originalEvent","hasWordModifier","inputType","selectionToRemove","delete_Delete","deleteCommandParams","domSelectionAfterDeletion","typing_Typing","nooperation_NoOperation","transformations","setTransformation","OperationA","OperationB","transformationFunction","aGroup","noUpdateTransformation","transform_transform","getTransformation","transformSets","operationsA","operationsB","contextFactory","transform_ContextFactory","useRelations","forceWeakRemove","setOriginalOperations","originalOperations","nextTransformIndex","nextBaseVersionA","nextBaseVersionB","originalOperationsACount","originalOperationsBCount","opA","indexB","opB","newOpsA","getContext","newOpsB","updateRelation","newOpA","padWithNoOps","brokenOperationsACount","brokenOperationsBCount","updateBaseVersions","_history","_useRelations","_forceWeakRemove","_relations","takeFrom","originalOperation","_setRelation","affectedLeft","affectedRight","side","wasInLeftElement","wasStartBeforeMergedElement","wasEndBeforeMergedElement","wasInRightElement","aIsStrong","aWasUndone","_wasUndone","bWasUndone","abRelation","_getRelation","baRelation","originalOp","wasUndone","isUndoneOperation","origB","undoneB","getUndoneOperation","origA","relationsA","relation","_getComplementaryAttributeOperations","insertOperation","insertValue","_moveTargetIntoMovedRange","_makeMoveOperationsFromRanges","hasSameParentAs","moveOp","_breakRangeByMoveOperation","aNewRange","aToGraveyard","bToGraveyard","removedRange","mergeInside","mergeSplittingElement","getReversed","aCompB","shouldSpread","rightRange","movesGraveyardElement","gyMoveSource","splitNodesMoveSource","gyMoveTarget","gyMove","splitNodesMoveTargetPath","splitNodesMoveTarget","splitNodesMove","splitPath","additionalSplit","rangeToMove","gyElementMoved","newParentPosition","newTargetPath","howManyRemoved","aInGraveyard","bInGraveyard","newPositionPath","basecommand_BaseCommand","_stack","_createdBatches","docSelection","selectionRanges","transformSelectionRange","batchToUndo","undoingBatch","operationsToUndo","operationToUndo","nextBaseVersion","historyOperations","getOperations","reversedOperations","setOperationAsUndone","getTransformedByOperations","undocommand_UndoCommand","batchIndex","findIndex","_undo","_restoreSelection","redocommand_RedoCommand","redoingBatch","undoediting_UndoEditing","_batchRegistry","_undoCommand","_redoCommand","isRedoBatch","isUndoBatch","addBatch","clearStack","undoneBatch","undo","redo","undoui_UndoUI","localizedUndoIcon","localizedRedoIcon","_addButton","Icon","undo_Undo","pendingactions_PendingActions","_actions","hasAny","FileReader","reader","_reader","onprogress","file","total","onload","onerror","onabort","readAsDataURL","abort","filerepository_FileRepository","loaders","_updatePendingAction","_loadersMap","_pendingAction","uploaded","fileOrPromise","createUploadAdapter","loader","filerepository_FileLoader","aggregatedUploaded","aggregatedTotal","uploadTotal","fileOrPromiseOrLoader","getLoader","_destroy","pendingActions","getMessage","uploadedPercent","filePromise","uploadAdapterCreator","_filePromiseWrapper","_createFilePromiseWrapper","_adapter","status","read","upload","uploadResponse","isFulfilled","rejecter","TOKEN_COOKIE_NAME","TOKEN_LENGTH","tokenCharset","getCsrfToken","token","cookie","pair","decodeURIComponent","getCookie","randValues","crypto","getRandomValues","toUpperCase","generateToken","setCookie","uploadadapter_CKFinderUploadAdapter","url","uploadadapter_UploadAdapter","_initRequest","_initListeners","_sendRequest","xhr","XMLHttpRequest","open","responseType","genericError","response","default","lengthComputable","FormData","send","blockautoformatediting_BlockAutoformatEditing","callbackOrCommand","inlineautoformatediting_InlineAutoformatEditing","testRegexpOrCallback","attributeOrCallback","regExp","testCallback","formatCallback","format","1","leftDel","2","3","rightDel","delStart","delEnd","rangesToFormat","validRanges","getValidRanges","rangeText","getLastTextLine","testOutput","testOutputToRanges","rangesToRemove","arrays","getCallbackFunctionForInlineAutoformat","first_first","iterable","iteratorItem","supportedOptions","option","isDefault","alignment","ALIGNMENT","alignmentcommand_AlignmentCommand","firstBlock","_canBeAligned","blocks","currentAlignment","removeAlignmentFromSelection","setAlignmentOnSelection","alignmentediting_AlignmentEditing","enabledOptions","setAttributeProperties","isFormatting","text-align","_buildDefinition","align_left","align_right","icons","alignmentui_AlignmentUI","localizedOptionTitles","center","justify","isVertical","ariaLabel","defaultIcon","areActive","areEnabled","fontcommand_FontCommand","checkAttributeInSelection","color_tile_check","colortileview_ColorTileView","backgroundColor","colorgridview_ColorGridView","colorDefinitions","viewStyleAttribute","columns","gridTemplateColumns","colorTile","isOn","color","selectedColor","hasBorder","labelview_LabelView","documentcolorcollection_DocumentColorCollection","eraser","colortableview_ColorTableView","colors","removeButtonLabel","documentColorsLabel","documentColorsCount","documentColors","staticColorsGrid","_createStaticColorsGrid","documentColorsGrid","_removeColorButton","_createDocumentColorsGrid","maxCount","_addColorToDocumentColors","withText","colorGrid","colorObj","predefinedColor","FONT_SIZE","FONT_FAMILY","FONT_COLOR","FONT_BACKGROUND_COLOR","buildDefinition","modelAttributeKey","renderUpcastAttribute","styleAttr","normalizeColorCode","renderDowncastElement","normalizeSingleColorDefinition","fontfamilycommand_FontFamilyCommand","normalizeOptions","configuredOptions","getOptionDefinition","title","fontDefinition","fontNames","firstFontName","cssFontNames","normalizeFontNameForCSS","font-family","generateFontPreset","fontName","fontfamilyediting_FontFamilyEditing","src_model_Model","font_family","fontfamilyui_FontFamilyUI","_getLocalizedOptions","itemDefinitions","commandParam","_prepareListOptions","fontfamily_FontFamily","fontsizecommand_FontSizeCommand","utils_normalizeOptions","utils_getOptionDefinition","namedPresets","tiny","small","big","huge","sizePreset","parseFloat","isNaN","font-size","generatePixelPreset","fontsizeediting_FontSizeEditing","font_size","fontsizeui_FontSizeUI","fontsizeui_prepareListOptions","localizedTitles","Default","Tiny","Small","Big","Huge","fontsize_FontSize","fontcolorcommand_FontColorCommand","fontcolorediting_FontColorEditing","colorui_ColorUI","componentName","dropdownLabel","colorTableView","colorsConfig","normalizeColorOptions","localizedColors","localizedColorNames","Black","Dim grey","Grey","Light grey","White","Red","Orange","Yellow","Light green","Green","Aquamarine","Turquoise","Light blue","Blue","Purple","colorOption","getLocalizedColorOptions","addColorTableToDropdown","isVisible","updateDocumentColors","updateSelectedColors","font_color","fontcolorui_FontColorUI","fontcolor_FontColor","fontbackgroundcolorcommand_FontBackgroundColorCommand","fontbackgroundcolorediting_FontBackgroundColorEditing","background-color","font_background","fontbackgroundcolorui_FontBackgroundColorUI","fontbackgroundcolor_FontBackgroundColor","attributecommand_AttributeCommand","_getValueFromFirstAllowedNode","forceValue","BOLD","boldediting_BoldEditing","fontWeight","bold","boldui_BOLD","boldui_BoldUI","ITALIC","italicediting_ItalicEditing","font-style","italic","italicui_ITALIC","italicui_ItalicUI","blockquotecommand_BlockQuoteCommand","_getValue","_checkEnabled","blocksToQuote","findQuote","checkCanBeQuoted","_applyQuote","_removeQuote","getRangesOfBlockGroups","groupRange","positionBefore","positionAfter","quotesToMerge","quote","currentQuote","nextQuote","elementOrPosition","nextBlock","isBQAllowed","isBlockAllowedInBQ","blockquoteediting_BlockQuoteEditing","blockquoteui_BlockQuoteUI","browse_files","ckfinderui_CKFinderUI","button","imageloadobserver_ImageLoadObserver","_observedElements","_updateObservedElements","_fireEvents","modelToViewAttributeConverter","img","HighlightStack","oldTop","_insertDescriptor","newTop","compareDescriptors","oldDescriptor","newDescriptor","_removeDescriptor","shouldABeBeforeB","classesToString","drag_handle","WIDGET_CLASS_NAME","WIDGET_SELECTED_CLASS_NAME","isWidget","toWidget","setCustomProperty","utils_getFillerOffset","labelOrCreator","setLabel","hasSelectionHandle","widgetElement","selectionHandle","addSelectionHandle","setHighlightHandling","normalizeToArray","getLabel","labelCreator","toWidgetEditable","findOptimalInsertionPosition","selectedElement","getSelectedImageWidget","isImageWidget","isImage","insertImage","imageElement","insertAtSelection","isImageAllowed","getInsertImageParent","isImageAllowedInParent","checkSelectionOnObject","isInOtherImage","imageinsertcommand_ImageInsertCommand","src","imageediting_ImageEditing","createImageViewElement","altText","toImageWidget","srcset","srcsetAttributeConverter","viewImage","conversionResult","modelImage","viewFigureToModel","emptyElement","figure","findLinkRange","_findBound","lookBack","lastNode","linkcommand_LinkCommand","manualDecorators","manualDecorator","_getDecoratorStateFromModel","href","manualDecoratorIds","truthyManualDecorators","falsyManualDecorators","linkRange","decoratorName","unlinkcommand_UnlinkCommand","linkCommand","rangesToUnlink","baseSlice","castSlice","reHasUnicode","hasUnicode","asciiToArray","rsAstral","rsCombo","rsFitz","rsNonAstral","rsRegional","rsSurrPair","reOptMod","rsSeq","rsSymbol","reUnicode","unicodeToArray","stringToArray","arrayMap","INFINITY","symbolToString","baseToString","createCaseFirst","upperFirst","strSymbols","chr","ATTRIBUTE_WHITESPACES","SAFE_URL","createLinkElement","linkElement","ensureSafeUrl","isSafeUrl","AutomaticDecorators","_definitions","ManualDecorator","TwoStepCaretHandler","_modelSelection","_overrideUid","_isNextGravityRestorationSkipped","_isGravityOverridden","isAtBoundary","_hasSelectionAttribute","isBetweenDifferentValues","_preventCaretMovement","isAtStartBoundary","isAtEndBoundary","_setSelectionAttributeFromTheNodeBefore","isStepAfterTheAttributeBoundary","_skipNextAutomaticGravityRestoration","overrideSelectionGravity","restoreSelectionGravity","isAttrBefore","isAttrAfter","HIGHLIGHT_CLASS","DECORATOR_AUTOMATIC","DECORATOR_MANUAL","EXTERNAL_LINKS_REGEXP","linkediting_LinkEditing","addTargetToExternalLinks","linkDecorators","decorators","localizedDecoratorsLabels","Open in a new tab","Downloadable","decorator","getLocalizedDecorators","retArray","lodash_es_upperFirst","normalizeDecorators","_enableAutomaticDecorators","_enableManualDecorators","twoStepCaretHandler","arrowRightPressed","arrowLeftPressed","contentDirection","isMovementHandled","handleForwardMovement","handleBackwardMovement","bindTwoStepCaretToAttribute","_setupLinkHighlight","automaticDecoratorDefinitions","automaticDecorators","rel","getDispatcher","manualDecoratorDefinitions","manualDecoratorName","highlightedLinks","notification_Notification","alert","_showNotification","namespace","ckfindercommand_CKFinderCommand","imageCommand","openerMethod","chooseFiles","originalOnInit","onInit","finder","toArray","links","images","linkFile","getUrl","imagesUrls","image","request","insertImages","resizedUrl","notification","showWarning","CKFinder","urls","ckfinderediting_CKFinderEditing","BASE64_HEADER_REG_EXP","FileUploader","fileOrData","apiAddress","_isBase64","base64","sliceSize","contentType","base64Data","byteArrays","byteNumbers","charCodeAt","Blob","_base64ToBlob","_token","_apiAddress","onProgress","onError","_prepareRequest","_attachXHRListeners","setRequestHeader","statusCode","xhrResponse","formData","EmitterMixin","DEFAULT_OPTIONS","refreshInterval","autoRefresh","Token","tokenUrlOrRefreshToken","initValue","tokenUrl","defaultRefreshToken","_options","_startRefreshing","_refreshToken","_stopRefreshing","_refreshInterval","cloudservices_CloudServices","optionName","token_token","cloudservicesuploadadapter_CloudServicesUploadAdapter","cloudServices","uploadUrl","_uploadGateway","_UploadGateway","Adapter","uploadGateway","fileUploader","mouseobserver_MouseObserver","selectAllKeystrokeCode","widget_Widget","_previouslySelected","_clearPreviouslySelectedWidgets","lastMarked","isChild","_onMousedown","_onKeydown","_handleDelete","domEventData","isInsideNestedEditable","detail","_setSelectionOverElement","isLtrContent","wasHandled","isArrowKeyCode","isSelectAllKeyCode","_handleEnterKey","_selectAllNestedEditableContent","_selectAllContent","_handleArrowKeys","objectElement","_getObjectElementNextToSelection","previousNode","nodeToRemove","objectElement2","isBackwards","shouldInsertParagraph","paragraphLimit","documentSelection","widgetParent","probe","widget","imagetextalternativecommand_ImageTextAlternativeCommand","imagetextalternativeediting_ImageTextAlternativeEditing","labeledinputview_LabeledInputView","InputView","inputUid","statusUid","inputView","_createInputView","statusView","_createStatusView","errorText","infoText","ariaDescribedById","select","inputtextview_InputTextView","placeholder","readonly","aria-invalid","aria-describedby","setValue","submitHandler","check","icons_cancel","textalternativeformview_TextAlternativeFormView","labeledInput","_createLabeledInputView","saveButtonView","_createButton","cancelButtonView","_focusables","v","toUnit","toPx","defaultLimiterElement","balloonpanelview_BalloonPanelView","show","defaultPositions","positionOptions","southArrowNorth","southArrowNorthWest","southArrowNorthEast","northArrowSouth","northArrowSouthWest","northArrowSouthEast","optimalPosition","unpin","_pinWhenIsVisibleCallback","_startPinning","_stopPinning","hide","attachTo","getDomElement","limiterElement","scrollTarget","isWithinScrollTarget","isLimiterWithinScrollTarget","getNorthTop","balloonRect","arrowVerticalOffset","getSouthTop","arrowHorizontalOffset","northWestArrowSouth","northWestArrowSouthWest","northWestArrowSouthEast","northEastArrowSouth","northEastArrowSouthEast","northEastArrowSouthWest","southWestArrowNorth","southWestArrowNorthWest","southWestArrowNorthEast","southEastArrowNorth","southEastArrowNorthEast","southEastArrowNorthWest","previous_arrow","next_arrow","contextualballoon_toPx","contextualballoon_ContextualBalloon","positionLimiter","_viewToStack","_idToStack","_rotatorView","_createRotatorView","_fakePanelsView","_createFakePanelsView","hasView","stackId","_numberOfStacks","_visibleStack","singleViewMode","showStack","_showView","_singleViewMode","visibleView","_showNextStack","hideView","_getStackId","pin","_getBalloonPosition","updatePosition","visibleStack","stacks","nextIndex","contextualballoon_RotatorView","isSingleViewMode","numberOfStacks","buttonNextView","buttonPrevView","_showPrevStack","contextualballoon_FakePanelsView","number","balloonClassName","withArrow","showView","_createButtonView","z-index","balloonPanelView","_balloonPanelView","_addPanels","_removePanels","deregisterChild","numberOfPanels","low_vision","getBalloonPositionData","imagetextalternativeui_ImageTextAlternativeUI","_createForm","_form","_showForm","_balloon","_hideForm","_isVisible","balloon","repositionContextualBalloon","_isInBalloon","focusEditable","imagetextalternative_ImageTextAlternative","image_Image","filedialogbuttonview_FileDialogButtonView","_fileInputView","filedialogbuttonview_FileInputView","accept","multiple","icons_image","createImageTypeRegExp","regExpSafeNames","fetchLocalImage","imageSrc","fetch","resource","blob","mimeType","getImageMimeType","filename","File","createFileFromBlob","imageuploadui_ImageUploadUI","imageTypes","imageTypesRegExp","acceptedType","allowMultipleFiles","imagesToUpload","image_placeholder","imageuploadprogress_ImageUploadProgress","uploadStatusChange","uploadId","fileRepository","viewFigure","_startAppearEffect","_showPlaceholder","_hidePlaceholder","progressBar","_createProgressBar","_showProgressBar","viewImg","_displayLocalImage","completeIcon","_showCompleteIcon","_removeUIElement","_hideProgressBar","_stopAppearEffect","_getUIElement","_createPlaceholder","imageFigure","uniqueProperty","upcastwriter_UpcastWriter","removeChildren","oldElement","insertChild","imageuploadcommand_ImageUploadCommand","filesToUpload","uploadImage","createLoader","imageuploadediting_ImageUploadEditing","isHtmlIncluded","fetchableImages","isLocalImage","fetchableImage","isInGraveyard","getImagesFromChangeItem","_readAndUpload","domFigure","originalDisplay","_ckHack","setAttributes","uploadStatus","_parseAndSetSrcsetAttributeOnImage","clean","destroyLoader","maxWidth","srcsetAttribute","imageupload_ImageUpload","paragraphcommand_ParagraphCommand","checkCanBecomeParagraph","rename","paragraph_Paragraph","paragraphLikeElements","isParagraphable","wrapInParagraph","_autoparagraphEmptyRoots","createContext","headingcommand_HeadingCommand","modelElements","heading","checkCanBecomeHeading","defaultModelElement","headingediting_HeadingEditing","_addDefaultH1Conversion","enterCommand","headingui_HeadingUI","Paragraph","Heading 1","Heading 2","Heading 3","Heading 4","Heading 5","Heading 6","getLocalizedOptions","defaultTitle","dropdownTooltip","titles","headingCommand","paragraphCommand","commandValue","para","whichModel","getCaptionFromImage","imageModelElement","matchImageCaption","imagecaptionediting_ImageCaptionEditing","_insertMissingModelCaptionElement","captionModelToView","createCaptionForEditing","createEditableElement","captionElementCreator","_fixCaptionVisibility","_updateCaptionVisibility","lastCaption","_lastSelectedCaption","viewCaption","modelCaption","getParentCaption","showCaption","hideCaptionIfEmpty","viewModified","nodeFinder","imagesWithoutCaption","nestedItem","appendElement","captionElement","insertViewCaptionAndBind","caption","imagestylecommand_ImageStyleCommand","defaultStyle","attributeValue","getStyleByName","object_full_width","object_left","object_center","object_right","defaultStyles","full","alignLeft","alignCenter","alignRight","defaultIcons","normalizeImageStyles","configuredStyles","_normalizeStyle","extendedStyle","imagestyleediting_ImageStyleEditing","modelToViewConverter","newStyle","oldStyle","modelToViewStyleAttribute","filteredStyles","viewFigureElement","modelImageElement","viewToModelStyleAttribute","imagestyleui_ImageStyleUI","localizedDefaultStylesTitles","Full size image","Side image","Left aligned image","Centered image","Right aligned image","translatedStyles","translateStyles","widgettoolbarrepository_WidgetToolbarRepository","balloonToolbar","isWidgetSelected","_toolbarDefinitions","_updateToolbarsVisibility","toolbarConfig","toolbarId","getRelatedElement","maxRelatedElementDepth","deepestRelatedElement","deepestToolbarDefinition","relatedElement","relatedElementDepth","_isToolbarInBalloon","_hideToolbar","_isToolbarVisible","_showToolbar","toolbarDefinition","widgettoolbarrepository_repositionContextualBalloon","widgettoolbarrepository_getBalloonPositionData","resizerstate_ResizeState","_referenceCoordinates","domResizeHandle","domHandleHost","domResizeHost","clientRect","activeHandlePosition","domHandle","resizerPositions","classList","getResizerHandleClass","getHandlePosition","resizerPosition","positionParts","getAbsoluteBoundaryPoint","replacements","getOppositePosition","originalWidth","originalHeight","aspectRatio","widthStyle","originalWidthPercents","resizeHostRect","domResizeHostParent","parentWidth","calculateHostPercentageWidth","newSize","proposedWidth","proposedHeight","proposedWidthPercents","widthPercents","proposedHandleHostWidth","handleHostWidth","proposedHandleHostHeight","handleHostHeight","resizer_Resizer","_domResizerWrapper","downcastWriter","viewResizerWrapper","_appendHandles","_appendSizeUI","propName","_sizeUI","bindToState","begin","_getHandleHost","_getResizeHost","_proposeNewSize","domHandleHostRect","round","domResizeHostRect","redraw","onCommit","_cleanup","handleHostRect","domWrapper","existsInDom","widgetWrapper","handleHost","offsets","offsetLeft","offsetTop","isSameNode","dismiss","currentCoordinates","pageX","pageY","extractCoordinates","isCentered","enlargement","proposedSize","abs","dominant","targetSize","getResizeHost","getHandleHost","getResizerClass","sizeUI","resizer_SizeView","visible","resizerState","unbind","throttle","widgetresize_WidgetResize","_resizers","_observer","isResizeHandle","resizeHandle","_activeResizer","_getResizerByHandle","updateSize","commit","redrawFocusedResizer","_visibleResizer","redrawFocusedResizerThrottled","lodash_es_throttle","_getResizerByViewElement","resizer","containsHandle","imageresizecommand_ImageResizeCommand","multicommand_MultiCommand","_childCommands","_getFirstEnabledCommand","indentediting_IndentEditing","indent","outdent","indentui_IndentUI","localizedIndentIcon","localizedOutdentIcon","_defineButton","clickobserver_ClickObserver","linkformview_LinkFormView","urlInputView","_createUrlInput","_manualDecoratorSwitches","_createManualDecoratorSwitches","_createFormChildren","accumulator","switchButton","switches","additionalButtonsView","unlink","pencil","linkactionsview_LinkActionsView","previewButtonView","_createPreviewButton","unlinkButtonView","editButtonView","icons_link","linkKeystroke","linkui_LinkUI","actionsView","_createActionsView","formView","_createFormView","_createToolbarLinkButton","_enableUserBalloonInteractions","unlinkCommand","_addFormView","_hideUI","getDecoratorSwitchesState","_closeFormView","_showUI","_getSelectedLinkElement","_areActionsVisible","_isUIVisible","_isUIInPanel","_areActionsInPanel","_getBalloonPositionData","_isFormInPanel","restoreManualDecoratorStates","_removeFormView","forceVisible","_addActionsView","_startUpdatingUI","prevSelectedLink","prevSelectionParent","getSelectionParent","selectedLink","targetLink","findLinkElementAncestor","startLink","endLink","isLinkElement","listcommand_ListCommand","checkCanBecomeListItem","turnOff","currentIndent","newIndent","listIndent","lowestIndent","_fixType","listType","listItem","startingItem","indentcommand_IndentCommand","indentDirection","_indentBy","itemsToChange","lastItem","generateLiInUl","getListItemFillerOffset","createViewListItemElement","viewList","injectViewList","injectedItem","injectedList","refItem","getSiblingListItem","sameIndent","smallerIndent","prevItem","breakContainer","positionAfterUiElements","prevView","breakPosition","mergeViewLists","nextViewList","lastSubChild","modelChild","firstList","secondList","mergeContainers","itemIndent","createUIComponent","hasOnlyLists","modelViewInsertion","modelViewChangeType","listName","modelViewMergeAfterChangeType","modelViewSplitOnInsert","removeStart","removeEnd","previousList","mergePos","modelViewMergeAfter","viewItemPrev","viewItemNext","viewModelConverter","getIndent","listItemModel","convertedChild","wasSplit","findNextListItem","viewToModelListItemChildrenConverter","cleanList","isList","cleanListItem","foundList","firstNode","modelToViewPosition","topmostViewList","modelIndentPasteFixer","indentChange","hoistNestedLists","nextIndent","modelRemoveStartPosition","viewRemoveStartPosition","viewRemovedItem","prevModelItem","foo","prevIndent","prevViewList","listediting_ListEditing","itemToListHead","applied","_addListToFix","innerItem","listHead","_fixListIndents","_fixListTypes","maxIndent","fixBy","typesStack","modelChangePostFixer","registerViewToModelLength","getViewListItemLength","modelNode","modelLength","viewToModelPosition","viewListPrev","modelViewChangeIndent","modelViewRemove","firstPosition","getCommandExecuter","registerChildCommand","numberedlist","bulletedlist","listui_ListUI","transformListItemLikeElementsIntoLists","itemLikeElements","itemLikeElementsMatcher","mso-list","itemData","getListItemData","order","findAllItemLikeElements","currentList","itemLikeElement","previousItem","currentItem","list_isList","isNewListNeeded","listStyle","listLikeItem","listStyleTypeRegex","listStyleMatch","listStyleType","listStyleTypeMatch","detectListStyle","insertNewEmptyList","bulletMatcher","removeBulletElement","transformElementIntoListItem","googleDocsMatch","googledocsnormalizer_GoogleDocsNormalizer","htmlString","removeBoldWrapper","unwrapParagraphInListItem","normalizeSafariSpaceSpans","parseHtml","domParser","normalizedHtml","normalizeSpacing","cleanContentAfterBody","htmlDocument","innerTextLength","normalizeSpacerunSpans","bodyString","bodyView","documentToView","stylesObject","styleTags","getElementsByTagName","sheet","cssRules","extractStyles","replaceImagesSourceWithBase64","rtfData","upcastWriter","shapesIds","imageElementsMatcher","imgs","shapes","shape","removeAllImgElementsRepresentingShapes","shapeElementsMatcher","prevSiblingName","findAllShapesIds","removeAllShapeElements","findAllImageElementsWithLocalSource","imageElements","imagesHexSources","newSrc","_convertHexToBase64","hex","replaceImagesFileSourceWithInlineRepresentation","regexPictureHeader","regexPicture","imageType","extractImageDataFromRtf","hexString","msWordMatch1","msWordMatch2","mswordnormalizer_MSWordNormalizer","parentName","updateNumericAttribute","defaultValue","createEmptyTableCell","tableCell","upcastTable","viewTable","rows","headingRows","headingColumns","tableMeta","headRows","bodyRows","firstTheadElement","tableChild","trs","tr","headingCols","scanRowForHeadingColumns","scanTable","table","row","upcastTableCell","viewTableCell","th","TableWalker","startRow","endRow","includeSpanned","column","_skipRows","_row","_column","_cellIndex","_spannedCells","_nextCellAtColumn","_isOverEndRow","cell","skipCurrentValue","outValue","_isSpanned","_getSpanned","_shouldSkipRow","_shouldSkipColumn","_formatOutValue","colspan","rowspan","_recordSpans","isSpanned","cellIndex","rowIsBelowStartRow","rowIsMarkedAsSkipped","columnToUpdate","_markSpannedCell","rowToUpdate","isTableWidget","getSelectedTableWidget","getTableWidgetAncestor","parentTable","downcastInsertTable","asWidget","figureElement","tableElement","tableWidget","toTableWidget","tableWalker","tableAttributes","viewRows","tableWalkerValue","tableSection","getOrCreateTableSection","getSectionName","tableRow","trElement","createTr","createViewTableCellElement","downcastInsertRow","getViewTable","downcastInsertCell","rowIndex","downcastTableHeadingRowsChange","oldRows","newRows","rowsToMove","isBetween","moveViewRowsToTableSection","renameViewTableCell","removeTableSectionIfEmpty","renameViewTableCellIfRequired","lower","upper","downcastTableHeadingColumnsChange","oldColumns","newColumns","lastColumnToCheck","desiredCellElementName","viewCell","renamedCell","getCellElementName","cellElementName","cellElement","isSingleParagraph","hasAnyAttribute","innerParagraph","paragraphInsertPosition","fakeParagraph","sectionName","viewTableSection","getExistingTableSectionElement","tableChildElement","createTableSection","viewTableRow","inserttablecommand_InsertTableCommand","validParent","getInsertTableParent","tableUtils","createTable","insertrowcommand_InsertRowCommand","tableParent","insertAt","insertRows","at","insertcolumncommand_InsertColumnCommand","getCellLocation","insertColumns","splitcellcommand_SplitCellCommand","isHorizontally","splitCellHorizontally","splitCellVertically","mergecellcommand_MergeCellCommand","isHorizontal","cellToMerge","_getMergeableCell","isMergeNext","cellToExpand","cellToRemove","removedTableCellRow","mergecellcommand_isEmpty","mergeTableCells","spanAttribute","cellSpan","cellToMergeSpan","removedRowIndex","overlapsRemovedRow","removeEmptyRow","horizontalCell","cellOnLeft","cellOnRight","leftCellColumn","rightCellColumn","leftCellSpan","getHorizontalCell","currentCellRowSpan","rowOfCellToMerge","tableMap","mergeColumn","cellToMergeData","getVerticalCell","span","removerowcommand_RemoveRowCommand","currentRow","cellsToMove","rowspanToSet","targetRow","previousCell","cellToMove","removecolumncommand_RemoveColumnCommand","getColumns","removedColumn","setheaderrowcommand_SetHeaderRowCommand","isInTable","_isInHeading","currentHeadingRows","selectionRow","headingRowsToSet","cellsToSplit","getOverlappingCells","splitHorizontally","newRowspan","spanToSet","columnIndex","setheadercolumncommand_SetHeaderColumnCommand","selectionColumn","headingColumnsToSet","tableutils_TableUtils","createEmptyRows","rowsToInsert","tableIterator","cellsToInsert","columnsToInsert","tableColumns","createCells","skipRow","numberOfCells","newCellsSpan","updatedSpan","breakSpanEvenly","newCellsAttributes","splitCellColumn","cellsToUpdate","splitCellRow","cellColumn","tableCellToInsert","cells","injectTableLayoutPostFixer","analyzedTables","isTableAttributeEntry","fixTableCellsRowspan","fixTableRowsSizes","tableLayoutPostFixer","cellsToTrim","maxRows","isInHeader","rowLimit","findCellsToTrim","rowsLengths","lengths","getRowsLengths","tableSize","maxColumns","isAttributeType","injectTableCellParagraphPostFixer","fixTable","fixTableRow","fixTableCellContent","checkTableCellChange","tableCellContentsPostFixer","textNodes","injectTableCellRefreshPostFixer","cellsToRefresh","checkRefresh","refreshItem","tableCellRefreshPostFixer","attributesCount","tableediting_TableEditing","_handleTabOnSelectedTable","_getTabHandler","currentRowIndex","currentCellIndex","isFirstCellInRow","isLastCellInRow","isLastRow","cellToFocus","nextRow","previousRow","inserttableview_InsertTableView","boxView","inserttableview_TableSizeGridBoxView","_highlightGridBoxes","mouseover","icons_table","table_column","table_row","table_merge_cell","tableui_TableUI","isContentLtr","insertTableView","bindIsOn","_prepareDropdown","addListOption","UNDERLINE","underlineediting_UnderlineEditing","text-decoration","underline","underlineui_UNDERLINE","underlineui_UnderlineUI","STRIKETHROUGH","strikethroughediting_StrikethroughEditing","strikethrough","strikethroughui_STRIKETHROUGH","strikethroughui_StrikethroughUI","highlightcommand_HighlightCommand","highlighter","isSameHighlight","highlightStart","highlightEnd","highlightRange","highlightediting_HighlightEditing","highlightediting_buildDefinition","icons_marker","pen","splitbuttonview_SplitButtonView","actionView","_createActionView","aria-expanded","highlightui_HighlightUI","Yellow marker","Green marker","Pink marker","Blue marker","Red pen","Green pen","_addHighlighterButton","_addRemoveHighlightButton","_addDropdown","getIconForType","decorateButton","localized","startingHighlighter","optionsMap","retVal","splitButtonView","lastExecuted","getActiveOption","whichHighlighter","bindToolbarIconStyleToActiveColor","ckeditor_DecoupledEditor","DecoupledEditor","DecoupledEditorBase","UploadAdapter","_addListAutoformats","_addBasicStylesAutoformats","_addHeadingAutoformats","_addBlockQuoteAutoformats","boldCallback","italicCallback","codeCallback","level","Image","ImageUpload","normalizers","isTransformedWithPasteFromOffice","activeNormalizer","normalizer","isActive","widgetToolbarRepository","tableContentToolbarItems","tableToolbarItems","_registerSchema","_registerConverters","domWidgetElement","imageStyle","contentToolbar"],"mappings":"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n+B,EAAAwpD,kBAAAswD,GACAppD,EAAAtyB,SAAA,gBAAA07E,KAEAppD,EAAAlyB,YAAA,QAAAs7E,GACAppD,EAAAnyB,YAAA,gBAAAu7E,OAGAzjD,EAAA4kB,WAAA7W,IAAA,UAAAK,sBACA1tC,MACAh5B,KAAA,SACA+D,QACAqmC,MAAA,OAGA0jB,OACA9sD,IAAA,QACAN,MAAA69B,KAAA3b,SAAA,4BC5GkCkwE,GAIlC94B,sBACA,OAAY03C,GAAYwB,GAAUkC,GAAWM,IAO7C98C,wBACA,6BCjBuCk6B,GAIvC94B,sBACA,OAAYqyC,GAAkBS,IAO9Bl0C,wBACA,kCCbuCk6B,GAIvC94B,sBACA,OAAYwpF,GAAkBI,IAO9BhrF,wBACA,kCCb2Ck6B,GAI3C94B,sBACA,OAAY8pF,GAAsBG,IAOlCrrF,wBACA,sCCduCk6B,GAIvC94B,sBACA,OAAYwqF,GAAkBQ,IAO9BpsF,wBACA,qBtBoCA0tF,GAAgB3pE,eACfoE,SACCopC,YAAa,WACb1lG,OACC,UACA,IACA,WACA,aACA,YACA,sBACA,IACA,OACA,SACA,YACA,gBACA,YACA,IACA,YACA,IACA,eACA,eACA,IACA,SACA,UACA,IACA,OACA,aACA,cACA,cACA,IACA,OACA,SAGF++F,OACCz/G,QACC,OACA,YACA,cAEDg9E,SACC,uBACA,kBACA,wBACA,IACA,yBAGFwzD,OACCwT,gBACC,cACA,WACA,oBAIFzsF,SAAU","file":"ckeditor.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"DecoupledEditor\"] = factory();\n\telse\n\t\troot[\"DecoupledEditor\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 95);\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/ckeditorerror\n */\n\n/**\n * URL to the documentation with error codes.\n */\nexport const DOCUMENTATION_URL = 'https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html';\n/**\n * The CKEditor error class.\n *\n * You should throw `CKEditorError` when:\n *\n * * An unexpected situation occurred and the editor (most probably) will not work properly. Such exception will be handled\n * by the {@link module:watchdog/watchdog~Watchdog watchdog} (if it is integrated),\n * * If the editor is incorrectly integrated or the editor API is used in the wrong way. This way you will give\n * feedback to the developer as soon as possible. Keep in mind that for common integration issues which should not\n * stop editor initialization (like missing upload adapter, wrong name of a toolbar component) we use `console.warn()` with\n * {@link module:utils/ckeditorerror~attachLinkToDocumentation `attachLinkToDocumentation()`}\n * to improve developers experience and let them see the working editor as soon as possible.\n *\n *\t\t/**\n *\t\t * Error thrown when a plugin cannot be loaded due to JavaScript errors, lack of plugins with a given name, etc.\n *\t\t *\n *\t\t * @error plugin-load\n *\t\t * @param pluginName The name of the plugin that could not be loaded.\n *\t\t * @param moduleName The name of the module which tried to load this plugin.\n *\t\t * /\n *\t\tthrow new CKEditorError( 'plugin-load: It was not possible to load the \"{$pluginName}\" plugin in module \"{$moduleName}', {\n *\t\t\tpluginName: 'foo',\n *\t\t\tmoduleName: 'bar'\n *\t\t} );\n *\n * @extends Error\n */\n\nexport default class CKEditorError extends Error {\n  /**\n   * Creates an instance of the CKEditorError class.\n   *\n   * @param {String} message The error message in an `error-name: Error message.` format.\n   * During the minification process the \"Error message\" part will be removed to limit the code size\n   * and a link to this error documentation will be added to the `message`.\n   * @param {Object|null} context A context of the error by which the {@link module:watchdog/watchdog~Watchdog watchdog}\n   * is able to determine which editor crashed. It should be an editor instance or a property connected to it. It can be also\n   * a `null` value if the editor should not be restarted in case of the error (e.g. during the editor initialization).\n   * The error context should be checked using the `areConnectedThroughProperties( editor, context )` utility\n   * to check if the object works as the context.\n   * @param {Object} [data] Additional data describing the error. A stringified version of this object\n   * will be appended to the error message, so the data are quickly visible in the console. The original\n   * data object will also be later available under the {@link #data} property.\n   */\n  constructor(message, context, data) {\n    message = attachLinkToDocumentation(message);\n\n    if (data) {\n      message += ' ' + JSON.stringify(data);\n    }\n\n    super(message);\n    /**\n     * @type {String}\n     */\n\n    this.name = 'CKEditorError';\n    /**\n     * A context of the error by which the Watchdog is able to determine which editor crashed.\n     *\n     * @type {Object|null}\n     */\n\n    this.context = context;\n    /**\n     * The additional error data passed to the constructor. Undefined if none was passed.\n     *\n     * @type {Object|undefined}\n     */\n\n    this.data = data;\n  }\n  /**\n   * Checks if the error is of the `CKEditorError` type.\n   */\n\n\n  is(type) {\n    return type === 'CKEditorError';\n  }\n  /**\n   * A utility that ensures the the thrown error is a {@link module:utils/ckeditorerror~CKEditorError} one.\n   * It is uesful when combined with the {@link module:watchdog/watchdog~Watchdog} feature, which can restart the editor in case\n   * of a {@link module:utils/ckeditorerror~CKEditorError} error.\n   *\n   * @param {Error} err An error.\n   * @param {Object} context An object conected through properties with the editor instance. This context will be used\n   * by the watchdog to verify which editor should be restarted.\n   */\n\n\n  static rethrowUnexpectedError(err, context) {\n    if (err.is && err.is('CKEditorError')) {\n      throw err;\n    }\n    /**\n     * An unexpected error occurred inside the CKEditor 5 codebase. The `error.data.originalError` property\n     * shows the original error properties.\n     *\n     * This error is only useful when the editor is initialized using the {@link module:watchdog/watchdog~Watchdog} feature.\n     * In case of such error (or any {@link module:utils/ckeditorerror~CKEditorError} error) the wathcdog should restart the editor.\n     *\n     * @error unexpected-error\n     */\n\n\n    throw new CKEditorError('unexpected-error', context, {\n      originalError: {\n        message: err.message,\n        stack: err.stack,\n        name: err.name\n      }\n    });\n  }\n\n}\n/**\n * Attaches the link to the documentation at the end of the error message. Use whenever you log a warning or error on the\n * console. It is also used by {@link module:utils/ckeditorerror~CKEditorError}.\n *\n *\t\t /**\n *\t\t  * There was a problem processing the configuration of the toolbar. The item with the given\n *\t\t  * name does not exist so it was omitted when rendering the toolbar.\n *\t\t  *\n *\t\t  * @error toolbarview-item-unavailable\n *\t\t  * @param {String} name The name of the component.\n *\t\t  * /\n *\t\t console.warn( attachLinkToDocumentation(\n *\t\t \t'toolbarview-item-unavailable: The requested toolbar item is unavailable.' ), { name } );\n *\n * @param {String} message Message to be logged.\n * @returns {String}\n */\n\nexport function attachLinkToDocumentation(message) {\n  const matchedErrorName = message.match(/^([^:]+):/);\n\n  if (!matchedErrorName) {\n    return message;\n  }\n\n  return message + ` Read more: ${DOCUMENTATION_URL}#error-${matchedErrorName[1]}\\n`;\n}","\"use strict\";\n\nvar stylesInDom = {};\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nfunction listToStyles(list, options) {\n  var styles = [];\n  var newStyles = {};\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n\n  return styles;\n}\n\nfunction addStylesToDom(styles, options) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i];\n    var domStyle = stylesInDom[item.id];\n    var j = 0;\n\n    if (domStyle) {\n      domStyle.refs++;\n\n      for (; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j]);\n      }\n\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j], options));\n      }\n    } else {\n      var parts = [];\n\n      for (; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j], options));\n      }\n\n      stylesInDom[item.id] = {\n        id: item.id,\n        refs: 1,\n        parts: parts\n      };\n    }\n  }\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(options.attributes).forEach(function (key) {\n    style.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  var styles = listToStyles(list, options);\n  addStylesToDom(styles, options);\n  return function update(newList) {\n    var mayRemove = [];\n\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i];\n      var domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs--;\n        mayRemove.push(domStyle);\n      }\n    }\n\n    if (newList) {\n      var newStyles = listToStyles(newList, options);\n      addStylesToDom(newStyles, options);\n    }\n\n    for (var _i = 0; _i < mayRemove.length; _i++) {\n      var _domStyle = mayRemove[_i];\n\n      if (_domStyle.refs === 0) {\n        for (var j = 0; j < _domStyle.parts.length; j++) {\n          _domStyle.parts[j]();\n        }\n\n        delete stylesInDom[_domStyle.id];\n      }\n    }\n  };\n};","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nexport default root;\n","import freeGlobal from './_freeGlobal.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    // Use `util.types` for Node.js 10+.\n    var types = freeModule && freeModule.require && freeModule.require('util').types;\n\n    if (types) {\n      return types;\n    }\n\n    // Legacy `process.binding('util')` for Node.js < 10.\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nexport default nodeUtil;\n","import root from './_root.js';\nimport stubFalse from './stubFalse.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nexport default isBuffer;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/version\n */\n\n/* globals window, global */\nimport { version } from 'ckeditor5/package.json';\nimport CKEditorError from './ckeditorerror';\nconst windowOrGlobal = typeof window === 'object' ? window : global;\n\nif (windowOrGlobal.CKEDITOR_VERSION) {\n  /**\n   * This error is thrown when due to a mistake in how CKEditor 5 was installed or initialized, some\n   * of its modules were duplicated (evaluated and executed twice). Module duplication leads to inevitable runtime\n   * errors.\n   *\n   * There are many situations in which some modules can be loaded twice. In the worst case scenario,\n   * you may need to check your project for each of these issues and fix them all.\n   *\n   * # Trying to add a plugin to an existing build\n   *\n   * If you import an existing CKEditor 5 build and a plugin like this:\n   *\n   *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n   *\t\timport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\n   *\n   * Then your project loads some CKEditor 5 packages twice. How does it happen?\n   *\n   * The build package contains a file which is already compiled with webpack. This means\n   * that it contains all the necessary code from e.g. `@ckeditor/ckeditor5-engine` and `@ckeditor/ckeditor5-utils`.\n   *\n   * However, the `Highlight` plugin imports some of the modules from these packages, too. If you ask webpack to\n   * build such a project, you will end up with the modules being included (and run) twice &mdash; first, because they are\n   * included inside the build package, and second, because they are required by the `Highlight` plugin.\n   *\n   * Therefore, **you must never add plugins to an existing build** unless your plugin has no dependencies.\n   *\n   * Adding plugins to a build is done by taking the source version of this build (so, before it was built with webpack)\n   * and adding plugins there. In this situation, webpack will know that it only needs to load each plugin once.\n   *\n   * Read more in the {@glink builds/guides/integration/installing-plugins \"Installing plugins\"} guide.\n   *\n   * # Confused an editor build with an editor implementation\n   *\n   * This scenario is very similar to the previous one, but has a different origin.\n   *\n   * Let's assume that you wanted to use CKEditor 5 from source, as explained in the\n   * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"} section\n   * or in the {@glink framework/guides/quick-start \"Quick start\"} guide of CKEditor 5 Framework.\n   *\n   * The correct way to do so is to import an editor and plugins and run them together like this:\n   *\n   *\t\timport ClassicEditor from '@ckeditor/ckeditor5-editor-classic/src/classiceditor';\n   *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n   *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n   *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n   *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n   *\n   *\t\tClassicEditor\n   *\t\t\t.create( document.querySelector( '#editor' ), {\n   *\t\t\t\tplugins: [ Essentials, Paragraph, Bold, Italic ],\n   *\t\t\t\ttoolbar: [ 'bold', 'italic' ]\n   *\t\t\t} )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\t\t\t} )\n   *\t\t\t.catch( error => {\n   *\t\t\t\tconsole.error( error.stack );\n   *\t\t\t} );\n   *\n   * However, you might have mistakenly imported a build instead of the source `ClassicEditor`. In this case\n   * your imports will look like this:\n   *\n   *\t\timport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n   *\t\timport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\n   *\t\timport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\n   *\t\timport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\n   *\t\timport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\n   *\n   * This creates the same situation as in the previous section because you use a build together with source plugins.\n   *\n   * Remember: `@ckeditor/ckeditor5-build-*` packages contain editor builds and `@ckeditor/ckeditor5-editor-*` contain source editors.\n   *\n   * # Loading two or more builds on one page\n   *\n   * If you use CKEditor 5 builds, you might have loaded two (or more) `ckeditor.js` files on one web page.\n   * Check your web page for duplicated `<script>` elements or make sure your page builder/bundler includes CKEditor only once.\n   *\n   * If you want to use two different types of editors at once, see the\n   * {@glink builds/guides/integration/advanced-setup#scenario-3-using-two-different-editors \"Using two different editors\"}\n   * section.\n   *\n   * # Using outdated packages\n   *\n   * Building CKEditor 5 from source requires using multiple npm packages. These packages have their dependencies\n   * to other packages. If you use the latest version of, for example, `@ckeditor/ckeditor5-editor-classic` with\n   * an outdated version of `@ckeditor/ckeditor5-image`, npm or yarn will need to install two different versions of\n   * `@ckeditor/ckeditor5-core` because `@ckeditor/ckeditor5-editor-classic` and `@ckeditor/ckeditor5-image` may require\n   * different versions of the core package.\n   *\n   * The solution to this issue is to update all packages to their latest version. We recommend\n   * using tools like [`node-check-updates`](https://www.npmjs.com/package/npm-check-updates) which simplify this process.\n   *\n   * # Conflicting version of dependencies\n   *\n   * This is a special case of the previous scenario. If you use CKEditor 5 with some third-party plugins,\n   * it may happen that even if you use the latest versions of the official packages and the latest version of\n   * these third-party packages, there will be a conflict between some of their dependencies.\n   *\n   * Such a problem can be resolved by either downgrading CKEditor 5 packages (which we do not recommend) or\n   * asking the author of the third-party package to upgrade its depdendencies (or forking their project and doing this yourself).\n   *\n   * # Packages were duplicated in `node_modules`\n   *\n   * In some situations, especially when calling `npm install` multiple times, it may happen\n   * that npm will not correctly \"deduplicate\" packages.\n   *\n   * Normally, npm deduplicates all packages so, for example, `@ckeditor/ckeditor5-core` is installed only once in `node_modules/`.\n   * However, it is known to fail to do so from time to time.\n   *\n   * We recommend checking if any of the steps listed below help:\n   *\n   * * `rm -rf node_modules && npm install` to make sure you have a clean `node_modules/` directory. This step\n   * is known to help in most cases.\n   * * If you use `yarn.lock` or `package-lock.json`, remove it before `npm install`.\n   * * Check whether all CKEditor 5 packages are up to date and reinstall them\n   * if you changed anything (`rm -rf node_modules && npm install`).\n   *\n   * If all packages are correct and compatible with each other, the steps above are known to help. If not, you may\n   * try to check with `npm ls` how many times packages like `@ckeditor/ckeditor5-core`, `@ckeditor/ckeditor5-engine` and\n   *`@ckeditor/ckeditor5-utils` are installed. If more than once, verify which package causes that.\n   *\n   * @error ckeditor-duplicated-modules\n   */\n  throw new CKEditorError('ckeditor-duplicated-modules: Some CKEditor 5 modules are duplicated.', null);\n} else {\n  windowOrGlobal.CKEDITOR_VERSION = version;\n}","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nexport default freeGlobal;\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./heading.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nexport default stubFalse;\n","import root from './_root.js';\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nexport default cloneBuffer;\n","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./placeholder.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-placeholder:before,.ck .ck-placeholder:before{content:attr(data-placeholder);pointer-events:none}.ck.ck-read-only .ck-placeholder:before{display:none}.ck.ck-placeholder:before,.ck .ck-placeholder:before{cursor:text;color:var(--ck-color-engine-placeholder-text)}\"","var content = require(\"!!../../../../postcss-loader/src/index.js??ref--5-1!./globals.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999);--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border:#47a4f5;--ck-color-focus-shadow:rgba(119,186,248,0.5);--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-drop-active:rgba(0,0,0,0.2);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-off-hover-background:#a3a3a3;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#579e3d;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,0.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#5c5c5c;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1);--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./editorui.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./dropdown.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block;will-change:transform}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{transform:translate3d(0,100%,0)}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}:root{--ck-dropdown-arrow-size:calc(0.5*var(--ck-icon-size))}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown__panel{background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./icon.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./tooltip.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck-tooltip .ck-tooltip__text{display:inline-block}.ck-tooltip .ck-tooltip__text:after{content:\\\"\\\";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%;top:0}.ck.ck-tooltip.ck-tooltip_s{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_n{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{border-style:solid;left:50%}.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./button.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button .ck-button__label,.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button .ck-button__label,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0;border-color:transparent}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(-1*var(--ck-spacing-small));margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-right:calc(-1*var(--ck-spacing-small));margin-left:var(--ck-spacing-small)}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./list.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;border:0;padding:calc(0.2*var(--ck-line-height-base)*var(--ck-font-size-base)) calc(0.4*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(1.2*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:hover:not(ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./switchbutton.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px;--ck-switch-button-translation:1.3846153847em}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(2*var(--ck-spacing-large))}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(2*var(--ck-spacing-large))}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(0.5*var(--ck-border-radius))}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:all .3s ease}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var(--ck-switch-button-translation))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(-1*var(--ck-switch-button-translation)))}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./toolbardropdown.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-toolbar-dropdown .ck.ck-toolbar .ck.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar-dropdown .ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./listdropdown.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./toolbar.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row nowrap;align-items:center}.ck.ck-toolbar>.ck-toolbar__items{display:flex;flex-flow:row wrap;align-items:center;flex-grow:1}.ck.ck-toolbar .ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar .ck.ck-toolbar__separator:first-child,.ck.ck-toolbar .ck.ck-toolbar__separator:last-child{display:none}.ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck-dropdown__button .ck-dropdown__arrow{display:none}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar>.ck-toolbar__items>*{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small);margin-right:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items>.ck{width:100%;margin:0;border-radius:0;border:0}.ck.ck-toolbar>.ck-toolbar__items>*,.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck.ck-button.ck-dropdown__button{padding-left:var(--ck-spacing-tiny)}.ck.ck-toolbar .ck.ck-toolbar__separator{align-self:stretch;width:1px;min-width:1px;margin-top:0;margin-bottom:0;background:var(--ck-color-toolbar-border)}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__grouped-dropdown,[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{padding-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__items>:last-child,[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__items>:last-child{margin-right:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_grouping>.ck-toolbar__items,[dir=ltr] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{margin-right:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__grouped-dropdown,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{padding-right:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__items>*,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__items>*{margin-left:var(--ck-spacing-small);margin-right:0}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__items>:last-child,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__items>:last-child{margin-left:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_grouping>.ck-toolbar__items,[dir=rtl] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{margin-left:var(--ck-spacing-small)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./colorgrid.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-color-grid{display:grid}:root{--ck-color-grid-tile-size:20px}.ck.ck-color-grid{grid-gap:calc(var(--ck-spacing-standard)/2);padding:var(--ck-spacing-standard)}.ck.ck-color-grid__tile{border-radius:0}.ck-rounded-corners .ck.ck-color-grid__tile,.ck.ck-color-grid__tile.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-color-grid__tile{width:var(--ck-color-grid-tile-size);height:var(--ck-color-grid-tile-size);min-width:var(--ck-color-grid-tile-size);min-height:var(--ck-color-grid-tile-size);padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-color-grid__tile.ck-disabled{cursor:unset;transition:unset}.ck.ck-color-grid__tile.ck-color-table__color-tile_bordered{box-shadow:0 0 0 1px var(--ck-color-base-border)}.ck.ck-color-grid__tile .ck.ck-icon{display:none}.ck.ck-color-grid__tile.ck-on{box-shadow:0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-base-text)}.ck.ck-color-grid__tile.ck-on .ck.ck-icon{display:block}.ck.ck-color-grid__tile:hover:not(.ck-disabled){box-shadow:0 0 0 2px var(--ck-color-focus-border)}.ck.ck-color-grid__label{padding:0 var(--ck-spacing-standard)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./label.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./fontcolor.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-button.ck-color-table__remove-color{display:flex;align-items:center;width:100%}label.ck.ck-color-grid__label{font-weight:unset}.ck .ck-button.ck-color-table__remove-color{border-bottom:1px solid var(--ck-color-base-border);padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}[dir=ltr] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-left:var(--ck-spacing-standard)}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./fontsize.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".text-tiny{font-size:.7em}.text-small{font-size:.85em}.text-big{font-size:1.4em}.text-huge{font-size:1.8em}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./blockquote.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content blockquote{overflow:hidden;padding-right:1.5em;padding-left:1.5em;margin-left:0;margin-right:0;font-style:italic;border-left:5px solid #ccc}.ck-content[dir=rtl] blockquote{border-left:0;border-right:5px solid #ccc}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./link.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-link_selected{background:var(--ck-color-link-selected-background)}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./widget.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-color-resizer:var(--ck-color-focus-border);--ck-resizer-size:10px;--ck-resizer-border-width:1px;--ck-resizer-border-radius:2px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-tooltip-offset:10px;--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2}.ck .ck-widget.ck-widget_with-selection-handle{position:relative}.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{visibility:visible}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{position:absolute}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);color:var(--ck-color-resizer-tooltip-text);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);font-size:var(--ck-font-size-tiny);display:block;padding:var(--ck-spacing-small)}.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{top:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{top:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck-editor__editable>.ck-widget.ck-widget_with-selection-handle:first-child,.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handle:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness))}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected .ck-widget__selection-handle,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected .ck-widget__selection-handle:hover,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover .ck-widget__selection-handle,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-read-only .ck-widget{--ck-widget-outline-thickness:0}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./labeledinput.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-labeled-input .ck-labeled-input__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-input .ck-labeled-input__status_error{color:var(--ck-color-base-error)}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./inputtext.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{box-shadow:var(--ck-inner-shadow),0 0;background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition-property:box-shadow,border;transition:.2s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),var(--ck-inner-shadow)}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./textalternativeform.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-text-alternative-form{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-text-alternative-form .ck-labeled-input{display:inline-block}.ck.ck-text-alternative-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-text-alternative-form{flex-wrap:wrap}.ck.ck-text-alternative-form .ck-labeled-input{flex-basis:100%}.ck.ck-text-alternative-form .ck-button{flex-basis:50%}}.ck.ck-text-alternative-form{padding:var(--ck-spacing-standard)}.ck.ck-text-alternative-form:focus{outline:none}[dir=ltr] .ck.ck-text-alternative-form>:not(:first-child),[dir=rtl] .ck.ck-text-alternative-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-text-alternative-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-text-alternative-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-text-alternative-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-text-alternative-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-text-alternative-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-text-alternative-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./balloonpanel.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:\\\"\\\";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-bottom-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-bottom-color:var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-top-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent}.ck.ck-balloon-panel[class*=arrow_s]:after{border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./balloonrotator.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-balloon-rotator__navigation{display:flex;align-items:center;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./fakepanel.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);width:100%;height:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./image.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .image{display:table;clear:both;text-align:center;margin:1em auto}.ck-content .image>img{display:block;margin:0 auto;max-width:100%;min-width:50px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageuploadprogress.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-editor__editable .image{position:relative}.ck.ck-editor__editable .image .ck-progress-bar{position:absolute;top:0;left:0}.ck.ck-editor__editable .image.ck-appear{animation:fadeIn .7s}.ck.ck-editor__editable .image .ck-progress-bar{height:2px;width:0;background:var(--ck-color-upload-bar-background);transition:width .1s}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageuploadicon.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-image-upload-complete-icon{display:block;position:absolute;top:10px;right:10px;border-radius:50%}.ck-image-upload-complete-icon:after{content:\\\"\\\";position:absolute}:root{--ck-color-image-upload-icon:#fff;--ck-color-image-upload-icon-background:#008a00;--ck-image-upload-icon-size:20px;--ck-image-upload-icon-width:2px}.ck-image-upload-complete-icon{width:var(--ck-image-upload-icon-size);height:var(--ck-image-upload-icon-size);opacity:0;background:var(--ck-color-image-upload-icon-background);animation-name:ck-upload-complete-icon-show,ck-upload-complete-icon-hide;animation-fill-mode:forwards,forwards;animation-duration:.5s,.5s;font-size:var(--ck-image-upload-icon-size);animation-delay:0ms,3s}.ck-image-upload-complete-icon:after{left:25%;top:50%;opacity:0;height:0;width:0;transform:scaleX(-1) rotate(135deg);transform-origin:left top;border-top:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);border-right:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);animation-name:ck-upload-complete-icon-check;animation-duration:.5s;animation-delay:.5s;animation-fill-mode:forwards;box-sizing:border-box}@keyframes ck-upload-complete-icon-show{0%{opacity:0}to{opacity:1}}@keyframes ck-upload-complete-icon-hide{0%{opacity:1}to{opacity:0}}@keyframes ck-upload-complete-icon-check{0%{opacity:1;width:0;height:0}33%{width:.3em;height:0}to{opacity:1;width:.3em;height:.45em}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageuploadloader.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-upload-placeholder-loader{position:absolute;display:flex;align-items:center;justify-content:center;top:0;left:0}.ck .ck-upload-placeholder-loader:before{content:\\\"\\\";position:relative}:root{--ck-color-upload-placeholder-loader:#b3b3b3;--ck-upload-placeholder-loader-size:32px}.ck .ck-image-upload-placeholder{width:100%;margin:0}.ck .ck-upload-placeholder-loader{width:100%;height:100%}.ck .ck-upload-placeholder-loader:before{width:var(--ck-upload-placeholder-loader-size);height:var(--ck-upload-placeholder-loader-size);border-radius:50%;border-top:3px solid var(--ck-color-upload-placeholder-loader);border-right:2px solid transparent;animation:ck-upload-placeholder-loader 1s linear infinite}@keyframes ck-upload-placeholder-loader{to{transform:rotate(1turn)}}\"","module.exports = \".ck.ck-heading_heading1{font-size:20px}.ck.ck-heading_heading2{font-size:17px}.ck.ck-heading_heading3{font-size:14px}.ck[class*=ck-heading_heading]{font-weight:700}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__panel .ck-list__item{min-width:18em}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imagecaption.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .image>figcaption{display:table-caption;caption-side:bottom;word-break:break-word;color:#333;background-color:#f7f7f7;padding:.6em;font-size:.75em;outline-offset:-1px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imagestyle.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-image-style-spacing:1.5em}.ck-content .image-style-align-center,.ck-content .image-style-align-left,.ck-content .image-style-align-right,.ck-content .image-style-side{max-width:50%}.ck-content .image-style-side{float:right;margin-left:var(--ck-image-style-spacing)}.ck-content .image-style-align-left{float:left;margin-right:var(--ck-image-style-spacing)}.ck-content .image-style-align-center{margin-left:auto;margin-right:auto}.ck-content .image-style-align-right{float:right;margin-left:var(--ck-image-style-spacing)}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./widgetresize.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;position:absolute;pointer-events:none;left:0;top:0;outline:1px solid var(--ck-color-resizer)}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{position:absolute;pointer-events:all;width:var(--ck-resizer-size);height:var(--ck-resizer-size);background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{top:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{top:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nesw-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nesw-resize}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./imageresize.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .image.image_resized{max-width:100%;display:block;box-sizing:border-box}.ck-content .image.image_resized img{width:100%}.ck-content .image.image_resized>figcaption{display:block}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./linkform.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-link-form{display:flex}.ck.ck-link-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-link-form{flex-wrap:wrap}.ck.ck-link-form .ck-labeled-input{flex-basis:100%}.ck.ck-link-form .ck-button{flex-basis:50%}}.ck.ck-link-form_layout-vertical{display:block}.ck.ck-link-form{padding:var(--ck-spacing-standard)}.ck.ck-link-form:focus{outline:none}[dir=ltr] .ck.ck-link-form>:not(:first-child),[dir=rtl] .ck.ck-link-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-link-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-link-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}.ck.ck-link-form_layout-vertical{padding:0;min-width:var(--ck-input-text-width)}.ck.ck-link-form_layout-vertical .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) var(--ck-spacing-small)}.ck.ck-link-form_layout-vertical .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form_layout-vertical .ck-button{padding:var(--ck-spacing-standard);margin:0;border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border);width:50%}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}.ck.ck-link-form_layout-vertical .ck.ck-list{margin-left:0}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton{border:0;width:100%}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton:hover{background:none}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./linkactions.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-link-actions{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-link-actions .ck-link-actions__preview{display:inline-block}.ck.ck-link-actions .ck-link-actions__preview .ck-button__label{overflow:hidden}@media screen and (max-width:600px){.ck.ck-link-actions{flex-wrap:wrap}.ck.ck-link-actions .ck-link-actions__preview{flex-basis:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){flex-basis:50%}}.ck.ck-link-actions{padding:var(--ck-spacing-standard)}.ck.ck-link-actions .ck-button.ck-link-actions__preview{padding-left:0;padding-right:0}.ck.ck-link-actions .ck-button.ck-link-actions__preview,.ck.ck-link-actions .ck-button.ck-link-actions__preview:active,.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus,.ck.ck-link-actions .ck-button.ck-link-actions__preview:hover{background:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:active{box-shadow:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus .ck-button__label{text-decoration:underline}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{padding:0 var(--ck-spacing-medium);color:var(--ck-color-link-default);text-overflow:ellipsis;cursor:pointer;max-width:var(--ck-input-text-width);min-width:3em;text-align:center}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label:hover{text-decoration:underline}.ck.ck-link-actions:focus{outline:none}[dir=ltr] .ck.ck-link-actions .ck-button:not(:first-child),[dir=rtl] .ck.ck-link-actions .ck-button:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-actions{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-actions .ck-button.ck-link-actions__preview{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{min-width:0;max-width:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):last-of-type{border-right:1px solid var(--ck-color-base-border)}}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./tableediting.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-color-table-focused-cell-background:#f5fafe}.ck-widget.table td.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table th.ck-editor__nested-editable.ck-editor__nested-editable_focused{background:var(--ck-color-table-focused-cell-background);border-style:none;outline:1px solid var(--ck-color-focus-border);outline-offset:-1px}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./inserttable.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-insert-table-dropdown-padding:10px;--ck-insert-table-dropdown-box-height:11px;--ck-insert-table-dropdown-box-width:12px;--ck-insert-table-dropdown-box-margin:1px;--ck-insert-table-dropdown-box-border-color:#bfbfbf;--ck-insert-table-dropdown-box-border-active-color:#53a0e4;--ck-insert-table-dropdown-box-active-background:#c7e5ff}.ck .ck-insert-table-dropdown__grid{display:flex;flex-direction:row;flex-wrap:wrap;width:calc(var(--ck-insert-table-dropdown-box-width)*10 + var(--ck-insert-table-dropdown-box-margin)*20 + var(--ck-insert-table-dropdown-padding)*2);padding:var(--ck-insert-table-dropdown-padding) var(--ck-insert-table-dropdown-padding) 0}.ck .ck-insert-table-dropdown__label{text-align:center}.ck .ck-insert-table-dropdown-grid-box{width:var(--ck-insert-table-dropdown-box-width);height:var(--ck-insert-table-dropdown-box-height);margin:var(--ck-insert-table-dropdown-box-margin);border:1px solid var(--ck-insert-table-dropdown-box-border-color);border-radius:1px}.ck .ck-insert-table-dropdown-grid-box.ck-on{border-color:var(--ck-insert-table-dropdown-box-border-active-color);background:var(--ck-insert-table-dropdown-box-active-background)}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./table.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck-content .table{margin:1em auto;display:table}.ck-content .table table{border-collapse:collapse;border-spacing:0;border:1px double #b3b3b3}.ck-content .table table td,.ck-content .table table th{min-width:2em;padding:.4em;border-color:#d9d9d9}.ck-content .table table th{font-weight:700;background:#fafafa}\"","var content = require(\"!!../../../../../postcss-loader/src/index.js??ref--5-1!./splitbutton.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \".ck.ck-splitbutton{font-size:inherit}.ck.ck-splitbutton .ck-splitbutton__action:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button .ck-tooltip{display:none}:root{--ck-color-split-button-hover-background:#ebebeb;--ck-color-split-button-hover-border:#b3b3b3}[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__action{border-top-right-radius:unset;border-bottom-right-radius:unset}[dir=rtl] .ck.ck-splitbutton>.ck-splitbutton__action{border-top-left-radius:unset;border-bottom-left-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow{min-width:unset}[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-radius:0}.ck-rounded-corners [dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow,[dir=ltr] .ck.ck-splitbutton>.ck-splitbutton__arrow.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:unset;border-bottom-left-radius:unset}[dir=rtl] .ck.ck-splitbutton>.ck-splitbutton__arrow{border-top-right-radius:unset;border-bottom-right-radius:unset}.ck.ck-splitbutton>.ck-splitbutton__arrow svg{width:var(--ck-dropdown-arrow-size)}.ck.ck-splitbutton.ck-splitbutton_open>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover),.ck.ck-splitbutton:hover>.ck-button:not(.ck-on):not(.ck-disabled):not(:hover){background:var(--ck-color-split-button-hover-background)}[dir=ltr] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled),[dir=ltr] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled){border-left-color:var(--ck-color-split-button-hover-border)}[dir=rtl] .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow:not(.ck-disabled),[dir=rtl] .ck.ck-splitbutton:hover>.ck-splitbutton__arrow:not(.ck-disabled){border-right-color:var(--ck-color-split-button-hover-border)}.ck.ck-splitbutton.ck-splitbutton_open{border-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__action,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__action{border-bottom-left-radius:0}.ck-rounded-corners .ck.ck-splitbutton.ck-splitbutton_open>.ck-splitbutton__arrow,.ck.ck-splitbutton.ck-splitbutton_open.ck-rounded-corners>.ck-splitbutton__arrow{border-bottom-right-radius:0}\"","var content = require(\"!!../../../postcss-loader/src/index.js??ref--5-1!./highlight.css\");\n\nif (typeof content === 'string') {\n  content = [[module.id, content, '']];\n}\n\nvar options = {\"injectType\":\"singletonStyleTag\"}\n\noptions.insert = \"head\";\noptions.singleton = true;\n\nvar update = require(\"!../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\")(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n","module.exports = \":root{--ck-highlight-marker-yellow:#fdfd77;--ck-highlight-marker-green:#63f963;--ck-highlight-marker-pink:#fc7999;--ck-highlight-marker-blue:#72cdfd;--ck-highlight-pen-red:#e91313;--ck-highlight-pen-green:#180}.marker-yellow{background-color:var(--ck-highlight-marker-yellow)}.marker-green{background-color:var(--ck-highlight-marker-green)}.marker-pink{background-color:var(--ck-highlight-marker-pink)}.marker-blue{background-color:var(--ck-highlight-marker-blue)}.pen-red{color:var(--ck-highlight-pen-red)}.pen-green,.pen-red{background-color:transparent}.pen-green{color:var(--ck-highlight-pen-green)}\"","import root from './_root.js';\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nexport default Symbol;\n","import Symbol from './_Symbol.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nexport default getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nexport default objectToString;\n","import Symbol from './_Symbol.js';\nimport getRawTag from './_getRawTag.js';\nimport objectToString from './_objectToString.js';\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nexport default baseGetTag;\n","/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nexport default overArg;\n","import overArg from './_overArg.js';\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nexport default getPrototype;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nexport default isObjectLike;\n","import baseGetTag from './_baseGetTag.js';\nimport getPrototype from './_getPrototype.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nexport default isPlainObject;\n","/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nexport default listCacheClear;\n","/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nexport default eq;\n","import eq from './eq.js';\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nexport default assocIndexOf;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nexport default listCacheDelete;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nexport default listCacheGet;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nexport default listCacheHas;\n","import assocIndexOf from './_assocIndexOf.js';\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nexport default listCacheSet;\n","import listCacheClear from './_listCacheClear.js';\nimport listCacheDelete from './_listCacheDelete.js';\nimport listCacheGet from './_listCacheGet.js';\nimport listCacheHas from './_listCacheHas.js';\nimport listCacheSet from './_listCacheSet.js';\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nexport default ListCache;\n","import ListCache from './_ListCache.js';\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nexport default stackClear;\n","/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nexport default stackDelete;\n","/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nexport default stackGet;\n","/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nexport default stackHas;\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nexport default isObject;\n","import baseGetTag from './_baseGetTag.js';\nimport isObject from './isObject.js';\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nexport default isFunction;\n","import root from './_root.js';\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nexport default coreJsData;\n","import coreJsData from './_coreJsData.js';\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nexport default isMasked;\n","/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nexport default toSource;\n","import isFunction from './isFunction.js';\nimport isMasked from './_isMasked.js';\nimport isObject from './isObject.js';\nimport toSource from './_toSource.js';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nexport default baseIsNative;\n","/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nexport default getValue;\n","import baseIsNative from './_baseIsNative.js';\nimport getValue from './_getValue.js';\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nexport default getNative;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nexport default Map;\n","import getNative from './_getNative.js';\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nexport default nativeCreate;\n","import nativeCreate from './_nativeCreate.js';\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nexport default hashClear;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default hashDelete;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nexport default hashGet;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nexport default hashHas;\n","import nativeCreate from './_nativeCreate.js';\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nexport default hashSet;\n","import hashClear from './_hashClear.js';\nimport hashDelete from './_hashDelete.js';\nimport hashGet from './_hashGet.js';\nimport hashHas from './_hashHas.js';\nimport hashSet from './_hashSet.js';\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nexport default Hash;\n","import Hash from './_Hash.js';\nimport ListCache from './_ListCache.js';\nimport Map from './_Map.js';\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nexport default mapCacheClear;\n","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nexport default isKeyable;\n","import isKeyable from './_isKeyable.js';\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nexport default getMapData;\n","import getMapData from './_getMapData.js';\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nexport default mapCacheDelete;\n","import getMapData from './_getMapData.js';\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nexport default mapCacheGet;\n","import getMapData from './_getMapData.js';\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nexport default mapCacheHas;\n","import getMapData from './_getMapData.js';\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nexport default mapCacheSet;\n","import mapCacheClear from './_mapCacheClear.js';\nimport mapCacheDelete from './_mapCacheDelete.js';\nimport mapCacheGet from './_mapCacheGet.js';\nimport mapCacheHas from './_mapCacheHas.js';\nimport mapCacheSet from './_mapCacheSet.js';\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nexport default MapCache;\n","import ListCache from './_ListCache.js';\nimport Map from './_Map.js';\nimport MapCache from './_MapCache.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nexport default stackSet;\n","import ListCache from './_ListCache.js';\nimport stackClear from './_stackClear.js';\nimport stackDelete from './_stackDelete.js';\nimport stackGet from './_stackGet.js';\nimport stackHas from './_stackHas.js';\nimport stackSet from './_stackSet.js';\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nexport default Stack;\n","/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\nexport default arrayEach;\n","import getNative from './_getNative.js';\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nexport default defineProperty;\n","import defineProperty from './_defineProperty.js';\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nexport default baseAssignValue;\n","import baseAssignValue from './_baseAssignValue.js';\nimport eq from './eq.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nexport default assignValue;\n","import assignValue from './_assignValue.js';\nimport baseAssignValue from './_baseAssignValue.js';\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nexport default copyObject;\n","/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nexport default baseTimes;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nexport default baseIsArguments;\n","import baseIsArguments from './_baseIsArguments.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nexport default isArguments;\n","/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nexport default isArray;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nexport default isIndex;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nexport default isLength;\n","import baseGetTag from './_baseGetTag.js';\nimport isLength from './isLength.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nexport default baseIsTypedArray;\n","/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nexport default baseUnary;\n","import baseIsTypedArray from './_baseIsTypedArray.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nexport default isTypedArray;\n","import baseTimes from './_baseTimes.js';\nimport isArguments from './isArguments.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isIndex from './_isIndex.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default arrayLikeKeys;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nexport default isPrototype;\n","import overArg from './_overArg.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nexport default nativeKeys;\n","import isPrototype from './_isPrototype.js';\nimport nativeKeys from './_nativeKeys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeys;\n","import isFunction from './isFunction.js';\nimport isLength from './isLength.js';\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nexport default isArrayLike;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeys from './_baseKeys.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nexport default keys;\n","import copyObject from './_copyObject.js';\nimport keys from './keys.js';\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\nexport default baseAssign;\n","/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default nativeKeysIn;\n","import isObject from './isObject.js';\nimport isPrototype from './_isPrototype.js';\nimport nativeKeysIn from './_nativeKeysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nexport default baseKeysIn;\n","import arrayLikeKeys from './_arrayLikeKeys.js';\nimport baseKeysIn from './_baseKeysIn.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nexport default keysIn;\n","import copyObject from './_copyObject.js';\nimport keysIn from './keysIn.js';\n\n/**\n * The base implementation of `_.assignIn` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssignIn(object, source) {\n  return object && copyObject(source, keysIn(source), object);\n}\n\nexport default baseAssignIn;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nexport default copyArray;\n","/**\n * A specialized version of `_.filter` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nfunction arrayFilter(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (predicate(value, index, array)) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default arrayFilter;\n","/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\nexport default stubArray;\n","import arrayFilter from './_arrayFilter.js';\nimport stubArray from './stubArray.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n  if (object == null) {\n    return [];\n  }\n  object = Object(object);\n  return arrayFilter(nativeGetSymbols(object), function(symbol) {\n    return propertyIsEnumerable.call(object, symbol);\n  });\n};\n\nexport default getSymbols;\n","import copyObject from './_copyObject.js';\nimport getSymbols from './_getSymbols.js';\n\n/**\n * Copies own symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\nexport default copySymbols;\n","/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nexport default arrayPush;\n","import arrayPush from './_arrayPush.js';\nimport getPrototype from './_getPrototype.js';\nimport getSymbols from './_getSymbols.js';\nimport stubArray from './stubArray.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nexport default getSymbolsIn;\n","import copyObject from './_copyObject.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\n\n/**\n * Copies own and inherited symbols of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbolsIn(source, object) {\n  return copyObject(source, getSymbolsIn(source), object);\n}\n\nexport default copySymbolsIn;\n","import arrayPush from './_arrayPush.js';\nimport isArray from './isArray.js';\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\nexport default baseGetAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbols from './_getSymbols.js';\nimport keys from './keys.js';\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\nexport default getAllKeys;\n","import baseGetAllKeys from './_baseGetAllKeys.js';\nimport getSymbolsIn from './_getSymbolsIn.js';\nimport keysIn from './keysIn.js';\n\n/**\n * Creates an array of own and inherited enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeysIn(object) {\n  return baseGetAllKeys(object, keysIn, getSymbolsIn);\n}\n\nexport default getAllKeysIn;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nexport default DataView;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nexport default Promise;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nexport default Set;\n","import getNative from './_getNative.js';\nimport root from './_root.js';\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nexport default WeakMap;\n","import DataView from './_DataView.js';\nimport Map from './_Map.js';\nimport Promise from './_Promise.js';\nimport Set from './_Set.js';\nimport WeakMap from './_WeakMap.js';\nimport baseGetTag from './_baseGetTag.js';\nimport toSource from './_toSource.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    setTag = '[object Set]',\n    weakMapTag = '[object WeakMap]';\n\nvar dataViewTag = '[object DataView]';\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = baseGetTag(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : '';\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\nexport default getTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = new array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\nexport default initCloneArray;\n","import root from './_root.js';\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nexport default Uint8Array;\n","import Uint8Array from './_Uint8Array.js';\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nexport default cloneArrayBuffer;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nexport default cloneDataView;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nexport default cloneRegExp;\n","import Symbol from './_Symbol.js';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nexport default cloneSymbol;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nexport default cloneTypedArray;\n","import cloneArrayBuffer from './_cloneArrayBuffer.js';\nimport cloneDataView from './_cloneDataView.js';\nimport cloneRegExp from './_cloneRegExp.js';\nimport cloneSymbol from './_cloneSymbol.js';\nimport cloneTypedArray from './_cloneTypedArray.js';\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return new Ctor;\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return new Ctor;\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nexport default initCloneByTag;\n","import isObject from './isObject.js';\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nexport default baseCreate;\n","import baseCreate from './_baseCreate.js';\nimport getPrototype from './_getPrototype.js';\nimport isPrototype from './_isPrototype.js';\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nexport default initCloneObject;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nexport default baseIsMap;\n","import baseIsMap from './_baseIsMap.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsMap = nodeUtil && nodeUtil.isMap;\n\n/**\n * Checks if `value` is classified as a `Map` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n * @example\n *\n * _.isMap(new Map);\n * // => true\n *\n * _.isMap(new WeakMap);\n * // => false\n */\nvar isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;\n\nexport default isMap;\n","import getTag from './_getTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nexport default baseIsSet;\n","import baseIsSet from './_baseIsSet.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsSet = nodeUtil && nodeUtil.isSet;\n\n/**\n * Checks if `value` is classified as a `Set` object.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n * @example\n *\n * _.isSet(new Set);\n * // => true\n *\n * _.isSet(new WeakSet);\n * // => false\n */\nvar isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;\n\nexport default isSet;\n","import Stack from './_Stack.js';\nimport arrayEach from './_arrayEach.js';\nimport assignValue from './_assignValue.js';\nimport baseAssign from './_baseAssign.js';\nimport baseAssignIn from './_baseAssignIn.js';\nimport cloneBuffer from './_cloneBuffer.js';\nimport copyArray from './_copyArray.js';\nimport copySymbols from './_copySymbols.js';\nimport copySymbolsIn from './_copySymbolsIn.js';\nimport getAllKeys from './_getAllKeys.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\nimport getTag from './_getTag.js';\nimport initCloneArray from './_initCloneArray.js';\nimport initCloneByTag from './_initCloneByTag.js';\nimport initCloneObject from './_initCloneObject.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isMap from './isMap.js';\nimport isObject from './isObject.js';\nimport isSet from './isSet.js';\nimport keys from './keys.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nexport default baseClone;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.cloneWith` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @param {Function} [customizer] The function to customize cloning.\n * @returns {*} Returns the deep cloned value.\n * @see _.cloneWith\n * @example\n *\n * function customizer(value) {\n *   if (_.isElement(value)) {\n *     return value.cloneNode(true);\n *   }\n * }\n *\n * var el = _.cloneDeepWith(document.body, customizer);\n *\n * console.log(el === document.body);\n * // => false\n * console.log(el.nodeName);\n * // => 'BODY'\n * console.log(el.childNodes.length);\n * // => 20\n */\nfunction cloneDeepWith(value, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);\n}\n\nexport default cloneDeepWith;\n","import isObjectLike from './isObjectLike.js';\nimport isPlainObject from './isPlainObject.js';\n\n/**\n * Checks if `value` is likely a DOM element.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.\n * @example\n *\n * _.isElement(document.body);\n * // => true\n *\n * _.isElement('<body>');\n * // => false\n */\nfunction isElement(value) {\n  return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);\n}\n\nexport default isElement;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/config\n */\nimport { isPlainObject, isElement, cloneDeepWith } from 'lodash-es';\n/**\n * Handles a configuration dictionary.\n */\n\nexport default class Config {\n  /**\n   * Creates an instance of the {@link ~Config} class.\n   *\n   * @param {Object} [configurations] The initial configurations to be set. Usually, provided by the user.\n   * @param {Object} [defaultConfigurations] The default configurations. Usually, provided by the system.\n   */\n  constructor(configurations, defaultConfigurations) {\n    /**\n     * Store for the whole configuration.\n     *\n     * @private\n     * @member {Object}\n     */\n    this._config = {}; // Set default configuration.\n\n    if (defaultConfigurations) {\n      this.define(defaultConfigurations);\n    } // Set initial configuration.\n\n\n    if (configurations) {\n      this._setObjectToTarget(this._config, configurations);\n    }\n  }\n  /**\n   * Set configuration values.\n   *\n   * It accepts both a name/value pair or an object, which properties and values will be used to set\n   * configurations.\n   *\n   * It also accepts setting a \"deep configuration\" by using dots in the name. For example, `'resize.width'` sets\n   * the value for the `width` configuration in the `resize` subset.\n   *\n   *\t\tconfig.set( 'width', 500 );\n   *\t\tconfig.set( 'toolbar.collapsed', true );\n   *\n   *\t\t// Equivalent to:\n   *\t\tconfig.set( {\n   *\t\t\twidth: 500\n   *\t\t\ttoolbar: {\n   *\t\t\t\tcollapsed: true\n   *\t\t\t}\n   *\t\t} );\n   *\n   * Passing an object as the value will amend the configuration, not replace it.\n   *\n   *\t\tconfig.set( 'toolbar', {\n   *\t\t\tcollapsed: true,\n   *\t\t} );\n   *\n   *\t\tconfig.set( 'toolbar', {\n   *\t\t\tcolor: 'red',\n   *\t\t} );\n   *\n   *\t\tconfig.get( 'toolbar.collapsed' ); // true\n   *\t\tconfig.get( 'toolbar.color' ); // 'red'\n   *\n   * @param {String|Object} name The configuration name or an object from which take properties as\n   * configuration entries. Configuration names are case-sensitive.\n   * @param {*} value The configuration value. Used if a name is passed.\n   */\n\n\n  set(name, value) {\n    this._setToTarget(this._config, name, value);\n  }\n  /**\n   * Does exactly the same as {@link #set} with one exception – passed configuration extends\n   * existing one, but does not overwrite already defined values.\n   *\n   * This method is supposed to be called by plugin developers to setup plugin's configurations. It would be\n   * rarely used for other needs.\n   *\n   * @param {String|Object} name The configuration name or an object from which take properties as\n   * configuration entries. Configuration names are case-sensitive.\n   * @param {*} value The configuration value. Used if a name is passed.\n   */\n\n\n  define(name, value) {\n    const isDefine = true;\n\n    this._setToTarget(this._config, name, value, isDefine);\n  }\n  /**\n   * Gets the value for a configuration entry.\n   *\n   *\t\tconfig.get( 'name' );\n   *\n   * Deep configurations can be retrieved by separating each part with a dot.\n   *\n   *\t\tconfig.get( 'toolbar.collapsed' );\n   *\n   * @param {String} name The configuration name. Configuration names are case-sensitive.\n   * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n   */\n\n\n  get(name) {\n    return this._getFromSource(this._config, name);\n  }\n  /**\n   * Saves passed configuration to the specified target (nested object).\n   *\n   * @private\n   * @param {Object} target Nested config object.\n   * @param {String|Object} name The configuration name or an object from which take properties as\n   * configuration entries. Configuration names are case-sensitive.\n   * @param {*} value The configuration value. Used if a name is passed.\n   * @param {Boolean} [isDefine=false] Define if passed configuration should overwrite existing one.\n   */\n\n\n  _setToTarget(target, name, value, isDefine = false) {\n    // In case of an object, iterate through it and call `_setToTarget` again for each property.\n    if (isPlainObject(name)) {\n      this._setObjectToTarget(target, name, isDefine);\n\n      return;\n    } // The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n\n\n    const parts = name.split('.'); // Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\n    name = parts.pop(); // Iterate over parts to check if currently stored configuration has proper structure.\n\n    for (const part of parts) {\n      // If there is no object for specified part then create one.\n      if (!isPlainObject(target[part])) {\n        target[part] = {};\n      } // Nested object becomes a target.\n\n\n      target = target[part];\n    } // In case of value is an object.\n\n\n    if (isPlainObject(value)) {\n      // We take care of proper config structure.\n      if (!isPlainObject(target[name])) {\n        target[name] = {};\n      }\n\n      target = target[name]; // And iterate through this object calling `_setToTarget` again for each property.\n\n      this._setObjectToTarget(target, value, isDefine);\n\n      return;\n    } // Do nothing if we are defining configuration for non empty name.\n\n\n    if (isDefine && typeof target[name] != 'undefined') {\n      return;\n    }\n\n    target[name] = value;\n  }\n  /**\n   * Get specified configuration from specified source (nested object).\n   *\n   * @private\n   * @param {Object} source level of nested object.\n   * @param {String} name The configuration name. Configuration names are case-sensitive.\n   * @returns {*} The configuration value or `undefined` if the configuration entry was not found.\n   */\n\n\n  _getFromSource(source, name) {\n    // The configuration name should be split into parts if it has dots. E.g. `resize.width` -> [`resize`, `width`].\n    const parts = name.split('.'); // Take the name of the configuration out of the parts. E.g. `resize.width` -> `width`.\n\n    name = parts.pop(); // Iterate over parts to check if currently stored configuration has proper structure.\n\n    for (const part of parts) {\n      if (!isPlainObject(source[part])) {\n        source = null;\n        break;\n      } // Nested object becomes a source.\n\n\n      source = source[part];\n    } // Always returns undefined for non existing configuration.\n\n\n    return source ? cloneConfig(source[name]) : undefined;\n  }\n  /**\n   * Iterates through passed object and calls {@link #_setToTarget} method with object key and value for each property.\n   *\n   * @private\n   * @param {Object} target Nested config object.\n   * @param {Object} configuration Configuration data set\n   * @param {Boolean} [isDefine] Defines if passed configuration is default configuration or not.\n   */\n\n\n  _setObjectToTarget(target, configuration, isDefine) {\n    Object.keys(configuration).forEach(key => {\n      this._setToTarget(target, key, configuration[key], isDefine);\n    });\n  }\n\n} // Clones configuration object or value.\n// @param {*} source Source configuration\n// @returns {*} Cloned configuration value.\n\nfunction cloneConfig(source) {\n  return cloneDeepWith(source, leaveDOMReferences);\n} // A customizer function for cloneDeepWith.\n// It will leave references to DOM Elements instead of cloning them.\n//\n// @param {*} value\n// @returns {Element|undefined}\n\n\nfunction leaveDOMReferences(value) {\n  return isElement(value) ? value : undefined;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/spy\n */\n\n/**\n * Creates a spy function (ala Sinon.js) that can be used to inspect call to it.\n *\n * The following are the present features:\n *\n * * spy.called: property set to `true` if the function has been called at least once.\n *\n * @returns {Function} The spy function.\n */\nfunction spy() {\n  return function spy() {\n    spy.called = true;\n  };\n}\n\nexport default spy;","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/eventinfo\n */\nimport spy from './spy';\n/**\n * The event object passed to event callbacks. It is used to provide information about the event as well as a tool to\n * manipulate it.\n */\n\nexport default class EventInfo {\n  /**\n   * @param {Object} source The emitter.\n   * @param {String} name The event name.\n   */\n  constructor(source, name) {\n    /**\n     * The object that fired the event.\n     *\n     * @readonly\n     * @member {Object}\n     */\n    this.source = source;\n    /**\n     * The event name.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.name = name;\n    /**\n     * Path this event has followed. See {@link module:utils/emittermixin~EmitterMixin#delegate}.\n     *\n     * @readonly\n     * @member {Array.<Object>}\n     */\n\n    this.path = []; // The following methods are defined in the constructor because they must be re-created per instance.\n\n    /**\n     * Stops the event emitter to call further callbacks for this event interaction.\n     *\n     * @method #stop\n     */\n\n    this.stop = spy();\n    /**\n     * Removes the current callback from future interactions of this event.\n     *\n     * @method #off\n     */\n\n    this.off = spy();\n    /**\n     * The value which will be returned by {@link module:utils/emittermixin~EmitterMixin#fire}.\n     *\n     * It's `undefined` by default and can be changed by an event listener:\n     *\n     *\t\tdataController.fire( 'getSelectedContent', ( evt ) => {\n     *\t\t\t// This listener will make `dataController.fire( 'getSelectedContent' )`\n     *\t\t\t// always return an empty DocumentFragment.\n     *\t\t\tevt.return = new DocumentFragment();\n     *\n     *\t\t\t// Make sure no other listeners are executed.\n     *\t\t\tevt.stop();\n     *\t\t} );\n     *\n     * @member #return\n     */\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/uid\n */\n\n/**\n * Returns a unique id. This id consist of an 'e' character and a randomly generated string of 32 aphanumeric characters.\n * Each character in uid string represents a hexadecimal digit (base 16).\n *\n * @returns {String} A hexadecimal number representing the id.\n */\nexport default function uid() {\n  let uuid = 'e'; // Make sure that id does not start with number.\n\n  for (let i = 0; i < 8; i++) {\n    uuid += Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  return uuid;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/priorities\n */\n\n/**\n * String representing a priority value.\n *\n * @typedef {'highest'|'high'|'normal'|'low'|'lowest'} module:utils/priorities~PriorityString\n */\n\n/**\n * Provides group of constants to use instead of hardcoding numeric priority values.\n *\n * @namespace\n */\nconst priorities = {\n  /**\n   * Converts a string with priority name to it's numeric value. If `Number` is given, it just returns it.\n   *\n   * @static\n   * @param {module:utils/priorities~PriorityString|Number} priority Priority to convert.\n   * @returns {Number} Converted priority.\n   */\n  get(priority) {\n    if (typeof priority != 'number') {\n      return this[priority] || this.normal;\n    } else {\n      return priority;\n    }\n  },\n\n  highest: 100000,\n  high: 1000,\n  normal: 0,\n  low: -1000,\n  lowest: -100000\n};\nexport default priorities;","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/emittermixin\n */\nimport EventInfo from './eventinfo';\nimport uid from './uid';\nimport priorities from './priorities'; // To check if component is loaded more than once.\n\nimport './version';\nimport CKEditorError from './ckeditorerror';\n\nconst _listeningTo = Symbol('listeningTo');\n\nconst _emitterId = Symbol('emitterId');\n/**\n * Mixin that injects the {@link ~Emitter events API} into its host.\n *\n * @mixin EmitterMixin\n * @implements module:utils/emittermixin~Emitter\n */\n\n\nconst EmitterMixin = {\n  /**\n   * @inheritDoc\n   */\n  on(event, callback, options = {}) {\n    this.listenTo(this, event, callback, options);\n  },\n\n  /**\n   * @inheritDoc\n   */\n  once(event, callback, options) {\n    let wasFired = false;\n\n    const onceCallback = function (event, ...args) {\n      // Ensure the callback is called only once even if the callback itself leads to re-firing the event\n      // (which would call the callback again).\n      if (!wasFired) {\n        wasFired = true; // Go off() at the first call.\n\n        event.off(); // Go with the original callback.\n\n        callback.call(this, event, ...args);\n      }\n    }; // Make a similar on() call, simply replacing the callback.\n\n\n    this.listenTo(this, event, onceCallback, options);\n  },\n\n  /**\n   * @inheritDoc\n   */\n  off(event, callback) {\n    this.stopListening(this, event, callback);\n  },\n\n  /**\n   * @inheritDoc\n   */\n  listenTo(emitter, event, callback, options = {}) {\n    let emitterInfo, eventCallbacks; // _listeningTo contains a list of emitters that this object is listening to.\n    // This list has the following format:\n    //\n    // _listeningTo: {\n    //     emitterId: {\n    //         emitter: emitter,\n    //         callbacks: {\n    //             event1: [ callback1, callback2, ... ]\n    //             ....\n    //         }\n    //     },\n    //     ...\n    // }\n\n    if (!this[_listeningTo]) {\n      this[_listeningTo] = {};\n    }\n\n    const emitters = this[_listeningTo];\n\n    if (!_getEmitterId(emitter)) {\n      _setEmitterId(emitter);\n    }\n\n    const emitterId = _getEmitterId(emitter);\n\n    if (!(emitterInfo = emitters[emitterId])) {\n      emitterInfo = emitters[emitterId] = {\n        emitter,\n        callbacks: {}\n      };\n    }\n\n    if (!(eventCallbacks = emitterInfo.callbacks[event])) {\n      eventCallbacks = emitterInfo.callbacks[event] = [];\n    }\n\n    eventCallbacks.push(callback); // Finally register the callback to the event.\n\n    createEventNamespace(emitter, event);\n    const lists = getCallbacksListsForNamespace(emitter, event);\n    const priority = priorities.get(options.priority);\n    const callbackDefinition = {\n      callback,\n      priority\n    }; // Add the callback to all callbacks list.\n\n    for (const callbacks of lists) {\n      // Add the callback to the list in the right priority position.\n      let added = false;\n\n      for (let i = 0; i < callbacks.length; i++) {\n        if (callbacks[i].priority < priority) {\n          callbacks.splice(i, 0, callbackDefinition);\n          added = true;\n          break;\n        }\n      } // Add at the end, if right place was not found.\n\n\n      if (!added) {\n        callbacks.push(callbackDefinition);\n      }\n    }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  stopListening(emitter, event, callback) {\n    const emitters = this[_listeningTo];\n\n    let emitterId = emitter && _getEmitterId(emitter);\n\n    const emitterInfo = emitters && emitterId && emitters[emitterId];\n    const eventCallbacks = emitterInfo && event && emitterInfo.callbacks[event]; // Stop if nothing has been listened.\n\n    if (!emitters || emitter && !emitterInfo || event && !eventCallbacks) {\n      return;\n    } // All params provided. off() that single callback.\n\n\n    if (callback) {\n      removeCallback(emitter, event, callback);\n    } // Only `emitter` and `event` provided. off() all callbacks for that event.\n    else if (eventCallbacks) {\n        while (callback = eventCallbacks.pop()) {\n          removeCallback(emitter, event, callback);\n        }\n\n        delete emitterInfo.callbacks[event];\n      } // Only `emitter` provided. off() all events for that emitter.\n      else if (emitterInfo) {\n          for (event in emitterInfo.callbacks) {\n            this.stopListening(emitter, event);\n          }\n\n          delete emitters[emitterId];\n        } // No params provided. off() all emitters.\n        else {\n            for (emitterId in emitters) {\n              this.stopListening(emitters[emitterId].emitter);\n            }\n\n            delete this[_listeningTo];\n          }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  fire(eventOrInfo, ...args) {\n    try {\n      const eventInfo = eventOrInfo instanceof EventInfo ? eventOrInfo : new EventInfo(this, eventOrInfo);\n      const event = eventInfo.name;\n      let callbacks = getCallbacksForEvent(this, event); // Record that the event passed this emitter on its path.\n\n      eventInfo.path.push(this); // Handle event listener callbacks first.\n\n      if (callbacks) {\n        // Arguments passed to each callback.\n        const callbackArgs = [eventInfo, ...args]; // Copying callbacks array is the easiest and most secure way of preventing infinite loops, when event callbacks\n        // are added while processing other callbacks. Previous solution involved adding counters (unique ids) but\n        // failed if callbacks were added to the queue before currently processed callback.\n        // If this proves to be too inefficient, another method is to change `.on()` so callbacks are stored if same\n        // event is currently processed. Then, `.fire()` at the end, would have to add all stored events.\n\n        callbacks = Array.from(callbacks);\n\n        for (let i = 0; i < callbacks.length; i++) {\n          callbacks[i].callback.apply(this, callbackArgs); // Remove the callback from future requests if off() has been called.\n\n          if (eventInfo.off.called) {\n            // Remove the called mark for the next calls.\n            delete eventInfo.off.called;\n            removeCallback(this, event, callbacks[i].callback);\n          } // Do not execute next callbacks if stop() was called.\n\n\n          if (eventInfo.stop.called) {\n            break;\n          }\n        }\n      } // Delegate event to other emitters if needed.\n\n\n      if (this._delegations) {\n        const destinations = this._delegations.get(event);\n\n        const passAllDestinations = this._delegations.get('*');\n\n        if (destinations) {\n          fireDelegatedEvents(destinations, eventInfo, args);\n        }\n\n        if (passAllDestinations) {\n          fireDelegatedEvents(passAllDestinations, eventInfo, args);\n        }\n      }\n\n      return eventInfo.return;\n    } catch (err) {\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  delegate(...events) {\n    return {\n      to: (emitter, nameOrFunction) => {\n        if (!this._delegations) {\n          this._delegations = new Map();\n        } // Originally there was a for..of loop which unfortunately caused an error in Babel that didn't allow\n        // build an application. See: https://github.com/ckeditor/ckeditor5-react/issues/40.\n\n\n        events.forEach(eventName => {\n          const destinations = this._delegations.get(eventName);\n\n          if (!destinations) {\n            this._delegations.set(eventName, new Map([[emitter, nameOrFunction]]));\n          } else {\n            destinations.set(emitter, nameOrFunction);\n          }\n        });\n      }\n    };\n  },\n\n  /**\n   * @inheritDoc\n   */\n  stopDelegating(event, emitter) {\n    if (!this._delegations) {\n      return;\n    }\n\n    if (!event) {\n      this._delegations.clear();\n    } else if (!emitter) {\n      this._delegations.delete(event);\n    } else {\n      const destinations = this._delegations.get(event);\n\n      if (destinations) {\n        destinations.delete(emitter);\n      }\n    }\n  }\n\n};\nexport default EmitterMixin;\n/**\n * Emitter/listener interface.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/emittermixin~EmitterMixin} mixin.\n *\n * @interface Emitter\n */\n\n/**\n * Registers a callback function to be executed when an event is fired.\n *\n * Shorthand for {@link #listenTo `this.listenTo( this, event, callback, options )`} (it makes the emitter\n * listen on itself).\n *\n * @method #on\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Registers a callback function to be executed on the next time the event is fired only. This is similar to\n * calling {@link #on} followed by {@link #off} in the callback.\n *\n * @method #once\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops executing the callback on the given event.\n * Shorthand for {@link #stopListening `this.stopListening( this, event, callback )`}.\n *\n * @method #off\n * @param {String} event The name of the event.\n * @param {Function} callback The function to stop being called.\n */\n\n/**\n * Registers a callback function to be executed when an event is fired in a specific (emitter) object.\n *\n * Events can be grouped in namespaces using `:`.\n * When namespaced event is fired, it additionally fires all callbacks for that namespace.\n *\n *\t\t// myEmitter.on( ... ) is a shorthand for myEmitter.listenTo( myEmitter, ... ).\n *\t\tmyEmitter.on( 'myGroup', genericCallback );\n *\t\tmyEmitter.on( 'myGroup:myEvent', specificCallback );\n *\n *\t\t// genericCallback is fired.\n *\t\tmyEmitter.fire( 'myGroup' );\n *\t\t// both genericCallback and specificCallback are fired.\n *\t\tmyEmitter.fire( 'myGroup:myEvent' );\n *\t\t// genericCallback is fired even though there are no callbacks for \"foo\".\n *\t\tmyEmitter.fire( 'myGroup:foo' );\n *\n * An event callback can {@link module:utils/eventinfo~EventInfo#stop stop the event} and\n * set the {@link module:utils/eventinfo~EventInfo#return return value} of the {@link #fire} method.\n *\n * @method #listenTo\n * @param {module:utils/emittermixin~Emitter} emitter The object that fires the event.\n * @param {String} event The name of the event.\n * @param {Function} callback The function to be called on event.\n * @param {Object} [options={}] Additional options.\n * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n * order they were added.\n */\n\n/**\n * Stops listening for events. It can be used at different levels:\n *\n * * To stop listening to a specific callback.\n * * To stop listening to a specific event.\n * * To stop listening to all events fired by a specific object.\n * * To stop listening to all events fired by all objects.\n *\n * @method #stopListening\n * @param {module:utils/emittermixin~Emitter} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n * for all events from `emitter`.\n * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n * `event`.\n */\n\n/**\n * Fires an event, executing all callbacks registered for it.\n *\n * The first parameter passed to callbacks is an {@link module:utils/eventinfo~EventInfo} object,\n * followed by the optional `args` provided in the `fire()` method call.\n *\n * @method #fire\n * @param {String|module:utils/eventinfo~EventInfo} eventOrInfo The name of the event or `EventInfo` object if event is delegated.\n * @param {...*} [args] Additional arguments to be passed to the callbacks.\n * @returns {*} By default the method returns `undefined`. However, the return value can be changed by listeners\n * through modification of the {@link module:utils/eventinfo~EventInfo#return `evt.return`}'s property (the event info\n * is the first param of every callback).\n */\n\n/**\n * Delegates selected events to another {@link module:utils/emittermixin~Emitter}. For instance:\n *\n *\t\temitterA.delegate( 'eventX' ).to( emitterB );\n *\t\temitterA.delegate( 'eventX', 'eventY' ).to( emitterC );\n *\n * then `eventX` is delegated (fired by) `emitterB` and `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventX', data );\n *\n * and `eventY` is delegated (fired by) `emitterC` along with `data`:\n *\n *\t\temitterA.fire( 'eventY', data );\n *\n * @method #delegate\n * @param {...String} events Event names that will be delegated to another emitter.\n * @returns {module:utils/emittermixin~EmitterMixinDelegateChain}\n */\n\n/**\n * Stops delegating events. It can be used at different levels:\n *\n * * To stop delegating all events.\n * * To stop delegating a specific event to all emitters.\n * * To stop delegating a specific event to a specific emitter.\n *\n * @method #stopDelegating\n * @param {String} [event] The name of the event to stop delegating. If omitted, stops it all delegations.\n * @param {module:utils/emittermixin~Emitter} [emitter] (requires `event`) The object to stop delegating a particular event to.\n * If omitted, stops delegation of `event` to all emitters.\n */\n\n/**\n * Checks if `listeningEmitter` listens to an emitter with given `listenedToEmitterId` and if so, returns that emitter.\n * If not, returns `null`.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} listeningEmitter An emitter that listens.\n * @param {String} listenedToEmitterId Unique emitter id of emitter listened to.\n * @returns {module:utils/emittermixin~Emitter|null}\n */\n\nexport function _getEmitterListenedTo(listeningEmitter, listenedToEmitterId) {\n  if (listeningEmitter[_listeningTo] && listeningEmitter[_listeningTo][listenedToEmitterId]) {\n    return listeningEmitter[_listeningTo][listenedToEmitterId].emitter;\n  }\n\n  return null;\n}\n/**\n * Sets emitter's unique id.\n *\n * **Note:** `_emitterId` can be set only once.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter for which id will be set.\n * @param {String} [id] Unique id to set. If not passed, random unique id will be set.\n */\n\nexport function _setEmitterId(emitter, id) {\n  if (!emitter[_emitterId]) {\n    emitter[_emitterId] = id || uid();\n  }\n}\n/**\n * Returns emitter's unique id.\n *\n * @protected\n * @param {module:utils/emittermixin~Emitter} emitter An emitter which id will be returned.\n */\n\nexport function _getEmitterId(emitter) {\n  return emitter[_emitterId];\n} // Gets the internal `_events` property of the given object.\n// `_events` property store all lists with callbacks for registered event names.\n// If there were no events registered on the object, empty `_events` object is created.\n\nfunction getEvents(source) {\n  if (!source._events) {\n    Object.defineProperty(source, '_events', {\n      value: {}\n    });\n  }\n\n  return source._events;\n} // Creates event node for generic-specific events relation architecture.\n\n\nfunction makeEventNode() {\n  return {\n    callbacks: [],\n    childEvents: []\n  };\n} // Creates an architecture for generic-specific events relation.\n// If needed, creates all events for given eventName, i.e. if the first registered event\n// is foo:bar:abc, it will create foo:bar:abc, foo:bar and foo event and tie them together.\n// It also copies callbacks from more generic events to more specific events when\n// specific events are created.\n\n\nfunction createEventNamespace(source, eventName) {\n  const events = getEvents(source); // First, check if the event we want to add to the structure already exists.\n\n  if (events[eventName]) {\n    // If it exists, we don't have to do anything.\n    return;\n  } // In other case, we have to create the structure for the event.\n  // Note, that we might need to create intermediate events too.\n  // I.e. if foo:bar:abc is being registered and we only have foo in the structure,\n  // we need to also register foo:bar.\n  // Currently processed event name.\n\n\n  let name = eventName; // Name of the event that is a child event for currently processed event.\n\n  let childEventName = null; // Array containing all newly created specific events.\n\n  const newEventNodes = []; // While loop can't check for ':' index because we have to handle generic events too.\n  // In each loop, we truncate event name, going from the most specific name to the generic one.\n  // I.e. foo:bar:abc -> foo:bar -> foo.\n\n  while (name !== '') {\n    if (events[name]) {\n      // If the currently processed event name is already registered, we can be sure\n      // that it already has all the structure created, so we can break the loop here\n      // as no more events need to be registered.\n      break;\n    } // If this event is not yet registered, create a new object for it.\n\n\n    events[name] = makeEventNode(); // Add it to the array with newly created events.\n\n    newEventNodes.push(events[name]); // Add previously processed event name as a child of this event.\n\n    if (childEventName) {\n      events[name].childEvents.push(childEventName);\n    }\n\n    childEventName = name; // If `.lastIndexOf()` returns -1, `.substr()` will return '' which will break the loop.\n\n    name = name.substr(0, name.lastIndexOf(':'));\n  }\n\n  if (name !== '') {\n    // If name is not empty, we found an already registered event that was a parent of the\n    // event we wanted to register.\n    // Copy that event's callbacks to newly registered events.\n    for (const node of newEventNodes) {\n      node.callbacks = events[name].callbacks.slice();\n    } // Add last newly created event to the already registered event.\n\n\n    events[name].childEvents.push(childEventName);\n  }\n} // Gets an array containing callbacks list for a given event and it's more specific events.\n// I.e. if given event is foo:bar and there is also foo:bar:abc event registered, this will\n// return callback list of foo:bar and foo:bar:abc (but not foo).\n\n\nfunction getCallbacksListsForNamespace(source, eventName) {\n  const eventNode = getEvents(source)[eventName];\n\n  if (!eventNode) {\n    return [];\n  }\n\n  let callbacksLists = [eventNode.callbacks];\n\n  for (let i = 0; i < eventNode.childEvents.length; i++) {\n    const childCallbacksLists = getCallbacksListsForNamespace(source, eventNode.childEvents[i]);\n    callbacksLists = callbacksLists.concat(childCallbacksLists);\n  }\n\n  return callbacksLists;\n} // Get the list of callbacks for a given event, but only if there any callbacks have been registered.\n// If there are no callbacks registered for given event, it checks if this is a specific event and looks\n// for callbacks for it's more generic version.\n\n\nfunction getCallbacksForEvent(source, eventName) {\n  let event;\n\n  if (!source._events || !(event = source._events[eventName]) || !event.callbacks.length) {\n    // There are no callbacks registered for specified eventName.\n    // But this could be a specific-type event that is in a namespace.\n    if (eventName.indexOf(':') > -1) {\n      // If the eventName is specific, try to find callback lists for more generic event.\n      return getCallbacksForEvent(source, eventName.substr(0, eventName.lastIndexOf(':')));\n    } else {\n      // If this is a top-level generic event, return null;\n      return null;\n    }\n  }\n\n  return event.callbacks;\n} // Fires delegated events for given map of destinations.\n//\n// @private\n// * @param {Map.<utils.Emitter>} destinations A map containing\n// `[ {@link module:utils/emittermixin~Emitter}, \"event name\" ]` pair destinations.\n// * @param {utils.EventInfo} eventInfo The original event info object.\n// * @param {Array.<*>} fireArgs Arguments the original event was fired with.\n\n\nfunction fireDelegatedEvents(destinations, eventInfo, fireArgs) {\n  for (let [emitter, name] of destinations) {\n    if (!name) {\n      name = eventInfo.name;\n    } else if (typeof name == 'function') {\n      name = name(eventInfo.name);\n    }\n\n    const delegatedInfo = new EventInfo(eventInfo.source, name);\n    delegatedInfo.path = [...eventInfo.path];\n    emitter.fire(delegatedInfo, ...fireArgs);\n  }\n} // Removes callback from emitter for given event.\n//\n// @param {module:utils/emittermixin~Emitter} emitter\n// @param {String} event\n// @param {Function} callback\n\n\nfunction removeCallback(emitter, event, callback) {\n  const lists = getCallbacksListsForNamespace(emitter, event);\n\n  for (const callbacks of lists) {\n    for (let i = 0; i < callbacks.length; i++) {\n      if (callbacks[i].callback == callback) {\n        // Remove the callback from the list (fixing the next index).\n        callbacks.splice(i, 1);\n        i--;\n      }\n    }\n  }\n}\n/**\n * The return value of {@link ~EmitterMixin#delegate}.\n *\n * @interface module:utils/emittermixin~EmitterMixinDelegateChain\n */\n\n/**\n * Selects destination for {@link module:utils/emittermixin~EmitterMixin#delegate} events.\n *\n * @method #to\n * @param {module:utils/emittermixin~Emitter} emitter An `EmitterMixin` instance which is the destination for delegated events.\n * @param {String|Function} [nameOrFunction] A custom event name or function which converts the original name string.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/mix\n */\n\n/**\n * Copies enumerable properties and symbols from the objects given as 2nd+ parameters to the\n * prototype of first object (a constructor).\n *\n *\t\tclass Editor {\n *\t\t\t...\n *\t\t}\n *\n *\t\tconst SomeMixin = {\n *\t\t\ta() {\n *\t\t\t\treturn 'a';\n *\t\t\t}\n *\t\t};\n *\n *\t\tmix( Editor, SomeMixin, ... );\n *\n *\t\tnew Editor().a(); // -> 'a'\n *\n * Note: Properties which already exist in the base class will not be overriden.\n *\n * @param {Function} [baseClass] Class which prototype will be extended.\n * @param {Object} [...mixins] Objects from which to get properties.\n */\nexport default function mix(baseClass, ...mixins) {\n  mixins.forEach(mixin => {\n    Object.getOwnPropertyNames(mixin).concat(Object.getOwnPropertySymbols(mixin)).forEach(key => {\n      if (key in baseClass.prototype) {\n        return;\n      }\n\n      const sourceDescriptor = Object.getOwnPropertyDescriptor(mixin, key);\n      sourceDescriptor.enumerable = false;\n      Object.defineProperty(baseClass.prototype, key, sourceDescriptor);\n    });\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/comparearrays\n */\n\n/**\n * Compares how given arrays relate to each other. One array can be: same as another array, prefix of another array\n * or completely different. If arrays are different, first index at which they differ is returned. Otherwise,\n * a flag specifying the relation is returned. Flags are negative numbers, so whenever a number >= 0 is returned\n * it means that arrays differ.\n *\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2 ] );\t\t// 'same'\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 2, 1 ] );\t\t// 'prefix'\n *\t\tcompareArrays( [ 0, 2 ], [ 0 ] );\t\t\t// 'extension'\n *\t\tcompareArrays( [ 0, 2 ], [ 1, 2 ] );\t\t// 0\n *\t\tcompareArrays( [ 0, 2 ], [ 0, 1 ] );\t\t// 1\n *\n * @param {Array} a Array that is compared.\n * @param {Array} b Array to compare with.\n * @returns {module:utils/comparearrays~ArrayRelation} How array `a` is related to `b`.\n */\nexport default function compareArrays(a, b) {\n  const minLen = Math.min(a.length, b.length);\n\n  for (let i = 0; i < minLen; i++) {\n    if (a[i] != b[i]) {\n      // The arrays are different.\n      return i;\n    }\n  } // Both arrays were same at all points.\n\n\n  if (a.length == b.length) {\n    // If their length is also same, they are the same.\n    return 'same';\n  } else if (a.length < b.length) {\n    // Compared array is shorter so it is a prefix of the other array.\n    return 'prefix';\n  } else {\n    // Compared array is longer so it is an extension of the other array.\n    return 'extension';\n  }\n}\n/**\n * @typedef {'extension'|'same'|'prefix'} module:utils/comparearrays~ArrayRelation\n */","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/node\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { clone } from 'lodash-es'; // To check if component is loaded more than once.\n\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Abstract tree view node class.\n *\n * This is an abstract class. Its constructor should not be used directly.\n * Use the {@link module:engine/view/element~Element} class to create view elements\n * or {@link module:engine/view/text~Text} class to create view text nodes.\n *\n * @abstract\n */\n\nexport default class Node {\n  /**\n   * Creates a tree view node.\n   */\n  constructor() {\n    /**\n     * Parent element. Null by default. Set by {@link module:engine/view/element~Element#_insertChild}.\n     *\n     * @readonly\n     * @member {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n     */\n    this.parent = null;\n  }\n  /**\n   * Index of the node in the parent element or null if the node has no parent.\n   *\n   * Accessing this property throws an error if this node's parent element does not contain it.\n   * This means that view tree got broken.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n\n\n  get index() {\n    let pos;\n\n    if (!this.parent) {\n      return null;\n    } // No parent or child doesn't exist in parent's children.\n\n\n    if ((pos = this.parent.getChildIndex(this)) == -1) {\n      /**\n       * The node's parent does not contain this node. It means that the document tree is corrupted.\n       *\n       * @error view-node-not-found-in-parent\n       */\n      throw new CKEditorError('view-node-not-found-in-parent: The node\\'s parent does not contain this node.', this);\n    }\n\n    return pos;\n  }\n  /**\n   * Node's next sibling, or `null` if it is the last child.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|null}\n   */\n\n\n  get nextSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index + 1) || null;\n  }\n  /**\n   * Node's previous sibling, or `null` if it is the first child.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|null}\n   */\n\n\n  get previousSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index - 1) || null;\n  }\n  /**\n   * Top-most ancestor of the node. If the node has no parent it is the root itself.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    let root = this; // eslint-disable-line consistent-this\n\n    while (root.parent) {\n      root = root.parent;\n    }\n\n    return root;\n  }\n  /**\n   * {@link module:engine/view/document~Document View document} that owns this node, or `null` if the node is inside\n   * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n   *\n   * @readonly\n   * @type {module:engine/view/document~Document|null}\n   */\n\n\n  get document() {\n    // Parent might be Node, null or DocumentFragment.\n    if (this.parent instanceof Node) {\n      return this.parent.document;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Gets a path to the node. The path is an array containing indices of consecutive ancestors of this node,\n   * beginning from {@link module:engine/view/node~Node#root root}, down to this node's index.\n   *\n   *\t\tconst abc = downcastWriter.createText( 'abc' );\n   *\t\tconst foo = downcastWriter.createText( 'foo' );\n   *\t\tconst h1 = downcastWriter.createElement( 'h1', null, downcastWriter.createText( 'header' ) );\n   *\t\tconst p = downcastWriter.createElement( 'p', null, [ abc, foo ] );\n   *\t\tconst div = downcastWriter.createElement( 'div', null, [ h1, p ] );\n   *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n   *\t\th1.getPath(); // Returns [ 0 ].\n   *\t\tdiv.getPath(); // Returns [].\n   *\n   * @returns {Array.<Number>} The path.\n   */\n\n\n  getPath() {\n    const path = [];\n    let node = this; // eslint-disable-line consistent-this\n\n    while (node.parent) {\n      path.unshift(node.index);\n      node = node.parent;\n    }\n\n    return path;\n  }\n  /**\n   * Returns ancestors array of this node.\n   *\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n   * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n   * otherwise root element will be the first item in the array.\n   * @returns {Array} Array with ancestors.\n   */\n\n\n  getAncestors(options = {\n    includeSelf: false,\n    parentFirst: false\n  }) {\n    const ancestors = [];\n    let parent = options.includeSelf ? this : this.parent;\n\n    while (parent) {\n      ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n      parent = parent.parent;\n    }\n\n    return ancestors;\n  }\n  /**\n   * Returns a {@link module:engine/view/element~Element} or {@link module:engine/view/documentfragment~DocumentFragment}\n   * which is a common ancestor of both nodes.\n   *\n   * @param {module:engine/view/node~Node} node The second node.\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n   * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n   * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor(node, options = {}) {\n    const ancestorsA = this.getAncestors(options);\n    const ancestorsB = node.getAncestors(options);\n    let i = 0;\n\n    while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n      i++;\n    }\n\n    return i === 0 ? null : ancestorsA[i - 1];\n  }\n  /**\n   * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/view/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n\n\n  isBefore(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    } // Return `false` if it is impossible to compare nodes.\n\n\n    if (this.root !== node.root) {\n      return false;\n    }\n\n    const thisPath = this.getPath();\n    const nodePath = node.getPath();\n    const result = compareArrays(thisPath, nodePath);\n\n    switch (result) {\n      case 'prefix':\n        return true;\n\n      case 'extension':\n        return false;\n\n      default:\n        return thisPath[result] < nodePath[result];\n    }\n  }\n  /**\n   * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/view/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/view/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n\n\n  isAfter(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    } // Return `false` if it is impossible to compare nodes.\n\n\n    if (this.root !== node.root) {\n      return false;\n    } // In other cases, just check if the `node` is before, and return the opposite.\n\n\n    return !this.isBefore(node);\n  }\n  /**\n   * Removes node from parent.\n   *\n   * @protected\n   */\n\n\n  _remove() {\n    this.parent._removeChildren(this.index);\n  }\n  /**\n   * @protected\n   * @param {module:engine/view/document~ChangeType} type Type of the change.\n   * @param {module:engine/view/node~Node} node Changed node.\n   * @fires change\n   */\n\n\n  _fireChange(type, node) {\n    this.fire('change:' + type, node);\n\n    if (this.parent) {\n      this.parent._fireChange(type, node);\n    }\n  }\n  /**\n   * Custom toJSON method to solve child-parent circular dependencies.\n   *\n   * @returns {Object} Clone of this object with the parent property removed.\n   */\n\n\n  toJSON() {\n    const json = clone(this); // Due to circular references we need to remove parent reference.\n\n    delete json.parent;\n    return json;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   * This method is useful when processing view objects that are of unknown type. For example, a function\n   * may return a {@link module:engine/view/documentfragment~DocumentFragment} or a {@link module:engine/view/node~Node}\n   * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n   *\n   *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n   *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n   *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n   *\n   * Since this method is also available on a range of model objects, you can prefix the type of the object with\n   * `model:` or `view:` to check, for example, if this is the model's or view's element:\n   *\n   *\t\tviewElement.is( 'view:element' ); // -> true\n   *\t\tviewElement.is( 'model:element' ); // -> false\n   *\n   * By using this method it is also possible to check a name of an element:\n   *\n   *\t\timgElement.is( 'img' ); // -> true\n   *\t\timgElement.is( 'element', 'img' ); // -> same as above\n   *\t\timgElement.is( 'view:element', 'img' ); // -> same as above, but more precise\n   *\n   * The list of view objects which implement the `is()` method:\n   *\n   * * {@link module:engine/view/attributeelement~AttributeElement#is `AttributeElement#is()`}\n   * * {@link module:engine/view/containerelement~ContainerElement#is `ContainerElement#is()`}\n   * * {@link module:engine/view/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n   * * {@link module:engine/view/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n   * * {@link module:engine/view/editableelement~EditableElement#is `EditableElement#is()`}\n   * * {@link module:engine/view/element~Element#is `Element#is()`}\n   * * {@link module:engine/view/emptyelement~EmptyElement#is `EmptyElement#is()`}\n   * * {@link module:engine/view/node~Node#is `Node#is()`}\n   * * {@link module:engine/view/position~Position#is `Position#is()`}\n   * * {@link module:engine/view/range~Range#is `Range#is()`}\n   * * {@link module:engine/view/rooteditableelement~RootEditableElement#is `RootEditableElement#is()`}\n   * * {@link module:engine/view/selection~Selection#is `Selection#is()`}\n   * * {@link module:engine/view/text~Text#is `Text#is()`}\n   * * {@link module:engine/view/textproxy~TextProxy#is `TextProxy#is()`}\n   * * {@link module:engine/view/uielement~UIElement#is `UIElement#is()`}\n   *\n   * @method #is\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'node' || type == 'view:node';\n  }\n  /**\n   * Clones this node.\n   *\n   * @protected\n   * @method #_clone\n   * @returns {module:engine/view/node~Node} Clone of this node.\n   */\n\n  /**\n   * Checks if provided node is similar to this node.\n   *\n   * @method #isSimilar\n   * @returns {Boolean} True if nodes are similar.\n   */\n\n\n}\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} children changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:children\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when list of {@link module:engine/view/element~Element elements} attributes changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:attributes\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * Fired when {@link module:engine/view/text~Text text nodes} data changes.\n *\n * Change event is bubbled – it is fired on all ancestors.\n *\n * @event change:text\n * @param {module:engine/view/node~Node} changedNode\n */\n\n/**\n * @event change\n */\n\nmix(Node, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/text\n */\nimport Node from './node';\n/**\n * Tree view text node.\n *\n * The constructor of this class shouldn't be used directly. To create new Text instances\n * use the {@link module:engine/view/downcastwriter~DowncastWriter#createText `DowncastWriter#createText()`}\n * method when working on data downcasted from the model or the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createText `UpcastWriter#createText()`}\n * method when working on non-semantic views.\n *\n * @extends module:engine/view/node~Node\n */\n\nexport default class Text extends Node {\n  /**\n   * Creates a tree view text node.\n   *\n   * @protected\n   * @param {String} data The text's data.\n   */\n  constructor(data) {\n    super();\n    /**\n     * The text content.\n     *\n     * Setting the data fires the {@link module:engine/view/node~Node#event:change:text change event}.\n     *\n     * @protected\n     * @member {String} module:engine/view/text~Text#_textData\n     */\n\n    this._textData = data;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\ttext.is( 'text' ); // -> true\n   *\t\ttext.is( 'node' ); // -> true\n   *\t\ttext.is( 'view:text' ); // -> true\n   *\t\ttext.is( 'view:node' ); // -> true\n   *\n   *\t\ttext.is( 'model:text' ); // -> false\n   *\t\ttext.is( 'element' ); // -> false\n   *\t\ttext.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'text' || type == 'view:text' || super.is(type);\n  }\n  /**\n   * The text content.\n   *\n   * @readonly\n   * @type {String}\n   */\n\n\n  get data() {\n    return this._textData;\n  }\n  /**\n   * This getter is required when using the addition assignment operator on protected property:\n   *\n   *\t\tconst foo = downcastWriter.createText( 'foo' );\n   *\t\tconst bar = downcastWriter.createText( 'bar' );\n   *\n   *\t\tfoo._data += bar.data;   // executes: `foo._data = foo._data + bar.data`\n   *\t\tconsole.log( foo.data ); // prints: 'foobar'\n   *\n   * If the protected getter didn't exist, `foo._data` will return `undefined` and result of the merge will be invalid.\n   *\n   * @protected\n   * @type {String}\n   */\n\n\n  get _data() {\n    return this.data;\n  }\n  /**\n   * Sets data and fires the {@link module:engine/view/node~Node#event:change:text change event}.\n   *\n   * @protected\n   * @fires change:text\n   * @param {String} data New data for the text node.\n   */\n\n\n  set _data(data) {\n    this._fireChange('text', this);\n\n    this._textData = data;\n  }\n  /**\n   * Checks if this text node is similar to other text node.\n   * Both nodes should have the same data to be considered as similar.\n   *\n   * @param {module:engine/view/text~Text} otherNode Node to check if it is same as this node.\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherNode) {\n    if (!(otherNode instanceof Text)) {\n      return false;\n    }\n\n    return this === otherNode || this.data === otherNode.data;\n  }\n  /**\n   * Clones this node.\n   *\n   * @protected\n   * @returns {module:engine/view/text~Text} Text node that is a clone of this node.\n   */\n\n\n  _clone() {\n    return new Text(this.data);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/textproxy\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * TextProxy is a wrapper for substring of {@link module:engine/view/text~Text}. Instance of this class is created by\n * {@link module:engine/view/treewalker~TreeWalker} when only a part of {@link module:engine/view/text~Text} needs to be returned.\n *\n * `TextProxy` has an API similar to {@link module:engine/view/text~Text Text} and allows to do most of the common tasks performed\n * on view nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/view/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is a readonly interface.\n *\n * **Note:** `TextProxy` instances are created on the fly basing on the current state of parent {@link module:engine/view/text~Text}.\n * Because of this it is highly unrecommended to store references to `TextProxy instances because they might get\n * invalidated due to operations on Document. Also TextProxy is not a {@link module:engine/view/node~Node} so it can not be\n * inserted as a child of {@link module:engine/view/element~Element}.\n *\n * `TextProxy` instances are created by {@link module:engine/view/treewalker~TreeWalker view tree walker}. You should not need to create\n * an instance of this class by your own.\n */\n\nexport default class TextProxy {\n  /**\n   * Creates a text proxy.\n   *\n   * @protected\n   * @param {module:engine/view/text~Text} textNode Text node which part is represented by this text proxy.\n   * @param {Number} offsetInText Offset in {@link module:engine/view/textproxy~TextProxy#textNode text node}\n   * from which the text proxy starts.\n   * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n   * @constructor\n   */\n  constructor(textNode, offsetInText, length) {\n    /**\n     * Reference to the {@link module:engine/view/text~Text} element which TextProxy is a substring.\n     *\n     * @readonly\n     * @member {module:engine/view/text~Text} module:engine/view/textproxy~TextProxy#textNode\n     */\n    this.textNode = textNode;\n\n    if (offsetInText < 0 || offsetInText > textNode.data.length) {\n      /**\n       * Given offsetInText value is incorrect.\n       *\n       * @error view-textproxy-wrong-offsetintext\n       */\n      throw new CKEditorError('view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this);\n    }\n\n    if (length < 0 || offsetInText + length > textNode.data.length) {\n      /**\n       * Given length value is incorrect.\n       *\n       * @error view-textproxy-wrong-length\n       */\n      throw new CKEditorError('view-textproxy-wrong-length: Given length value is incorrect.', this);\n    }\n    /**\n     * Text data represented by this text proxy.\n     *\n     * @readonly\n     * @member {String} module:engine/view/textproxy~TextProxy#data\n     */\n\n\n    this.data = textNode.data.substring(offsetInText, offsetInText + length);\n    /**\n     * Offset in the `textNode` where this `TextProxy` instance starts.\n     *\n     * @readonly\n     * @member {Number} module:engine/view/textproxy~TextProxy#offsetInText\n     */\n\n    this.offsetInText = offsetInText;\n  }\n  /**\n   * Offset size of this node.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get offsetSize() {\n    return this.data.length;\n  }\n  /**\n   * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/view/text~Text text node}\n   * (`true`) or the whole text node (`false`).\n   *\n   * This is `false` when text proxy starts at the very beginning of {@link module:engine/view/textproxy~TextProxy#textNode textNode}\n   * ({@link module:engine/view/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n   * text node size.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isPartial() {\n    return this.data.length !== this.textNode.data.length;\n  }\n  /**\n   * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n   *\n   * @readonly\n   * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|null}\n   */\n\n\n  get parent() {\n    return this.textNode.parent;\n  }\n  /**\n   * Root of this text proxy, which is same as root of text node represented by this text proxy.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this.textNode.root;\n  }\n  /**\n   * {@link module:engine/view/document~Document View document} that owns this text proxy, or `null` if the text proxy is inside\n   * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n   *\n   * @readonly\n   * @type {module:engine/view/document~Document|null}\n   */\n\n\n  get document() {\n    return this.textNode.document;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\ttextProxy.is( 'textProxy' ); // -> true\n   *\t\ttextProxy.is( 'view:textProxy' ); // -> true\n   *\n   *\t\ttextProxy.is( 'model:textProxy' ); // -> false\n   *\t\ttextProxy.is( 'element' ); // -> false\n   *\t\ttextProxy.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'textProxy' || type == 'view:textProxy';\n  }\n  /**\n   * Returns ancestors array of this text proxy.\n   *\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` {#textNode} will be also included in parent's array.\n   * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to\n   * root element, otherwise root element will be the first item in the array.\n   * @returns {Array} Array with ancestors.\n   */\n\n\n  getAncestors(options = {\n    includeSelf: false,\n    parentFirst: false\n  }) {\n    const ancestors = [];\n    let parent = options.includeSelf ? this.textNode : this.parent;\n\n    while (parent !== null) {\n      ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n      parent = parent.parent;\n    }\n\n    return ancestors;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/objecttomap\n */\n\n/**\n * Transforms object to map.\n *\n *\t\tconst map = objectToMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap.get( 'foo' ); // 1\n *\n * @param {Object} obj Object to transform.\n * @returns {Map} Map created from object.\n */\nexport default function objectToMap(obj) {\n  const map = new Map();\n\n  for (const key in obj) {\n    map.set(key, obj[key]);\n  }\n\n  return map;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/isiterable\n */\n\n/**\n * Checks if value implements iterator interface.\n *\n * @param {*} value The value to check.\n * @returns {Boolean} True if value implements iterator interface.\n */\nexport default function isIterable(value) {\n  return !!(value && value[Symbol.iterator]);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/matcher\n */\n\n/**\n * View matcher class.\n * Instance of this class can be used to find {@link module:engine/view/element~Element elements} that match given pattern.\n */\nexport default class Matcher {\n  /**\n   * Creates new instance of Matcher.\n   *\n   * @param {String|RegExp|Object} [pattern] Match patterns. See {@link module:engine/view/matcher~Matcher#add add method} for\n   * more information.\n   */\n  constructor(...pattern) {\n    /**\n     * @private\n     * @type {Array<String|RegExp|Object>}\n     */\n    this._patterns = [];\n    this.add(...pattern);\n  }\n  /**\n   * Adds pattern or patterns to matcher instance.\n   *\n   *\t\t// String.\n   *\t\tmatcher.add( 'div' );\n   *\n   *\t\t// Regular expression.\n   *\t\tmatcher.add( /^\\w/ );\n   *\n   *\t\t// Single class.\n   *\t\tmatcher.add( {\n   *\t\t\tclasses: 'foobar'\n   *\t\t} );\n   *\n   * See {@link module:engine/view/matcher~MatcherPattern} for more examples.\n   *\n   * Multiple patterns can be added in one call:\n   *\n   * \t\tmatcher.add( 'div', { classes: 'foobar' } );\n   *\n   * @param {Object|String|RegExp|Function} pattern Object describing pattern details. If string or regular expression\n   * is provided it will be used to match element's name. Pattern can be also provided in a form\n   * of a function - then this function will be called with each {@link module:engine/view/element~Element element} as a parameter.\n   * Function's return value will be stored under `match` key of the object returned from\n   * {@link module:engine/view/matcher~Matcher#match match} or {@link module:engine/view/matcher~Matcher#matchAll matchAll} methods.\n   * @param {String|RegExp} [pattern.name] Name or regular expression to match element's name.\n   * @param {Object} [pattern.attributes] Object with key-value pairs representing attributes to match. Each object key\n   * represents attribute name. Value under that key can be either:\n   * * `true` - then attribute is just required (can be empty),\n   * * a string - then attribute has to be equal, or\n   * * a regular expression - then attribute has to match the expression.\n   * @param {String|RegExp|Array} [pattern.classes] Class name or array of class names to match. Each name can be\n   * provided in a form of string or regular expression.\n   * @param {Object} [pattern.styles] Object with key-value pairs representing styles to match. Each object key\n   * represents style name. Value under that key can be either a string or a regular expression and it will be used\n   * to match style value.\n   */\n\n\n  add(...pattern) {\n    for (let item of pattern) {\n      // String or RegExp pattern is used as element's name.\n      if (typeof item == 'string' || item instanceof RegExp) {\n        item = {\n          name: item\n        };\n      } // Single class name/RegExp can be provided.\n\n\n      if (item.classes && (typeof item.classes == 'string' || item.classes instanceof RegExp)) {\n        item.classes = [item.classes];\n      }\n\n      this._patterns.push(item);\n    }\n  }\n  /**\n   * Matches elements for currently stored patterns. Returns match information about first found\n   * {@link module:engine/view/element~Element element}, otherwise returns `null`.\n   *\n   * Example of returned object:\n   *\n   *\t\t{\n   *\t\t\telement: <instance of found element>,\n   *\t\t\tpattern: <pattern used to match found element>,\n   *\t\t\tmatch: {\n   *\t\t\t\tname: true,\n   *\t\t\t\tattributes: [ 'title', 'href' ],\n   *\t\t\t\tclasses: [ 'foo' ],\n   *\t\t\t\tstyles: [ 'color', 'position' ]\n   *\t\t\t}\n   *\t\t}\n   *\n   * @see module:engine/view/matcher~Matcher#add\n   * @see module:engine/view/matcher~Matcher#matchAll\n   * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n   * @returns {Object|null} result\n   * @returns {module:engine/view/element~Element} result.element Matched view element.\n   * @returns {Object|String|RegExp|Function} result.pattern Pattern that was used to find matched element.\n   * @returns {Object} result.match Object representing matched element parts.\n   * @returns {Boolean} [result.match.name] True if name of the element was matched.\n   * @returns {Array} [result.match.attributes] Array with matched attribute names.\n   * @returns {Array} [result.match.classes] Array with matched class names.\n   * @returns {Array} [result.match.styles] Array with matched style names.\n   */\n\n\n  match(...element) {\n    for (const singleElement of element) {\n      for (const pattern of this._patterns) {\n        const match = isElementMatching(singleElement, pattern);\n\n        if (match) {\n          return {\n            element: singleElement,\n            pattern,\n            match\n          };\n        }\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Matches elements for currently stored patterns. Returns array of match information with all found\n   * {@link module:engine/view/element~Element elements}. If no element is found - returns `null`.\n   *\n   * @see module:engine/view/matcher~Matcher#add\n   * @see module:engine/view/matcher~Matcher#match\n   * @param {...module:engine/view/element~Element} element View element to match against stored patterns.\n   * @returns {Array.<Object>|null} Array with match information about found elements or `null`. For more information\n   * see {@link module:engine/view/matcher~Matcher#match match method} description.\n   */\n\n\n  matchAll(...element) {\n    const results = [];\n\n    for (const singleElement of element) {\n      for (const pattern of this._patterns) {\n        const match = isElementMatching(singleElement, pattern);\n\n        if (match) {\n          results.push({\n            element: singleElement,\n            pattern,\n            match\n          });\n        }\n      }\n    }\n\n    return results.length > 0 ? results : null;\n  }\n  /**\n   * Returns the name of the element to match if there is exactly one pattern added to the matcher instance\n   * and it matches element name defined by `string` (not `RegExp`). Otherwise, returns `null`.\n   *\n   * @returns {String|null} Element name trying to match.\n   */\n\n\n  getElementName() {\n    if (this._patterns.length !== 1) {\n      return null;\n    }\n\n    const pattern = this._patterns[0];\n    const name = pattern.name;\n    return typeof pattern != 'function' && name && !(name instanceof RegExp) ? name : null;\n  }\n\n} // Returns match information if {@link module:engine/view/element~Element element} is matching provided pattern.\n// If element cannot be matched to provided pattern - returns `null`.\n//\n// @param {module:engine/view/element~Element} element\n// @param {Object|String|RegExp|Function} pattern\n// @returns {Object|null} Returns object with match information or null if element is not matching.\n\nfunction isElementMatching(element, pattern) {\n  // If pattern is provided as function - return result of that function;\n  if (typeof pattern == 'function') {\n    return pattern(element);\n  }\n\n  const match = {}; // Check element's name.\n\n  if (pattern.name) {\n    match.name = matchName(pattern.name, element.name);\n\n    if (!match.name) {\n      return null;\n    }\n  } // Check element's attributes.\n\n\n  if (pattern.attributes) {\n    match.attributes = matchAttributes(pattern.attributes, element);\n\n    if (!match.attributes) {\n      return null;\n    }\n  } // Check element's classes.\n\n\n  if (pattern.classes) {\n    match.classes = matchClasses(pattern.classes, element);\n\n    if (!match.classes) {\n      return false;\n    }\n  } // Check element's styles.\n\n\n  if (pattern.styles) {\n    match.styles = matchStyles(pattern.styles, element);\n\n    if (!match.styles) {\n      return false;\n    }\n  }\n\n  return match;\n} // Checks if name can be matched by provided pattern.\n//\n// @param {String|RegExp} pattern\n// @param {String} name\n// @returns {Boolean} Returns `true` if name can be matched, `false` otherwise.\n\n\nfunction matchName(pattern, name) {\n  // If pattern is provided as RegExp - test against this regexp.\n  if (pattern instanceof RegExp) {\n    return pattern.test(name);\n  }\n\n  return pattern === name;\n} // Checks if attributes of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about attributes to match. Each key of the object will be\n// used as attribute name. Value of each key can be a string or regular expression to match against attribute value.\n// @param {module:engine/view/element~Element} element Element which attributes will be tested.\n// @returns {Array|null} Returns array with matched attribute names or `null` if no attributes were matched.\n\n\nfunction matchAttributes(patterns, element) {\n  const match = [];\n\n  for (const name in patterns) {\n    const pattern = patterns[name];\n\n    if (element.hasAttribute(name)) {\n      const attribute = element.getAttribute(name);\n\n      if (pattern === true) {\n        match.push(name);\n      } else if (pattern instanceof RegExp) {\n        if (pattern.test(attribute)) {\n          match.push(name);\n        } else {\n          return null;\n        }\n      } else if (attribute === pattern) {\n        match.push(name);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  return match;\n} // Checks if classes of provided element can be matched against provided patterns.\n//\n// @param {Array.<String|RegExp>} patterns Array of strings or regular expressions to match against element's classes.\n// @param {module:engine/view/element~Element} element Element which classes will be tested.\n// @returns {Array|null} Returns array with matched class names or `null` if no classes were matched.\n\n\nfunction matchClasses(patterns, element) {\n  const match = [];\n\n  for (const pattern of patterns) {\n    if (pattern instanceof RegExp) {\n      const classes = element.getClassNames();\n\n      for (const name of classes) {\n        if (pattern.test(name)) {\n          match.push(name);\n        }\n      }\n\n      if (match.length === 0) {\n        return null;\n      }\n    } else if (element.hasClass(pattern)) {\n      match.push(pattern);\n    } else {\n      return null;\n    }\n  }\n\n  return match;\n} // Checks if styles of provided element can be matched against provided patterns.\n//\n// @param {Object} patterns Object with information about styles to match. Each key of the object will be\n// used as style name. Value of each key can be a string or regular expression to match against style value.\n// @param {module:engine/view/element~Element} element Element which styles will be tested.\n// @returns {Array|null} Returns array with matched style names or `null` if no styles were matched.\n\n\nfunction matchStyles(patterns, element) {\n  const match = [];\n\n  for (const name in patterns) {\n    const pattern = patterns[name];\n\n    if (element.hasStyle(name)) {\n      const style = element.getStyle(name);\n\n      if (pattern instanceof RegExp) {\n        if (pattern.test(style)) {\n          match.push(name);\n        } else {\n          return null;\n        }\n      } else if (style === pattern) {\n        match.push(name);\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }\n\n  return match;\n}\n/**\n * An entity that is a valid pattern recognized by a matcher. `MatcherPattern` is used by {@link ~Matcher} to recognize\n * if a view element fits in a group of view elements described by the pattern.\n *\n * `MatcherPattern` can be given as a `String`, a `RegExp`, an `Object` or a `Function`.\n *\n * If `MatcherPattern` is given as a `String` or `RegExp`, it will match any view element that has a matching name:\n *\n *\t\t// Match any element with name equal to 'div'.\n *\t\tconst pattern = 'div';\n *\n *\t\t// Match any element which name starts on 'p'.\n *\t\tconst pattern = /^p/;\n *\n * If `MatcherPattern` is given as an `Object`, all the object's properties will be matched with view element properties.\n *\n *\t\t// Match view element's name.\n *\t\tconst pattern = { name: /^p/ };\n *\n *\t\t// Match view element which has matching attributes.\n *\t\tconst pattern = {\n *\t\t\tattributes: {\n *\t\t\t\ttitle: 'foobar',\t// Attribute title should equal 'foobar'.\n *\t\t\t\tfoo: /^\\w+/,\t\t// Attribute foo should match /^\\w+/ regexp.\n *\t\t\t\tbar: true\t\t\t// Attribute bar should be set (can be empty).\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Match view element which has given class.\n *\t\tconst pattern = {\n *\t\t\tclasses: 'foobar'\n *\t\t};\n *\n *\t\t// Match view element class using regular expression.\n *\t\tconst pattern = {\n *\t\t\tclasses: /foo.../\n *\t\t};\n *\n *\t\t// Multiple classes to match.\n *\t\tconst pattern = {\n *\t\t\tclasses: [ 'baz', 'bar', /foo.../ ]\n *\t\t};\n *\n *\t\t// Match view element which has given styles.\n *\t\tconst pattern = {\n *\t\t\tstyles: {\n *\t\t\t\tposition: 'absolute',\n *\t\t\t\tcolor: /^\\w*blue$/\n *\t\t\t}\n *\t\t};\n *\n *\t\t// Pattern with multiple properties.\n *\t\tconst pattern = {\n *\t\t\tname: 'span',\n *\t\t\tstyles: {\n *\t\t\t\t'font-weight': 'bold'\n *\t\t\t},\n *\t\t\tclasses: 'highlighted'\n *\t\t};\n *\n * If `MatcherPattern` is given as a `Function`, the function takes a view element as a first and only parameter and\n * the function should decide whether that element matches. If so, it should return what part of the view element has been matched.\n * Otherwise, the function should return `null`. The returned result will be included in `match` property of the object\n * returned by {@link ~Matcher#match} call.\n *\n *\t\t// Match an empty <div> element.\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'div' && element.childCount > 0 ) {\n *\t\t\t\t// Return which part of the element was matched.\n *\t\t\t\treturn { name: true };\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n *\t\t// Match a <p> element with big font (\"heading-like\" element).\n *\t\tconst pattern = element => {\n *\t\t\tif ( element.name == 'p' ) {\n *\t\t\t\tconst fontSize = element.getStyle( 'font-size' );\n *\t\t\t\tconst size = fontSize.match( /(\\d+)/px );\n *\n *\t\t\t\tif ( size && Number( size[ 1 ] ) > 26 ) {\n *\t\t\t\t\treturn { name: true, attribute: [ 'font-size' ] };\n *\t\t\t\t}\n *\t\t\t}\n *\n *\t\t\treturn null;\n *\t\t};\n *\n * `MatcherPattern` is defined in a way that it is a superset of {@link module:engine/view/elementdefinition~ElementDefinition},\n * that is, every `ElementDefinition` also can be used as a `MatcherPattern`.\n *\n * @typedef {String|RegExp|Object|Function} module:engine/view/matcher~MatcherPattern\n *\n * @property {String|RegExp} [name] View element name to match.\n * @property {String|RegExp|Array.<String|RegExp>} [classes] View element's class name(s) to match.\n * @property {Object} [styles] Object with key-value pairs representing styles to match.\n * Each object key represents style name. Value can be given as `String` or `RegExp`.\n * @property {Object} [attributes] Object with key-value pairs representing attributes to match.\n * Each object key represents attribute name. Value can be given as `String` or `RegExp`.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/element\n */\nimport Node from './node';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport objectToMap from '@ckeditor/ckeditor5-utils/src/objecttomap';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Matcher from './matcher';\nimport { isPlainObject } from 'lodash-es';\n/**\n * View element.\n *\n * The editing engine does not define a fixed semantics of its elements (it is \"DTD-free\").\n * This is why the type of the {@link module:engine/view/element~Element} need to\n * be defined by the feature developer. When creating an element you should use one of the following methods:\n *\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `downcastWriter#createContainerElement()`}\n * in order to create a {@link module:engine/view/containerelement~ContainerElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `downcastWriter#createAttributeElement()`}\n * in order to create a {@link module:engine/view/attributeelement~AttributeElement},\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`}\n * in order to create a {@link module:engine/view/emptyelement~EmptyElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}\n * in order to create a {@link module:engine/view/uielement~UIElement}.\n * * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`}\n * in order to create a {@link module:engine/view/editableelement~EditableElement}.\n *\n * Note that for view elements which are not created from the model, like elements from mutations, paste or\n * {@link module:engine/controller/datacontroller~DataController#set data.set} it is not possible to define the type of the element.\n * In such cases the {@link module:engine/view/upcastwriter~UpcastWriter#createElement `UpcastWriter#createElement()`} method\n * should be used to create generic view elements.\n *\n * @extends module:engine/view/node~Node\n */\n\nexport default class Element extends Node {\n  /**\n   * Creates a view element.\n   *\n   * Attributes can be passed in various formats:\n   *\n   *\t\tnew Element( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n   *\t\tnew Element( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n   *\t\tnew Element( 'div', mapOfAttributes ); // map\n   *\n   * @protected\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   */\n  constructor(name, attrs, children) {\n    super();\n    /**\n     * Name of the element.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.name = name;\n    /**\n     * Map of attributes, where attributes names are keys and attributes values are values.\n     *\n     * @protected\n     * @member {Map} #_attrs\n     */\n\n    this._attrs = parseAttributes(attrs);\n    /**\n     * Array of child nodes.\n     *\n     * @protected\n     * @member {Array.<module:engine/view/node~Node>}\n     */\n\n    this._children = [];\n\n    if (children) {\n      this._insertChild(0, children);\n    }\n    /**\n     * Set of classes associated with element instance.\n     *\n     * @protected\n     * @member {Set}\n     */\n\n\n    this._classes = new Set();\n\n    if (this._attrs.has('class')) {\n      // Remove class attribute and handle it by class set.\n      const classString = this._attrs.get('class');\n\n      parseClasses(this._classes, classString);\n\n      this._attrs.delete('class');\n    }\n    /**\n     * Map of styles.\n     *\n     * @protected\n     * @member {Map} module:engine/view/element~Element#_styles\n     */\n\n\n    this._styles = new Map();\n\n    if (this._attrs.has('style')) {\n      // Remove style attribute and handle it by styles map.\n      parseInlineStyles(this._styles, this._attrs.get('style'));\n\n      this._attrs.delete('style');\n    }\n    /**\n     * Map of custom properties.\n     * Custom properties can be added to element instance, will be cloned but not rendered into DOM.\n     *\n     * @protected\n     * @member {Map}\n     */\n\n\n    this._customProperties = new Map();\n  }\n  /**\n   * Number of element's children.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get childCount() {\n    return this._children.length;\n  }\n  /**\n   * Is `true` if there are no nodes inside this element, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isEmpty() {\n    return this._children.length === 0;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\telement.is( 'element' ); // -> true\n   *\t\telement.is( 'node' ); // -> true\n   *\t\telement.is( 'view:element' ); // -> true\n   *\t\telement.is( 'view:node' ); // -> true\n   *\n   *\t\telement.is( 'model:element' ); // -> false\n   *\t\telement.is( 'documentSelection' ); // -> false\n   *\n   * Assuming that the object being checked is an element, you can also check its\n   * {@link module:engine/view/element~Element#name name}:\n   *\n   *\t\telement.is( 'img' ); // -> true if this is an <img> element\n   *\t\telement.is( 'element', 'img' ); // -> same as above\n   *\t\ttext.is( 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'element' || cutType == this.name || super.is(type);\n    } else {\n      return cutType == 'element' && name == this.name;\n    }\n  }\n  /**\n   * Gets child at the given index.\n   *\n   * @param {Number} index Index of child.\n   * @returns {module:engine/view/node~Node} Child node.\n   */\n\n\n  getChild(index) {\n    return this._children[index];\n  }\n  /**\n   * Gets index of the given child node. Returns `-1` if child node is not found.\n   *\n   * @param {module:engine/view/node~Node} node Child node.\n   * @returns {Number} Index of the child node.\n   */\n\n\n  getChildIndex(node) {\n    return this._children.indexOf(node);\n  }\n  /**\n   * Gets child nodes iterator.\n   *\n   * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n   */\n\n\n  getChildren() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Returns an iterator that contains the keys for attributes. Order of inserting attributes is not preserved.\n   *\n   * @returns {Iterable.<String>} Keys for attributes.\n   */\n\n\n  *getAttributeKeys() {\n    if (this._classes.size > 0) {\n      yield 'class';\n    }\n\n    if (this._styles.size > 0) {\n      yield 'style';\n    }\n\n    yield* this._attrs.keys();\n  }\n  /**\n   * Returns iterator that iterates over this element's attributes.\n   *\n   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  *getAttributes() {\n    yield* this._attrs.entries();\n\n    if (this._classes.size > 0) {\n      yield ['class', this.getAttribute('class')];\n    }\n\n    if (this._styles.size > 0) {\n      yield ['style', this.getAttribute('style')];\n    }\n  }\n  /**\n   * Gets attribute by key. If attribute is not present - returns undefined.\n   *\n   * @param {String} key Attribute key.\n   * @returns {String|undefined} Attribute value.\n   */\n\n\n  getAttribute(key) {\n    if (key == 'class') {\n      if (this._classes.size > 0) {\n        return [...this._classes].join(' ');\n      }\n\n      return undefined;\n    }\n\n    if (key == 'style') {\n      if (this._styles.size > 0) {\n        let styleString = '';\n\n        for (const [property, value] of this._styles) {\n          styleString += `${property}:${value};`;\n        }\n\n        return styleString;\n      }\n\n      return undefined;\n    }\n\n    return this._attrs.get(key);\n  }\n  /**\n   * Returns a boolean indicating whether an attribute with the specified key exists in the element.\n   *\n   * @param {String} key Attribute key.\n   * @returns {Boolean} `true` if attribute with the specified key exists in the element, false otherwise.\n   */\n\n\n  hasAttribute(key) {\n    if (key == 'class') {\n      return this._classes.size > 0;\n    }\n\n    if (key == 'style') {\n      return this._styles.size > 0;\n    }\n\n    return this._attrs.has(key);\n  }\n  /**\n   * Checks if this element is similar to other element.\n   * Both elements should have the same name and attributes to be considered as similar. Two similar elements\n   * can contain different set of children nodes.\n   *\n   * @param {module:engine/view/element~Element} otherElement\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherElement) {\n    if (!(otherElement instanceof Element)) {\n      return false;\n    } // If exactly the same Element is provided - return true immediately.\n\n\n    if (this === otherElement) {\n      return true;\n    } // Check element name.\n\n\n    if (this.name != otherElement.name) {\n      return false;\n    } // Check number of attributes, classes and styles.\n\n\n    if (this._attrs.size !== otherElement._attrs.size || this._classes.size !== otherElement._classes.size || this._styles.size !== otherElement._styles.size) {\n      return false;\n    } // Check if attributes are the same.\n\n\n    for (const [key, value] of this._attrs) {\n      if (!otherElement._attrs.has(key) || otherElement._attrs.get(key) !== value) {\n        return false;\n      }\n    } // Check if classes are the same.\n\n\n    for (const className of this._classes) {\n      if (!otherElement._classes.has(className)) {\n        return false;\n      }\n    } // Check if styles are the same.\n\n\n    for (const [property, value] of this._styles) {\n      if (!otherElement._styles.has(property) || otherElement._styles.get(property) !== value) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns true if class is present.\n   * If more then one class is provided - returns true only when all classes are present.\n   *\n   *\t\telement.hasClass( 'foo' ); // Returns true if 'foo' class is present.\n   *\t\telement.hasClass( 'foo', 'bar' ); // Returns true if 'foo' and 'bar' classes are both present.\n   *\n   * @param {...String} className\n   */\n\n\n  hasClass(...className) {\n    for (const name of className) {\n      if (!this._classes.has(name)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns iterator that contains all class names.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getClassNames() {\n    return this._classes.keys();\n  }\n  /**\n   * Returns style value for given property.\n   * Undefined is returned if style does not exist.\n   *\n   * @param {String} property\n   * @returns {String|undefined}\n   */\n\n\n  getStyle(property) {\n    return this._styles.get(property);\n  }\n  /**\n   * Returns iterator that contains all style names.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getStyleNames() {\n    return this._styles.keys();\n  }\n  /**\n   * Returns true if style keys are present.\n   * If more then one style property is provided - returns true only when all properties are present.\n   *\n   *\t\telement.hasStyle( 'color' ); // Returns true if 'border-top' style is present.\n   *\t\telement.hasStyle( 'color', 'border-top' ); // Returns true if 'color' and 'border-top' styles are both present.\n   *\n   * @param {...String} property\n   */\n\n\n  hasStyle(...property) {\n    for (const name of property) {\n      if (!this._styles.has(name)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns ancestor element that match specified pattern.\n   * Provided patterns should be compatible with {@link module:engine/view/matcher~Matcher Matcher} as it is used internally.\n   *\n   * @see module:engine/view/matcher~Matcher\n   * @param {Object|String|RegExp|Function} patterns Patterns used to match correct ancestor.\n   * See {@link module:engine/view/matcher~Matcher}.\n   * @returns {module:engine/view/element~Element|null} Found element or `null` if no matching ancestor was found.\n   */\n\n\n  findAncestor(...patterns) {\n    const matcher = new Matcher(...patterns);\n    let parent = this.parent;\n\n    while (parent) {\n      if (matcher.match(parent)) {\n        return parent;\n      }\n\n      parent = parent.parent;\n    }\n\n    return null;\n  }\n  /**\n   * Returns the custom property value for the given key.\n   *\n   * @param {String|Symbol} key\n   * @returns {*}\n   */\n\n\n  getCustomProperty(key) {\n    return this._customProperties.get(key);\n  }\n  /**\n   * Returns an iterator which iterates over this element's custom properties.\n   * Iterator provides `[ key, value ]` pairs for each stored property.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  *getCustomProperties() {\n    yield* this._customProperties.entries();\n  }\n  /**\n   * Returns identity string based on element's name, styles, classes and other attributes.\n   * Two elements that {@link #isSimilar are similar} will have same identity string.\n   * It has the following format:\n   *\n   *\t\t'name class=\"class1,class2\" style=\"style1:value1;style2:value2\" attr1=\"val1\" attr2=\"val2\"'\n  \t *\n   * For example:\n   *\n   *\t\tconst element = writer.createContainerElement( 'foo', {\n   *\t\t\tbanana: '10',\n   *\t\t\tapple: '20',\n   *\t\t\tstyle: 'color: red; border-color: white;',\n   *\t\t\tclass: 'baz'\n   *\t\t} );\n   *\n   *\t\t// returns 'foo class=\"baz\" style=\"border-color:white;color:red\" apple=\"20\" banana=\"10\"'\n   *\t\telement.getIdentity();\n   *\n   * NOTE: Classes, styles and other attributes are sorted alphabetically.\n   *\n   * @returns {String}\n   */\n\n\n  getIdentity() {\n    const classes = Array.from(this._classes).sort().join(',');\n    const styles = Array.from(this._styles).map(i => `${i[0]}:${i[1]}`).sort().join(';');\n    const attributes = Array.from(this._attrs).map(i => `${i[0]}=\"${i[1]}\"`).sort().join(' ');\n    return this.name + (classes == '' ? '' : ` class=\"${classes}\"`) + (styles == '' ? '' : ` style=\"${styles}\"`) + (attributes == '' ? '' : ` ${attributes}`);\n  }\n  /**\n   * Clones provided element.\n   *\n   * @protected\n   * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/element~Element} Clone of this element.\n   */\n\n\n  _clone(deep = false) {\n    const childrenClone = [];\n\n    if (deep) {\n      for (const child of this.getChildren()) {\n        childrenClone.push(child._clone(deep));\n      }\n    } // ContainerElement and AttributeElement should be also cloned properly.\n\n\n    const cloned = new this.constructor(this.name, this._attrs, childrenClone); // Classes and styles are cloned separately - this solution is faster than adding them back to attributes and\n    // parse once again in constructor.\n\n    cloned._classes = new Set(this._classes);\n    cloned._styles = new Map(this._styles); // Clone custom properties.\n\n    cloned._customProperties = new Map(this._customProperties); // Clone filler offset method.\n    // We can't define this method in a prototype because it's behavior which\n    // is changed by e.g. toWidget() function from ckeditor5-widget. Perhaps this should be one of custom props.\n\n    cloned.getFillerOffset = this.getFillerOffset;\n    return cloned;\n  }\n  /**\n   * {@link module:engine/view/element~Element#_insertChild Insert} a child node or a list of child nodes at the end of this node\n   * and sets the parent of these nodes to this element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#insert\n   * @protected\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @fires module:engine/view/node~Node#change\n   * @returns {Number} Number of appended nodes.\n   */\n\n\n  _appendChild(items) {\n    return this._insertChild(this.childCount, items);\n  }\n  /**\n   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n   * this element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#insert\n   * @protected\n   * @param {Number} index Position where nodes should be inserted.\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @fires module:engine/view/node~Node#change\n   * @returns {Number} Number of inserted nodes.\n   */\n\n\n  _insertChild(index, items) {\n    this._fireChange('children', this);\n\n    let count = 0;\n    const nodes = normalize(items);\n\n    for (const node of nodes) {\n      // If node that is being added to this element is already inside another element, first remove it from the old parent.\n      if (node.parent !== null) {\n        node._remove();\n      }\n\n      node.parent = this;\n\n      this._children.splice(index, 0, node);\n\n      index++;\n      count++;\n    }\n\n    return count;\n  }\n  /**\n   * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#remove\n   * @protected\n   * @param {Number} index Number of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @fires module:engine/view/node~Node#change\n   * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n   */\n\n\n  _removeChildren(index, howMany = 1) {\n    this._fireChange('children', this);\n\n    for (let i = index; i < index + howMany; i++) {\n      this._children[i].parent = null;\n    }\n\n    return this._children.splice(index, howMany);\n  }\n  /**\n   * Adds or overwrite attribute with a specified key and value.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#setAttribute\n   * @protected\n   * @param {String} key Attribute key.\n   * @param {String} value Attribute value.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _setAttribute(key, value) {\n    value = String(value);\n\n    this._fireChange('attributes', this);\n\n    if (key == 'class') {\n      parseClasses(this._classes, value);\n    } else if (key == 'style') {\n      parseInlineStyles(this._styles, value);\n    } else {\n      this._attrs.set(key, value);\n    }\n  }\n  /**\n   * Removes attribute from the element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeAttribute\n   * @protected\n   * @param {String} key Attribute key.\n   * @returns {Boolean} Returns true if an attribute existed and has been removed.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _removeAttribute(key) {\n    this._fireChange('attributes', this); // Remove class attribute.\n\n\n    if (key == 'class') {\n      if (this._classes.size > 0) {\n        this._classes.clear();\n\n        return true;\n      }\n\n      return false;\n    } // Remove style attribute.\n\n\n    if (key == 'style') {\n      if (this._styles.size > 0) {\n        this._styles.clear();\n\n        return true;\n      }\n\n      return false;\n    } // Remove other attributes.\n\n\n    return this._attrs.delete(key);\n  }\n  /**\n   * Adds specified class.\n   *\n   *\t\telement._addClass( 'foo' ); // Adds 'foo' class.\n   *\t\telement._addClass( [ 'foo', 'bar' ] ); // Adds 'foo' and 'bar' classes.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#addClass\n   * @protected\n   * @param {Array.<String>|String} className\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _addClass(className) {\n    this._fireChange('attributes', this);\n\n    className = Array.isArray(className) ? className : [className];\n    className.forEach(name => this._classes.add(name));\n  }\n  /**\n   * Removes specified class.\n   *\n   *\t\telement._removeClass( 'foo' );  // Removes 'foo' class.\n   *\t\telement._removeClass( [ 'foo', 'bar' ] ); // Removes both 'foo' and 'bar' classes.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeClass\n   * @protected\n   * @param {Array.<String>|String} className\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _removeClass(className) {\n    this._fireChange('attributes', this);\n\n    className = Array.isArray(className) ? className : [className];\n    className.forEach(name => this._classes.delete(name));\n  }\n  /**\n   * Adds style to the element.\n   *\n   *\t\telement._setStyle( 'color', 'red' );\n   *\t\telement._setStyle( {\n   *\t\t\tcolor: 'red',\n   *\t\t\tposition: 'fixed'\n   *\t\t} );\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#setStyle\n   * @protected\n   * @param {String|Object} property Property name or object with key - value pairs.\n   * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _setStyle(property, value) {\n    this._fireChange('attributes', this);\n\n    if (isPlainObject(property)) {\n      const keys = Object.keys(property);\n\n      for (const key of keys) {\n        this._styles.set(key, property[key]);\n      }\n    } else {\n      this._styles.set(property, value);\n    }\n  }\n  /**\n   * Removes specified style.\n   *\n   *\t\telement._removeStyle( 'color' );  // Removes 'color' style.\n   *\t\telement._removeStyle( [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeStyle\n   * @protected\n   * @param {Array.<String>|String} property\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _removeStyle(property) {\n    this._fireChange('attributes', this);\n\n    property = Array.isArray(property) ? property : [property];\n    property.forEach(name => this._styles.delete(name));\n  }\n  /**\n   * Sets a custom property. Unlike attributes, custom properties are not rendered to the DOM,\n   * so they can be used to add special data to elements.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#setCustomProperty\n   * @protected\n   * @param {String|Symbol} key\n   * @param {*} value\n   */\n\n\n  _setCustomProperty(key, value) {\n    this._customProperties.set(key, value);\n  }\n  /**\n   * Removes the custom property stored under the given key.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#removeCustomProperty\n   * @protected\n   * @param {String|Symbol} key\n   * @returns {Boolean} Returns true if property was removed.\n   */\n\n\n  _removeCustomProperty(key) {\n    return this._customProperties.delete(key);\n  }\n  /**\n   * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n   *\n   * @abstract\n   * @method module:engine/view/element~Element#getFillerOffset\n   */\n\n\n} // Parses attributes provided to the element constructor before they are applied to an element. If attributes are passed\n// as an object (instead of `Map`), the object is transformed to the map. Attributes with `null` value are removed.\n// Attributes with non-`String` value are converted to `String`.\n//\n// @param {Object|Map} attrs Attributes to parse.\n// @returns {Map} Parsed attributes.\n\nfunction parseAttributes(attrs) {\n  if (isPlainObject(attrs)) {\n    attrs = objectToMap(attrs);\n  } else {\n    attrs = new Map(attrs);\n  }\n\n  for (const [key, value] of attrs) {\n    if (value === null) {\n      attrs.delete(key);\n    } else if (typeof value != 'string') {\n      attrs.set(key, String(value));\n    }\n  }\n\n  return attrs;\n} // Parses inline styles and puts property - value pairs into styles map.\n// Styles map is cleared before insertion.\n//\n// @param {Map.<String, String>} stylesMap Map to insert parsed properties and values.\n// @param {String} stylesString Styles to parse.\n\n\nfunction parseInlineStyles(stylesMap, stylesString) {\n  // `null` if no quote was found in input string or last found quote was a closing quote. See below.\n  let quoteType = null;\n  let propertyNameStart = 0;\n  let propertyValueStart = 0;\n  let propertyName = null;\n  stylesMap.clear(); // Do not set anything if input string is empty.\n\n  if (stylesString === '') {\n    return;\n  } // Fix inline styles that do not end with `;` so they are compatible with algorithm below.\n\n\n  if (stylesString.charAt(stylesString.length - 1) != ';') {\n    stylesString = stylesString + ';';\n  } // Seek the whole string for \"special characters\".\n\n\n  for (let i = 0; i < stylesString.length; i++) {\n    const char = stylesString.charAt(i);\n\n    if (quoteType === null) {\n      // No quote found yet or last found quote was a closing quote.\n      switch (char) {\n        case ':':\n          // Most of time colon means that property name just ended.\n          // Sometimes however `:` is found inside property value (for example in background image url).\n          if (!propertyName) {\n            // Treat this as end of property only if property name is not already saved.\n            // Save property name.\n            propertyName = stylesString.substr(propertyNameStart, i - propertyNameStart); // Save this point as the start of property value.\n\n            propertyValueStart = i + 1;\n          }\n\n          break;\n\n        case '\"':\n        case '\\'':\n          // Opening quote found (this is an opening quote, because `quoteType` is `null`).\n          quoteType = char;\n          break;\n\n        case ';':\n          {\n            // Property value just ended.\n            // Use previously stored property value start to obtain property value.\n            const propertyValue = stylesString.substr(propertyValueStart, i - propertyValueStart);\n\n            if (propertyName) {\n              // Save parsed part.\n              stylesMap.set(propertyName.trim(), propertyValue.trim());\n            }\n\n            propertyName = null; // Save this point as property name start. Property name starts immediately after previous property value ends.\n\n            propertyNameStart = i + 1;\n            break;\n          }\n      }\n    } else if (char === quoteType) {\n      // If a quote char is found and it is a closing quote, mark this fact by `null`-ing `quoteType`.\n      quoteType = null;\n    }\n  }\n} // Parses class attribute and puts all classes into classes set.\n// Classes set s cleared before insertion.\n//\n// @param {Set.<String>} classesSet Set to insert parsed classes.\n// @param {String} classesString String with classes to parse.\n\n\nfunction parseClasses(classesSet, classesString) {\n  const classArray = classesString.split(/\\s+/);\n  classesSet.clear();\n  classArray.forEach(name => classesSet.add(name));\n} // Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\n\n\nfunction normalize(nodes) {\n  // Separate condition because string is iterable.\n  if (typeof nodes == 'string') {\n    return [new Text(nodes)];\n  }\n\n  if (!isIterable(nodes)) {\n    nodes = [nodes];\n  } // Array.from to enable .map() on non-arrays.\n\n\n  return Array.from(nodes).map(node => {\n    if (typeof node == 'string') {\n      return new Text(node);\n    }\n\n    if (node instanceof TextProxy) {\n      return new Text(node.data);\n    }\n\n    return node;\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/containerelement\n */\nimport Element from './element';\n/**\n * Containers are elements which define document structure. They define boundaries for\n * {@link module:engine/view/attributeelement~AttributeElement attributes}. They are mostly used for block elements like `<p>` or `<div>`.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * The container element should be your default choice when writing a converter, unless:\n *\n * * this element represents a model text attribute (then use {@link module:engine/view/attributeelement~AttributeElement}),\n * * this is an empty element like `<img>` (then use {@link module:engine/view/emptyelement~EmptyElement}),\n * * this is a root element,\n * * this is a nested editable element (then use  {@link module:engine/view/editableelement~EditableElement}).\n *\n * To create a new container element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createContainerElement `DowncastWriter#createContainerElement()`}\n * method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class ContainerElement extends Element {\n  /**\n   * Creates a container element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createContainerElement\n   * @see module:engine/view/element~Element\n   * @protected\n   */\n  constructor(name, attrs, children) {\n    super(name, attrs, children);\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tcontainerElement.is( 'containerElement' ); // -> true\n   *\t\tcontainerElement.is( 'element' ); // -> true\n   *\t\tcontainerElement.is( 'node' ); // -> true\n   *\t\tcontainerElement.is( 'view:containerElement' ); // -> true\n   *\t\tcontainerElement.is( 'view:element' ); // -> true\n   *\t\tcontainerElement.is( 'view:node' ); // -> true\n   *\n   *\t\tcontainerElement.is( 'model:element' ); // -> false\n   *\t\tcontainerElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is a container element, you can also check its\n   * {@link module:engine/view/containerelement~ContainerElement#name name}:\n   *\n   *\t\tcontainerElement.is( 'div' ); // -> true if this is a div container element\n   *\t\tcontainerElement.is( 'contaienrElement', 'div' ); // -> same as above\n   *\t\ttext.is( 'div' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type && type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'containerElement' || super.is(type);\n    } else {\n      return cutType == 'containerElement' && name == this.name || super.is(type, name);\n    }\n  }\n\n}\n/**\n * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n *\n * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n */\n\nexport function getFillerOffset() {\n  const children = [...this.getChildren()];\n  const lastChild = children[this.childCount - 1]; // Block filler is required after a `<br>` if it's the last element in its container. See #1422.\n\n  if (lastChild && lastChild.is('element', 'br')) {\n    return this.childCount;\n  }\n\n  for (const child of children) {\n    // If there's any non-UI element – don't render the bogus.\n    if (!child.is('uiElement')) {\n      return null;\n    }\n  } // If there are only UI elements – render the bogus at the end of the element.\n\n\n  return this.childCount;\n}","/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nexport default identity;\n","/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nexport default apply;\n","import apply from './_apply.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nexport default overRest;\n","/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nexport default constant;\n","import constant from './constant.js';\nimport defineProperty from './_defineProperty.js';\nimport identity from './identity.js';\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nexport default baseSetToString;\n","/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nexport default shortOut;\n","import baseSetToString from './_baseSetToString.js';\nimport shortOut from './_shortOut.js';\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nexport default setToString;\n","import identity from './identity.js';\nimport overRest from './_overRest.js';\nimport setToString from './_setToString.js';\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nexport default baseRest;\n","import eq from './eq.js';\nimport isArrayLike from './isArrayLike.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nexport default isIterateeCall;\n","import baseRest from './_baseRest.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nexport default createAssigner;\n","import copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport keysIn from './keysIn.js';\n\n/**\n * This method is like `_.assign` except that it iterates over own and\n * inherited source properties.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @alias extend\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assign\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assignIn({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }\n */\nvar assignIn = createAssigner(function(object, source) {\n  copyObject(source, keysIn(source), object);\n});\n\nexport default assignIn;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/observablemixin\n */\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport { extend, isObject } from 'lodash-es';\nconst observablePropertiesSymbol = Symbol('observableProperties');\nconst boundObservablesSymbol = Symbol('boundObservables');\nconst boundPropertiesSymbol = Symbol('boundProperties');\n/**\n * Mixin that injects the \"observable properties\" and data binding functionality described in the\n * {@link ~Observable} interface.\n *\n * Read more about the concept of observables in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @mixin ObservableMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/observablemixin~Observable\n */\n\nconst ObservableMixin = {\n  /**\n   * @inheritDoc\n   */\n  set(name, value) {\n    // If the first parameter is an Object, iterate over its properties.\n    if (isObject(name)) {\n      Object.keys(name).forEach(property => {\n        this.set(property, name[property]);\n      }, this);\n      return;\n    }\n\n    initObservable(this);\n    const properties = this[observablePropertiesSymbol];\n\n    if (name in this && !properties.has(name)) {\n      /**\n       * Cannot override an existing property.\n       *\n       * This error is thrown when trying to {@link ~Observable#set set} an property with\n       * a name of an already existing property. For example:\n       *\n       *\t\tlet observable = new Model();\n       *\t\tobservable.property = 1;\n       *\t\tobservable.set( 'property', 2 );\t\t\t// throws\n       *\n       *\t\tobservable.set( 'property', 1 );\n       *\t\tobservable.set( 'property', 2 );\t\t\t// ok, because this is an existing property.\n       *\n       * @error observable-set-cannot-override\n       */\n      throw new CKEditorError('observable-set-cannot-override: Cannot override an existing property.', this);\n    }\n\n    Object.defineProperty(this, name, {\n      enumerable: true,\n      configurable: true,\n\n      get() {\n        return properties.get(name);\n      },\n\n      set(value) {\n        const oldValue = properties.get(name); // Fire `set` event before the new value will be set to make it possible\n        // to override observable property without affecting `change` event.\n        // See https://github.com/ckeditor/ckeditor5-utils/issues/171.\n\n        let newValue = this.fire('set:' + name, name, value, oldValue);\n\n        if (newValue === undefined) {\n          newValue = value;\n        } // Allow undefined as an initial value like A.define( 'x', undefined ) (#132).\n        // Note: When properties map has no such own property, then its value is undefined.\n\n\n        if (oldValue !== newValue || !properties.has(name)) {\n          properties.set(name, newValue);\n          this.fire('change:' + name, name, newValue, oldValue);\n        }\n      }\n\n    });\n    this[name] = value;\n  },\n\n  /**\n   * @inheritDoc\n   */\n  bind(...bindProperties) {\n    if (!bindProperties.length || !isStringArray(bindProperties)) {\n      /**\n       * All properties must be strings.\n       *\n       * @error observable-bind-wrong-properties\n       */\n      throw new CKEditorError('observable-bind-wrong-properties: All properties must be strings.', this);\n    }\n\n    if (new Set(bindProperties).size !== bindProperties.length) {\n      /**\n       * Properties must be unique.\n       *\n       * @error observable-bind-duplicate-properties\n       */\n      throw new CKEditorError('observable-bind-duplicate-properties: Properties must be unique.', this);\n    }\n\n    initObservable(this);\n    const boundProperties = this[boundPropertiesSymbol];\n    bindProperties.forEach(propertyName => {\n      if (boundProperties.has(propertyName)) {\n        /**\n         * Cannot bind the same property more that once.\n         *\n         * @error observable-bind-rebind\n         */\n        throw new CKEditorError('observable-bind-rebind: Cannot bind the same property more that once.', this);\n      }\n    });\n    const bindings = new Map(); // @typedef {Object} Binding\n    // @property {Array} property Property which is bound.\n    // @property {Array} to Array of observable–property components of the binding (`{ observable: ..., property: .. }`).\n    // @property {Array} callback A function which processes `to` components.\n\n    bindProperties.forEach(a => {\n      const binding = {\n        property: a,\n        to: []\n      };\n      boundProperties.set(a, binding);\n      bindings.set(a, binding);\n    }); // @typedef {Object} BindChain\n    // @property {Function} to See {@link ~ObservableMixin#_bindTo}.\n    // @property {Function} toMany See {@link ~ObservableMixin#_bindToMany}.\n    // @property {module:utils/observablemixin~Observable} _observable The observable which initializes the binding.\n    // @property {Array} _bindProperties Array of `_observable` properties to be bound.\n    // @property {Array} _to Array of `to()` observable–properties (`{ observable: toObservable, properties: ...toProperties }`).\n    // @property {Map} _bindings Stores bindings to be kept in\n    // {@link ~ObservableMixin#_boundProperties}/{@link ~ObservableMixin#_boundObservables}\n    // initiated in this binding chain.\n\n    return {\n      to: bindTo,\n      toMany: bindToMany,\n      _observable: this,\n      _bindProperties: bindProperties,\n      _to: [],\n      _bindings: bindings\n    };\n  },\n\n  /**\n   * @inheritDoc\n   */\n  unbind(...unbindProperties) {\n    // Nothing to do here if not inited yet.\n    if (!(observablePropertiesSymbol in this)) {\n      return;\n    }\n\n    const boundProperties = this[boundPropertiesSymbol];\n    const boundObservables = this[boundObservablesSymbol];\n\n    if (unbindProperties.length) {\n      if (!isStringArray(unbindProperties)) {\n        /**\n         * Properties must be strings.\n         *\n         * @error observable-unbind-wrong-properties\n         */\n        throw new CKEditorError('observable-unbind-wrong-properties: Properties must be strings.', this);\n      }\n\n      unbindProperties.forEach(propertyName => {\n        const binding = boundProperties.get(propertyName); // Nothing to do if the binding is not defined\n\n        if (!binding) {\n          return;\n        }\n\n        let toObservable, toProperty, toProperties, toPropertyBindings;\n        binding.to.forEach(to => {\n          // TODO: ES6 destructuring.\n          toObservable = to[0];\n          toProperty = to[1];\n          toProperties = boundObservables.get(toObservable);\n          toPropertyBindings = toProperties[toProperty];\n          toPropertyBindings.delete(binding);\n\n          if (!toPropertyBindings.size) {\n            delete toProperties[toProperty];\n          }\n\n          if (!Object.keys(toProperties).length) {\n            boundObservables.delete(toObservable);\n            this.stopListening(toObservable, 'change');\n          }\n        });\n        boundProperties.delete(propertyName);\n      });\n    } else {\n      boundObservables.forEach((bindings, boundObservable) => {\n        this.stopListening(boundObservable, 'change');\n      });\n      boundObservables.clear();\n      boundProperties.clear();\n    }\n  },\n\n  /**\n   * @inheritDoc\n   */\n  decorate(methodName) {\n    const originalMethod = this[methodName];\n\n    if (!originalMethod) {\n      /**\n       * Cannot decorate an undefined method.\n       *\n       * @error observablemixin-cannot-decorate-undefined\n       * @param {Object} object The object which method should be decorated.\n       * @param {String} methodName Name of the method which does not exist.\n       */\n      throw new CKEditorError('observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.', this, {\n        object: this,\n        methodName\n      });\n    }\n\n    this.on(methodName, (evt, args) => {\n      evt.return = originalMethod.apply(this, args);\n    });\n\n    this[methodName] = function (...args) {\n      return this.fire(methodName, args);\n    };\n  }\n\n};\nextend(ObservableMixin, EmitterMixin);\nexport default ObservableMixin; // Init symbol properties needed to for the observable mechanism to work.\n//\n// @private\n// @param {module:utils/observablemixin~ObservableMixin} observable\n\nfunction initObservable(observable) {\n  // Do nothing if already inited.\n  if (observablePropertiesSymbol in observable) {\n    return;\n  } // The internal hash containing the observable's state.\n  //\n  // @private\n  // @type {Map}\n\n\n  Object.defineProperty(observable, observablePropertiesSymbol, {\n    value: new Map()\n  }); // Map containing bindings to external observables. It shares the binding objects\n  // (`{ observable: A, property: 'a', to: ... }`) with {@link module:utils/observablemixin~ObservableMixin#_boundProperties} and\n  // it is used to observe external observables to update own properties accordingly.\n  // See {@link module:utils/observablemixin~ObservableMixin#bind}.\n  //\n  //\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n  //\t\tconsole.log( A._boundObservables );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\tB: {\n  //\t\t\t\t\tx: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n  //\t\t\t\t\t] ),\n  //\t\t\t\t\ty: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\t\t] )\n  //\t\t\t\t}\n  //\t\t\t} )\n  //\n  //\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n  //\t\tconsole.log( A._boundObservables );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\tB: {\n  //\t\t\t\t\tx: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\t\t\t{ observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n  //\t\t\t\t\t] ),\n  //\t\t\t\t\ty: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\t\t] ),\n  //\t\t\t\t\tz: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n  //\t\t\t\t\t] )\n  //\t\t\t\t},\n  //\t\t\t\tC: {\n  //\t\t\t\t\tw: Set( [\n  //\t\t\t\t\t\t{ observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n  //\t\t\t\t\t] )\n  //\t\t\t\t}\n  //\t\t\t} )\n  //\n  // @private\n  // @type {Map}\n\n  Object.defineProperty(observable, boundObservablesSymbol, {\n    value: new Map()\n  }); // Object that stores which properties of this observable are bound and how. It shares\n  // the binding objects (`{ observable: A, property: 'a', to: ... }`) with\n  // {@link module:utils/observablemixin~ObservableMixin#_boundObservables}. This data structure is\n  // a reverse of {@link module:utils/observablemixin~ObservableMixin#_boundObservables} and it is helpful for\n  // {@link module:utils/observablemixin~ObservableMixin#unbind}.\n  //\n  // See {@link module:utils/observablemixin~ObservableMixin#bind}.\n  //\n  //\t\tA.bind( 'a', 'b', 'c' ).to( B, 'x', 'y', 'x' );\n  //\t\tconsole.log( A._boundProperties );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] }\n  //\t\t\t} )\n  //\n  //\t\tA.bind( 'd' ).to( B, 'z' ).to( C, 'w' ).as( callback );\n  //\t\tconsole.log( A._boundProperties );\n  //\n  //\t\t\tMap( {\n  //\t\t\t\ta: { observable: A, property: 'a', to: [ [ B, 'x' ] ] },\n  //\t\t\t\tb: { observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n  //\t\t\t\tc: { observable: A, property: 'c', to: [ [ B, 'x' ] ] },\n  //\t\t\t\td: { observable: A, property: 'd', to: [ [ B, 'z' ], [ C, 'w' ] ], callback: callback }\n  //\t\t\t} )\n  //\n  // @private\n  // @type {Map}\n\n  Object.defineProperty(observable, boundPropertiesSymbol, {\n    value: new Map()\n  });\n} // A chaining for {@link module:utils/observablemixin~ObservableMixin#bind} providing `.to()` interface.\n//\n// @private\n// @param {...[Observable|String|Function]} args Arguments of the `.to( args )` binding.\n\n\nfunction bindTo(...args) {\n  const parsedArgs = parseBindToArgs(...args);\n  const bindingsKeys = Array.from(this._bindings.keys());\n  const numberOfBindings = bindingsKeys.length; // Eliminate A.bind( 'x' ).to( B, C )\n\n  if (!parsedArgs.callback && parsedArgs.to.length > 1) {\n    /**\n     * Binding multiple observables only possible with callback.\n     *\n     * @error observable-bind-no-callback\n     */\n    throw new CKEditorError('observable-bind-to-no-callback: Binding multiple observables only possible with callback.', this);\n  } // Eliminate A.bind( 'x', 'y' ).to( B, callback )\n\n\n  if (numberOfBindings > 1 && parsedArgs.callback) {\n    /**\n     * Cannot bind multiple properties and use a callback in one binding.\n     *\n     * @error observable-bind-to-extra-callback\n     */\n    throw new CKEditorError('observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.', this);\n  }\n\n  parsedArgs.to.forEach(to => {\n    // Eliminate A.bind( 'x', 'y' ).to( B, 'a' )\n    if (to.properties.length && to.properties.length !== numberOfBindings) {\n      /**\n       * The number of properties must match.\n       *\n       * @error observable-bind-to-properties-length\n       */\n      throw new CKEditorError('observable-bind-to-properties-length: The number of properties must match.', this);\n    } // When no to.properties specified, observing source properties instead i.e.\n    // A.bind( 'x', 'y' ).to( B ) -> Observe B.x and B.y\n\n\n    if (!to.properties.length) {\n      to.properties = this._bindProperties;\n    }\n  });\n  this._to = parsedArgs.to; // Fill {@link BindChain#_bindings} with callback. When the callback is set there's only one binding.\n\n  if (parsedArgs.callback) {\n    this._bindings.get(bindingsKeys[0]).callback = parsedArgs.callback;\n  }\n\n  attachBindToListeners(this._observable, this._to); // Update observable._boundProperties and observable._boundObservables.\n\n  updateBindToBound(this); // Set initial values of bound properties.\n\n  this._bindProperties.forEach(propertyName => {\n    updateBoundObservableProperty(this._observable, propertyName);\n  });\n} // Binds to an attribute in a set of iterable observables.\n//\n// @private\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @param {Function} callback\n\n\nfunction bindToMany(observables, attribute, callback) {\n  if (this._bindings.size > 1) {\n    /**\n     * Binding one attribute to many observables only possible with one attribute.\n     *\n     * @error observable-bind-to-many-not-one-binding\n     */\n    throw new CKEditorError('observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().', this);\n  }\n\n  this.to( // Bind to #attribute of each observable...\n  ...getBindingTargets(observables, attribute), // ...using given callback to parse attribute values.\n  callback);\n} // Returns an array of binding components for\n// {@link Observable#bind} from a set of iterable observables.\n//\n// @param {Array.<Observable>} observables\n// @param {String} attribute\n// @returns {Array.<String|Observable>}\n\n\nfunction getBindingTargets(observables, attribute) {\n  const observableAndAttributePairs = observables.map(observable => [observable, attribute]); // Merge pairs to one-dimension array of observables and attributes.\n\n  return Array.prototype.concat.apply([], observableAndAttributePairs);\n} // Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\n\n\nfunction isStringArray(arr) {\n  return arr.every(a => typeof a == 'string');\n} // Parses and validates {@link Observable#bind}`.to( args )` arguments and returns\n// an object with a parsed structure. For example\n//\n//\t\tA.bind( 'x' ).to( B, 'a', C, 'b', call );\n//\n// becomes\n//\n//\t\t{\n//\t\t\tto: [\n//\t\t\t\t{ observable: B, properties: [ 'a' ] },\n//\t\t\t\t{ observable: C, properties: [ 'b' ] },\n//\t\t\t],\n//\t\t\tcallback: call\n// \t\t}\n//\n// @private\n// @param {...*} args Arguments of {@link Observable#bind}`.to( args )`.\n// @returns {Object}\n\n\nfunction parseBindToArgs(...args) {\n  // Eliminate A.bind( 'x' ).to()\n  if (!args.length) {\n    /**\n     * Invalid argument syntax in `to()`.\n     *\n     * @error observable-bind-to-parse-error\n     */\n    throw new CKEditorError('observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null);\n  }\n\n  const parsed = {\n    to: []\n  };\n  let lastObservable;\n\n  if (typeof args[args.length - 1] == 'function') {\n    parsed.callback = args.pop();\n  }\n\n  args.forEach(a => {\n    if (typeof a == 'string') {\n      lastObservable.properties.push(a);\n    } else if (typeof a == 'object') {\n      lastObservable = {\n        observable: a,\n        properties: []\n      };\n      parsed.to.push(lastObservable);\n    } else {\n      throw new CKEditorError('observable-bind-to-parse-error: Invalid argument syntax in `to()`.', null);\n    }\n  });\n  return parsed;\n} // Synchronizes {@link module:utils/observablemixin#_boundObservables} with {@link Binding}.\n//\n// @private\n// @param {Binding} binding A binding to store in {@link Observable#_boundObservables}.\n// @param {Observable} toObservable A observable, which is a new component of `binding`.\n// @param {String} toPropertyName A name of `toObservable`'s property, a new component of the `binding`.\n\n\nfunction updateBoundObservables(observable, binding, toObservable, toPropertyName) {\n  const boundObservables = observable[boundObservablesSymbol];\n  const bindingsToObservable = boundObservables.get(toObservable);\n  const bindings = bindingsToObservable || {};\n\n  if (!bindings[toPropertyName]) {\n    bindings[toPropertyName] = new Set();\n  } // Pass the binding to a corresponding Set in `observable._boundObservables`.\n\n\n  bindings[toPropertyName].add(binding);\n\n  if (!bindingsToObservable) {\n    boundObservables.set(toObservable, bindings);\n  }\n} // Synchronizes {@link Observable#_boundProperties} and {@link Observable#_boundObservables}\n// with {@link BindChain}.\n//\n// Assuming the following binding being created\n//\n// \t\tA.bind( 'a', 'b' ).to( B, 'x', 'y' );\n//\n// the following bindings were initialized by {@link Observable#bind} in {@link BindChain#_bindings}:\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [] },\n// \t\t\tb: { observable: A, property: 'b', to: [] },\n// \t\t}\n//\n// Iterate over all bindings in this chain and fill their `to` properties with\n// corresponding to( ... ) arguments (components of the binding), so\n//\n// \t\t{\n// \t\t\ta: { observable: A, property: 'a', to: [ B, 'x' ] },\n// \t\t\tb: { observable: A, property: 'b', to: [ B, 'y' ] },\n// \t\t}\n//\n// Then update the structure of {@link Observable#_boundObservables} with updated\n// binding, so it becomes:\n//\n// \t\tMap( {\n// \t\t\tB: {\n// \t\t\t\tx: Set( [\n// \t\t\t\t\t{ observable: A, property: 'a', to: [ [ B, 'x' ] ] }\n// \t\t\t\t] ),\n// \t\t\t\ty: Set( [\n// \t\t\t\t\t{ observable: A, property: 'b', to: [ [ B, 'y' ] ] },\n// \t\t\t\t] )\n//\t\t\t}\n// \t\t} )\n//\n// @private\n// @param {BindChain} chain The binding initialized by {@link Observable#bind}.\n\n\nfunction updateBindToBound(chain) {\n  let toProperty;\n\n  chain._bindings.forEach((binding, propertyName) => {\n    // Note: For a binding without a callback, this will run only once\n    // like in A.bind( 'x', 'y' ).to( B, 'a', 'b' )\n    // TODO: ES6 destructuring.\n    chain._to.forEach(to => {\n      toProperty = to.properties[binding.callback ? 0 : chain._bindProperties.indexOf(propertyName)];\n      binding.to.push([to.observable, toProperty]);\n      updateBoundObservables(chain._observable, binding, to.observable, toProperty);\n    });\n  });\n} // Updates an property of a {@link Observable} with a value\n// determined by an entry in {@link Observable#_boundProperties}.\n//\n// @private\n// @param {Observable} observable A observable which property is to be updated.\n// @param {String} propertyName An property to be updated.\n\n\nfunction updateBoundObservableProperty(observable, propertyName) {\n  const boundProperties = observable[boundPropertiesSymbol];\n  const binding = boundProperties.get(propertyName);\n  let propertyValue; // When a binding with callback is created like\n  //\n  // \t\tA.bind( 'a' ).to( B, 'b', C, 'c', callback );\n  //\n  // collect B.b and C.c, then pass them to callback to set A.a.\n\n  if (binding.callback) {\n    propertyValue = binding.callback.apply(observable, binding.to.map(to => to[0][to[1]]));\n  } else {\n    propertyValue = binding.to[0];\n    propertyValue = propertyValue[0][propertyValue[1]];\n  }\n\n  if (observable.hasOwnProperty(propertyName)) {\n    observable[propertyName] = propertyValue;\n  } else {\n    observable.set(propertyName, propertyValue);\n  }\n} // Starts listening to changes in {@link BindChain._to} observables to update\n// {@link BindChain._observable} {@link BindChain._bindProperties}. Also sets the\n// initial state of {@link BindChain._observable}.\n//\n// @private\n// @param {BindChain} chain The chain initialized by {@link Observable#bind}.\n\n\nfunction attachBindToListeners(observable, toBindings) {\n  toBindings.forEach(to => {\n    const boundObservables = observable[boundObservablesSymbol];\n    let bindings; // If there's already a chain between the observables (`observable` listens to\n    // `to.observable`), there's no need to create another `change` event listener.\n\n    if (!boundObservables.get(to.observable)) {\n      observable.listenTo(to.observable, 'change', (evt, propertyName) => {\n        bindings = boundObservables.get(to.observable)[propertyName]; // Note: to.observable will fire for any property change, react\n        // to changes of properties which are bound only.\n\n        if (bindings) {\n          bindings.forEach(binding => {\n            updateBoundObservableProperty(observable, binding.property);\n          });\n        }\n      });\n    }\n  });\n}\n/**\n * Interface which adds \"observable properties\" and data binding functionality.\n *\n * Can be easily implemented by a class by mixing the {@link module:utils/observablemixin~ObservableMixin} mixin.\n *\n * Read more about the usage of this interface in the:\n * * {@glink framework/guides/architecture/core-editor-architecture#event-system-and-observables \"Event system and observables\"}\n * section of the {@glink framework/guides/architecture/core-editor-architecture \"Core editor architecture\"} guide,\n * * {@glink framework/guides/deep-dive/observables \"Observables\" deep dive} guide.\n *\n * @interface Observable\n * @extends module:utils/emittermixin~Emitter\n */\n\n/**\n * Fired when a property changed value.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `${ propertyName } has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'prop has changed from 1 to 2'\n *\n * @event change:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Fired when a property value is going to be set but is not set yet (before the `change` event is fired).\n *\n * You can control the final value of the property by using\n * the {@link module:utils/eventinfo~EventInfo#return event's `return` property}.\n *\n *\t\tobservable.set( 'prop', 1 );\n *\n *\t\tobservable.on( 'set:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value is going to be changed from ${ oldValue } to ${ newValue }` );\n *\t\t\tconsole.log( `Current property value is ${ observable[ propertyName ] }` );\n *\n *\t\t\t// Let's override the value.\n *\t\t\tevt.return = 3;\n *\t\t} );\n *\n *\t\tobservable.on( 'change:prop', ( evt, propertyName, newValue, oldValue ) => {\n *\t\t\tconsole.log( `Value has changed from ${ oldValue } to ${ newValue }` );\n *\t\t} );\n *\n *\t\tobservable.prop = 2; // -> 'Value is going to be changed from 1 to 2'\n *\t\t                     // -> 'Current property value is 1'\n *\t\t                     // -> 'Value has changed from 1 to 3'\n *\n * **Note:** Event is fired even when the new value is the same as the old value.\n *\n * @event set:{property}\n * @param {String} name The property name.\n * @param {*} value The new property value.\n * @param {*} oldValue The previous property value.\n */\n\n/**\n * Creates and sets the value of an observable property of this object. Such an property becomes a part\n * of the state and is be observable.\n *\n * It accepts also a single object literal containing key/value pairs with properties to be set.\n *\n * This method throws the `observable-set-cannot-override` error if the observable instance already\n * have a property with the given property name. This prevents from mistakenly overriding existing\n * properties and methods, but means that `foo.set( 'bar', 1 )` may be slightly slower than `foo.bar = 1`.\n *\n * @method #set\n * @param {String|Object} name The property's name or object with `name=>value` pairs.\n * @param {*} [value] The property's value (if `name` was passed in the first parameter).\n */\n\n/**\n * Binds {@link #set observable properties} to other objects implementing the\n * {@link module:utils/observablemixin~Observable} interface.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#property-bindings dedicated guide}\n * covering the topic of property bindings with some additional examples.\n *\n * Consider two objects: a `button` and an associated `command` (both `Observable`).\n *\n * A simple property binding could be as follows:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled' );\n *\n * or even shorter:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\n * which works in the following way:\n *\n * * `button.isEnabled` **instantly equals** `command.isEnabled`,\n * * whenever `command.isEnabled` changes, `button.isEnabled` will immediately reflect its value.\n *\n * **Note**: To release the binding, use {@link module:utils/observablemixin~Observable#unbind}.\n *\n * You can also \"rename\" the property in the binding by specifying the new name in the `to()` chain:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isWorking' );\n *\n * It is possible to bind more than one property at a time to shorten the code:\n *\n *\t\tbutton.bind( 'isEnabled', 'value' ).to( command );\n *\n * which corresponds to:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command );\n *\t\tbutton.bind( 'value' ).to( command );\n *\n * The binding can include more than one observable, combining multiple data sources in a custom callback:\n *\n *\t\tbutton.bind( 'isEnabled' ).to( command, 'isEnabled', ui, 'isVisible',\n *\t\t\t( isCommandEnabled, isUIVisible ) => isCommandEnabled && isUIVisible );\n *\n * It is also possible to bind to the same property in an array of observables.\n * To bind a `button` to multiple commands (also `Observables`) so that each and every one of them\n * must be enabled for the button to become enabled, use the following code:\n *\n *\t\tbutton.bind( 'isEnabled' ).toMany( [ commandA, commandB, commandC ], 'isEnabled',\n *\t\t\t( isAEnabled, isBEnabled, isCEnabled ) => isAEnabled && isBEnabled && isCEnabled );\n *\n * @method #bind\n * @param {...String} bindProperties Observable properties that will be bound to other observable(s).\n * @returns {Object} The bind chain with the `to()` and `toMany()` methods.\n */\n\n/**\n * Removes the binding created with {@link #bind}.\n *\n *\t\t// Removes the binding for the 'a' property.\n *\t\tA.unbind( 'a' );\n *\n *\t\t// Removes bindings for all properties.\n *\t\tA.unbind();\n *\n * @method #unbind\n * @param {...String} [unbindProperties] Observable properties to be unbound. All the bindings will\n * be released if no properties are provided.\n */\n\n/**\n * Turns the given methods of this object into event-based ones. This means that the new method will fire an event\n * (named after the method) and the original action will be plugged as a listener to that event.\n *\n * Read more in the {@glink framework/guides/deep-dive/observables#decorating-object-methods dedicated guide}\n * covering the topic of decorating methods with some additional examples.\n *\n * Decorating the method does not change its behavior (it only adds an event),\n * but it allows to modify it later on by listening to the method's event.\n *\n * For example, to cancel the method execution the event can be {@link module:utils/eventinfo~EventInfo#stop stopped}:\n *\n *\t\tclass Foo {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.decorate( 'method' );\n *\t\t\t}\n *\n *\t\t\tmethod() {\n *\t\t\t\tconsole.log( 'called!' );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst foo = new Foo();\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.stop();\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method(); // Nothing is logged.\n *\n *\n * **Note**: The high {@link module:utils/priorities~PriorityString priority} listener\n * has been used to execute this particular callback before the one which calls the original method\n * (which uses the \"normal\" priority).\n *\n * It is also possible to change the returned value:\n *\n *\t\tfoo.on( 'method', ( evt ) => {\n *\t\t\tevt.return = 'Foo!';\n *\t\t} );\n *\n *\t\tfoo.method(); // -> 'Foo'\n *\n * Finally, it is possible to access and modify the arguments the method is called with:\n *\n *\t\tmethod( a, b ) {\n *\t\t\tconsole.log( `${ a }, ${ b }`  );\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tfoo.on( 'method', ( evt, args ) => {\n *\t\t\targs[ 0 ] = 3;\n *\n *\t\t\tconsole.log( args[ 1 ] ); // -> 2\n *\t\t}, { priority: 'high' } );\n *\n *\t\tfoo.method( 1, 2 ); // -> '3, 2'\n *\n * @method #decorate\n * @param {String} methodName Name of the method to decorate.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/editableelement\n */\nimport ContainerElement from './containerelement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nconst documentSymbol = Symbol('document');\n/**\n * Editable element which can be a {@link module:engine/view/rooteditableelement~RootEditableElement root}\n * or nested editable area in the editor.\n *\n * Editable is automatically read-only when its {@link module:engine/view/document~Document Document} is read-only.\n *\n * The constructor of this class shouldn't be used directly. To create new `EditableElement` use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEditableElement `downcastWriter#createEditableElement()`} method.\n *\n * @extends module:engine/view/containerelement~ContainerElement\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class EditableElement extends ContainerElement {\n  /**\n   * Creates an editable element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createEditableElement\n   * @protected\n   */\n  constructor(name, attrs, children) {\n    super(name, attrs, children);\n    /**\n     * Whether the editable is in read-write or read-only mode.\n     *\n     * @observable\n     * @member {Boolean} module:engine/view/editableelement~EditableElement#isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * Whether the editable is focused.\n     *\n     * This property updates when {@link module:engine/view/document~Document#isFocused document.isFocused} or view\n     * selection is changed.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} module:engine/view/editableelement~EditableElement#isFocused\n     */\n\n    this.set('isFocused', false);\n    /**\n     * The {@link module:engine/view/document~Document} which is an owner of this root.\n     * Can only by set once.\n     * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-editableelement-document-already-set`\n     * when document is already set.\n     *\n     * @member {module:engine/view/document~Document} #document\n     */\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\teditableElement.is( 'editableElement' ); // -> true\n   *\t\teditableElement.is( 'element' ); // -> true\n   *\t\teditableElement.is( 'node' ); // -> true\n   *\t\teditableElement.is( 'view:editableElement' ); // -> true\n   *\t\teditableElement.is( 'view:element' ); // -> true\n   *\t\teditableElement.is( 'view:node' ); // -> true\n   *\n   *\t\teditableElement.is( 'model:element' ); // -> false\n   *\t\teditableElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an editbale element, you can also check its\n   * {@link module:engine/view/editableelement~EditableElement#name name}:\n   *\n   *\t\teditableElement.is( 'div' ); // -> true if this is a div element\n   *\t\teditableElement.is( 'editableElement', 'div' ); // -> same as above\n   *\t\ttext.is( 'div' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type && type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'editableElement' || super.is(type);\n    } else {\n      return cutType == 'editableElement' && name == this.name || super.is(type, name);\n    }\n  }\n\n  destroy() {\n    this.stopListening();\n  }\n  /**\n   * Returns document associated with the editable.\n   *\n   * @readonly\n   * @returns {module:engine/view/document~Document}\n   */\n\n\n  get document() {\n    return this.getCustomProperty(documentSymbol);\n  }\n  /**\n   * Sets document of this editable element.\n   *\n   * @protected\n   * @param {module:engine/view/document~Document} document\n   */\n\n\n  set _document(document) {\n    if (this.getCustomProperty(documentSymbol)) {\n      /**\n       * View document is already set. It can only be set once.\n       *\n       * @error view-editableelement-document-already-set\n       */\n      throw new CKEditorError('view-editableelement-document-already-set: View document is already set.', this);\n    }\n\n    this._setCustomProperty(documentSymbol, document);\n\n    this.bind('isReadOnly').to(document);\n    this.bind('isFocused').to(document, 'isFocused', isFocused => isFocused && document.selection.editableElement == this); // Update focus state based on selection changes.\n\n    this.listenTo(document.selection, 'change', () => {\n      this.isFocused = document.isFocused && document.selection.editableElement == this;\n    });\n  }\n\n}\nmix(EditableElement, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/rooteditableelement\n */\nimport EditableElement from './editableelement';\nconst rootNameSymbol = Symbol('rootName');\n/**\n * Class representing a single root in the data view. A root can be either {@link ~RootEditableElement#isReadOnly editable or read-only},\n * but in both cases it is called \"an editable\". Roots can contain other {@link module:engine/view/editableelement~EditableElement\n * editable elements} making them \"nested editables\".\n *\n * @extends module:engine/view/editableelement~EditableElement\n */\n\nexport default class RootEditableElement extends EditableElement {\n  /**\n   * Creates root editable element.\n   *\n   * @param {String} name Node name.\n   */\n  constructor(name) {\n    super(name);\n    /**\n     * Name of this root inside {@link module:engine/view/document~Document} that is an owner of this root. If no\n     * other name is set, `main` name is used.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.rootName = 'main';\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\trootEditableElement.is( 'rootEditableElement' ); // -> true\n   *\t\trootEditableElement.is( 'editableElement' ); // -> true\n   *\t\trootEditableElement.is( 'element' ); // -> true\n   *\t\trootEditableElement.is( 'node' ); // -> true\n   *\t\trootEditableElement.is( 'view:rootEditableElement' ); // -> true\n   *\t\trootEditableElement.is( 'view:editableElement' ); // -> true\n   *\t\trootEditableElement.is( 'view:element' ); // -> true\n   *\t\trootEditableElement.is( 'view:node' ); // -> true\n   *\n   *\t\trootEditableElement.is( 'model:element' ); // -> false\n   *\t\trootEditableElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is a root editbale element, you can also check its\n   * {@link module:engine/view/rooteditableelement~RootEditableElement#name name}:\n   *\n   *\t\trootEditableElement.is( 'div' ); // -> true if this is a div root editable element\n   *\t\trootEditableElement.is( 'rootEditableElement', 'div' ); // -> same as above\n   *\t\ttext.is( 'div' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'rootElement' || super.is(type);\n    } else {\n      return cutType == 'rootElement' && name == this.name || super.is(type, name);\n    }\n  }\n\n  get rootName() {\n    return this.getCustomProperty(rootNameSymbol);\n  }\n\n  set rootName(rootName) {\n    this._setCustomProperty(rootNameSymbol, rootName);\n  }\n  /**\n   * Overrides old element name and sets new one.\n   * This is needed because view roots are created before they are attached to the DOM.\n   * The name of the root element is temporary at this stage. It has to be changed when the\n   * view root element is attached to the DOM element.\n   *\n   * @protected\n   * @param {String} name The new name of element.\n   */\n\n\n  set _name(name) {\n    this.name = name;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/treewalker\n */\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\n\nexport default class TreeWalker {\n  /**\n   * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n   *\n   * @constructor\n   * @param {Object} options Object with configuration.\n   * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n   * @param {module:engine/view/position~Position} [options.startPosition] Starting position.\n   * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n   * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all characters from\n   * {@link module:engine/view/text~Text} should be returned as one {@link module:engine/view/text~Text} (`false`) ore one by one as\n   * {@link module:engine/view/textproxy~TextProxy} (`true`).\n   * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n   * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n   * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n   * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n   * each {@link module:engine/view/element~Element} will be returned once, while if the option is `false` they might be returned\n   * twice: for `'elementStart'` and `'elementEnd'`.\n   */\n  constructor(options = {}) {\n    if (!options.boundaries && !options.startPosition) {\n      /**\n       * Neither boundaries nor starting position have been defined.\n       *\n       * @error view-tree-walker-no-start-position\n       */\n      throw new CKEditorError('view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.', null);\n    }\n\n    if (options.direction && options.direction != 'forward' && options.direction != 'backward') {\n      throw new CKEditorError('view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.', options.startPosition, {\n        direction: options.direction\n      });\n    }\n    /**\n     * Iterator boundaries.\n     *\n     * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n     * on the start of boundary, then `{ done: true }` is returned.\n     *\n     * If boundaries are not defined they are set before first and after last child of the root node.\n     *\n     * @readonly\n     * @member {module:engine/view/range~Range} module:engine/view/treewalker~TreeWalker#boundaries\n     */\n\n\n    this.boundaries = options.boundaries || null;\n    /**\n     * Iterator position. If start position is not defined then position depends on {@link #direction}. If direction is\n     * `'forward'` position starts form the beginning, when direction is `'backward'` position starts from the end.\n     *\n     * @readonly\n     * @member {module:engine/view/position~Position} module:engine/view/treewalker~TreeWalker#position\n     */\n\n    if (options.startPosition) {\n      this.position = Position._createAt(options.startPosition);\n    } else {\n      this.position = Position._createAt(options.boundaries[options.direction == 'backward' ? 'end' : 'start']);\n    }\n    /**\n     * Walking direction. Defaults `'forward'`.\n     *\n     * @readonly\n     * @member {'backward'|'forward'} module:engine/view/treewalker~TreeWalker#direction\n     */\n\n\n    this.direction = options.direction || 'forward';\n    /**\n     * Flag indicating whether all characters from {@link module:engine/view/text~Text} should be returned as one\n     * {@link module:engine/view/text~Text} or one by one as {@link module:engine/view/textproxy~TextProxy}.\n     *\n     * @readonly\n     * @member {Boolean} module:engine/view/treewalker~TreeWalker#singleCharacters\n     */\n\n    this.singleCharacters = !!options.singleCharacters;\n    /**\n     * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n     * iterated node will not be returned along with `elementEnd` tag.\n     *\n     * @readonly\n     * @member {Boolean} module:engine/view/treewalker~TreeWalker#shallow\n     */\n\n    this.shallow = !!options.shallow;\n    /**\n     * Flag indicating whether iterator should ignore `elementEnd` tags. If set to `true`, walker will not\n     * return a parent node of the start position. Each {@link module:engine/view/element~Element} will be returned once.\n     * When set to `false` each element might be returned twice: for `'elementStart'` and `'elementEnd'`.\n     *\n     * @readonly\n     * @member {Boolean} module:engine/view/treewalker~TreeWalker#ignoreElementEnd\n     */\n\n    this.ignoreElementEnd = !!options.ignoreElementEnd;\n    /**\n     * Start boundary parent.\n     *\n     * @private\n     * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryStartParent\n     */\n\n    this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n    /**\n     * End boundary parent.\n     *\n     * @private\n     * @member {module:engine/view/node~Node} module:engine/view/treewalker~TreeWalker#_boundaryEndParent\n     */\n\n    this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n  }\n  /**\n   * Iterable interface.\n   *\n   * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n   *\n   * For example:\n   *\n   * \t\twalker.skip( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n   * \t\twalker.skip( value => true ); // Move the position to the end: <p>{}foo</p> -> <p>foo</p>[]\n   * \t\twalker.skip( value => false ); // Do not move the position.\n   *\n   * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n   * return `true` if the value should be skipped or `false` if not.\n   */\n\n\n  skip(skip) {\n    let done, value, prevPosition;\n\n    do {\n      prevPosition = this.position;\n      ({\n        done,\n        value\n      } = this.next());\n    } while (!done && skip(value));\n\n    if (!done) {\n      this.position = prevPosition;\n    }\n  }\n  /**\n   * Gets the next tree walker's value.\n   *\n   * @returns {module:engine/view/treewalker~TreeWalkerValue} Object implementing iterator interface, returning\n   * information about taken step.\n   */\n\n\n  next() {\n    if (this.direction == 'forward') {\n      return this._next();\n    } else {\n      return this._previous();\n    }\n  }\n  /**\n   * Makes a step forward in view. Moves the {@link #position} to the next position and returns the encountered value.\n   *\n   * @private\n   * @returns {Object}\n   * @returns {Boolean} return.done `true` if iterator is done, `false` otherwise.\n   * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n   */\n\n\n  _next() {\n    let position = this.position.clone();\n    const previousPosition = this.position;\n    const parent = position.parent; // We are at the end of the root.\n\n    if (parent.parent === null && position.offset === parent.childCount) {\n      return {\n        done: true\n      };\n    } // We reached the walker boundary.\n\n\n    if (parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset) {\n      return {\n        done: true\n      };\n    } // Get node just after current position.\n\n\n    let node; // Text is a specific parent because it contains string instead of child nodes.\n\n    if (parent instanceof Text) {\n      if (position.isAtEnd) {\n        // Prevent returning \"elementEnd\" for Text node. Skip that value and return the next walker step.\n        this.position = Position._createAfter(parent);\n        return this._next();\n      }\n\n      node = parent.data[position.offset];\n    } else {\n      node = parent.getChild(position.offset);\n    }\n\n    if (node instanceof Element) {\n      if (!this.shallow) {\n        position = new Position(node, 0);\n      } else {\n        position.offset++;\n      }\n\n      this.position = position;\n      return this._formatReturnValue('elementStart', node, previousPosition, position, 1);\n    } else if (node instanceof Text) {\n      if (this.singleCharacters) {\n        position = new Position(node, 0);\n        this.position = position;\n        return this._next();\n      } else {\n        let charactersCount = node.data.length;\n        let item; // If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\n        if (node == this._boundaryEndParent) {\n          charactersCount = this.boundaries.end.offset;\n          item = new TextProxy(node, 0, charactersCount);\n          position = Position._createAfter(item);\n        } else {\n          item = new TextProxy(node, 0, node.data.length); // If not just keep moving forward.\n\n          position.offset++;\n        }\n\n        this.position = position;\n        return this._formatReturnValue('text', item, previousPosition, position, charactersCount);\n      }\n    } else if (typeof node == 'string') {\n      let textLength;\n\n      if (this.singleCharacters) {\n        textLength = 1;\n      } else {\n        // Check if text stick out of walker range.\n        const endOffset = parent === this._boundaryEndParent ? this.boundaries.end.offset : parent.data.length;\n        textLength = endOffset - position.offset;\n      }\n\n      const textProxy = new TextProxy(parent, position.offset, textLength);\n      position.offset += textLength;\n      this.position = position;\n      return this._formatReturnValue('text', textProxy, previousPosition, position, textLength);\n    } else {\n      // `node` is not set, we reached the end of current `parent`.\n      position = Position._createAfter(parent);\n      this.position = position;\n\n      if (this.ignoreElementEnd) {\n        return this._next();\n      } else {\n        return this._formatReturnValue('elementEnd', parent, previousPosition, position);\n      }\n    }\n  }\n  /**\n   * Makes a step backward in view. Moves the {@link #position} to the previous position and returns the encountered value.\n   *\n   * @private\n   * @returns {Object}\n   * @returns {Boolean} return.done True if iterator is done.\n   * @returns {module:engine/view/treewalker~TreeWalkerValue} return.value Information about taken step.\n   */\n\n\n  _previous() {\n    let position = this.position.clone();\n    const previousPosition = this.position;\n    const parent = position.parent; // We are at the beginning of the root.\n\n    if (parent.parent === null && position.offset === 0) {\n      return {\n        done: true\n      };\n    } // We reached the walker boundary.\n\n\n    if (parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset) {\n      return {\n        done: true\n      };\n    } // Get node just before current position.\n\n\n    let node; // Text {@link module:engine/view/text~Text} element is a specific parent because contains string instead of child nodes.\n\n    if (parent instanceof Text) {\n      if (position.isAtStart) {\n        // Prevent returning \"elementStart\" for Text node. Skip that value and return the next walker step.\n        this.position = Position._createBefore(parent);\n        return this._previous();\n      }\n\n      node = parent.data[position.offset - 1];\n    } else {\n      node = parent.getChild(position.offset - 1);\n    }\n\n    if (node instanceof Element) {\n      if (!this.shallow) {\n        position = new Position(node, node.childCount);\n        this.position = position;\n\n        if (this.ignoreElementEnd) {\n          return this._previous();\n        } else {\n          return this._formatReturnValue('elementEnd', node, previousPosition, position);\n        }\n      } else {\n        position.offset--;\n        this.position = position;\n        return this._formatReturnValue('elementStart', node, previousPosition, position, 1);\n      }\n    } else if (node instanceof Text) {\n      if (this.singleCharacters) {\n        position = new Position(node, node.data.length);\n        this.position = position;\n        return this._previous();\n      } else {\n        let charactersCount = node.data.length;\n        let item; // If text stick out of walker range, we need to cut it and wrap in TextProxy.\n\n        if (node == this._boundaryStartParent) {\n          const offset = this.boundaries.start.offset;\n          item = new TextProxy(node, offset, node.data.length - offset);\n          charactersCount = item.data.length;\n          position = Position._createBefore(item);\n        } else {\n          item = new TextProxy(node, 0, node.data.length); // If not just keep moving backward.\n\n          position.offset--;\n        }\n\n        this.position = position;\n        return this._formatReturnValue('text', item, previousPosition, position, charactersCount);\n      }\n    } else if (typeof node == 'string') {\n      let textLength;\n\n      if (!this.singleCharacters) {\n        // Check if text stick out of walker range.\n        const startOffset = parent === this._boundaryStartParent ? this.boundaries.start.offset : 0;\n        textLength = position.offset - startOffset;\n      } else {\n        textLength = 1;\n      }\n\n      position.offset -= textLength;\n      const textProxy = new TextProxy(parent, position.offset, textLength);\n      this.position = position;\n      return this._formatReturnValue('text', textProxy, previousPosition, position, textLength);\n    } else {\n      // `node` is not set, we reached the beginning of current `parent`.\n      position = Position._createBefore(parent);\n      this.position = position;\n      return this._formatReturnValue('elementStart', parent, previousPosition, position, 1);\n    }\n  }\n  /**\n   * Format returned data and adjust `previousPosition` and `nextPosition` if reach the bound of the {@link module:engine/view/text~Text}.\n   *\n   * @private\n   * @param {module:engine/view/treewalker~TreeWalkerValueType} type Type of step.\n   * @param {module:engine/view/item~Item} item Item between old and new position.\n   * @param {module:engine/view/position~Position} previousPosition Previous position of iterator.\n   * @param {module:engine/view/position~Position} nextPosition Next position of iterator.\n   * @param {Number} [length] Length of the item.\n   * @returns {module:engine/view/treewalker~TreeWalkerValue}\n   */\n\n\n  _formatReturnValue(type, item, previousPosition, nextPosition, length) {\n    // Text is a specific parent, because contains string instead of children.\n    // Walker doesn't enter to the Text except situations when walker is iterating over every single character,\n    // or the bound starts/ends inside the Text. So when the position is at the beginning or at the end of the Text\n    // we move it just before or just after Text.\n    if (item instanceof TextProxy) {\n      // Position is at the end of Text.\n      if (item.offsetInText + item.data.length == item.textNode.data.length) {\n        if (this.direction == 'forward' && !(this.boundaries && this.boundaries.end.isEqual(this.position))) {\n          nextPosition = Position._createAfter(item.textNode); // When we change nextPosition of returned value we need also update walker current position.\n\n          this.position = nextPosition;\n        } else {\n          previousPosition = Position._createAfter(item.textNode);\n        }\n      } // Position is at the begining ot the text.\n\n\n      if (item.offsetInText === 0) {\n        if (this.direction == 'backward' && !(this.boundaries && this.boundaries.start.isEqual(this.position))) {\n          nextPosition = Position._createBefore(item.textNode); // When we change nextPosition of returned value we need also update walker current position.\n\n          this.position = nextPosition;\n        } else {\n          previousPosition = Position._createBefore(item.textNode);\n        }\n      }\n    }\n\n    return {\n      done: false,\n      value: {\n        type,\n        item,\n        previousPosition,\n        nextPosition,\n        length\n      }\n    };\n  }\n\n}\n/**\n * Type of the step made by {@link module:engine/view/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end\n * of node, or `'text'` if walker traversed over single and multiple characters.\n * For {@link module:engine/view/text~Text} `elementStart` and `elementEnd` is not returned.\n *\n * @typedef {String} module:engine/view/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/view/treewalker~TreeWalker} when traversing tree view.\n *\n * @typedef {Object} module:engine/view/treewalker~TreeWalkerValue\n * @property {module:engine/view/treewalker~TreeWalkerValueType} type\n * @property {module:engine/view/item~Item} item Item between the old and the new positions\n * of the tree walker.\n * @property {module:engine/view/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {module:engine/view/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * * If the position is at the beginning or at the end of the {@link module:engine/view/text~Text} it is always moved from the\n * inside of the text to its parent just before or just after that text.\n * @property {Number} [length] Length of the item. For `'elementStart'` it is `1`. For `'text'` it is\n * the length of that text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/position\n */\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EditableElement from './editableelement'; // To check if component is loaded more than once.\n\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Position in the view tree. Position is represented by its parent node and an offset in this parent.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\n\nexport default class Position {\n  /**\n   * Creates a position.\n   *\n   * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} parent Position parent.\n   * @param {Number} offset Position offset.\n   */\n  constructor(parent, offset) {\n    /**\n     * Position parent.\n     *\n     * @readonly\n     * @member {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n     * module:engine/view/position~Position#parent\n     */\n    this.parent = parent;\n    /**\n     * Position offset.\n     *\n     * @readonly\n     * @member {Number} module:engine/view/position~Position#offset\n     */\n\n    this.offset = offset;\n  }\n  /**\n   * Node directly after the position. Equals `null` when there is no node after position or position is located\n   * inside text node.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|null}\n   */\n\n\n  get nodeAfter() {\n    if (this.parent.is('text')) {\n      return null;\n    }\n\n    return this.parent.getChild(this.offset) || null;\n  }\n  /**\n   * Node directly before the position. Equals `null` when there is no node before position or position is located\n   * inside text node.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|null}\n   */\n\n\n  get nodeBefore() {\n    if (this.parent.is('text')) {\n      return null;\n    }\n\n    return this.parent.getChild(this.offset - 1) || null;\n  }\n  /**\n   * Is `true` if position is at the beginning of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isAtStart() {\n    return this.offset === 0;\n  }\n  /**\n   * Is `true` if position is at the end of its {@link module:engine/view/position~Position#parent parent}, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isAtEnd() {\n    const endOffset = this.parent.is('text') ? this.parent.data.length : this.parent.childCount;\n    return this.offset === endOffset;\n  }\n  /**\n   * Position's root, that is the root of the position's parent element.\n   *\n   * @readonly\n   * @type {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this.parent.root;\n  }\n  /**\n   * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this position, or `null` if\n   * position is not inside an editable element.\n   *\n   * @type {module:engine/view/editableelement~EditableElement|null}\n   */\n\n\n  get editableElement() {\n    let editable = this.parent;\n\n    while (!(editable instanceof EditableElement)) {\n      if (editable.parent) {\n        editable = editable.parent;\n      } else {\n        return null;\n      }\n    }\n\n    return editable;\n  }\n  /**\n   * Returns a new instance of Position with offset incremented by `shift` value.\n   *\n   * @param {Number} shift How position offset should get changed. Accepts negative values.\n   * @returns {module:engine/view/position~Position} Shifted position.\n   */\n\n\n  getShiftedBy(shift) {\n    const shifted = Position._createAt(this);\n\n    const offset = shifted.offset + shift;\n    shifted.offset = offset < 0 ? 0 : offset;\n    return shifted;\n  }\n  /**\n   * Gets the farthest position which matches the callback using\n   * {@link module:engine/view/treewalker~TreeWalker TreeWalker}.\n   *\n   * For example:\n   *\n   * \t\tgetLastMatchingPosition( value => value.type == 'text' ); // <p>{}foo</p> -> <p>foo[]</p>\n   * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } ); // <p>foo[]</p> -> <p>{}foo</p>\n   * \t\tgetLastMatchingPosition( value => false ); // Do not move the position.\n   *\n   * @param {Function} skip Callback function. Gets {@link module:engine/view/treewalker~TreeWalkerValue} and should\n   * return `true` if the value should be skipped or `false` if not.\n   * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n   *\n   * @returns {module:engine/view/position~Position} The position after the last item which matches the `skip` callback test.\n   */\n\n\n  getLastMatchingPosition(skip, options = {}) {\n    options.startPosition = this;\n    const treeWalker = new TreeWalker(options);\n    treeWalker.skip(skip);\n    return treeWalker.position;\n  }\n  /**\n   * Returns ancestors array of this position, that is this position's parent and it's ancestors.\n   *\n   * @returns {Array} Array with ancestors.\n   */\n\n\n  getAncestors() {\n    if (this.parent.is('documentFragment')) {\n      return [this.parent];\n    } else {\n      return this.parent.getAncestors({\n        includeSelf: true\n      });\n    }\n  }\n  /**\n   * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n   * which is a common ancestor of both positions.\n   *\n   * @param {module:engine/view/position~Position} position\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor(position) {\n    const ancestorsA = this.getAncestors();\n    const ancestorsB = position.getAncestors();\n    let i = 0;\n\n    while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n      i++;\n    }\n\n    return i === 0 ? null : ancestorsA[i - 1];\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\tposition.is( 'position' ); // -> true\n   *\t\tposition.is( 'view:position' ); // -> true\n   *\n   *\t\tposition.is( 'model:position' ); // -> false\n   *\t\tposition.is( 'element' ); // -> false\n   *\t\tposition.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'position' || type == 'view:position';\n  }\n  /**\n   * Checks whether this position equals given position.\n   *\n   * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} True if positions are same.\n   */\n\n\n  isEqual(otherPosition) {\n    return this.parent == otherPosition.parent && this.offset == otherPosition.offset;\n  }\n  /**\n   * Checks whether this position is located before given position. When method returns `false` it does not mean that\n   * this position is after give one. Two positions may be located inside separate roots and in that situation this\n   * method will still return `false`.\n   *\n   * @see module:engine/view/position~Position#isAfter\n   * @see module:engine/view/position~Position#compareWith\n   * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} Returns `true` if this position is before given position.\n   */\n\n\n  isBefore(otherPosition) {\n    return this.compareWith(otherPosition) == 'before';\n  }\n  /**\n   * Checks whether this position is located after given position. When method returns `false` it does not mean that\n   * this position is before give one. Two positions may be located inside separate roots and in that situation this\n   * method will still return `false`.\n   *\n   * @see module:engine/view/position~Position#isBefore\n   * @see module:engine/view/position~Position#compareWith\n   * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} Returns `true` if this position is after given position.\n   */\n\n\n  isAfter(otherPosition) {\n    return this.compareWith(otherPosition) == 'after';\n  }\n  /**\n   * Checks whether this position is before, after or in same position that other position. Two positions may be also\n   * different when they are located in separate roots.\n   *\n   * @param {module:engine/view/position~Position} otherPosition Position to compare with.\n   * @returns {module:engine/view/position~PositionRelation}\n   */\n\n\n  compareWith(otherPosition) {\n    if (this.root !== otherPosition.root) {\n      return 'different';\n    }\n\n    if (this.isEqual(otherPosition)) {\n      return 'same';\n    } // Get path from root to position's parent element.\n\n\n    const thisPath = this.parent.is('node') ? this.parent.getPath() : [];\n    const otherPath = otherPosition.parent.is('node') ? otherPosition.parent.getPath() : []; // Add the positions' offsets to the parents offsets.\n\n    thisPath.push(this.offset);\n    otherPath.push(otherPosition.offset); // Compare both path arrays to find common ancestor.\n\n    const result = compareArrays(thisPath, otherPath);\n\n    switch (result) {\n      case 'prefix':\n        return 'before';\n\n      case 'extension':\n        return 'after';\n\n      default:\n        return thisPath[result] < otherPath[result] ? 'before' : 'after';\n    }\n  }\n  /**\n   * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this positions as a start position.\n   *\n   * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}\n   * @param {module:engine/view/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n   * @param {Boolean} [options.singleCharacters=false]\n   * @param {Boolean} [options.shallow=false]\n   * @param {Boolean} [options.ignoreElementEnd=false]\n   */\n\n\n  getWalker(options = {}) {\n    options.startPosition = this;\n    return new TreeWalker(options);\n  }\n\n  clone() {\n    return new Position(this.parent, this.offset);\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link module:engine/view/position~Position._createBefore},\n   * * {@link module:engine/view/position~Position._createAfter}.\n   *\n   * @protected\n   * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  static _createAt(itemOrPosition, offset) {\n    if (itemOrPosition instanceof Position) {\n      return new this(itemOrPosition.parent, itemOrPosition.offset);\n    } else {\n      const node = itemOrPosition;\n\n      if (offset == 'end') {\n        offset = node.is('text') ? node.data.length : node.childCount;\n      } else if (offset == 'before') {\n        return this._createBefore(node);\n      } else if (offset == 'after') {\n        return this._createAfter(node);\n      } else if (offset !== 0 && !offset) {\n        /**\n         * {@link module:engine/view/view~View#createPositionAt `View#createPositionAt()`}\n         * requires the offset to be specified when the first parameter is a view item.\n         *\n         * @error view-createPositionAt-offset-required\n         */\n        throw new CKEditorError('view-createPositionAt-offset-required: ' + 'View#createPositionAt() requires the offset when the first parameter is a view item.', node);\n      }\n\n      return new Position(node, offset);\n    }\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @protected\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  static _createAfter(item) {\n    // TextProxy is not a instance of Node so we need do handle it in specific way.\n    if (item.is('textProxy')) {\n      return new Position(item.textNode, item.offsetInText + item.data.length);\n    }\n\n    if (!item.parent) {\n      /**\n       * You can not make a position after a root.\n       *\n       * @error view-position-after-root\n       * @param {module:engine/view/node~Node} root\n       */\n      throw new CKEditorError('view-position-after-root: You can not make position after root.', item, {\n        root: item\n      });\n    }\n\n    return new Position(item.parent, item.index + 1);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @protected\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  static _createBefore(item) {\n    // TextProxy is not a instance of Node so we need do handle it in specific way.\n    if (item.is('textProxy')) {\n      return new Position(item.textNode, item.offsetInText);\n    }\n\n    if (!item.parent) {\n      /**\n       * You cannot make a position before a root.\n       *\n       * @error view-position-before-root\n       * @param {module:engine/view/node~Node} root\n       */\n      throw new CKEditorError('view-position-before-root: You can not make position before root.', item, {\n        root: item\n      });\n    }\n\n    return new Position(item.parent, item.index);\n  }\n\n}\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/view/position~PositionRelation\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/range\n */\nimport Position from './position';\nimport TreeWalker from './treewalker';\n/**\n * Range in the view tree. A range is represented by its start and end {@link module:engine/view/position~Position positions}.\n *\n * In order to create a new position instance use the `createPosition*()` factory methods available in:\n *\n * * {@link module:engine/view/view~View}\n * * {@link module:engine/view/downcastwriter~DowncastWriter}\n * * {@link module:engine/view/upcastwriter~UpcastWriter}\n */\n\nexport default class Range {\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** Constructor creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at the `start` position.\n   */\n  constructor(start, end = null) {\n    /**\n     * Start position.\n     *\n     * @readonly\n     * @member {module:engine/view/position~Position}\n     */\n    this.start = start.clone();\n    /**\n     * End position.\n     *\n     * @readonly\n     * @member {module:engine/view/position~Position}\n     */\n\n    this.end = end ? end.clone() : start.clone();\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n   * them together with additional information like length or {@link module:engine/view/position~Position positions},\n   * grouped as {@link module:engine/view/treewalker~TreeWalkerValue}.\n   *\n   * This iterator uses {@link module:engine/view/treewalker~TreeWalker TreeWalker} with `boundaries` set to this range and\n   * `ignoreElementEnd` option\n   * set to `true`.\n   *\n   * @returns {Iterable.<module:engine/view/treewalker~TreeWalkerValue>}\n   */\n\n\n  *[Symbol.iterator]() {\n    yield* new TreeWalker({\n      boundaries: this,\n      ignoreElementEnd: true\n    });\n  }\n  /**\n   * Returns whether the range is collapsed, that is it start and end positions are equal.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isCollapsed() {\n    return this.start.isEqual(this.end);\n  }\n  /**\n   * Returns whether this range is flat, that is if {@link module:engine/view/range~Range#start start} position and\n   * {@link module:engine/view/range~Range#end end} position are in the same {@link module:engine/view/position~Position#parent parent}.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isFlat() {\n    return this.start.parent === this.end.parent;\n  }\n  /**\n   * Range root element.\n   *\n   * @type {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this.start.root;\n  }\n  /**\n   * Creates a maximal range that has the same content as this range but is expanded in both ways (at the beginning\n   * and at the end).\n   *\n   * For example:\n   *\n   *\t\t<p>Foo</p><p><b>{Bar}</b></p> -> <p>Foo</p>[<p><b>Bar</b>]</p>\n   *\t\t<p><b>foo</b>{bar}<span></span></p> -> <p><b>foo[</b>bar<span></span>]</p>\n   *\n   * Note that in the sample above:\n   *\n   * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n   * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n   * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n   *\n   * @returns {module:engine/view/range~Range} Enlarged range.\n   */\n\n\n  getEnlarged() {\n    let start = this.start.getLastMatchingPosition(enlargeTrimSkip, {\n      direction: 'backward'\n    });\n    let end = this.end.getLastMatchingPosition(enlargeTrimSkip); // Fix positions, in case if they are in Text node.\n\n    if (start.parent.is('text') && start.isAtStart) {\n      start = Position._createBefore(start.parent);\n    }\n\n    if (end.parent.is('text') && end.isAtEnd) {\n      end = Position._createAfter(end.parent);\n    }\n\n    return new Range(start, end);\n  }\n  /**\n   * Creates a minimum range that has the same content as this range but is trimmed in both ways (at the beginning\n   * and at the end).\n   *\n   * For example:\n   *\n   *\t\t<p>Foo</p>[<p><b>Bar</b>]</p> -> <p>Foo</p><p><b>{Bar}</b></p>\n   *\t\t<p><b>foo[</b>bar<span></span>]</p> -> <p><b>foo</b>{bar}<span></span></p>\n   *\n   * Note that in the sample above:\n   *\n   * - `<p>` have type of {@link module:engine/view/containerelement~ContainerElement},\n   * - `<b>` have type of {@link module:engine/view/attributeelement~AttributeElement},\n   * - `<span>` have type of {@link module:engine/view/uielement~UIElement}.\n   *\n   * @returns {module:engine/view/range~Range} Shrink range.\n   */\n\n\n  getTrimmed() {\n    let start = this.start.getLastMatchingPosition(enlargeTrimSkip);\n\n    if (start.isAfter(this.end) || start.isEqual(this.end)) {\n      return new Range(start, start);\n    }\n\n    let end = this.end.getLastMatchingPosition(enlargeTrimSkip, {\n      direction: 'backward'\n    });\n    const nodeAfterStart = start.nodeAfter;\n    const nodeBeforeEnd = end.nodeBefore; // Because TreeWalker prefers positions next to text node, we need to move them manually into these text nodes.\n\n    if (nodeAfterStart && nodeAfterStart.is('text')) {\n      start = new Position(nodeAfterStart, 0);\n    }\n\n    if (nodeBeforeEnd && nodeBeforeEnd.is('text')) {\n      end = new Position(nodeBeforeEnd, nodeBeforeEnd.data.length);\n    }\n\n    return new Range(start, end);\n  }\n  /**\n   * Two ranges are equal if their start and end positions are equal.\n   *\n   * @param {module:engine/view/range~Range} otherRange Range to compare with.\n   * @returns {Boolean} `true` if ranges are equal, `false` otherwise\n   */\n\n\n  isEqual(otherRange) {\n    return this == otherRange || this.start.isEqual(otherRange.start) && this.end.isEqual(otherRange.end);\n  }\n  /**\n   * Checks whether this range contains given {@link module:engine/view/position~Position position}.\n   *\n   * @param {module:engine/view/position~Position} position Position to check.\n   * @returns {Boolean} `true` if given {@link module:engine/view/position~Position position} is contained in this range,\n   * `false` otherwise.\n   */\n\n\n  containsPosition(position) {\n    return position.isAfter(this.start) && position.isBefore(this.end);\n  }\n  /**\n   * Checks whether this range contains given {@link module:engine/view/range~Range range}.\n   *\n   * @param {module:engine/view/range~Range} otherRange Range to check.\n   * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n   * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n   * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n   * @returns {Boolean} `true` if given {@link module:engine/view/range~Range range} boundaries are contained by this range, `false`\n   * otherwise.\n   */\n\n\n  containsRange(otherRange, loose = false) {\n    if (otherRange.isCollapsed) {\n      loose = false;\n    }\n\n    const containsStart = this.containsPosition(otherRange.start) || loose && this.start.isEqual(otherRange.start);\n    const containsEnd = this.containsPosition(otherRange.end) || loose && this.end.isEqual(otherRange.end);\n    return containsStart && containsEnd;\n  }\n  /**\n   * Computes which part(s) of this {@link module:engine/view/range~Range range} is not a part of given\n   * {@link module:engine/view/range~Range range}.\n   * Returned array contains zero, one or two {@link module:engine/view/range~Range ranges}.\n   *\n   * Examples:\n   *\n   *\t\tlet foo = downcastWriter.createText( 'foo' );\n   *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n   *\t\tlet bar = downcastWriter.createText( 'bar' );\n   *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n   *\n   *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n   *\t\tlet otherRange = view.createRange( // \"oo\", img, \"ba\" are in range.\n   *\t\t\tview.createPositionAt( foo, 1 ),\n   *\t\t\tview.createPositionAt( bar, 2 )\n   *\t\t);\n   *\t\tlet transformed = range.getDifference( otherRange );\n   *\t\t// transformed array has no ranges because `otherRange` contains `range`\n   *\n   *\t\totherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n   *\t\ttransformed = range.getDifference( otherRange );\n   *\t\t// transformed array has one range: from ( p, 2 ) to ( bar, 1 )\n   *\n   *\t\totherRange = view.createRange( view.createPositionAt( p, 1 ), view.createPositionAt( p, 2 ) ); // img is in range.\n   *\t\ttransformed = range.getDifference( otherRange );\n   *\t\t// transformed array has two ranges: from ( foo, 1 ) to ( p, 1 ) and from ( p, 2 ) to ( bar, 1 )\n   *\n   * @param {module:engine/view/range~Range} otherRange Range to differentiate against.\n   * @returns {Array.<module:engine/view/range~Range>} The difference between ranges.\n   */\n\n\n  getDifference(otherRange) {\n    const ranges = [];\n\n    if (this.isIntersecting(otherRange)) {\n      // Ranges intersect.\n      if (this.containsPosition(otherRange.start)) {\n        // Given range start is inside this range. This means that we have to\n        // add shrunken range - from the start to the middle of this range.\n        ranges.push(new Range(this.start, otherRange.start));\n      }\n\n      if (this.containsPosition(otherRange.end)) {\n        // Given range end is inside this range. This means that we have to\n        // add shrunken range - from the middle of this range to the end.\n        ranges.push(new Range(otherRange.end, this.end));\n      }\n    } else {\n      // Ranges do not intersect, return the original range.\n      ranges.push(this.clone());\n    }\n\n    return ranges;\n  }\n  /**\n   * Returns an intersection of this {@link module:engine/view/range~Range range} and given {@link module:engine/view/range~Range range}.\n   * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n   *\n   * Examples:\n   *\n   *\t\tlet foo = downcastWriter.createText( 'foo' );\n   *\t\tlet img = downcastWriter.createContainerElement( 'img' );\n   *\t\tlet bar = downcastWriter.createText( 'bar' );\n   *\t\tlet p = downcastWriter.createContainerElement( 'p', null, [ foo, img, bar ] );\n   *\n   *\t\tlet range = view.createRange( view.createPositionAt( foo, 2 ), view.createPositionAt( bar, 1 ); // \"o\", img, \"b\" are in range.\n   *\t\tlet otherRange = view.createRange( view.createPositionAt( foo, 1 ), view.createPositionAt( p, 2 ); // \"oo\", img are in range.\n   *\t\tlet transformed = range.getIntersection( otherRange ); // range from ( foo, 1 ) to ( p, 2 ).\n   *\n   *\t\totherRange = view.createRange( view.createPositionAt( bar, 1 ), view.createPositionAt( bar, 3 ); \"ar\" is in range.\n   *\t\ttransformed = range.getIntersection( otherRange ); // null - no common part.\n   *\n   * @param {module:engine/view/range~Range} otherRange Range to check for intersection.\n   * @returns {module:engine/view/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n   */\n\n\n  getIntersection(otherRange) {\n    if (this.isIntersecting(otherRange)) {\n      // Ranges intersect, so a common range will be returned.\n      // At most, it will be same as this range.\n      let commonRangeStart = this.start;\n      let commonRangeEnd = this.end;\n\n      if (this.containsPosition(otherRange.start)) {\n        // Given range start is inside this range. This means thaNt we have to\n        // shrink common range to the given range start.\n        commonRangeStart = otherRange.start;\n      }\n\n      if (this.containsPosition(otherRange.end)) {\n        // Given range end is inside this range. This means that we have to\n        // shrink common range to the given range end.\n        commonRangeEnd = otherRange.end;\n      }\n\n      return new Range(commonRangeStart, commonRangeEnd);\n    } // Ranges do not intersect, so they do not have common part.\n\n\n    return null;\n  }\n  /**\n   * Creates a {@link module:engine/view/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n   *\n   * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n   * @param {module:engine/view/position~Position} [options.startPosition]\n   * @param {Boolean} [options.singleCharacters=false]\n   * @param {Boolean} [options.shallow=false]\n   * @param {Boolean} [options.ignoreElementEnd=false]\n   * @returns {module:engine/view/treewalker~TreeWalker}\n   */\n\n\n  getWalker(options = {}) {\n    options.boundaries = this;\n    return new TreeWalker(options);\n  }\n  /**\n   * Returns a {@link module:engine/view/node~Node} or {@link module:engine/view/documentfragment~DocumentFragment}\n   * which is a common ancestor of range's both ends (in which the entire range is contained).\n   *\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor() {\n    return this.start.getCommonAncestor(this.end);\n  }\n  /**\n   * Clones this range.\n   *\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  clone() {\n    return new Range(this.start, this.end);\n  }\n  /**\n   * Returns an iterator that iterates over all {@link module:engine/view/item~Item view items} that are in this range and returns\n   * them.\n   *\n   * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n   * set to `true`. However it returns only {@link module:engine/view/item~Item items},\n   * not {@link module:engine/view/treewalker~TreeWalkerValue}.\n   *\n   * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n   * a full list of available options.\n   *\n   * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n   * @returns {Iterable.<module:engine/view/item~Item>}\n   */\n\n\n  *getItems(options = {}) {\n    options.boundaries = this;\n    options.ignoreElementEnd = true;\n    const treeWalker = new TreeWalker(options);\n\n    for (const value of treeWalker) {\n      yield value.item;\n    }\n  }\n  /**\n   * Returns an iterator that iterates over all {@link module:engine/view/position~Position positions} that are boundaries or\n   * contained in this range.\n   *\n   * This method uses {@link module:engine/view/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n   * {@link module:engine/view/position~Position positions}, not {@link module:engine/view/treewalker~TreeWalkerValue}.\n   *\n   * You may specify additional options for the tree walker. See {@link module:engine/view/treewalker~TreeWalker} for\n   * a full list of available options.\n   *\n   * @param {Object} options Object with configuration options. See {@link module:engine/view/treewalker~TreeWalker}.\n   * @returns {Iterable.<module:engine/view/position~Position>}\n   */\n\n\n  *getPositions(options = {}) {\n    options.boundaries = this;\n    const treeWalker = new TreeWalker(options);\n    yield treeWalker.position;\n\n    for (const value of treeWalker) {\n      yield value.nextPosition;\n    }\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\trange.is( 'range' ); // -> true\n   *\t\trange.is( 'view:range' ); // -> true\n   *\n   *\t\trange.is( 'model:range' ); // -> false\n   *\t\trange.is( 'element' ); // -> false\n   *\t\trange.is( 'selection' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'range' || type == 'view:range';\n  }\n  /**\n   * Checks and returns whether this range intersects with the given range.\n   *\n   * @param {module:engine/view/range~Range} otherRange Range to compare with.\n   * @returns {Boolean} True if ranges intersect.\n   */\n\n\n  isIntersecting(otherRange) {\n    return this.start.isBefore(otherRange.end) && this.end.isAfter(otherRange.start);\n  }\n  /**\n   * Creates a range from the given parents and offsets.\n   *\n   * @protected\n   * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} startElement Start position\n   * parent element.\n   * @param {Number} startOffset Start position offset.\n   * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} endElement End position\n   * parent element.\n   * @param {Number} endOffset End position offset.\n   * @returns {module:engine/view/range~Range} Created range.\n   */\n\n\n  static _createFromParentsAndOffsets(startElement, startOffset, endElement, endOffset) {\n    return new this(new Position(startElement, startOffset), new Position(endElement, endOffset));\n  }\n  /**\n   * Creates a new range, spreading from specified {@link module:engine/view/position~Position position} to a position moved by\n   * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n   *\n   * @protected\n   * @param {module:engine/view/position~Position} position Beginning of the range.\n   * @param {Number} shift How long the range should be.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  static _createFromPositionAndShift(position, shift) {\n    const start = position;\n    const end = position.getShiftedBy(shift);\n    return shift > 0 ? new this(start, end) : new this(end, start);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @protected\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  static _createIn(element) {\n    return this._createFromParentsAndOffsets(element, 0, element, element.childCount);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @protected\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  static _createOn(item) {\n    const size = item.is('textProxy') ? item.offsetSize : 1;\n    return this._createFromPositionAndShift(Position._createBefore(item), size);\n  }\n\n} // Function used by getEnlarged and getTrimmed methods.\n\nfunction enlargeTrimSkip(value) {\n  if (value.item.is('attributeElement') || value.item.is('uiElement')) {\n    return true;\n  }\n\n  return false;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/count\n */\n\n/**\n * Returns the number of items return by the iterator.\n *\n *\t\tcount( [ 1, 2, 3, 4, 5 ] ); // 5;\n *\n * @param {Iterable.<*>} iterator Any iterator.\n * @returns {Number} Number of items returned by that iterator.\n */\nexport default function count(iterator) {\n  let count = 0;\n\n  for (const _ of iterator) {\n    // eslint-disable-line no-unused-vars\n    count++;\n  }\n\n  return count;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/selection\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Range from './range';\nimport Position from './position';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Node from './node';\nimport Element from './element';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport DocumentSelection from './documentselection';\n/**\n * Class representing an arbirtary selection in the view.\n * See also {@link module:engine/view/documentselection~DocumentSelection}.\n *\n * New selection instances can be created via the constructor or one these methods:\n *\n * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n *\n * A selection can consist of {@link module:engine/view/range~Range ranges} that can be set by using\n * the {@link module:engine/view/selection~Selection#setTo `Selection#setTo()`} method.\n */\n\nexport default class Selection {\n  /**\n   * Creates new selection instance.\n   *\n   * **Note**: The selection constructor is available as a factory method:\n   *\n   * * {@link module:engine/view/view~View#createSelection `View#createSelection()`},\n   * * {@link module:engine/view/upcastwriter~UpcastWriter#createSelection `UpcastWriter#createSelection()`}.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = writer.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = writer.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tconst selection = writer.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = writer.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tconst selection = writer.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n   *\t\tconst selection = writer.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   */\n  constructor(selectable = null, placeOrOffset, options) {\n    /**\n     * Stores all ranges that are selected.\n     *\n     * @protected\n     * @member {Array.<module:engine/view/range~Range>}\n     */\n    this._ranges = [];\n    /**\n     * Specifies whether the last added range was added as a backward or forward range.\n     *\n     * @protected\n     * @member {Boolean}\n     */\n\n    this._lastRangeBackward = false;\n    /**\n     * Specifies whether selection instance is fake.\n     *\n     * @private\n     * @member {Boolean}\n     */\n\n    this._isFake = false;\n    /**\n     * Fake selection's label.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._fakeSelectionLabel = '';\n    this.setTo(selectable, placeOrOffset, options);\n  }\n  /**\n   * Returns true if selection instance is marked as `fake`.\n   *\n   * @see #setTo\n   * @returns {Boolean}\n   */\n\n\n  get isFake() {\n    return this._isFake;\n  }\n  /**\n   * Returns fake selection label.\n   *\n   * @see #setTo\n   * @returns {String}\n   */\n\n\n  get fakeSelectionLabel() {\n    return this._fakeSelectionLabel;\n  }\n  /**\n   * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n   * {@link #focus focus} they define the direction of selection, which is important\n   * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n   * It may be a bit unintuitive when there are multiple ranges in selection.\n   *\n   * @see #focus\n   * @type {module:engine/view/position~Position}\n   */\n\n\n  get anchor() {\n    if (!this._ranges.length) {\n      return null;\n    }\n\n    const range = this._ranges[this._ranges.length - 1];\n    const anchor = this._lastRangeBackward ? range.end : range.start;\n    return anchor.clone();\n  }\n  /**\n   * Selection focus. Focus is a position where the selection ends.\n   *\n   * @see #anchor\n   * @type {module:engine/view/position~Position}\n   */\n\n\n  get focus() {\n    if (!this._ranges.length) {\n      return null;\n    }\n\n    const range = this._ranges[this._ranges.length - 1];\n    const focus = this._lastRangeBackward ? range.start : range.end;\n    return focus.clone();\n  }\n  /**\n   * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n   * collapsed.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isCollapsed() {\n    return this.rangeCount === 1 && this._ranges[0].isCollapsed;\n  }\n  /**\n   * Returns number of ranges in selection.\n   *\n   * @type {Number}\n   */\n\n\n  get rangeCount() {\n    return this._ranges.length;\n  }\n  /**\n   * Specifies whether the {@link #focus} precedes {@link #anchor}.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isBackward() {\n    return !this.isCollapsed && this._lastRangeBackward;\n  }\n  /**\n   * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n   * if the selection is not inside an editable element.\n   *\n   * @type {module:engine/view/editableelement~EditableElement|null}\n   */\n\n\n  get editableElement() {\n    if (this.anchor) {\n      return this.anchor.editableElement;\n    }\n\n    return null;\n  }\n  /**\n   * Returns an iterable that contains copies of all ranges added to the selection.\n   *\n   * @returns {Iterable.<module:engine/view/range~Range>}\n   */\n\n\n  *getRanges() {\n    for (const range of this._ranges) {\n      yield range.clone();\n    }\n  }\n  /**\n   * Returns copy of the first range in the selection. First range is the one which\n   * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n   * position of all other ranges (not to confuse with the first range added to the selection).\n   * Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/range~Range|null}\n   */\n\n\n  getFirstRange() {\n    let first = null;\n\n    for (const range of this._ranges) {\n      if (!first || range.start.isBefore(first.start)) {\n        first = range;\n      }\n    }\n\n    return first ? first.clone() : null;\n  }\n  /**\n   * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n   * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n   * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/range~Range|null}\n   */\n\n\n  getLastRange() {\n    let last = null;\n\n    for (const range of this._ranges) {\n      if (!last || range.end.isAfter(last.end)) {\n        last = range;\n      }\n    }\n\n    return last ? last.clone() : null;\n  }\n  /**\n   * Returns copy of the first position in the selection. First position is the position that\n   * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n   * Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/position~Position|null}\n   */\n\n\n  getFirstPosition() {\n    const firstRange = this.getFirstRange();\n    return firstRange ? firstRange.start.clone() : null;\n  }\n  /**\n   * Returns copy of the last position in the selection. Last position is the position that\n   * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n   * Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/position~Position|null}\n   */\n\n\n  getLastPosition() {\n    const lastRange = this.getLastRange();\n    return lastRange ? lastRange.end.clone() : null;\n  }\n  /**\n   * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n   * same number of ranges and all ranges from one selection equal to a range from other selection.\n   *\n   * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n   * Selection to compare with.\n   * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n   */\n\n\n  isEqual(otherSelection) {\n    if (this.isFake != otherSelection.isFake) {\n      return false;\n    }\n\n    if (this.isFake && this.fakeSelectionLabel != otherSelection.fakeSelectionLabel) {\n      return false;\n    }\n\n    if (this.rangeCount != otherSelection.rangeCount) {\n      return false;\n    } else if (this.rangeCount === 0) {\n      return true;\n    }\n\n    if (!this.anchor.isEqual(otherSelection.anchor) || !this.focus.isEqual(otherSelection.focus)) {\n      return false;\n    }\n\n    for (const thisRange of this._ranges) {\n      let found = false;\n\n      for (const otherRange of otherSelection._ranges) {\n        if (thisRange.isEqual(otherRange)) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n   * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n   * equal to any trimmed range from other selection.\n   *\n   * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n   * Selection to compare with.\n   * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n   */\n\n\n  isSimilar(otherSelection) {\n    if (this.isBackward != otherSelection.isBackward) {\n      return false;\n    }\n\n    const numOfRangesA = count(this.getRanges());\n    const numOfRangesB = count(otherSelection.getRanges()); // If selections have different number of ranges, they cannot be similar.\n\n    if (numOfRangesA != numOfRangesB) {\n      return false;\n    } // If both selections have no ranges, they are similar.\n\n\n    if (numOfRangesA == 0) {\n      return true;\n    } // Check if each range in one selection has a similar range in other selection.\n\n\n    for (let rangeA of this.getRanges()) {\n      rangeA = rangeA.getTrimmed();\n      let found = false;\n\n      for (let rangeB of otherSelection.getRanges()) {\n        rangeB = rangeB.getTrimmed();\n\n        if (rangeA.start.isEqual(rangeB.start) && rangeA.end.isEqual(rangeB.end)) {\n          found = true;\n          break;\n        }\n      } // For `rangeA`, neither range in `otherSelection` was similar. So selections are not similar.\n\n\n      if (!found) {\n        return false;\n      }\n    } // There were no ranges that weren't matched. Selections are similar.\n\n\n    return true;\n  }\n  /**\n   * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n   * one range in the selection, and that range contains exactly one element.\n   * Returns `null` if there is no selected element.\n   *\n   * @returns {module:engine/view/element~Element|null}\n   */\n\n\n  getSelectedElement() {\n    if (this.rangeCount !== 1) {\n      return null;\n    }\n\n    const range = this.getFirstRange();\n    let nodeAfterStart = range.start.nodeAfter;\n    let nodeBeforeEnd = range.end.nodeBefore; // Handle the situation when selection position is at the beginning / at the end of a text node.\n    // In such situation `.nodeAfter` and `.nodeBefore` are `null` but the selection still might be spanning\n    // over one element.\n    //\n    // <p>Foo{<span class=\"widget\"></span>}bar</p> vs <p>Foo[<span class=\"widget\"></span>]bar</p>\n    //\n    // These are basically the same selections, only the difference is if the selection position is at\n    // at the end/at the beginning of a text node or just before/just after the text node.\n    //\n\n    if (range.start.parent.is('text') && range.start.isAtEnd && range.start.parent.nextSibling) {\n      nodeAfterStart = range.start.parent.nextSibling;\n    }\n\n    if (range.end.parent.is('text') && range.end.isAtStart && range.end.parent.previousSibling) {\n      nodeBeforeEnd = range.end.parent.previousSibling;\n    }\n\n    return nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ? nodeAfterStart : null;\n  }\n  /**\n   * Sets this selection's ranges and direction to the specified location based on the given\n   * {@link module:engine/view/selection~Selectable selectable}.\n   *\n   *\t\t// Sets selection to the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tselection.setTo( range );\n   *\n   *\t\t// Sets selection to given ranges.\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tselection.setTo( range );\n   *\n   *\t\t// Sets selection to the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tselection.setTo( otherSelection );\n   *\n   *\t \t// Sets selection to contents of DocumentSelection.\n   *\t\tselection.setTo( editor.editing.view.document.selection );\n   *\n   * \t\t// Sets collapsed selection at the given position.\n   *\t\tconst position = writer.createPositionAt( root, path );\n   *\t\tselection.setTo( position );\n   *\n   * \t\t// Sets collapsed selection at the position of given item and offset.\n   *\t\tselection.setTo( paragraph, offset );\n   *\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   *\t\tselection.setTo( paragraph, 'in' );\n   *\n   * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n   *\n   *\t\tselection.setTo( paragraph, 'on' );\n   *\n   * \t\t// Clears selection. Removes all ranges.\n   *\t\tselection.setTo( null );\n   *\n   * `Selection#setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Sets selection as backward.\n   *\t\tselection.setTo( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tselection.setTo( range, { fake: true, label: 'foo' } );\n   *\n   * @fires change\n   * @param {module:engine/view/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   */\n\n\n  setTo(selectable, placeOrOffset, options) {\n    if (selectable === null) {\n      this._setRanges([]);\n\n      this._setFakeOptions(placeOrOffset);\n    } else if (selectable instanceof Selection || selectable instanceof DocumentSelection) {\n      this._setRanges(selectable.getRanges(), selectable.isBackward);\n\n      this._setFakeOptions({\n        fake: selectable.isFake,\n        label: selectable.fakeSelectionLabel\n      });\n    } else if (selectable instanceof Range) {\n      this._setRanges([selectable], placeOrOffset && placeOrOffset.backward);\n\n      this._setFakeOptions(placeOrOffset);\n    } else if (selectable instanceof Position) {\n      this._setRanges([new Range(selectable)]);\n\n      this._setFakeOptions(placeOrOffset);\n    } else if (selectable instanceof Node) {\n      const backward = !!options && !!options.backward;\n      let range;\n\n      if (placeOrOffset === undefined) {\n        /**\n         * selection.setTo requires the second parameter when the first parameter is a node.\n         *\n         * @error view-selection-setTo-required-second-parameter\n         */\n        throw new CKEditorError('view-selection-setTo-required-second-parameter: ' + 'selection.setTo requires the second parameter when the first parameter is a node.', this);\n      } else if (placeOrOffset == 'in') {\n        range = Range._createIn(selectable);\n      } else if (placeOrOffset == 'on') {\n        range = Range._createOn(selectable);\n      } else {\n        range = new Range(Position._createAt(selectable, placeOrOffset));\n      }\n\n      this._setRanges([range], backward);\n\n      this._setFakeOptions(options);\n    } else if (isIterable(selectable)) {\n      // We assume that the selectable is an iterable of ranges.\n      // Array.from() is used to prevent setting ranges to the old iterable\n      this._setRanges(selectable, placeOrOffset && placeOrOffset.backward);\n\n      this._setFakeOptions(placeOrOffset);\n    } else {\n      /**\n       * Cannot set selection to given place.\n       *\n       * @error view-selection-setTo-not-selectable\n       */\n      throw new CKEditorError('view-selection-setTo-not-selectable: Cannot set selection to given place.', this);\n    }\n\n    this.fire('change');\n  }\n  /**\n   * Moves {@link #focus} to the specified location.\n   *\n   * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n   * parameters.\n   *\n   * @fires change\n   * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  setFocus(itemOrPosition, offset) {\n    if (this.anchor === null) {\n      /**\n       * Cannot set selection focus if there are no ranges in selection.\n       *\n       * @error view-selection-setFocus-no-ranges\n       */\n      throw new CKEditorError('view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.', this);\n    }\n\n    const newFocus = Position._createAt(itemOrPosition, offset);\n\n    if (newFocus.compareWith(this.focus) == 'same') {\n      return;\n    }\n\n    const anchor = this.anchor;\n\n    this._ranges.pop();\n\n    if (newFocus.compareWith(anchor) == 'before') {\n      this._addRange(new Range(newFocus, anchor), true);\n    } else {\n      this._addRange(new Range(anchor, newFocus));\n    }\n\n    this.fire('change');\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\tselection.is( 'selection' ); // -> true\n   *\t\tselection.is( 'view:selection' ); // -> true\n   *\n   *\t\tselection.is( 'model:selection' ); // -> false\n   *\t\tselection.is( 'element' ); // -> false\n   *\t\tselection.is( 'range' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'selection' || type == 'view:selection';\n  }\n  /**\n   * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n   * is treated like the last added range and is used to set {@link #anchor anchor} and {@link #focus focus}.\n   * Accepts a flag describing in which way the selection is made.\n   *\n   * @private\n   * @param {Iterable.<module:engine/view/range~Range>} newRanges Iterable object of ranges to set.\n   * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end\n   * (`false`) or backward - from end to start (`true`). Defaults to `false`.\n   */\n\n\n  _setRanges(newRanges, isLastBackward = false) {\n    // New ranges should be copied to prevent removing them by setting them to `[]` first.\n    // Only applies to situations when selection is set to the same selection or same selection's ranges.\n    newRanges = Array.from(newRanges);\n    this._ranges = [];\n\n    for (const range of newRanges) {\n      this._addRange(range);\n    }\n\n    this._lastRangeBackward = !!isLastBackward;\n  }\n  /**\n   * Sets this selection instance to be marked as `fake`. A fake selection does not render as browser native selection\n   * over selected elements and is hidden to the user. This way, no native selection UI artifacts are displayed to\n   * the user and selection over elements can be represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM (and be\n   * properly handled by screen readers).\n   *\n   * @private\n   * @param {Object} [options] Options.\n   * @param {Boolean} [options.fake] If set to true selection will be marked as `fake`.\n   * @param {String} [options.label=''] Fake selection label.\n   */\n\n\n  _setFakeOptions(options = {}) {\n    this._isFake = !!options.fake;\n    this._fakeSelectionLabel = options.fake ? options.label || '' : '';\n  }\n  /**\n   * Adds a range to the selection. Added range is copied. This means that passed range is not saved in the\n   * selection instance and you can safely operate on it.\n   *\n   * Accepts a flag describing in which way the selection is made - passed range might be selected from\n   * {@link module:engine/view/range~Range#start start} to {@link module:engine/view/range~Range#end end}\n   * or from {@link module:engine/view/range~Range#end end} to {@link module:engine/view/range~Range#start start}.\n   * The flag is used to set {@link #anchor anchor} and {@link #focus focus} properties.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n   * with ranges already stored in Selection instance.\n   *\n   * @private\n   * @fires change\n   * @param {module:engine/view/range~Range} range\n   * @param {Boolean} [isBackward]\n   */\n\n\n  _addRange(range, isBackward = false) {\n    if (!(range instanceof Range)) {\n      /**\n       * Selection range set to an object that is not an instance of {@link module:engine/view/range~Range}.\n       *\n       * @error view-selection-add-range-not-range\n       */\n      throw new CKEditorError('view-selection-add-range-not-range: ' + 'Selection range set to an object that is not an instance of view.Range', this);\n    }\n\n    this._pushRange(range);\n\n    this._lastRangeBackward = !!isBackward;\n  }\n  /**\n   * Adds range to selection - creates copy of given range so it can be safely used and modified.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-selection-range-intersects` if added range intersects\n   * with ranges already stored in selection instance.\n   *\n   * @private\n   * @param {module:engine/view/range~Range} range\n   */\n\n\n  _pushRange(range) {\n    for (const storedRange of this._ranges) {\n      if (range.isIntersecting(storedRange)) {\n        /**\n         * Trying to add a range that intersects with another range from selection.\n         *\n         * @error view-selection-range-intersects\n         * @param {module:engine/view/range~Range} addedRange Range that was added to the selection.\n         * @param {module:engine/view/range~Range} intersectingRange Range from selection that intersects with `addedRange`.\n         */\n        throw new CKEditorError('view-selection-range-intersects: Trying to add a range that intersects with another range from selection.', this, {\n          addedRange: range,\n          intersectingRange: storedRange\n        });\n      }\n    }\n\n    this._ranges.push(new Range(range.start, range.end));\n  }\n  /**\n   * Fired whenever selection ranges are changed through {@link ~Selection Selection API}.\n   *\n   * @event change\n   */\n\n\n}\nmix(Selection, EmitterMixin);\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/view/selection~Selection#setTo}\n *\n * @typedef {\n *    module:engine/view/selection~Selection|\n *    module:engine/view/documentselection~DocumentSelection|\n *    module:engine/view/position~Position|\n *    Iterable.<module:engine/view/range~Range>|\n *    module:engine/view/range~Range|\n *    module:engine/view/item~Item|\n *    null\n * } module:engine/view/selection~Selectable\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentselection\n */\nimport Selection from './selection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n/**\n * Class representing the document selection in the view.\n *\n * Its instance is available in {@link module:engine/view/document~Document#selection `Document#selection`}.\n *\n * It is similar to {@link module:engine/view/selection~Selection} but\n * it has a read-only API and can be modified only by the writer available in\n * the {@link module:engine/view/view~View#change `View#change()`} block\n * (so via {@link module:engine/view/downcastwriter~DowncastWriter#setSelection `DowncastWriter#setSelection()`}).\n */\n\nexport default class DocumentSelection {\n  /**\n   * Creates new DocumentSelection instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = new DocumentSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = new DocumentSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n   *\t\tconst selection = new DocumentSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = new DocumentSelection( otherSelection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionAt( root, offset );\n   *\t\tconst selection = new DocumentSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n   *\t\tconst selection = new DocumentSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = new DocumentSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = new DocumentSelection( paragraph, 'on' );\n   *\n   * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = new DocumentSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = new DocumentSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   */\n  constructor(selectable = null, placeOrOffset, options) {\n    /**\n     * Selection is used internally (`DocumentSelection` is a proxy to that selection).\n     *\n     * @private\n     * @member {module:engine/view/selection~Selection}\n     */\n    this._selection = new Selection(); // Delegate change event to be fired on DocumentSelection instance.\n\n    this._selection.delegate('change').to(this); // Set selection data.\n\n\n    this._selection.setTo(selectable, placeOrOffset, options);\n  }\n  /**\n   * Returns true if selection instance is marked as `fake`.\n   *\n   * @see #_setTo\n   * @returns {Boolean}\n   */\n\n\n  get isFake() {\n    return this._selection.isFake;\n  }\n  /**\n   * Returns fake selection label.\n   *\n   * @see #_setTo\n   * @returns {String}\n   */\n\n\n  get fakeSelectionLabel() {\n    return this._selection.fakeSelectionLabel;\n  }\n  /**\n   * Selection anchor. Anchor may be described as a position where the selection starts. Together with\n   * {@link #focus focus} they define the direction of selection, which is important\n   * when expanding/shrinking selection. Anchor is always the start or end of the most recent added range.\n   * It may be a bit unintuitive when there are multiple ranges in selection.\n   *\n   * @see #focus\n   * @type {module:engine/view/position~Position}\n   */\n\n\n  get anchor() {\n    return this._selection.anchor;\n  }\n  /**\n   * Selection focus. Focus is a position where the selection ends.\n   *\n   * @see #anchor\n   * @type {module:engine/view/position~Position}\n   */\n\n\n  get focus() {\n    return this._selection.focus;\n  }\n  /**\n   * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n   * collapsed.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isCollapsed() {\n    return this._selection.isCollapsed;\n  }\n  /**\n   * Returns number of ranges in selection.\n   *\n   * @type {Number}\n   */\n\n\n  get rangeCount() {\n    return this._selection.rangeCount;\n  }\n  /**\n   * Specifies whether the {@link #focus} precedes {@link #anchor}.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isBackward() {\n    return this._selection.isBackward;\n  }\n  /**\n   * {@link module:engine/view/editableelement~EditableElement EditableElement} instance that contains this selection, or `null`\n   * if the selection is not inside an editable element.\n   *\n   * @type {module:engine/view/editableelement~EditableElement|null}\n   */\n\n\n  get editableElement() {\n    return this._selection.editableElement;\n  }\n  /**\n   * Used for the compatibility with the {@link module:engine/view/selection~Selection#isEqual} method.\n   *\n   * @protected\n   */\n\n\n  get _ranges() {\n    return this._selection._ranges;\n  }\n  /**\n   * Returns an iterable that contains copies of all ranges added to the selection.\n   *\n   * @returns {Iterable.<module:engine/view/range~Range>}\n   */\n\n\n  *getRanges() {\n    yield* this._selection.getRanges();\n  }\n  /**\n   * Returns copy of the first range in the selection. First range is the one which\n   * {@link module:engine/view/range~Range#start start} position {@link module:engine/view/position~Position#isBefore is before} start\n   * position of all other ranges (not to confuse with the first range added to the selection).\n   * Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/range~Range|null}\n   */\n\n\n  getFirstRange() {\n    return this._selection.getFirstRange();\n  }\n  /**\n   * Returns copy of the last range in the selection. Last range is the one which {@link module:engine/view/range~Range#end end}\n   * position {@link module:engine/view/position~Position#isAfter is after} end position of all other ranges (not to confuse\n   * with the last range added to the selection). Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/range~Range|null}\n   */\n\n\n  getLastRange() {\n    return this._selection.getLastRange();\n  }\n  /**\n   * Returns copy of the first position in the selection. First position is the position that\n   * {@link module:engine/view/position~Position#isBefore is before} any other position in the selection ranges.\n   * Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/position~Position|null}\n   */\n\n\n  getFirstPosition() {\n    return this._selection.getFirstPosition();\n  }\n  /**\n   * Returns copy of the last position in the selection. Last position is the position that\n   * {@link module:engine/view/position~Position#isAfter is after} any other position in the selection ranges.\n   * Returns `null` if no ranges are added to selection.\n   *\n   * @returns {module:engine/view/position~Position|null}\n   */\n\n\n  getLastPosition() {\n    return this._selection.getLastPosition();\n  }\n  /**\n   * Returns the selected element. {@link module:engine/view/element~Element Element} is considered as selected if there is only\n   * one range in the selection, and that range contains exactly one element.\n   * Returns `null` if there is no selected element.\n   *\n   * @returns {module:engine/view/element~Element|null}\n   */\n\n\n  getSelectedElement() {\n    return this._selection.getSelectedElement();\n  }\n  /**\n   * Checks whether, this selection is equal to given selection. Selections are equal if they have same directions,\n   * same number of ranges and all ranges from one selection equal to a range from other selection.\n   *\n   * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n   * Selection to compare with.\n   * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n   */\n\n\n  isEqual(otherSelection) {\n    return this._selection.isEqual(otherSelection);\n  }\n  /**\n   * Checks whether this selection is similar to given selection. Selections are similar if they have same directions, same\n   * number of ranges, and all {@link module:engine/view/range~Range#getTrimmed trimmed} ranges from one selection are\n   * equal to any trimmed range from other selection.\n   *\n   * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} otherSelection\n   * Selection to compare with.\n   * @returns {Boolean} `true` if selections are similar, `false` otherwise.\n   */\n\n\n  isSimilar(otherSelection) {\n    return this._selection.isSimilar(otherSelection);\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\tdocSelection.is( 'selection' ); // -> true\n   *\t\tdocSelection.is( 'documentSelection' ); // -> true\n   *\t\tdocSelection.is( 'view:selection' ); // -> true\n   *\t\tdocSelection.is( 'view:documentSelection' ); // -> true\n   *\n   *\t\tdocSelection.is( 'model:documentSelection' ); // -> false\n   *\t\tdocSelection.is( 'element' ); // -> false\n   *\t\tdocSelection.is( 'node' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'selection' || type == 'documentSelection' || type == 'view:selection' || type == 'view:documentSelection';\n  }\n  /**\n   * Sets this selection's ranges and direction to the specified location based on the given\n   * {@link module:engine/view/selection~Selectable selectable}.\n   *\n   *\t\t// Sets selection to the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tdocumentSelection._setTo( range );\n   *\n   *\t\t// Sets selection to given ranges.\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n   *\t\tdocumentSelection._setTo( range );\n   *\n   *\t\t// Sets selection to the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tdocumentSelection._setTo( otherSelection );\n   *\n   * \t\t// Sets collapsed selection at the given position.\n   *\t\tconst position = writer.createPositionAt( root, offset );\n   *\t\tdocumentSelection._setTo( position );\n   *\n   * \t\t// Sets collapsed selection at the position of given item and offset.\n   *\t\tdocumentSelection._setTo( paragraph, offset );\n   *\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   *\t\tdocumentSelection._setTo( paragraph, 'in' );\n   *\n   * Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n   *\n   *\t\tdocumentSelection._setTo( paragraph, 'on' );\n   *\n   * \t\t// Clears selection. Removes all ranges.\n   *\t\tdocumentSelection._setTo( null );\n   *\n   * `Selection#_setTo()` method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Sets selection as backward.\n   *\t\tdocumentSelection._setTo( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to des cribe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tdocumentSelection._setTo( range, { fake: true, label: 'foo' } );\n   *\n   * @protected\n   * @fires change\n   * @param {module:engine/view/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   */\n\n\n  _setTo(selectable, placeOrOffset, options) {\n    this._selection.setTo(selectable, placeOrOffset, options);\n  }\n  /**\n   * Moves {@link #focus} to the specified location.\n   *\n   * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n   * parameters.\n   *\n   * @protected\n   * @fires change\n   * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  _setFocus(itemOrPosition, offset) {\n    this._selection.setFocus(itemOrPosition, offset);\n  }\n  /**\n   * Fired whenever selection ranges are changed through {@link ~DocumentSelection Selection API}.\n   *\n   * @event change\n   */\n\n\n}\nmix(DocumentSelection, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/collection\n */\nimport EmitterMixin from './emittermixin';\nimport CKEditorError from './ckeditorerror';\nimport uid from './uid';\nimport mix from './mix';\n/**\n * Collections are ordered sets of objects. Items in the collection can be retrieved by their indexes\n * in the collection (like in an array) or by their ids.\n *\n * If an object without an `id` property is being added to the collection, the `id` property will be generated\n * automatically. Note that the automatically generated id is unique only within this single collection instance.\n *\n * By default an item in the collection is identified by its `id` property. The name of the identifier can be\n * configured through the constructor of the collection.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class Collection {\n  /**\n   * Creates a new Collection instance.\n   *\n   * @param {Object} [options={}] The options object.\n   * @param {String} [options.idProperty='id'] The name of the property which is considered to identify an item.\n   */\n  constructor(options = {}) {\n    /**\n     * The internal list of items in the collection.\n     *\n     * @private\n     * @member {Object[]}\n     */\n    this._items = [];\n    /**\n     * The internal map of items in the collection.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._itemMap = new Map();\n    /**\n     * The name of the property which is considered to identify an item.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._idProperty = options.idProperty || 'id';\n    /**\n     * A helper mapping external items of a bound collection ({@link #bindTo})\n     * and actual items of this collection. It provides information\n     * necessary to properly remove items bound to another collection.\n     *\n     * See {@link #_bindToInternalToExternalMap}.\n     *\n     * @protected\n     * @member {WeakMap}\n     */\n\n    this._bindToExternalToInternalMap = new WeakMap();\n    /**\n     * A helper mapping items of this collection to external items of a bound collection\n     * ({@link #bindTo}). It provides information necessary to manage the bindings, e.g.\n     * to avoid loops in two–way bindings.\n     *\n     * See {@link #_bindToExternalToInternalMap}.\n     *\n     * @protected\n     * @member {WeakMap}\n     */\n\n    this._bindToInternalToExternalMap = new WeakMap();\n    /**\n     * Stores indexes of skipped items from bound external collection.\n     *\n     * @private\n     * @member {Array}\n     */\n\n    this._skippedIndexesFromExternal = [];\n    /**\n     * A collection instance this collection is bound to as a result\n     * of calling {@link #bindTo} method.\n     *\n     * @protected\n     * @member {module:utils/collection~Collection} #_bindToCollection\n     */\n  }\n  /**\n   * The number of items available in the collection.\n   *\n   * @member {Number} #length\n   */\n\n\n  get length() {\n    return this._items.length;\n  }\n  /**\n   * Returns the first item from the collection or null when collection is empty.\n   *\n   * @returns {Object|null} The first item or `null` if collection is empty.\n   */\n\n\n  get first() {\n    return this._items[0] || null;\n  }\n  /**\n   * Returns the last item from the collection or null when collection is empty.\n   *\n   * @returns {Object|null} The last item or `null` if collection is empty.\n   */\n\n\n  get last() {\n    return this._items[this.length - 1] || null;\n  }\n  /**\n   * Adds an item into the collection.\n   *\n   * If the item does not have an id, then it will be automatically generated and set on the item.\n   *\n   * @chainable\n   * @param {Object} item\n   * @param {Number} [index] The position of the item in the collection. The item\n   * is pushed to the collection when `index` not specified.\n   * @fires add\n   */\n\n\n  add(item, index) {\n    let itemId;\n    const idProperty = this._idProperty;\n\n    if (idProperty in item) {\n      itemId = item[idProperty];\n\n      if (typeof itemId != 'string') {\n        /**\n         * This item's id should be a string.\n         *\n         * @error collection-add-invalid-id\n         */\n        throw new CKEditorError('collection-add-invalid-id', this);\n      }\n\n      if (this.get(itemId)) {\n        /**\n         * This item already exists in the collection.\n         *\n         * @error collection-add-item-already-exists\n         */\n        throw new CKEditorError('collection-add-item-already-exists', this);\n      }\n    } else {\n      item[idProperty] = itemId = uid();\n    } // TODO: Use ES6 default function argument.\n\n\n    if (index === undefined) {\n      index = this._items.length;\n    } else if (index > this._items.length || index < 0) {\n      /**\n       * The index number has invalid value.\n       *\n       * @error collection-add-item-bad-index\n       */\n      throw new CKEditorError('collection-add-item-invalid-index', this);\n    }\n\n    this._items.splice(index, 0, item);\n\n    this._itemMap.set(itemId, item);\n\n    this.fire('add', item, index);\n    return this;\n  }\n  /**\n   * Gets item by its id or index.\n   *\n   * @param {String|Number} idOrIndex The item id or index in the collection.\n   * @returns {Object|null} The requested item or `null` if such item does not exist.\n   */\n\n\n  get(idOrIndex) {\n    let item;\n\n    if (typeof idOrIndex == 'string') {\n      item = this._itemMap.get(idOrIndex);\n    } else if (typeof idOrIndex == 'number') {\n      item = this._items[idOrIndex];\n    } else {\n      /**\n       * Index or id must be given.\n       *\n       * @error collection-get-invalid-arg\n       */\n      throw new CKEditorError('collection-get-invalid-arg: Index or id must be given.', this);\n    }\n\n    return item || null;\n  }\n  /**\n   * Returns a boolean indicating whether the collection contains an item.\n   *\n   * @param {Object|String} itemOrId The item or its id in the collection.\n   * @returns {Boolean} `true` if the collection contains the item, `false` otherwise.\n   */\n\n\n  has(itemOrId) {\n    if (typeof itemOrId == 'string') {\n      return this._itemMap.has(itemOrId);\n    } else {\n      // Object\n      const idProperty = this._idProperty;\n      const id = itemOrId[idProperty];\n      return this._itemMap.has(id);\n    }\n  }\n  /**\n   * Gets index of item in the collection.\n   * When item is not defined in the collection then index will be equal -1.\n   *\n   * @param {Object|String} itemOrId The item or its id in the collection.\n   * @returns {Number} Index of given item.\n   */\n\n\n  getIndex(itemOrId) {\n    let item;\n\n    if (typeof itemOrId == 'string') {\n      item = this._itemMap.get(itemOrId);\n    } else {\n      item = itemOrId;\n    }\n\n    return this._items.indexOf(item);\n  }\n  /**\n   * Removes an item from the collection.\n   *\n   * @param {Object|Number|String} subject The item to remove, its id or index in the collection.\n   * @returns {Object} The removed item.\n   * @fires remove\n   */\n\n\n  remove(subject) {\n    let index, id, item;\n    let itemDoesNotExist = false;\n    const idProperty = this._idProperty;\n\n    if (typeof subject == 'string') {\n      id = subject;\n      item = this._itemMap.get(id);\n      itemDoesNotExist = !item;\n\n      if (item) {\n        index = this._items.indexOf(item);\n      }\n    } else if (typeof subject == 'number') {\n      index = subject;\n      item = this._items[index];\n      itemDoesNotExist = !item;\n\n      if (item) {\n        id = item[idProperty];\n      }\n    } else {\n      item = subject;\n      id = item[idProperty];\n      index = this._items.indexOf(item);\n      itemDoesNotExist = index == -1 || !this._itemMap.get(id);\n    }\n\n    if (itemDoesNotExist) {\n      /**\n       * Item not found.\n       *\n       * @error collection-remove-404\n       */\n      throw new CKEditorError('collection-remove-404: Item not found.', this);\n    }\n\n    this._items.splice(index, 1);\n\n    this._itemMap.delete(id);\n\n    const externalItem = this._bindToInternalToExternalMap.get(item);\n\n    this._bindToInternalToExternalMap.delete(item);\n\n    this._bindToExternalToInternalMap.delete(externalItem);\n\n    this.fire('remove', item, index);\n    return item;\n  }\n  /**\n   * Executes the callback for each item in the collection and composes an array or values returned by this callback.\n   *\n   * @param {Function} callback\n   * @param {Object} callback.item\n   * @param {Number} callback.index\n   * @param {Object} ctx Context in which the `callback` will be called.\n   * @returns {Array} The result of mapping.\n   */\n\n\n  map(callback, ctx) {\n    return this._items.map(callback, ctx);\n  }\n  /**\n   * Finds the first item in the collection for which the `callback` returns a true value.\n   *\n   * @param {Function} callback\n   * @param {Object} callback.item\n   * @param {Number} callback.index\n   * @param {Object} ctx Context in which the `callback` will be called.\n   * @returns {Object} The item for which `callback` returned a true value.\n   */\n\n\n  find(callback, ctx) {\n    return this._items.find(callback, ctx);\n  }\n  /**\n   * Returns an array with items for which the `callback` returned a true value.\n   *\n   * @param {Function} callback\n   * @param {Object} callback.item\n   * @param {Number} callback.index\n   * @param {Object} ctx Context in which the `callback` will be called.\n   * @returns {Object[]} The array with matching items.\n   */\n\n\n  filter(callback, ctx) {\n    return this._items.filter(callback, ctx);\n  }\n  /**\n   * Removes all items from the collection and destroys the binding created using\n   * {@link #bindTo}.\n   */\n\n\n  clear() {\n    if (this._bindToCollection) {\n      this.stopListening(this._bindToCollection);\n      this._bindToCollection = null;\n    }\n\n    while (this.length) {\n      this.remove(0);\n    }\n  }\n  /**\n   * Binds and synchronizes the collection with another one.\n   *\n   * The binding can be a simple factory:\n   *\n   *\t\tclass FactoryClass {\n   *\t\t\tconstructor( data ) {\n   *\t\t\t\tthis.label = data.label;\n   *\t\t\t}\n   *\t\t}\n   *\n   *\t\tconst source = new Collection( { idProperty: 'label' } );\n   *\t\tconst target = new Collection();\n   *\n   *\t\ttarget.bindTo( source ).as( FactoryClass );\n   *\n   *\t\tsource.add( { label: 'foo' } );\n   *\t\tsource.add( { label: 'bar' } );\n   *\n   *\t\tconsole.log( target.length ); // 2\n   *\t\tconsole.log( target.get( 1 ).label ); // 'bar'\n   *\n   *\t\tsource.remove( 0 );\n   *\t\tconsole.log( target.length ); // 1\n   *\t\tconsole.log( target.get( 0 ).label ); // 'bar'\n   *\n   * or the factory driven by a custom callback:\n   *\n   *\t\tclass FooClass {\n   *\t\t\tconstructor( data ) {\n   *\t\t\t\tthis.label = data.label;\n   *\t\t\t}\n   *\t\t}\n   *\n   *\t\tclass BarClass {\n   *\t\t\tconstructor( data ) {\n   *\t\t\t\tthis.label = data.label;\n   *\t\t\t}\n   *\t\t}\n   *\n   *\t\tconst source = new Collection( { idProperty: 'label' } );\n   *\t\tconst target = new Collection();\n   *\n   *\t\ttarget.bindTo( source ).using( ( item ) => {\n   *\t\t\tif ( item.label == 'foo' ) {\n   *\t\t\t\treturn new FooClass( item );\n   *\t\t\t} else {\n   *\t\t\t\treturn new BarClass( item );\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\tsource.add( { label: 'foo' } );\n   *\t\tsource.add( { label: 'bar' } );\n   *\n   *\t\tconsole.log( target.length ); // 2\n   *\t\tconsole.log( target.get( 0 ) instanceof FooClass ); // true\n   *\t\tconsole.log( target.get( 1 ) instanceof BarClass ); // true\n   *\n   * or the factory out of property name:\n   *\n   *\t\tconst source = new Collection( { idProperty: 'label' } );\n   *\t\tconst target = new Collection();\n   *\n   *\t\ttarget.bindTo( source ).using( 'label' );\n   *\n   *\t\tsource.add( { label: { value: 'foo' } } );\n   *\t\tsource.add( { label: { value: 'bar' } } );\n   *\n   *\t\tconsole.log( target.length ); // 2\n   *\t\tconsole.log( target.get( 0 ).value ); // 'foo'\n   *\t\tconsole.log( target.get( 1 ).value ); // 'bar'\n   *\n   * It's possible to skip specified items by returning falsy value:\n   *\n   *\t\tconst source = new Collection();\n   *\t\tconst target = new Collection();\n   *\n   *\t\ttarget.bindTo( source ).using( item => {\n   *\t\t\tif ( item.hidden ) {\n   *\t\t\t\treturn null;\n   *\t\t\t}\n   *\n   *\t\t\treturn item;\n   *\t\t} );\n   *\n   *\t\tsource.add( { hidden: true } );\n   *\t\tsource.add( { hidden: false } );\n   *\n   *\t\tconsole.log( source.length ); // 2\n   *\t\tconsole.log( target.length ); // 1\n   *\n   * **Note**: {@link #clear} can be used to break the binding.\n   *\n   * @param {module:utils/collection~Collection} externalCollection A collection to be bound.\n   * @returns {Object}\n   * @returns {module:utils/collection~CollectionBindToChain} The binding chain object.\n   */\n\n\n  bindTo(externalCollection) {\n    if (this._bindToCollection) {\n      /**\n       * The collection cannot be bound more than once.\n       *\n       * @error collection-bind-to-rebind\n       */\n      throw new CKEditorError('collection-bind-to-rebind: The collection cannot be bound more than once.', this);\n    }\n\n    this._bindToCollection = externalCollection;\n    return {\n      as: Class => {\n        this._setUpBindToBinding(item => new Class(item));\n      },\n      using: callbackOrProperty => {\n        if (typeof callbackOrProperty == 'function') {\n          this._setUpBindToBinding(item => callbackOrProperty(item));\n        } else {\n          this._setUpBindToBinding(item => item[callbackOrProperty]);\n        }\n      }\n    };\n  }\n  /**\n   * Finalizes and activates a binding initiated by {#bindTo}.\n   *\n   * @protected\n   * @param {Function} factory A function which produces collection items.\n   */\n\n\n  _setUpBindToBinding(factory) {\n    const externalCollection = this._bindToCollection; // Adds the item to the collection once a change has been done to the external collection.\n    //\n    // @private\n\n    const addItem = (evt, externalItem, index) => {\n      const isExternalBoundToThis = externalCollection._bindToCollection == this;\n\n      const externalItemBound = externalCollection._bindToInternalToExternalMap.get(externalItem); // If an external collection is bound to this collection, which makes it a 2–way binding,\n      // and the particular external collection item is already bound, don't add it here.\n      // The external item has been created **out of this collection's item** and (re)adding it will\n      // cause a loop.\n\n\n      if (isExternalBoundToThis && externalItemBound) {\n        this._bindToExternalToInternalMap.set(externalItem, externalItemBound);\n\n        this._bindToInternalToExternalMap.set(externalItemBound, externalItem);\n      } else {\n        const item = factory(externalItem); // When there is no item we need to remember skipped index first and then we can skip this item.\n\n        if (!item) {\n          this._skippedIndexesFromExternal.push(index);\n\n          return;\n        } // Lets try to put item at the same index as index in external collection\n        // but when there are a skipped items in one or both collections we need to recalculate this index.\n\n\n        let finalIndex = index; // When we try to insert item after some skipped items from external collection we need\n        // to include this skipped items and decrease index.\n        //\n        // For the following example:\n        // external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal' ]\n        // internal -> [ A ]\n        //\n        // Another item is been added at the end of external collection:\n        // external.add( 'D' )\n        // external -> [ 'A', 'B - skipped for internal', 'C - skipped for internal', 'D' ]\n        //\n        // We can't just add 'D' to internal at the same index as index in external because\n        // this will produce empty indexes what is invalid:\n        // internal -> [ 'A', empty, empty, 'D' ]\n        //\n        // So we need to include skipped items and decrease index\n        // internal -> [ 'A', 'D' ]\n\n        for (const skipped of this._skippedIndexesFromExternal) {\n          if (index > skipped) {\n            finalIndex--;\n          }\n        } // We need to take into consideration that external collection could skip some items from\n        // internal collection.\n        //\n        // For the following example:\n        // internal -> [ 'A', 'B - skipped for external', 'C - skipped for external' ]\n        // external -> [ A ]\n        //\n        // Another item is been added at the end of external collection:\n        // external.add( 'D' )\n        // external -> [ 'A', 'D' ]\n        //\n        // We need to include skipped items and place new item after them:\n        // internal -> [ 'A', 'B - skipped for external', 'C - skipped for external', 'D' ]\n\n\n        for (const skipped of externalCollection._skippedIndexesFromExternal) {\n          if (finalIndex >= skipped) {\n            finalIndex++;\n          }\n        }\n\n        this._bindToExternalToInternalMap.set(externalItem, item);\n\n        this._bindToInternalToExternalMap.set(item, externalItem);\n\n        this.add(item, finalIndex); // After adding new element to internal collection we need update indexes\n        // of skipped items in external collection.\n\n        for (let i = 0; i < externalCollection._skippedIndexesFromExternal.length; i++) {\n          if (finalIndex <= externalCollection._skippedIndexesFromExternal[i]) {\n            externalCollection._skippedIndexesFromExternal[i]++;\n          }\n        }\n      }\n    }; // Load the initial content of the collection.\n\n\n    for (const externalItem of externalCollection) {\n      addItem(null, externalItem, externalCollection.getIndex(externalItem));\n    } // Synchronize the with collection as new items are added.\n\n\n    this.listenTo(externalCollection, 'add', addItem); // Synchronize the with collection as new items are removed.\n\n    this.listenTo(externalCollection, 'remove', (evt, externalItem, index) => {\n      const item = this._bindToExternalToInternalMap.get(externalItem);\n\n      if (item) {\n        this.remove(item);\n      } // After removing element from external collection we need update/remove indexes\n      // of skipped items in internal collection.\n\n\n      this._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce((result, skipped) => {\n        if (index < skipped) {\n          result.push(skipped - 1);\n        }\n\n        if (index > skipped) {\n          result.push(skipped);\n        }\n\n        return result;\n      }, []);\n    });\n  }\n  /**\n   * Iterable interface.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._items[Symbol.iterator]();\n  }\n  /**\n   * Fired when an item is added to the collection.\n   *\n   * @event add\n   * @param {Object} item The added item.\n   */\n\n  /**\n   * Fired when an item is removed from the collection.\n   *\n   * @event remove\n   * @param {Object} item The removed item.\n   * @param {Number} index Index from which item was removed.\n   */\n\n\n}\nmix(Collection, EmitterMixin);\n/**\n * An object returned by the {@link module:utils/collection~Collection#bindTo `bindTo()`} method\n * providing functions that specify the type of the binding.\n *\n * See the {@link module:utils/collection~Collection#bindTo `bindTo()`} documentation for examples.\n *\n * @interface module:utils/collection~CollectionBindToChain\n */\n\n/**\n * Creates a callback or a property binding.\n *\n * @method #using\n * @param {Function|String} callbackOrProperty  When the function is passed, it should return\n * the collection items. When the string is provided, the property value is used to create the bound collection items.\n */\n\n/**\n * Creates the class factory binding in which items of the source collection are passed to\n * the constructor of the specified class.\n *\n * @method #as\n * @param {Function} Class The class constructor used to create instances in the factory.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/document\n */\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\n/**\n * Document class creates an abstract layer over the content editable area, contains a tree of view elements and\n * {@link module:engine/view/documentselection~DocumentSelection view selection} associated with this document.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Document {\n  /**\n   * Creates a Document instance.\n   */\n  constructor() {\n    /**\n     * Selection done on this document.\n     *\n     * @readonly\n     * @member {module:engine/view/documentselection~DocumentSelection} module:engine/view/document~Document#selection\n     */\n    this.selection = new DocumentSelection();\n    /**\n     * Roots of the view tree. Collection of the {@link module:engine/view/element~Element view elements}.\n     *\n     * View roots are created as a result of binding between {@link module:engine/view/document~Document#roots} and\n     * {@link module:engine/model/document~Document#roots} and this is handled by\n     * {@link module:engine/controller/editingcontroller~EditingController}, so to create view root we need to create\n     * model root using {@link module:engine/model/document~Document#createRoot}.\n     *\n     * @readonly\n     * @member {module:utils/collection~Collection} module:engine/view/document~Document#roots\n     */\n\n    this.roots = new Collection({\n      idProperty: 'rootName'\n    });\n    /**\n     * Defines whether document is in read-only mode.\n     *\n     * When document is read-ony then all roots are read-only as well and caret placed inside this root is hidden.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * True if document is focused.\n     *\n     * This property is updated by the {@link module:engine/view/observer/focusobserver~FocusObserver}.\n     * If the {@link module:engine/view/observer/focusobserver~FocusObserver} is disabled this property will not change.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} module:engine/view/document~Document#isFocused\n     */\n\n    this.set('isFocused', false);\n    /**\n     * True if composition is in progress inside the document.\n     *\n     * This property is updated by the {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n     * If the {@link module:engine/view/observer/compositionobserver~CompositionObserver} is disabled this property will not change.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} module:engine/view/document~Document#isComposing\n     */\n\n    this.set('isComposing', false);\n    /**\n     * Post-fixer callbacks registered to the view document.\n     *\n     * @private\n     * @member {Set}\n     */\n\n    this._postFixers = new Set();\n  }\n  /**\n   * Gets a {@link module:engine/view/document~Document#roots view root element} with the specified name. If the name is not\n   * specific \"main\" root is returned.\n   *\n   * @param {String} [name='main'] Name of the root.\n   * @returns {module:engine/view/rooteditableelement~RootEditableElement|null} The view root element with the specified name\n   * or null when there is no root of given name.\n   */\n\n\n  getRoot(name = 'main') {\n    return this.roots.get(name);\n  }\n  /**\n   * Allows registering post-fixer callbacks. A post-fixers mechanism allows to update the view tree just before it is rendered\n   * to the DOM.\n   *\n   * Post-fixers are executed right after all changes from the outermost change block were applied but\n   * before the {@link module:engine/view/view~View#event:render render event} is fired. If a post-fixer callback made\n   * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n   * not be fixed in the new document tree state.\n   *\n   * View post-fixers are useful when you want to apply some fixes whenever the view structure changes. Keep in mind that\n   * changes executed in a view post-fixer should not break model-view mapping.\n   *\n   * The types of changes which should be safe:\n   *\n   * * adding or removing attribute from elements,\n   * * changes inside of {@link module:engine/view/uielement~UIElement UI elements},\n   * * {@link module:engine/model/differ~Differ#refreshItem marking some of the model elements to be re-converted}.\n   *\n   * Try to avoid changes which touch view structure:\n   *\n   * * you should not add or remove nor wrap or unwrap any view elements,\n   * * you should not change the editor data model in a view post-fixer.\n   *\n   * As a parameter, a post-fixer callback receives a {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n   *\n   * Typically, a post-fixer will look like this:\n   *\n   *\t\teditor.editing.view.document.registerPostFixer( writer => {\n   *\t\t\tif ( checkSomeCondition() ) {\n   *\t\t\t\twriter.doSomething();\n   *\n   *\t\t\t\t// Let other post-fixers know that something changed.\n   *\t\t\t\treturn true;\n   *\t\t\t}\n   *\t\t} );\n   *\n   * Note that nothing happens right after you register a post-fixer (e.g. execute such a code in the console).\n   * That is because adding a post-fixer does not execute it.\n   * The post-fixer will be executed as soon as any change in the document needs to cause its rendering.\n   * If you want to re-render the editor's view after registering the post-fixer then you should do it manually by calling\n   * {@link module:engine/view/view~View#forceRender `view.forceRender()`}.\n   *\n   * If you need to register a callback which is executed when DOM elements are already updated,\n   * use {@link module:engine/view/view~View#event:render render event}.\n   *\n   * @param {Function} postFixer\n   */\n\n\n  registerPostFixer(postFixer) {\n    this._postFixers.add(postFixer);\n  }\n  /**\n   * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n   */\n\n\n  destroy() {\n    this.roots.map(root => root.destroy());\n    this.stopListening();\n  }\n  /**\n   * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n   *\n   * @protected\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n\n\n  _callPostFixers(writer) {\n    let wasFixed = false;\n\n    do {\n      for (const callback of this._postFixers) {\n        wasFixed = callback(writer);\n\n        if (wasFixed) {\n          break;\n        }\n      }\n    } while (wasFixed);\n  }\n  /**\n   * Event fired whenever document content layout changes. It is fired whenever content is\n   * {@link module:engine/view/view~View#event:render rendered}, but should be also fired by observers in case of\n   * other actions which may change layout, for instance when image loads.\n   *\n   * @event layoutChanged\n   */\n\n\n}\nmix(Document, ObservableMixin);\n/**\n * Enum representing type of the change.\n *\n * Possible values:\n *\n * * `children` - for child list changes,\n * * `attributes` - for element attributes changes,\n * * `text` - for text nodes changes.\n *\n * @typedef {String} module:engine/view/document~ChangeType\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/attributeelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror'; // Default attribute priority.\n\nconst DEFAULT_PRIORITY = 10;\n/**\n * Attribute elements are used to represent formatting elements in the view (think – `<b>`, `<span style=\"font-size: 2em\">`, etc.).\n * Most often they are created when downcasting model text attributes.\n *\n * Editing engine does not define a fixed HTML DTD. This is why a feature developer needs to choose between various\n * types (container element, {@link module:engine/view/attributeelement~AttributeElement attribute element},\n * {@link module:engine/view/emptyelement~EmptyElement empty element}, etc) when developing a feature.\n *\n * To create a new attribute element instance use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createAttributeElement `DowncastWriter#createAttributeElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class AttributeElement extends Element {\n  /**\n   * Creates an attribute element.\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createAttributeElement\n   * @see module:engine/view/element~Element\n   * @protected\n   */\n  constructor(name, attrs, children) {\n    super(name, attrs, children);\n    /**\n     * Returns block {@link module:engine/view/filler filler} offset or `null` if block filler is not needed.\n     *\n     * @method #getFillerOffset\n     * @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n    /**\n     * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Number}\n     */\n\n    this._priority = DEFAULT_PRIORITY;\n    /**\n     * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n     * and then two elements are considered similar if, and only if they have the same `_id`.\n     *\n     * @protected\n     * @member {String|Number}\n     */\n\n    this._id = null;\n    /**\n     * Keeps all the attribute elements that have the same {@link module:engine/view/attributeelement~AttributeElement#id ids}\n     * and still exist in the view tree.\n     *\n     * This property is managed by {@link module:engine/view/downcastwriter~DowncastWriter}.\n     *\n     * @protected\n     * @member {Set.<module:engine/view/attributeelement~AttributeElement>|null}\n     */\n\n    this._clonesGroup = null;\n  }\n  /**\n   * Element priority. Decides in what order elements are wrapped by {@link module:engine/view/downcastwriter~DowncastWriter}.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get priority() {\n    return this._priority;\n  }\n  /**\n   * Element identifier. If set, it is used by {@link module:engine/view/element~Element#isSimilar},\n   * and then two elements are considered similar if, and only if they have the same `id`.\n   *\n   * @readonly\n   * @type {String|Number}\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * Returns all {@link module:engine/view/attributeelement~AttributeElement attribute elements} that has the\n   * same {@link module:engine/view/attributeelement~AttributeElement#id id} and are in the view tree (were not removed).\n   *\n   * Note: If this element has been removed from the tree, returned set will not include it.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError attribute-element-get-elements-with-same-id-no-id}\n   * if this element has no `id`.\n   *\n   * @returns {Set.<module:engine/view/attributeelement~AttributeElement>} Set containing all the attribute elements\n   * with the same `id` that were added and not removed from the view tree.\n   */\n\n\n  getElementsWithSameId() {\n    if (this.id === null) {\n      /**\n       * Cannot get elements with the same id for an attribute element without id.\n       *\n       * @error attribute-element-get-elements-with-same-id-no-id\n       */\n      throw new CKEditorError('attribute-element-get-elements-with-same-id-no-id: ' + 'Cannot get elements with the same id for an attribute element without id.', this);\n    }\n\n    return new Set(this._clonesGroup);\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tattributeElement.is( 'attributeElement' ); // -> true\n   *\t\tattributeElement.is( 'element' ); // -> true\n   *\t\tattributeElement.is( 'node' ); // -> true\n   *\t\tattributeElement.is( 'view:attributeElement' ); // -> true\n   *\t\tattributeElement.is( 'view:element' ); // -> true\n   *\t\tattributeElement.is( 'view:node' ); // -> true\n   *\n   *\t\tattributeElement.is( 'model:element' ); // -> false\n   *\t\tattributeElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an attribute element, you can also check its\n   * {@link module:engine/view/attributeelement~AttributeElement#name name}:\n   *\n   *\t\tattributeElement.is( 'b' ); // -> true if this is a bold element\n   *\t\tattributeElement.is( 'attributeElement', 'b' ); // -> same as above\n   *\t\ttext.is( 'b' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type && type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'attributeElement' || super.is(type);\n    } else {\n      return cutType == 'attributeElement' && name == this.name || super.is(type, name);\n    }\n  }\n  /**\n   * Checks if this element is similar to other element.\n   *\n   * If none of elements has set {@link module:engine/view/attributeelement~AttributeElement#id}, then both elements\n   * should have the same name, attributes and priority to be considered as similar. Two similar elements can contain\n   * different set of children nodes.\n   *\n   * If at least one element has {@link module:engine/view/attributeelement~AttributeElement#id} set, then both\n   * elements have to have the same {@link module:engine/view/attributeelement~AttributeElement#id} value to be\n   * considered similar.\n   *\n   * Similarity is important for {@link module:engine/view/downcastwriter~DowncastWriter}. For example:\n   *\n   * * two following similar elements can be merged together into one, longer element,\n   * * {@link module:engine/view/downcastwriter~DowncastWriter#unwrap} checks similarity of passed element and processed element to\n   * decide whether processed element should be unwrapped,\n   * * etc.\n   *\n   * @param {module:engine/view/element~Element} otherElement\n   * @returns {Boolean}\n   */\n\n\n  isSimilar(otherElement) {\n    // If any element has an `id` set, just compare the ids.\n    if (this.id !== null || otherElement.id !== null) {\n      return this.id === otherElement.id;\n    }\n\n    return super.isSimilar(otherElement) && this.priority == otherElement.priority;\n  }\n  /**\n   * Clones provided element with priority.\n   *\n   * @protected\n   * @param {Boolean} deep If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/attributeelement~AttributeElement} Clone of this element.\n   */\n\n\n  _clone(deep) {\n    const cloned = super._clone(deep); // Clone priority too.\n\n\n    cloned._priority = this._priority; // And id too.\n\n    cloned._id = this._id;\n    return cloned;\n  }\n\n}\n/**\n * Default attribute priority.\n *\n * @member {Number} module:engine/view/attributeelement~AttributeElement.DEFAULT_PRIORITY\n */\n\nAttributeElement.DEFAULT_PRIORITY = DEFAULT_PRIORITY; // Returns block {@link module:engine/view/filler~Filler filler} offset or `null` if block filler is not needed.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\nfunction getFillerOffset() {\n  // <b>foo</b> does not need filler.\n  if (nonUiChildrenCount(this)) {\n    return null;\n  }\n\n  let element = this.parent; // <p><b></b></p> needs filler -> <p><b><br></b></p>\n\n  while (element && element.is('attributeElement')) {\n    if (nonUiChildrenCount(element) > 1) {\n      return null;\n    }\n\n    element = element.parent;\n  }\n\n  if (!element || nonUiChildrenCount(element) > 1) {\n    return null;\n  } // Render block filler at the end of element (after all ui elements).\n\n\n  return this.childCount;\n} // Returns total count of children that are not {@link module:engine/view/uielement~UIElement UIElements}.\n//\n// @param {module:engine/view/element~Element} element\n// @returns {Number}\n\n\nfunction nonUiChildrenCount(element) {\n  return Array.from(element.getChildren()).filter(element => !element.is('uiElement')).length;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/emptyelement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\n/**\n * Empty element class. It is used to represent elements that cannot contain any child nodes (for example `<img>` elements).\n *\n * To create a new empty element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createEmptyElement `downcastWriter#createEmptyElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class EmptyElement extends Element {\n  /**\n   * Creates new instance of EmptyElement.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` when third parameter is passed,\n   * to inform that usage of EmptyElement is incorrect (adding child nodes to EmptyElement is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createEmptyElement\n   * @protected\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attributes] Collection of attributes.\n   */\n  constructor(name, attributes, children) {\n    super(name, attributes, children);\n    /**\n     * Returns `null` because filler is not needed for EmptyElements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\temptyElement.is( 'emptyElement' ); // -> true\n   *\t\temptyElement.is( 'element' ); // -> true\n   *\t\temptyElement.is( 'node' ); // -> true\n   *\t\temptyElement.is( 'view:emptyElement' ); // -> true\n   *\t\temptyElement.is( 'view:element' ); // -> true\n   *\t\temptyElement.is( 'view:node' ); // -> true\n   *\n   *\t\temptyElement.is( 'model:element' ); // -> false\n   *\t\temptyElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an empty element, you can also check its\n   * {@link module:engine/view/emptyelement~EmptyElement#name name}:\n   *\n   *\t\temptyElement.is( 'img' ); // -> true if this is a img element\n   *\t\temptyElement.is( 'emptyElement', 'img' ); // -> same as above\n   *\t\ttext.is( 'img' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'emptyElement' || super.is(type);\n    } else {\n      return cutType == 'emptyElement' && name == this.name || super.is(type, name);\n    }\n  }\n  /**\n   * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-emptyelement-cannot-add` to prevent\n   * adding any child nodes to EmptyElement.\n   *\n   * @protected\n   */\n\n\n  _insertChild(index, nodes) {\n    if (nodes && (nodes instanceof Node || Array.from(nodes).length > 0)) {\n      /**\n       * Cannot add children to {@link module:engine/view/emptyelement~EmptyElement}.\n       *\n       * @error view-emptyelement-cannot-add\n       */\n      throw new CKEditorError('view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.', [this, nodes]);\n    }\n  }\n\n} // Returns `null` because block filler is not needed for EmptyElements.\n//\n// @returns {null}\n\nfunction getFillerOffset() {\n  return null;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals navigator:false */\n\n/**\n * @module utils/env\n */\nconst userAgent = navigator.userAgent.toLowerCase();\n/**\n * A namespace containing environment and browser information.\n *\n * @namespace\n */\n\nconst env = {\n  /**\n   * Indicates that the application is running on Macintosh.\n   *\n   * @static\n   * @type {Boolean}\n   */\n  isMac: isMac(userAgent),\n\n  /**\n   * Indicates that the application is running in Microsoft Edge.\n   *\n   * @static\n   * @type {Boolean}\n   */\n  isEdge: isEdge(userAgent),\n\n  /**\n   * Indicates that the application is running in Firefox (Gecko).\n   *\n   * @static\n   * @type {Boolean}\n   */\n  isGecko: isGecko(userAgent),\n\n  /**\n   * Indicates that the application is running in Safari.\n   *\n   * @static\n   * @type {Boolean}\n   */\n  isSafari: isSafari(userAgent),\n\n  /**\n   * Indicates that the application is running on Android mobile device.\n   *\n   * @static\n   * @type {Boolean}\n   */\n  isAndroid: isAndroid(userAgent),\n\n  /**\n   * Environment features information.\n   *\n   * @memberOf module:utils/env~env\n   * @namespace\n   */\n  features: {\n    /**\n     * Indicates that the environment supports ES2018 Unicode property escapes — like `\\p{P}` or `\\p{L}`.\n     * More information about unicode properties might be found\n     * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n     *\n     * @type {Boolean}\n     */\n    isRegExpUnicodePropertySupported: isRegExpUnicodePropertySupported()\n  }\n};\nexport default env;\n/**\n * Checks if User Agent represented by the string is running on Macintosh.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is running on Macintosh or not.\n */\n\nexport function isMac(userAgent) {\n  return userAgent.indexOf('macintosh') > -1;\n}\n/**\n * Checks if User Agent represented by the string is Microsoft Edge.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Edge or not.\n */\n\nexport function isEdge(userAgent) {\n  return !!userAgent.match(/edge\\/(\\d+.?\\d*)/);\n}\n/**\n * Checks if User Agent represented by the string is Firefox (Gecko).\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Firefox or not.\n */\n\nexport function isGecko(userAgent) {\n  return !!userAgent.match(/gecko\\/\\d+/);\n}\n/**\n * Checks if User Agent represented by the string is Safari.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\n\nexport function isSafari(userAgent) {\n  return userAgent.indexOf(' applewebkit/') > -1 && userAgent.indexOf('chrome') === -1;\n}\n/**\n * Checks if User Agent represented by the string is Android mobile device.\n *\n * @param {String} userAgent **Lowercase** `navigator.userAgent` string.\n * @returns {Boolean} Whether User Agent is Safari or not.\n */\n\nexport function isAndroid(userAgent) {\n  return userAgent.indexOf('android') > -1;\n}\n/**\n * Checks if the current environment supports ES2018 Unicode properties like `\\p{P}` or `\\p{L}`.\n * More information about unicode properties might be found\n * [in Unicode Standard Annex #44](https://www.unicode.org/reports/tr44/#GC_Values_Table).\n *\n * @returns {Boolean}\n */\n\nexport function isRegExpUnicodePropertySupported() {\n  let isSupported = false; // Feature detection for Unicode properties. Added in ES2018. Currently Firefox and Edge do not support it.\n  // See https://github.com/ckeditor/ckeditor5-mention/issues/44#issuecomment-487002174.\n\n  try {\n    // Usage of regular expression literal cause error during build (ckeditor/ckeditor5-dev#534).\n    isSupported = 'ć'.search(new RegExp('[\\\\p{L}]', 'u')) === 0;\n  } catch (error) {// Firefox throws a SyntaxError when the group is unsupported.\n  }\n\n  return isSupported;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils related to keyboard support.\n *\n * @module utils/keyboard\n */\nimport CKEditorError from './ckeditorerror';\nimport env from './env';\nconst macGlyphsToModifiers = {\n  '⌘': 'ctrl',\n  '⇧': 'shift',\n  '⌥': 'alt'\n};\nconst modifiersToMacGlyphs = {\n  'ctrl': '⌘',\n  'shift': '⇧',\n  'alt': '⌥'\n};\n/**\n * Object with `keyName => keyCode` pairs for a set of known keys.\n *\n * Contains:\n *\n * * `a-z`,\n * * `0-9`,\n * * `f1-f12`,\n * * `arrow(left|up|right|bottom)`,\n * * `backspace`, `delete`, `enter`, `esc`, `tab`,\n * * `ctrl`, `cmd`, `shift`, `alt`.\n */\n\nexport const keyCodes = generateKnownKeyCodes();\n/**\n * Converts a key name or a {@link module:utils/keyboard~KeystrokeInfo keystroke info} into a key code.\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * @param {String|module:utils/keyboard~KeystrokeInfo} Key name (see {@link module:utils/keyboard~keyCodes})\n * or a keystroke data object.\n * @returns {Number} Key or keystroke code.\n */\n\nexport function getCode(key) {\n  let keyCode;\n\n  if (typeof key == 'string') {\n    keyCode = keyCodes[key.toLowerCase()];\n\n    if (!keyCode) {\n      /**\n       * Unknown key name. Only key names contained by the {@link module:utils/keyboard~keyCodes} can be used.\n       *\n       * @errror keyboard-unknown-key\n       * @param {String} key\n       */\n      throw new CKEditorError('keyboard-unknown-key: Unknown key name.', null, {\n        key\n      });\n    }\n  } else {\n    keyCode = key.keyCode + (key.altKey ? keyCodes.alt : 0) + (key.ctrlKey ? keyCodes.ctrl : 0) + (key.shiftKey ? keyCodes.shift : 0);\n  }\n\n  return keyCode;\n}\n/**\n * Parses keystroke and returns a keystroke code that will match the code returned by\n * link {@link module:utils/keyboard.getCode} for a corresponding {@link module:utils/keyboard~KeystrokeInfo keystroke info}.\n *\n * The keystroke can be passed in two formats:\n *\n * * as a single string – e.g. `ctrl + A`,\n * * as an array of {@link module:utils/keyboard~keyCodes known key names} and key codes – e.g.:\n *   * `[ 'ctrl', 32 ]` (ctrl + space),\n *   * `[ 'ctrl', 'a' ]` (ctrl + A).\n *\n * Note: Key names are matched with {@link module:utils/keyboard~keyCodes} in a case-insensitive way.\n *\n * Note: Only keystrokes with a single non-modifier key are supported (e.g. `ctrl+A` is OK, but `ctrl+A+B` is not).\n *\n * @param {String|Array.<Number|String>} keystroke Keystroke definition.\n * @returns {Number} Keystroke code.\n */\n\nexport function parseKeystroke(keystroke) {\n  if (typeof keystroke == 'string') {\n    keystroke = splitKeystrokeText(keystroke);\n  }\n\n  return keystroke.map(key => typeof key == 'string' ? getCode(key) : key).reduce((key, sum) => sum + key, 0);\n}\n/**\n * It translates any keystroke string text like `\"CTRL+A\"` to an\n * environment–specific keystroke, i.e. `\"⌘A\"` on Mac OSX.\n *\n * @param {String} keystroke Keystroke text.\n * @returns {String} Keystroke text specific for the environment.\n */\n\nexport function getEnvKeystrokeText(keystroke) {\n  if (!env.isMac) {\n    return keystroke;\n  }\n\n  return splitKeystrokeText(keystroke) // Replace modifiers (e.g. \"ctrl\") with Mac glyphs (e.g. \"⌘\") first.\n  .map(key => modifiersToMacGlyphs[key.toLowerCase()] || key) // Decide whether to put \"+\" between keys in the keystroke or not.\n  .reduce((value, key) => {\n    if (value.slice(-1) in macGlyphsToModifiers) {\n      return value + key;\n    } else {\n      return value + '+' + key;\n    }\n  });\n}\n\nfunction generateKnownKeyCodes() {\n  const keyCodes = {\n    arrowleft: 37,\n    arrowup: 38,\n    arrowright: 39,\n    arrowdown: 40,\n    backspace: 8,\n    delete: 46,\n    enter: 13,\n    space: 32,\n    esc: 27,\n    tab: 9,\n    // The idea about these numbers is that they do not collide with any real key codes, so we can use them\n    // like bit masks.\n    ctrl: 0x110000,\n    // Has the same code as ctrl, because their behaviour should be unified across the editor.\n    // See http://ckeditor.github.io/editor-recommendations/general-policies#ctrl-vs-cmd\n    cmd: 0x110000,\n    shift: 0x220000,\n    alt: 0x440000\n  }; // a-z\n\n  for (let code = 65; code <= 90; code++) {\n    const letter = String.fromCharCode(code);\n    keyCodes[letter.toLowerCase()] = code;\n  } // 0-9\n\n\n  for (let code = 48; code <= 57; code++) {\n    keyCodes[code - 48] = code;\n  } // F1-F12\n\n\n  for (let code = 112; code <= 123; code++) {\n    keyCodes['f' + (code - 111)] = code;\n  }\n\n  return keyCodes;\n}\n\nfunction splitKeystrokeText(keystroke) {\n  return keystroke.split(/\\s*\\+\\s*/);\n}\n/**\n * Information about a keystroke.\n *\n * @interface module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * The [key code](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode).\n *\n * @member {Number} module:utils/keyboard~KeystrokeInfo#keyCode\n */\n\n/**\n * Whether the <kbd>Alt</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#altKey\n */\n\n/**\n * Whether the <kbd>Ctrl</kbd> or <kbd>Cmd</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#ctrlKey\n */\n\n/**\n * Whether the <kbd>Shift</kbd> modifier was pressed.\n *\n * @member {Bolean} module:utils/keyboard~KeystrokeInfo#shiftKey\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/uielement\n */\nimport Element from './element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Node from './node';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * UI element class. It should be used to represent editing UI which needs to be injected into the editing view\n * If possible, you should keep your UI outside the editing view. However, if that is not possible,\n * UI elements can be used.\n *\n * How a UI element is rendered is in your control (you pass a callback to\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`}).\n * The editor will ignore your UI element – the selection cannot be placed in it, it is skipped (invisible) when\n * the user modifies the selection by using arrow keys and the editor does not listen to any mutations which\n * happen inside your UI elements.\n *\n * The limitation is that you cannot convert a model element to a UI element. UI elements need to be\n * created for {@link module:engine/model/markercollection~Marker markers} or as additinal elements\n * inside normal {@link module:engine/view/containerelement~ContainerElement container elements}.\n *\n * To create a new UI element use the\n * {@link module:engine/view/downcastwriter~DowncastWriter#createUIElement `downcastWriter#createUIElement()`} method.\n *\n * @extends module:engine/view/element~Element\n */\n\nexport default class UIElement extends Element {\n  /**\n   * Creates new instance of UIElement.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` when third parameter is passed,\n   * to inform that usage of UIElement is incorrect (adding child nodes to UIElement is forbidden).\n   *\n   * @see module:engine/view/downcastwriter~DowncastWriter#createUIElement\n   * @protected\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attributes] Collection of attributes.\n   */\n  constructor(name, attributes, children) {\n    super(name, attributes, children);\n    /**\n     * Returns `null` because filler is not needed for UIElements.\n     *\n     * @method #getFillerOffset\n     * @returns {null} Always returns null.\n     */\n\n    this.getFillerOffset = getFillerOffset;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tuiElement.is( 'uiElement' ); // -> true\n   *\t\tuiElement.is( 'element' ); // -> true\n   *\t\tuiElement.is( 'node' ); // -> true\n   *\t\tuiElement.is( 'view:uiElement' ); // -> true\n   *\t\tuiElement.is( 'view:element' ); // -> true\n   *\t\tuiElement.is( 'view:node' ); // -> true\n   *\n   *\t\tuiElement.is( 'model:element' ); // -> false\n   *\t\tuiElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an ui element, you can also check its\n   * {@link module:engine/view/uielement~UIElement#name name}:\n   *\n   *\t\tuiElement.is( 'span' ); // -> true if this is a span ui element\n   *\t\tuiElement.is( 'uiElement', 'span' ); // -> same as above\n   *\t\ttext.is( 'span' ); -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type.replace(/^view:/, '');\n\n    if (!name) {\n      return cutType == 'uiElement' || super.is(type);\n    } else {\n      return cutType == 'uiElement' && name == this.name || super.is(type, name);\n    }\n  }\n  /**\n   * Overrides {@link module:engine/view/element~Element#_insertChild} method.\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-uielement-cannot-add` to prevent adding any child nodes\n   * to UIElement.\n   *\n   * @protected\n   */\n\n\n  _insertChild(index, nodes) {\n    if (nodes && (nodes instanceof Node || Array.from(nodes).length > 0)) {\n      /**\n       * Cannot add children to {@link module:engine/view/uielement~UIElement}.\n       *\n       * @error view-uielement-cannot-add\n       */\n      throw new CKEditorError('view-uielement-cannot-add: Cannot add child nodes to UIElement instance.', this);\n    }\n  }\n  /**\n   * Renders this {@link module:engine/view/uielement~UIElement} to DOM. This method is called by\n   * {@link module:engine/view/domconverter~DomConverter}.\n   * Do not use inheritance to create custom rendering method, replace `render()` method instead:\n   *\n   *\t\tconst myUIElement = downcastWriter.createUIElement( 'span' );\n   *\t\tmyUIElement.render = function( domDocument ) {\n   *\t\t\tconst domElement = this.toDomElement( domDocument );\n   *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n   *\n   *\t\t\treturn domElement;\n   *\t\t};\n   *\n   * @param {Document} domDocument\n   * @returns {HTMLElement}\n   */\n\n\n  render(domDocument) {\n    return this.toDomElement(domDocument);\n  }\n  /**\n   * Creates DOM element based on this view UIElement.\n   * Note that each time this method is called new DOM element is created.\n   *\n   * @param {Document} domDocument\n   * @returns {HTMLElement}\n   */\n\n\n  toDomElement(domDocument) {\n    const domElement = domDocument.createElement(this.name);\n\n    for (const key of this.getAttributeKeys()) {\n      domElement.setAttribute(key, this.getAttribute(key));\n    }\n\n    return domElement;\n  }\n\n}\n/**\n * This function injects UI element handling to the given {@link module:engine/view/document~Document document}.\n *\n * A callback is added to {@link module:engine/view/document~Document#event:keydown document keydown event}.\n * The callback handles the situation when right arrow key is pressed and selection is collapsed before a UI element.\n * Without this handler, it would be impossible to \"jump over\" UI element using right arrow key.\n *\n * @param {module:engine/view/view~View} view View controller to which the quirks handling will be injected.\n */\n\nexport function injectUiElementHandling(view) {\n  view.document.on('keydown', (evt, data) => jumpOverUiElement(evt, data, view.domConverter));\n} // Returns `null` because block filler is not needed for UIElements.\n//\n// @returns {null}\n\nfunction getFillerOffset() {\n  return null;\n} // Selection cannot be placed in a `UIElement`. Whenever it is placed there, it is moved before it. This\n// causes a situation when it is impossible to jump over `UIElement` using right arrow key, because the selection\n// ends up in ui element (in DOM) and is moved back to the left. This handler fixes this situation.\n\n\nfunction jumpOverUiElement(evt, data, domConverter) {\n  if (data.keyCode == keyCodes.arrowright) {\n    const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n    const domSelectionCollapsed = domSelection.rangeCount == 1 && domSelection.getRangeAt(0).collapsed; // Jump over UI element if selection is collapsed or shift key is pressed. These are the cases when selection would extend.\n\n    if (domSelectionCollapsed || data.shiftKey) {\n      const domParent = domSelection.focusNode;\n      const domOffset = domSelection.focusOffset;\n      const viewPosition = domConverter.domPositionToView(domParent, domOffset); // In case if dom element is not converted to view or is not mapped or something. Happens for example in some tests.\n\n      if (viewPosition === null) {\n        return;\n      } // Skip all following ui elements.\n\n\n      let jumpedOverAnyUiElement = false;\n      const nextViewPosition = viewPosition.getLastMatchingPosition(value => {\n        if (value.item.is('uiElement')) {\n          // Remember that there was at least one ui element.\n          jumpedOverAnyUiElement = true;\n        } // Jump over ui elements, jump over empty attribute elements, move up from inside of attribute element.\n\n\n        if (value.item.is('uiElement') || value.item.is('attributeElement')) {\n          return true;\n        } // Don't jump over text or don't get out of container element.\n\n\n        return false;\n      }); // If anything has been skipped, fix position.\n      // This `if` could be possibly omitted but maybe it is better not to mess with DOM selection if not needed.\n\n      if (jumpedOverAnyUiElement) {\n        const newDomPosition = domConverter.viewPositionToDom(nextViewPosition);\n\n        if (domSelectionCollapsed) {\n          // Selection was collapsed, so collapse it at further position.\n          domSelection.collapse(newDomPosition.parent, newDomPosition.offset);\n        } else {\n          // Selection was not collapse, so extend it instead of collapsing.\n          domSelection.extend(newDomPosition.parent, newDomPosition.offset);\n        }\n      }\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/documentfragment\n */\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\n/**\n * Document fragment.\n *\n * To create a new document fragment instance use the\n * {@link module:engine/view/upcastwriter~UpcastWriter#createDocumentFragment `UpcastWriter#createDocumentFragment()`}\n * method.\n */\n\nexport default class DocumentFragment {\n  /**\n   * Creates new DocumentFragment instance.\n   *\n   * @protected\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created document fragment.\n   */\n  constructor(children) {\n    /**\n     * Array of child nodes.\n     *\n     * @protected\n     * @member {Array.<module:engine/view/element~Element>} module:engine/view/documentfragment~DocumentFragment#_children\n     */\n    this._children = [];\n\n    if (children) {\n      this._insertChild(0, children);\n    }\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over nodes added to this document fragment.\n   *\n   * @returns {Iterable.<module:engine/view/node~Node>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Number of child nodes in this document fragment.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get childCount() {\n    return this._children.length;\n  }\n  /**\n   * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isEmpty() {\n    return this.childCount === 0;\n  }\n  /**\n   * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n   *\n   * @readonly\n   * @type {module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this;\n  }\n  /**\n   * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n   *\n   * @readonly\n   * @type {null}\n   */\n\n\n  get parent() {\n    return null;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\tdocFrag.is( 'documentFragment' ); // -> true\n   *\t\tdocFrag.is( 'view:documentFragment' ); // -> true\n   *\n   *\t\tdocFrag.is( 'model:documentFragment' ); // -> false\n   *\t\tdocFrag.is( 'element' ); // -> false\n   *\t\tdocFrag.is( 'node' ); // -> false\n   *\n   * {@link module:engine/view/node~Node#is Check the entire list of view objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'documentFragment' || type == 'view:documentFragment';\n  }\n  /**\n   * {@link module:engine/view/documentfragment~DocumentFragment#_insertChild Insert} a child node or a list of child nodes at the end\n   * and sets the parent of these nodes to this fragment.\n   *\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @returns {Number} Number of appended nodes.\n   */\n\n\n  _appendChild(items) {\n    return this._insertChild(this.childCount, items);\n  }\n  /**\n   * Gets child at the given index.\n   *\n   * @param {Number} index Index of child.\n   * @returns {module:engine/view/node~Node} Child node.\n   */\n\n\n  getChild(index) {\n    return this._children[index];\n  }\n  /**\n   * Gets index of the given child node. Returns `-1` if child node is not found.\n   *\n   * @param {module:engine/view/node~Node} node Child node.\n   * @returns {Number} Index of the child node.\n   */\n\n\n  getChildIndex(node) {\n    return this._children.indexOf(node);\n  }\n  /**\n   * Gets child nodes iterator.\n   *\n   * @returns {Iterable.<module:engine/view/node~Node>} Child nodes iterator.\n   */\n\n\n  getChildren() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n   * this fragment.\n   *\n   * @param {Number} index Position where nodes should be inserted.\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @returns {Number} Number of inserted nodes.\n   */\n\n\n  _insertChild(index, items) {\n    this._fireChange('children', this);\n\n    let count = 0;\n    const nodes = normalize(items);\n\n    for (const node of nodes) {\n      // If node that is being added to this element is already inside another element, first remove it from the old parent.\n      if (node.parent !== null) {\n        node._remove();\n      }\n\n      node.parent = this;\n\n      this._children.splice(index, 0, node);\n\n      index++;\n      count++;\n    }\n\n    return count;\n  }\n  /**\n   * Removes number of child nodes starting at the given index and set the parent of these nodes to `null`.\n   *\n   * @param {Number} index Number of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @returns {Array.<module:engine/view/node~Node>} The array of removed nodes.\n   */\n\n\n  _removeChildren(index, howMany = 1) {\n    this._fireChange('children', this);\n\n    for (let i = index; i < index + howMany; i++) {\n      this._children[i].parent = null;\n    }\n\n    return this._children.splice(index, howMany);\n  }\n  /**\n   * Fires `change` event with given type of the change.\n   *\n   * @private\n   * @param {module:engine/view/document~ChangeType} type Type of the change.\n   * @param {module:engine/view/node~Node} node Changed node.\n   * @fires module:engine/view/node~Node#change\n   */\n\n\n  _fireChange(type, node) {\n    this.fire('change:' + type, node);\n  }\n\n}\nmix(DocumentFragment, EmitterMixin); // Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/view/item~Item|Iterable.<String|module:engine/view/item~Item>}\n// @returns {Iterable.<module:engine/view/node~Node>}\n\nfunction normalize(nodes) {\n  // Separate condition because string is iterable.\n  if (typeof nodes == 'string') {\n    return [new Text(nodes)];\n  }\n\n  if (!isIterable(nodes)) {\n    nodes = [nodes];\n  } // Array.from to enable .map() on non-arrays.\n\n\n  return Array.from(nodes).map(node => {\n    if (typeof node == 'string') {\n      return new Text(node);\n    }\n\n    if (node instanceof TextProxy) {\n      return new Text(node.data);\n    }\n\n    return node;\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/downcastwriter\n */\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport ContainerElement from './containerelement';\nimport AttributeElement from './attributeelement';\nimport EmptyElement from './emptyelement';\nimport UIElement from './uielement';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport DocumentFragment from './documentfragment';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport Text from './text';\nimport EditableElement from './editableelement';\nimport { isPlainObject } from 'lodash-es';\n/**\n * View downcast writer.\n *\n * It provides a set of methods used to manipulate view nodes.\n *\n * Do not create an instance of this writer manually. To modify a view structure, use\n * the {@link module:engine/view/view~View#change `View#change()`} block.\n *\n * The `DowncastWriter` is designed to work with semantic views which are the views that were/are being downcasted from the model.\n * To work with ordinary views (e.g. parsed from a pasted content) use the\n * {@link module:engine/view/upcastwriter~UpcastWriter upcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n */\n\nexport default class DowncastWriter {\n  constructor(document) {\n    /**\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = document;\n    /**\n     * Holds references to the attribute groups that share the same {@link module:engine/view/attributeelement~AttributeElement#id id}.\n     * The keys are `id`s, the values are `Set`s holding {@link module:engine/view/attributeelement~AttributeElement}s.\n     *\n     * @private\n     * @type {Map.<String,Set>}\n     */\n\n    this._cloneGroups = new Map();\n  }\n  /**\n   * Sets {@link module:engine/view/documentselection~DocumentSelection selection's} ranges and direction to the\n   * specified location based on the given {@link module:engine/view/selection~Selectable selectable}.\n   *\n   * Usage:\n   *\n   *\t\t// Sets selection to the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\twriter.setSelection( range );\n   *\n   *\t\t// Sets backward selection to the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\twriter.setSelection( range );\n   *\n   *\t\t// Sets selection to given ranges.\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( start2, end2 ) ];\n   *\t\twriter.setSelection( range );\n   *\n   *\t\t// Sets selection to the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\twriter.setSelection( otherSelection );\n   *\n   * \t\t// Sets collapsed selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\twriter.setSelection( position );\n   *\n   * \t\t// Sets collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = writer.createContainerElement( 'p' );\n   *\t\twriter.setSelection( paragraph, offset );\n   *\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n  \t * that element and ends after the last child of that element.\n   *\n   * \t\twriter.setSelection( paragraph, 'in' );\n   *\n   * Creates a range on the {@link module:engine/view/item~Item item} which starts before the item and ends just after the item.\n   *\n   *\t\twriter.setSelection( paragraph, 'on' );\n   *\n   * \t\t// Removes all ranges.\n   *\t\twriter.setSelection( null );\n   *\n   * `DowncastWriter#setSelection()` allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Sets selection as backward.\n   *\t\twriter.setSelection( range, { backward: true } );\n   *\n   *\t\t// Sets selection as fake.\n   *\t\t// Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * \t\t// This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * \t\t// represented in other way, for example by applying proper CSS class.\n   *\t\twriter.setSelection( range, { fake: true } );\n   *\n   * \t\t// Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * \t\t// (and be  properly handled by screen readers).\n   *\t\twriter.setSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   */\n\n\n  setSelection(selectable, placeOrOffset, options) {\n    this.document.selection._setTo(selectable, placeOrOffset, options);\n  }\n  /**\n   * Moves {@link module:engine/view/documentselection~DocumentSelection#focus selection's focus} to the specified location.\n   *\n   * The location can be specified in the same form as {@link module:engine/view/view~View#createPositionAt view.createPositionAt()}\n   * parameters.\n   *\n   * @param {module:engine/view/item~Item|module:engine/view/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  setSelectionFocus(itemOrPosition, offset) {\n    this.document.selection._setFocus(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new {@link module:engine/view/text~Text text node}.\n   *\n   *\t\twriter.createText( 'foo' );\n   *\n   * @param {String} data The text's data.\n   * @returns {module:engine/view/text~Text} The created text node.\n   */\n\n\n  createText(data) {\n    return new Text(data);\n  }\n  /**\n   * Creates new {@link module:engine/view/attributeelement~AttributeElement}.\n   *\n   *\t\twriter.createAttributeElement( 'strong' );\n   *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' } );\n   *\n   *\t\t// Make `<a>` element contain other attributes element so the `<a>` element is not broken.\n   *\t\twriter.createAttributeElement( 'a', { href: 'foo.bar' }, { priority: 5 } );\n   *\n   *\t\t// Set `id` of a marker element so it is not joined or merged with \"normal\" elements.\n   *\t\twriter.createAttributeElement( 'span', { class: 'my-marker' }, { id: 'marker:my' } );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Element's attributes.\n   * @param {Object} [options] Element's options.\n   * @param {Number} [options.priority] Element's {@link module:engine/view/attributeelement~AttributeElement#priority priority}.\n   * @param {Number|String} [options.id] Element's {@link module:engine/view/attributeelement~AttributeElement#id id}.\n   * @returns {module:engine/view/attributeelement~AttributeElement} Created element.\n   */\n\n\n  createAttributeElement(name, attributes, options = {}) {\n    const attributeElement = new AttributeElement(name, attributes);\n\n    if (options.priority) {\n      attributeElement._priority = options.priority;\n    }\n\n    if (options.id) {\n      attributeElement._id = options.id;\n    }\n\n    return attributeElement;\n  }\n  /**\n   * Creates new {@link module:engine/view/containerelement~ContainerElement}.\n   *\n   *\t\twriter.createContainerElement( 'p' );\n   *\n   *\t\t// Create element with custom attributes.\n   *\t\twriter.createContainerElement( 'div', { id: 'foo-bar', 'data-baz': '123' } );\n   *\n   *\t\t// Create element with custom styles.\n   *\t\twriter.createContainerElement( 'p', { style: 'font-weight: bold; padding-bottom: 10px' } );\n   *\n   *\t\t// Create element with custom classes.\n   *\t\twriter.createContainerElement( 'p', { class: 'foo bar baz' } );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @returns {module:engine/view/containerelement~ContainerElement} Created element.\n   */\n\n\n  createContainerElement(name, attributes) {\n    return new ContainerElement(name, attributes);\n  }\n  /**\n   * Creates new {@link module:engine/view/editableelement~EditableElement}.\n   *\n   *\t\twriter.createEditableElement( 'div' );\n   *\t\twriter.createEditableElement( 'div', { id: 'foo-1234' } );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @returns {module:engine/view/editableelement~EditableElement} Created element.\n   */\n\n\n  createEditableElement(name, attributes) {\n    const editableElement = new EditableElement(name, attributes);\n    editableElement._document = this.document;\n    return editableElement;\n  }\n  /**\n   * Creates new {@link module:engine/view/emptyelement~EmptyElement}.\n   *\n   *\t\twriter.createEmptyElement( 'img' );\n   *\t\twriter.createEmptyElement( 'img', { id: 'foo-1234' } );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @returns {module:engine/view/emptyelement~EmptyElement} Created element.\n   */\n\n\n  createEmptyElement(name, attributes) {\n    return new EmptyElement(name, attributes);\n  }\n  /**\n   * Creates new {@link module:engine/view/uielement~UIElement}.\n   *\n   *\t\twriter.createUIElement( 'span' );\n   *\t\twriter.createUIElement( 'span', { id: 'foo-1234' } );\n   *\n   * Custom render function can be provided as third parameter:\n   *\n   *\t\twriter.createUIElement( 'span', null, function( domDocument ) {\n   *\t\t\tconst domElement = this.toDomElement( domDocument );\n   *\t\t\tdomElement.innerHTML = '<b>this is ui element</b>';\n   *\n   *\t\t\treturn domElement;\n   *\t\t} );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @param {Function} [renderFunction] Custom render function.\n   * @returns {module:engine/view/uielement~UIElement} Created element.\n   */\n\n\n  createUIElement(name, attributes, renderFunction) {\n    const uiElement = new UIElement(name, attributes);\n\n    if (renderFunction) {\n      uiElement.render = renderFunction;\n    }\n\n    return uiElement;\n  }\n  /**\n   * Adds or overwrite element's attribute with a specified key and value.\n   *\n   *\t\twriter.setAttribute( 'href', 'http://ckeditor.com', linkElement );\n   *\n   * @param {String} key Attribute key.\n   * @param {String} value Attribute value.\n   * @param {module:engine/view/element~Element} element\n   */\n\n\n  setAttribute(key, value, element) {\n    element._setAttribute(key, value);\n  }\n  /**\n   * Removes attribute from the element.\n   *\n   *\t\twriter.removeAttribute( 'href', linkElement );\n   *\n   * @param {String} key Attribute key.\n   * @param {module:engine/view/element~Element} element\n   */\n\n\n  removeAttribute(key, element) {\n    element._removeAttribute(key);\n  }\n  /**\n   * Adds specified class to the element.\n   *\n   *\t\twriter.addClass( 'foo', linkElement );\n   *\t\twriter.addClass( [ 'foo', 'bar' ], linkElement );\n   *\n   * @param {Array.<String>|String} className\n   * @param {module:engine/view/element~Element} element\n   */\n\n\n  addClass(className, element) {\n    element._addClass(className);\n  }\n  /**\n   * Removes specified class from the element.\n   *\n   *\t\twriter.removeClass( 'foo', linkElement );\n   *\t\twriter.removeClass( [ 'foo', 'bar' ], linkElement );\n   *\n   * @param {Array.<String>|String} className\n   * @param {module:engine/view/element~Element} element\n   */\n\n\n  removeClass(className, element) {\n    element._removeClass(className);\n  }\n  /**\n   * Adds style to the element.\n   *\n   *\t\twriter.setStyle( 'color', 'red', element );\n   *\t\twriter.setStyle( {\n   *\t\t\tcolor: 'red',\n   *\t\t\tposition: 'fixed'\n   *\t\t}, element );\n   *\n   * @param {String|Object} property Property name or object with key - value pairs.\n   * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n   * @param {module:engine/view/element~Element} element Element to set styles on.\n   */\n\n\n  setStyle(property, value, element) {\n    if (isPlainObject(property) && element === undefined) {\n      element = value;\n    }\n\n    element._setStyle(property, value);\n  }\n  /**\n   * Removes specified style from the element.\n   *\n   *\t\twriter.removeStyle( 'color', element );  // Removes 'color' style.\n   *\t\twriter.removeStyle( [ 'color', 'border-top' ], element ); // Removes both 'color' and 'border-top' styles.\n   *\n   * @param {Array.<String>|String} property\n   * @param {module:engine/view/element~Element} element\n   */\n\n\n  removeStyle(property, element) {\n    element._removeStyle(property);\n  }\n  /**\n   * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n   * so they can be used to add special data to elements.\n   *\n   * @param {String|Symbol} key\n   * @param {*} value\n   * @param {module:engine/view/element~Element} element\n   */\n\n\n  setCustomProperty(key, value, element) {\n    element._setCustomProperty(key, value);\n  }\n  /**\n   * Removes a custom property stored under the given key.\n   *\n   * @param {String|Symbol} key\n   * @param {module:engine/view/element~Element} element\n   * @returns {Boolean} Returns true if property was removed.\n   */\n\n\n  removeCustomProperty(key, element) {\n    return element._removeCustomProperty(key);\n  }\n  /**\n   * Breaks attribute nodes at provided position or at boundaries of provided range. It breaks attribute elements inside\n   * up to a container element.\n   *\n   * In following examples `<p>` is a container, `<b>` and `<u>` are attribute nodes:\n   *\n   *\t\t<p>foo<b><u>bar{}</u></b></p> -> <p>foo<b><u>bar</u></b>[]</p>\n   *\t\t<p>foo<b><u>{}bar</u></b></p> -> <p>foo{}<b><u>bar</u></b></p>\n   *\t\t<p>foo<b><u>b{}ar</u></b></p> -> <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n   *\t\t<p><b>fo{o</b><u>ba}r</u></p> -> <p><b>fo</b><b>o</b><u>ba</u><u>r</u></b></p>\n   *\n   * **Note:** {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n   *\n   * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n   * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n   * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n   * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container`\n   * when {@link module:engine/view/range~Range#start start}\n   * and {@link module:engine/view/range~Range#end end} positions of a passed range are not placed inside same parent container.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element`\n   * when trying to break attributes\n   * inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element`\n   * when trying to break attributes\n   * inside {@link module:engine/view/uielement~UIElement UIElement}.\n   *\n   * @see module:engine/view/attributeelement~AttributeElement\n   * @see module:engine/view/containerelement~ContainerElement\n   * @see module:engine/view/downcastwriter~DowncastWriter#breakContainer\n   * @param {module:engine/view/position~Position|module:engine/view/range~Range} positionOrRange Position where\n   * to break attribute elements.\n   * @returns {module:engine/view/position~Position|module:engine/view/range~Range} New position or range, after breaking the attribute\n   * elements.\n   */\n\n\n  breakAttributes(positionOrRange) {\n    if (positionOrRange instanceof Position) {\n      return this._breakAttributes(positionOrRange);\n    } else {\n      return this._breakAttributesRange(positionOrRange);\n    }\n  }\n  /**\n   * Breaks {@link module:engine/view/containerelement~ContainerElement container view element} into two, at the given position. Position\n   * has to be directly inside container element and cannot be in root. Does not break if position is at the beginning\n   * or at the end of it's parent element.\n   *\n   *\t\t<p>foo^bar</p> -> <p>foo</p><p>bar</p>\n   *\t\t<div><p>foo</p>^<p>bar</p></div> -> <div><p>foo</p></div><div><p>bar</p></div>\n   *\t\t<p>^foobar</p> -> ^<p>foobar</p>\n   *\t\t<p>foobar^</p> -> <p>foobar</p>^\n   *\n   * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#breakAttributes breakAttributes} and\n   * {@link module:engine/view/downcastwriter~DowncastWriter#breakContainer breakContainer} is that `breakAttributes` breaks all\n   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} that are ancestors of given `position`,\n   * up to the first encountered {@link module:engine/view/containerelement~ContainerElement container element}.\n   * `breakContainer` assumes that given `position` is directly in container element and breaks that container element.\n   *\n   * @see module:engine/view/attributeelement~AttributeElement\n   * @see module:engine/view/containerelement~ContainerElement\n   * @see module:engine/view/downcastwriter~DowncastWriter#breakAttributes\n   * @param {module:engine/view/position~Position} position Position where to break element.\n   * @returns {module:engine/view/position~Position} Position between broken elements. If element has not been broken,\n   * the returned position is placed either before it or after it.\n   */\n\n\n  breakContainer(position) {\n    const element = position.parent;\n\n    if (!element.is('containerElement')) {\n      /**\n       * Trying to break an element which is not a container element.\n       *\n       * @error view-writer-break-non-container-element\n       */\n      throw new CKEditorError('view-writer-break-non-container-element: Trying to break an element which is not a container element.', this.document);\n    }\n\n    if (!element.parent) {\n      /**\n       * Trying to break root element.\n       *\n       * @error view-writer-break-root\n       */\n      throw new CKEditorError('view-writer-break-root: Trying to break root element.', this.document);\n    }\n\n    if (position.isAtStart) {\n      return Position._createBefore(element);\n    } else if (!position.isAtEnd) {\n      const newElement = element._clone(false);\n\n      this.insert(Position._createAfter(element), newElement);\n      const sourceRange = new Range(position, Position._createAt(element, 'end'));\n      const targetPosition = new Position(newElement, 0);\n      this.move(sourceRange, targetPosition);\n    }\n\n    return Position._createAfter(element);\n  }\n  /**\n   * Merges {@link module:engine/view/attributeelement~AttributeElement attribute elements}. It also merges text nodes if needed.\n   * Only {@link module:engine/view/attributeelement~AttributeElement#isSimilar similar} attribute elements can be merged.\n   *\n   * In following examples `<p>` is a container and `<b>` is an attribute element:\n   *\n   *\t\t<p>foo[]bar</p> -> <p>foo{}bar</p>\n   *\t\t<p><b>foo</b>[]<b>bar</b></p> -> <p><b>foo{}bar</b></p>\n   *\t\t<p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p> -> <p><b foo=\"bar\">a</b>[]<b foo=\"baz\">b</b></p>\n   *\n   * It will also take care about empty attributes when merging:\n   *\n   *\t\t<p><b>[]</b></p> -> <p>[]</p>\n   *\t\t<p><b>foo</b><i>[]</i><b>bar</b></p> -> <p><b>foo{}bar</b></p>\n   *\n   * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n   * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n   * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n   *\n   * @see module:engine/view/attributeelement~AttributeElement\n   * @see module:engine/view/containerelement~ContainerElement\n   * @see module:engine/view/downcastwriter~DowncastWriter#mergeContainers\n   * @param {module:engine/view/position~Position} position Merge position.\n   * @returns {module:engine/view/position~Position} Position after merge.\n   */\n\n\n  mergeAttributes(position) {\n    const positionOffset = position.offset;\n    const positionParent = position.parent; // When inside text node - nothing to merge.\n\n    if (positionParent.is('text')) {\n      return position;\n    } // When inside empty attribute - remove it.\n\n\n    if (positionParent.is('attributeElement') && positionParent.childCount === 0) {\n      const parent = positionParent.parent;\n      const offset = positionParent.index;\n\n      positionParent._remove();\n\n      this._removeFromClonedElementsGroup(positionParent);\n\n      return this.mergeAttributes(new Position(parent, offset));\n    }\n\n    const nodeBefore = positionParent.getChild(positionOffset - 1);\n    const nodeAfter = positionParent.getChild(positionOffset); // Position should be placed between two nodes.\n\n    if (!nodeBefore || !nodeAfter) {\n      return position;\n    } // When position is between two text nodes.\n\n\n    if (nodeBefore.is('text') && nodeAfter.is('text')) {\n      return mergeTextNodes(nodeBefore, nodeAfter);\n    } // When position is between two same attribute elements.\n    else if (nodeBefore.is('attributeElement') && nodeAfter.is('attributeElement') && nodeBefore.isSimilar(nodeAfter)) {\n        // Move all children nodes from node placed after selection and remove that node.\n        const count = nodeBefore.childCount;\n\n        nodeBefore._appendChild(nodeAfter.getChildren());\n\n        nodeAfter._remove();\n\n        this._removeFromClonedElementsGroup(nodeAfter); // New position is located inside the first node, before new nodes.\n        // Call this method recursively to merge again if needed.\n\n\n        return this.mergeAttributes(new Position(nodeBefore, count));\n      }\n\n    return position;\n  }\n  /**\n   * Merges two {@link module:engine/view/containerelement~ContainerElement container elements} that are before and after given position.\n   * Precisely, the element after the position is removed and it's contents are moved to element before the position.\n   *\n   *\t\t<p>foo</p>^<p>bar</p> -> <p>foo^bar</p>\n   *\t\t<div>foo</div>^<p>bar</p> -> <div>foo^bar</div>\n   *\n   * **Note:** Difference between {@link module:engine/view/downcastwriter~DowncastWriter#mergeAttributes mergeAttributes} and\n   * {@link module:engine/view/downcastwriter~DowncastWriter#mergeContainers mergeContainers} is that `mergeAttributes` merges two\n   * {@link module:engine/view/attributeelement~AttributeElement attribute elements} or {@link module:engine/view/text~Text text nodes}\n   * while `mergeContainer` merges two {@link module:engine/view/containerelement~ContainerElement container elements}.\n   *\n   * @see module:engine/view/attributeelement~AttributeElement\n   * @see module:engine/view/containerelement~ContainerElement\n   * @see module:engine/view/downcastwriter~DowncastWriter#mergeAttributes\n   * @param {module:engine/view/position~Position} position Merge position.\n   * @returns {module:engine/view/position~Position} Position after merge.\n   */\n\n\n  mergeContainers(position) {\n    const prev = position.nodeBefore;\n    const next = position.nodeAfter;\n\n    if (!prev || !next || !prev.is('containerElement') || !next.is('containerElement')) {\n      /**\n       * Element before and after given position cannot be merged.\n       *\n       * @error view-writer-merge-containers-invalid-position\n       */\n      throw new CKEditorError('view-writer-merge-containers-invalid-position: ' + 'Element before and after given position cannot be merged.', this.document);\n    }\n\n    const lastChild = prev.getChild(prev.childCount - 1);\n    const newPosition = lastChild instanceof Text ? Position._createAt(lastChild, 'end') : Position._createAt(prev, 'end');\n    this.move(Range._createIn(next), Position._createAt(prev, 'end'));\n    this.remove(Range._createOn(next));\n    return newPosition;\n  }\n  /**\n   * Insert node or nodes at specified position. Takes care about breaking attributes before insertion\n   * and merging them afterwards.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n   * contains instances that are not {@link module:engine/view/text~Text Texts},\n   * {@link module:engine/view/attributeelement~AttributeElement AttributeElements},\n   * {@link module:engine/view/containerelement~ContainerElement ContainerElements},\n   * {@link module:engine/view/emptyelement~EmptyElement EmptyElements} or\n   * {@link module:engine/view/uielement~UIElement UIElements}.\n   *\n   * @param {module:engine/view/position~Position} position Insertion position.\n   * @param {module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement|\n   * module:engine/view/containerelement~ContainerElement|module:engine/view/emptyelement~EmptyElement|\n   * module:engine/view/uielement~UIElement|Iterable.<module:engine/view/text~Text|\n   * module:engine/view/attributeelement~AttributeElement|module:engine/view/containerelement~ContainerElement|\n   * module:engine/view/emptyelement~EmptyElement|module:engine/view/uielement~UIElement>} nodes Node or nodes to insert.\n   * @returns {module:engine/view/range~Range} Range around inserted nodes.\n   */\n\n\n  insert(position, nodes) {\n    nodes = isIterable(nodes) ? [...nodes] : [nodes]; // Check if nodes to insert are instances of AttributeElements, ContainerElements, EmptyElements, UIElements or Text.\n\n    validateNodesToInsert(nodes, this.document);\n    const container = getParentContainer(position);\n\n    if (!container) {\n      /**\n       * Position's parent container cannot be found.\n       *\n       * @error view-writer-invalid-position-container\n       */\n      throw new CKEditorError('view-writer-invalid-position-container', this.document);\n    }\n\n    const insertionPosition = this._breakAttributes(position, true);\n\n    const length = container._insertChild(insertionPosition.offset, nodes);\n\n    for (const node of nodes) {\n      this._addToClonedElementsGroup(node);\n    }\n\n    const endPosition = insertionPosition.getShiftedBy(length);\n    const start = this.mergeAttributes(insertionPosition); // When no nodes were inserted - return collapsed range.\n\n    if (length === 0) {\n      return new Range(start, start);\n    } else {\n      // If start position was merged - move end position.\n      if (!start.isEqual(insertionPosition)) {\n        endPosition.offset--;\n      }\n\n      const end = this.mergeAttributes(endPosition);\n      return new Range(start, end);\n    }\n  }\n  /**\n   * Removes provided range from the container.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n   * same parent container.\n   *\n   * @param {module:engine/view/range~Range|module:engine/view/item~Item} rangeOrItem Range to remove from container\n   * or an {@link module:engine/view/item~Item item} to remove. If range is provided, after removing, it will be updated\n   * to a collapsed range showing the new position.\n   * @returns {module:engine/view/documentfragment~DocumentFragment} Document fragment containing removed nodes.\n   */\n\n\n  remove(rangeOrItem) {\n    const range = rangeOrItem instanceof Range ? rangeOrItem : Range._createOn(rangeOrItem);\n    validateRangeContainer(range, this.document); // If range is collapsed - nothing to remove.\n\n    if (range.isCollapsed) {\n      return new DocumentFragment();\n    } // Break attributes at range start and end.\n\n\n    const {\n      start: breakStart,\n      end: breakEnd\n    } = this._breakAttributesRange(range, true);\n\n    const parentContainer = breakStart.parent;\n    const count = breakEnd.offset - breakStart.offset; // Remove nodes in range.\n\n    const removed = parentContainer._removeChildren(breakStart.offset, count);\n\n    for (const node of removed) {\n      this._removeFromClonedElementsGroup(node);\n    } // Merge after removing.\n\n\n    const mergePosition = this.mergeAttributes(breakStart);\n    range.start = mergePosition;\n    range.end = mergePosition.clone(); // Return removed nodes.\n\n    return new DocumentFragment(removed);\n  }\n  /**\n   * Removes matching elements from given range.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n   * same parent container.\n   *\n   * @param {module:engine/view/range~Range} range Range to clear.\n   * @param {module:engine/view/element~Element} element Element to remove.\n   */\n\n\n  clear(range, element) {\n    validateRangeContainer(range, this.document); // Create walker on given range.\n    // We walk backward because when we remove element during walk it modifies range end position.\n\n    const walker = range.getWalker({\n      direction: 'backward',\n      ignoreElementEnd: true\n    }); // Let's walk.\n\n    for (const current of walker) {\n      const item = current.item;\n      let rangeToRemove; // When current item matches to the given element.\n\n      if (item.is('element') && element.isSimilar(item)) {\n        // Create range on this element.\n        rangeToRemove = Range._createOn(item); // When range starts inside Text or TextProxy element.\n      } else if (!current.nextPosition.isAfter(range.start) && item.is('textProxy')) {\n        // We need to check if parent of this text matches to given element.\n        const parentElement = item.getAncestors().find(ancestor => {\n          return ancestor.is('element') && element.isSimilar(ancestor);\n        }); // If it is then create range inside this element.\n\n        if (parentElement) {\n          rangeToRemove = Range._createIn(parentElement);\n        }\n      } // If we have found element to remove.\n\n\n      if (rangeToRemove) {\n        // We need to check if element range stick out of the given range and truncate if it is.\n        if (rangeToRemove.end.isAfter(range.end)) {\n          rangeToRemove.end = range.end;\n        }\n\n        if (rangeToRemove.start.isBefore(range.start)) {\n          rangeToRemove.start = range.start;\n        } // At the end we remove range with found element.\n\n\n        this.remove(rangeToRemove);\n      }\n    }\n  }\n  /**\n   * Moves nodes from provided range to target position.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n   * same parent container.\n   *\n   * @param {module:engine/view/range~Range} sourceRange Range containing nodes to move.\n   * @param {module:engine/view/position~Position} targetPosition Position to insert.\n   * @returns {module:engine/view/range~Range} Range in target container. Inserted nodes are placed between\n   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions.\n   */\n\n\n  move(sourceRange, targetPosition) {\n    let nodes;\n\n    if (targetPosition.isAfter(sourceRange.end)) {\n      targetPosition = this._breakAttributes(targetPosition, true);\n      const parent = targetPosition.parent;\n      const countBefore = parent.childCount;\n      sourceRange = this._breakAttributesRange(sourceRange, true);\n      nodes = this.remove(sourceRange);\n      targetPosition.offset += parent.childCount - countBefore;\n    } else {\n      nodes = this.remove(sourceRange);\n    }\n\n    return this.insert(targetPosition, nodes);\n  }\n  /**\n   * Wraps elements within range with provided {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n   * If a collapsed range is provided, it will be wrapped only if it is equal to view selection.\n   *\n   * If a collapsed range was passed and is same as selection, the selection\n   * will be moved to the inside of the wrapped attribute element.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-invalid-range-container`\n   * when {@link module:engine/view/range~Range#start}\n   * and {@link module:engine/view/range~Range#end} positions are not placed inside same parent container.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n   * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-nonselection-collapsed-range` when passed range\n   * is collapsed and different than view selection.\n   *\n   * @param {module:engine/view/range~Range} range Range to wrap.\n   * @param {module:engine/view/attributeelement~AttributeElement} attribute Attribute element to use as wrapper.\n   * @returns {module:engine/view/range~Range} range Range after wrapping, spanning over wrapping attribute element.\n  */\n\n\n  wrap(range, attribute) {\n    if (!(attribute instanceof AttributeElement)) {\n      throw new CKEditorError('view-writer-wrap-invalid-attribute', this.document);\n    }\n\n    validateRangeContainer(range, this.document);\n\n    if (!range.isCollapsed) {\n      // Non-collapsed range. Wrap it with the attribute element.\n      return this._wrapRange(range, attribute);\n    } else {\n      // Collapsed range. Wrap position.\n      let position = range.start;\n\n      if (position.parent.is('element') && !_hasNonUiChildren(position.parent)) {\n        position = position.getLastMatchingPosition(value => value.item.is('uiElement'));\n      }\n\n      position = this._wrapPosition(position, attribute);\n      const viewSelection = this.document.selection; // If wrapping position is equal to view selection, move view selection inside wrapping attribute element.\n\n      if (viewSelection.isCollapsed && viewSelection.getFirstPosition().isEqual(range.start)) {\n        this.setSelection(position);\n      }\n\n      return new Range(position);\n    }\n  }\n  /**\n   * Unwraps nodes within provided range from attribute element.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when\n   * {@link module:engine/view/range~Range#start start} and {@link module:engine/view/range~Range#end end} positions are not placed inside\n   * same parent container.\n   *\n   * @param {module:engine/view/range~Range} range\n   * @param {module:engine/view/attributeelement~AttributeElement} attribute\n   */\n\n\n  unwrap(range, attribute) {\n    if (!(attribute instanceof AttributeElement)) {\n      /**\n       * Attribute element need to be instance of attribute element.\n       *\n       * @error view-writer-unwrap-invalid-attribute\n       */\n      throw new CKEditorError('view-writer-unwrap-invalid-attribute', this.document);\n    }\n\n    validateRangeContainer(range, this.document); // If range is collapsed - nothing to unwrap.\n\n    if (range.isCollapsed) {\n      return range;\n    } // Break attributes at range start and end.\n\n\n    const {\n      start: breakStart,\n      end: breakEnd\n    } = this._breakAttributesRange(range, true);\n\n    const parentContainer = breakStart.parent; // Unwrap children located between break points.\n\n    const newRange = this._unwrapChildren(parentContainer, breakStart.offset, breakEnd.offset, attribute); // Merge attributes at the both ends and return a new range.\n\n\n    const start = this.mergeAttributes(newRange.start); // If start position was merged - move end position back.\n\n    if (!start.isEqual(newRange.start)) {\n      newRange.end.offset--;\n    }\n\n    const end = this.mergeAttributes(newRange.end);\n    return new Range(start, end);\n  }\n  /**\n   * Renames element by creating a copy of renamed element but with changed name and then moving contents of the\n   * old element to the new one. Keep in mind that this will invalidate all {@link module:engine/view/position~Position positions} which\n   * has renamed element as {@link module:engine/view/position~Position#parent a parent}.\n   *\n   * New element has to be created because `Element#tagName` property in DOM is readonly.\n   *\n   * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n   *\n   * @param {String} newName New name for element.\n   * @param {module:engine/view/containerelement~ContainerElement} viewElement Element to be renamed.\n   */\n\n\n  rename(newName, viewElement) {\n    const newElement = new ContainerElement(newName, viewElement.getAttributes());\n    this.insert(Position._createAfter(viewElement), newElement);\n    this.move(Range._createIn(viewElement), Position._createAt(newElement, 0));\n    this.remove(Range._createOn(viewElement));\n    return newElement;\n  }\n  /**\n   * Cleans up memory by removing obsolete cloned elements group from the writer.\n   *\n   * Should be used whenever all {@link module:engine/view/attributeelement~AttributeElement attribute elements}\n   * with the same {@link module:engine/view/attributeelement~AttributeElement#id id} are going to be removed from the view and\n   * the group will no longer be needed.\n   *\n   * Cloned elements group are not removed automatically in case if the group is still needed after all its elements\n   * were removed from the view.\n   *\n   * Keep in mind that group names are equal to the `id` property of the attribute element.\n   *\n   * @param {String} groupName Name of the group to clear.\n   */\n\n\n  clearClonedElementsGroup(groupName) {\n    this._cloneGroups.delete(groupName);\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link #createPositionBefore},\n   * * {@link #createPositionAfter},\n   *\n   * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  createPositionAt(itemOrPosition, offset) {\n    return Position._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionAfter(item) {\n    return Position._createAfter(item);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionBefore(item) {\n    return Position._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRange(start, end) {\n    return new Range(start, end);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeOn(item) {\n    return Range._createOn(item);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeIn(element) {\n    return Range._createIn(element);\n  }\n  /**\n   Creates new {@link module:engine/view/selection~Selection} instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = writer.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = writer.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tconst selection = writer.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = writer.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tconst selection = writer.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = writer.createContainerElement( 'p' );\n   *\t\tconst selection = writer.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   * @returns {module:engine/view/selection~Selection}\n   */\n\n\n  createSelection(selectable, placeOrOffset, options) {\n    return new Selection(selectable, placeOrOffset, options);\n  }\n  /**\n   * Wraps children with provided `wrapElement`. Only children contained in `parent` element between\n   * `startOffset` and `endOffset` will be wrapped.\n   *\n   * @private\n   * @param {module:engine/view/element~Element} parent\n   * @param {Number} startOffset\n   * @param {Number} endOffset\n   * @param {module:engine/view/element~Element} wrapElement\n   */\n\n\n  _wrapChildren(parent, startOffset, endOffset, wrapElement) {\n    let i = startOffset;\n    const wrapPositions = [];\n\n    while (i < endOffset) {\n      const child = parent.getChild(i);\n      const isText = child.is('text');\n      const isAttribute = child.is('attributeElement');\n      const isEmpty = child.is('emptyElement');\n      const isUI = child.is('uiElement'); //\n      // (In all examples, assume that `wrapElement` is `<span class=\"foo\">` element.)\n      //\n      // Check if `wrapElement` can be joined with the wrapped element. One of requirements is having same name.\n      // If possible, join elements.\n      //\n      // <p><span class=\"bar\">abc</span></p>  -->  <p><span class=\"foo bar\">abc</span></p>\n      //\n\n      if (isAttribute && this._wrapAttributeElement(wrapElement, child)) {\n        wrapPositions.push(new Position(parent, i));\n      } //\n      // Wrap the child if it is not an attribute element or if it is an attribute element that should be inside\n      // `wrapElement` (due to priority).\n      //\n      // <p>abc</p>                   -->  <p><span class=\"foo\">abc</span></p>\n      // <p><strong>abc</strong></p>  -->  <p><span class=\"foo\"><strong>abc</strong></span></p>\n      //\n      else if (isText || isEmpty || isUI || isAttribute && shouldABeOutsideB(wrapElement, child)) {\n          // Clone attribute.\n          const newAttribute = wrapElement._clone(); // Wrap current node with new attribute.\n\n\n          child._remove();\n\n          newAttribute._appendChild(child);\n\n          parent._insertChild(i, newAttribute);\n\n          this._addToClonedElementsGroup(newAttribute);\n\n          wrapPositions.push(new Position(parent, i));\n        } //\n        // If other nested attribute is found and it wasn't wrapped (see above), continue wrapping inside it.\n        //\n        // <p><a href=\"foo.html\">abc</a></p>  -->  <p><a href=\"foo.html\"><span class=\"foo\">abc</span></a></p>\n        //\n        else if (isAttribute) {\n            this._wrapChildren(child, 0, child.childCount, wrapElement);\n          }\n\n      i++;\n    } // Merge at each wrap.\n\n\n    let offsetChange = 0;\n\n    for (const position of wrapPositions) {\n      position.offset -= offsetChange; // Do not merge with elements outside selected children.\n\n      if (position.offset == startOffset) {\n        continue;\n      }\n\n      const newPosition = this.mergeAttributes(position); // If nodes were merged - other merge offsets will change.\n\n      if (!newPosition.isEqual(position)) {\n        offsetChange++;\n        endOffset--;\n      }\n    }\n\n    return Range._createFromParentsAndOffsets(parent, startOffset, parent, endOffset);\n  }\n  /**\n   * Unwraps children from provided `unwrapElement`. Only children contained in `parent` element between\n   * `startOffset` and `endOffset` will be unwrapped.\n   *\n   * @private\n   * @param {module:engine/view/element~Element} parent\n   * @param {Number} startOffset\n   * @param {Number} endOffset\n   * @param {module:engine/view/element~Element} unwrapElement\n   */\n\n\n  _unwrapChildren(parent, startOffset, endOffset, unwrapElement) {\n    let i = startOffset;\n    const unwrapPositions = []; // Iterate over each element between provided offsets inside parent.\n    // We don't use tree walker or range iterator because we will be removing and merging potentially multiple nodes,\n    // so it could get messy. It is safer to it manually in this case.\n\n    while (i < endOffset) {\n      const child = parent.getChild(i); // Skip all text nodes. There should be no container element's here either.\n\n      if (!child.is('attributeElement')) {\n        i++;\n        continue;\n      } //\n      // (In all examples, assume that `unwrapElement` is `<span class=\"foo\">` element.)\n      //\n      // If the child is similar to the given attribute element, unwrap it - it will be completely removed.\n      //\n      // <p><span class=\"foo\">abc</span>xyz</p>  -->  <p>abcxyz</p>\n      //\n\n\n      if (child.isSimilar(unwrapElement)) {\n        const unwrapped = child.getChildren();\n        const count = child.childCount; // Replace wrapper element with its children\n\n        child._remove();\n\n        parent._insertChild(i, unwrapped);\n\n        this._removeFromClonedElementsGroup(child); // Save start and end position of moved items.\n\n\n        unwrapPositions.push(new Position(parent, i), new Position(parent, i + count)); // Skip elements that were unwrapped. Assuming there won't be another element to unwrap in child elements.\n\n        i += count;\n        endOffset += count - 1;\n        continue;\n      } //\n      // If the child is not similar but is an attribute element, try partial unwrapping - remove the same attributes/styles/classes.\n      // Partial unwrapping will happen only if the elements have the same name.\n      //\n      // <p><span class=\"foo bar\">abc</span>xyz</p>  -->  <p><span class=\"bar\">abc</span>xyz</p>\n      // <p><i class=\"foo\">abc</i>xyz</p>            -->  <p><i class=\"foo\">abc</i>xyz</p>\n      //\n\n\n      if (this._unwrapAttributeElement(unwrapElement, child)) {\n        unwrapPositions.push(new Position(parent, i), new Position(parent, i + 1));\n        i++;\n        continue;\n      } //\n      // If other nested attribute is found, look through it's children for elements to unwrap.\n      //\n      // <p><i><span class=\"foo\">abc</span></i><p>  -->  <p><i>abc</i><p>\n      //\n\n\n      this._unwrapChildren(child, 0, child.childCount, unwrapElement);\n\n      i++;\n    } // Merge at each unwrap.\n\n\n    let offsetChange = 0;\n\n    for (const position of unwrapPositions) {\n      position.offset -= offsetChange; // Do not merge with elements outside selected children.\n\n      if (position.offset == startOffset || position.offset == endOffset) {\n        continue;\n      }\n\n      const newPosition = this.mergeAttributes(position); // If nodes were merged - other merge offsets will change.\n\n      if (!newPosition.isEqual(position)) {\n        offsetChange++;\n        endOffset--;\n      }\n    }\n\n    return Range._createFromParentsAndOffsets(parent, startOffset, parent, endOffset);\n  }\n  /**\n   * Helper function for `view.writer.wrap`. Wraps range with provided attribute element.\n   * This method will also merge newly added attribute element with its siblings whenever possible.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n   * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n   *\n   * @private\n   * @param {module:engine/view/range~Range} range\n   * @param {module:engine/view/attributeelement~AttributeElement} attribute\n   * @returns {module:engine/view/range~Range} New range after wrapping, spanning over wrapping attribute element.\n   */\n\n\n  _wrapRange(range, attribute) {\n    // Break attributes at range start and end.\n    const {\n      start: breakStart,\n      end: breakEnd\n    } = this._breakAttributesRange(range, true);\n\n    const parentContainer = breakStart.parent; // Wrap all children with attribute.\n\n    const newRange = this._wrapChildren(parentContainer, breakStart.offset, breakEnd.offset, attribute); // Merge attributes at the both ends and return a new range.\n\n\n    const start = this.mergeAttributes(newRange.start); // If start position was merged - move end position back.\n\n    if (!start.isEqual(newRange.start)) {\n      newRange.end.offset--;\n    }\n\n    const end = this.mergeAttributes(newRange.end);\n    return new Range(start, end);\n  }\n  /**\n   * Helper function for {@link #wrap}. Wraps position with provided attribute element.\n   * This method will also merge newly added attribute element with its siblings whenever possible.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError} `view-writer-wrap-invalid-attribute` when passed attribute element is not\n   * an instance of {@link module:engine/view/attributeelement~AttributeElement AttributeElement}.\n   *\n   * @private\n   * @param {module:engine/view/position~Position} position\n   * @param {module:engine/view/attributeelement~AttributeElement} attribute\n   * @returns {module:engine/view/position~Position} New position after wrapping.\n   */\n\n\n  _wrapPosition(position, attribute) {\n    // Return same position when trying to wrap with attribute similar to position parent.\n    if (attribute.isSimilar(position.parent)) {\n      return movePositionToTextNode(position.clone());\n    } // When position is inside text node - break it and place new position between two text nodes.\n\n\n    if (position.parent.is('text')) {\n      position = breakTextNode(position);\n    } // Create fake element that will represent position, and will not be merged with other attributes.\n\n\n    const fakePosition = this.createAttributeElement();\n    fakePosition._priority = Number.POSITIVE_INFINITY;\n\n    fakePosition.isSimilar = () => false; // Insert fake element in position location.\n\n\n    position.parent._insertChild(position.offset, fakePosition); // Range around inserted fake attribute element.\n\n\n    const wrapRange = new Range(position, position.getShiftedBy(1)); // Wrap fake element with attribute (it will also merge if possible).\n\n    this.wrap(wrapRange, attribute); // Remove fake element and place new position there.\n\n    const newPosition = new Position(fakePosition.parent, fakePosition.index);\n\n    fakePosition._remove(); // If position is placed between text nodes - merge them and return position inside.\n\n\n    const nodeBefore = newPosition.nodeBefore;\n    const nodeAfter = newPosition.nodeAfter;\n\n    if (nodeBefore instanceof Text && nodeAfter instanceof Text) {\n      return mergeTextNodes(nodeBefore, nodeAfter);\n    } // If position is next to text node - move position inside.\n\n\n    return movePositionToTextNode(newPosition);\n  }\n  /**\n   * \tWraps one {@link module:engine/view/attributeelement~AttributeElement AttributeElement} into another by\n   * \tmerging them if possible. When merging is possible - all attributes, styles and classes are moved from wrapper\n   * \telement to element being wrapped.\n   *\n   * \t@private\n   * \t@param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n   * \t@param {module:engine/view/attributeelement~AttributeElement} toWrap AttributeElement to wrap using wrapper element.\n   * \t@returns {Boolean} Returns `true` if elements are merged.\n   */\n\n\n  _wrapAttributeElement(wrapper, toWrap) {\n    if (!canBeJoined(wrapper, toWrap)) {\n      return false;\n    } // Can't merge if name or priority differs.\n\n\n    if (wrapper.name !== toWrap.name || wrapper.priority !== toWrap.priority) {\n      return false;\n    } // Check if attributes can be merged.\n\n\n    for (const key of wrapper.getAttributeKeys()) {\n      // Classes and styles should be checked separately.\n      if (key === 'class' || key === 'style') {\n        continue;\n      } // If some attributes are different we cannot wrap.\n\n\n      if (toWrap.hasAttribute(key) && toWrap.getAttribute(key) !== wrapper.getAttribute(key)) {\n        return false;\n      }\n    } // Check if styles can be merged.\n\n\n    for (const key of wrapper.getStyleNames()) {\n      if (toWrap.hasStyle(key) && toWrap.getStyle(key) !== wrapper.getStyle(key)) {\n        return false;\n      }\n    } // Move all attributes/classes/styles from wrapper to wrapped AttributeElement.\n\n\n    for (const key of wrapper.getAttributeKeys()) {\n      // Classes and styles should be checked separately.\n      if (key === 'class' || key === 'style') {\n        continue;\n      } // Move only these attributes that are not present - other are similar.\n\n\n      if (!toWrap.hasAttribute(key)) {\n        this.setAttribute(key, wrapper.getAttribute(key), toWrap);\n      }\n    }\n\n    for (const key of wrapper.getStyleNames()) {\n      if (!toWrap.hasStyle(key)) {\n        this.setStyle(key, wrapper.getStyle(key), toWrap);\n      }\n    }\n\n    for (const key of wrapper.getClassNames()) {\n      if (!toWrap.hasClass(key)) {\n        this.addClass(key, toWrap);\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Unwraps {@link module:engine/view/attributeelement~AttributeElement AttributeElement} from another by removing\n   * corresponding attributes, classes and styles. All attributes, classes and styles from wrapper should be present\n   * inside element being unwrapped.\n   *\n   * @private\n   * @param {module:engine/view/attributeelement~AttributeElement} wrapper Wrapper AttributeElement.\n   * @param {module:engine/view/attributeelement~AttributeElement} toUnwrap AttributeElement to unwrap using wrapper element.\n   * @returns {Boolean} Returns `true` if elements are unwrapped.\n   **/\n\n\n  _unwrapAttributeElement(wrapper, toUnwrap) {\n    if (!canBeJoined(wrapper, toUnwrap)) {\n      return false;\n    } // Can't unwrap if name or priority differs.\n\n\n    if (wrapper.name !== toUnwrap.name || wrapper.priority !== toUnwrap.priority) {\n      return false;\n    } // Check if AttributeElement has all wrapper attributes.\n\n\n    for (const key of wrapper.getAttributeKeys()) {\n      // Classes and styles should be checked separately.\n      if (key === 'class' || key === 'style') {\n        continue;\n      } // If some attributes are missing or different we cannot unwrap.\n\n\n      if (!toUnwrap.hasAttribute(key) || toUnwrap.getAttribute(key) !== wrapper.getAttribute(key)) {\n        return false;\n      }\n    } // Check if AttributeElement has all wrapper classes.\n\n\n    if (!toUnwrap.hasClass(...wrapper.getClassNames())) {\n      return false;\n    } // Check if AttributeElement has all wrapper styles.\n\n\n    for (const key of wrapper.getStyleNames()) {\n      // If some styles are missing or different we cannot unwrap.\n      if (!toUnwrap.hasStyle(key) || toUnwrap.getStyle(key) !== wrapper.getStyle(key)) {\n        return false;\n      }\n    } // Remove all wrapper's attributes from unwrapped element.\n\n\n    for (const key of wrapper.getAttributeKeys()) {\n      // Classes and styles should be checked separately.\n      if (key === 'class' || key === 'style') {\n        continue;\n      }\n\n      this.removeAttribute(key, toUnwrap);\n    } // Remove all wrapper's classes from unwrapped element.\n\n\n    this.removeClass(Array.from(wrapper.getClassNames()), toUnwrap); // Remove all wrapper's styles from unwrapped element.\n\n    this.removeStyle(Array.from(wrapper.getStyleNames()), toUnwrap);\n    return true;\n  }\n  /**\n   * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at the boundaries of given range.\n   *\n   * @private\n   * @param {module:engine/view/range~Range} range Range which `start` and `end` positions will be used to break attributes.\n   * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n   * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n   * @returns {module:engine/view/range~Range} New range with located at break positions.\n   */\n\n\n  _breakAttributesRange(range, forceSplitText = false) {\n    const rangeStart = range.start;\n    const rangeEnd = range.end;\n    validateRangeContainer(range, this.document); // Break at the collapsed position. Return new collapsed range.\n\n    if (range.isCollapsed) {\n      const position = this._breakAttributes(range.start, forceSplitText);\n\n      return new Range(position, position);\n    }\n\n    const breakEnd = this._breakAttributes(rangeEnd, forceSplitText);\n\n    const count = breakEnd.parent.childCount;\n\n    const breakStart = this._breakAttributes(rangeStart, forceSplitText); // Calculate new break end offset.\n\n\n    breakEnd.offset += breakEnd.parent.childCount - count;\n    return new Range(breakStart, breakEnd);\n  }\n  /**\n   * Helper function used by other `DowncastWriter` methods. Breaks attribute elements at given position.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-empty-element` when break position\n   * is placed inside {@link module:engine/view/emptyelement~EmptyElement EmptyElement}.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-cannot-break-ui-element` when break position\n   * is placed inside {@link module:engine/view/uielement~UIElement UIElement}.\n   *\n   * @private\n   * @param {module:engine/view/position~Position} position Position where to break attributes.\n   * @param {Boolean} [forceSplitText=false] If set to `true`, will break text nodes even if they are directly in container element.\n   * This behavior will result in incorrect view state, but is needed by other view writing methods which then fixes view state.\n   * @returns {module:engine/view/position~Position} New position after breaking the attributes.\n   */\n\n\n  _breakAttributes(position, forceSplitText = false) {\n    const positionOffset = position.offset;\n    const positionParent = position.parent; // If position is placed inside EmptyElement - throw an exception as we cannot break inside.\n\n    if (position.parent.is('emptyElement')) {\n      /**\n       * Cannot break inside EmptyElement instance.\n       *\n       * @error view-writer-cannot-break-empty-element\n       */\n      throw new CKEditorError('view-writer-cannot-break-empty-element', this.document);\n    } // If position is placed inside UIElement - throw an exception as we cannot break inside.\n\n\n    if (position.parent.is('uiElement')) {\n      /**\n       * Cannot break inside UIElement instance.\n       *\n       * @error view-writer-cannot-break-ui-element\n       */\n      throw new CKEditorError('view-writer-cannot-break-ui-element', this.document);\n    } // There are no attributes to break and text nodes breaking is not forced.\n\n\n    if (!forceSplitText && positionParent.is('text') && isContainerOrFragment(positionParent.parent)) {\n      return position.clone();\n    } // Position's parent is container, so no attributes to break.\n\n\n    if (isContainerOrFragment(positionParent)) {\n      return position.clone();\n    } // Break text and start again in new position.\n\n\n    if (positionParent.is('text')) {\n      return this._breakAttributes(breakTextNode(position), forceSplitText);\n    }\n\n    const length = positionParent.childCount; // <p>foo<b><u>bar{}</u></b></p>\n    // <p>foo<b><u>bar</u>[]</b></p>\n    // <p>foo<b><u>bar</u></b>[]</p>\n\n    if (positionOffset == length) {\n      const newPosition = new Position(positionParent.parent, positionParent.index + 1);\n      return this._breakAttributes(newPosition, forceSplitText);\n    } else {\n      // <p>foo<b><u>{}bar</u></b></p>\n      // <p>foo<b>[]<u>bar</u></b></p>\n      // <p>foo{}<b><u>bar</u></b></p>\n      if (positionOffset === 0) {\n        const newPosition = new Position(positionParent.parent, positionParent.index);\n        return this._breakAttributes(newPosition, forceSplitText);\n      } // <p>foo<b><u>b{}ar</u></b></p>\n      // <p>foo<b><u>b[]ar</u></b></p>\n      // <p>foo<b><u>b</u>[]<u>ar</u></b></p>\n      // <p>foo<b><u>b</u></b>[]<b><u>ar</u></b></p>\n      else {\n          const offsetAfter = positionParent.index + 1; // Break element.\n\n          const clonedNode = positionParent._clone(); // Insert cloned node to position's parent node.\n\n\n          positionParent.parent._insertChild(offsetAfter, clonedNode);\n\n          this._addToClonedElementsGroup(clonedNode); // Get nodes to move.\n\n\n          const count = positionParent.childCount - positionOffset;\n\n          const nodesToMove = positionParent._removeChildren(positionOffset, count); // Move nodes to cloned node.\n\n\n          clonedNode._appendChild(nodesToMove); // Create new position to work on.\n\n\n          const newPosition = new Position(positionParent.parent, offsetAfter);\n          return this._breakAttributes(newPosition, forceSplitText);\n        }\n    }\n  }\n  /**\n   * Stores the information that an {@link module:engine/view/attributeelement~AttributeElement attribute element} was\n   * added to the tree. Saves the reference to the group in the given element and updates the group, so other elements\n   * from the group now keep a reference to the given attribute element.\n   *\n   * The clones group can be obtained using {@link module:engine/view/attributeelement~AttributeElement#getElementsWithSameId}.\n   *\n   * Does nothing if added element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n   *\n   * @private\n   * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to save.\n   */\n\n\n  _addToClonedElementsGroup(element) {\n    // Add only if the element is in document tree.\n    if (!element.root.is('rootElement')) {\n      return;\n    } // Traverse the element's children recursively to find other attribute elements that also might got inserted.\n    // The loop is at the beginning so we can make fast returns later in the code.\n\n\n    if (element.is('element')) {\n      for (const child of element.getChildren()) {\n        this._addToClonedElementsGroup(child);\n      }\n    }\n\n    const id = element.id;\n\n    if (!id) {\n      return;\n    }\n\n    let group = this._cloneGroups.get(id);\n\n    if (!group) {\n      group = new Set();\n\n      this._cloneGroups.set(id, group);\n    }\n\n    group.add(element);\n    element._clonesGroup = group;\n  }\n  /**\n   * Removes all the information about the given {@link module:engine/view/attributeelement~AttributeElement attribute element}\n   * from its clones group.\n   *\n   * Keep in mind, that the element will still keep a reference to the group (but the group will not keep a reference to it).\n   * This allows to reference the whole group even if the element was already removed from the tree.\n   *\n   * Does nothing if the element has no {@link module:engine/view/attributeelement~AttributeElement#id id}.\n   *\n   * @private\n   * @param {module:engine/view/attributeelement~AttributeElement} element Attribute element to remove.\n   */\n\n\n  _removeFromClonedElementsGroup(element) {\n    // Traverse the element's children recursively to find other attribute elements that also got removed.\n    // The loop is at the beginning so we can make fast returns later in the code.\n    if (element.is('element')) {\n      for (const child of element.getChildren()) {\n        this._removeFromClonedElementsGroup(child);\n      }\n    }\n\n    const id = element.id;\n\n    if (!id) {\n      return;\n    }\n\n    const group = this._cloneGroups.get(id);\n\n    if (!group) {\n      return;\n    }\n\n    group.delete(element); // Not removing group from element on purpose!\n    // If other parts of code have reference to this element, they will be able to get references to other elements from the group.\n  }\n\n} // Helper function for `view.writer.wrap`. Checks if given element has any children that are not ui elements.\n\nfunction _hasNonUiChildren(parent) {\n  return Array.from(parent.getChildren()).some(child => !child.is('uiElement'));\n}\n/**\n * Attribute element need to be instance of attribute element.\n *\n * @error view-writer-wrap-invalid-attribute\n */\n// Returns first parent container of specified {@link module:engine/view/position~Position Position}.\n// Position's parent node is checked as first, then next parents are checked.\n// Note that {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment} is treated like a container.\n//\n// @param {module:engine/view/position~Position} position Position used as a start point to locate parent container.\n// @returns {module:engine/view/containerelement~ContainerElement|module:engine/view/documentfragment~DocumentFragment|undefined}\n// Parent container element or `undefined` if container is not found.\n\n\nfunction getParentContainer(position) {\n  let parent = position.parent;\n\n  while (!isContainerOrFragment(parent)) {\n    if (!parent) {\n      return undefined;\n    }\n\n    parent = parent.parent;\n  }\n\n  return parent;\n} // Checks if first {@link module:engine/view/attributeelement~AttributeElement AttributeElement} provided to the function\n// can be wrapped otuside second element. It is done by comparing elements'\n// {@link module:engine/view/attributeelement~AttributeElement#priority priorities}, if both have same priority\n// {@link module:engine/view/element~Element#getIdentity identities} are compared.\n//\n// @param {module:engine/view/attributeelement~AttributeElement} a\n// @param {module:engine/view/attributeelement~AttributeElement} b\n// @returns {Boolean}\n\n\nfunction shouldABeOutsideB(a, b) {\n  if (a.priority < b.priority) {\n    return true;\n  } else if (a.priority > b.priority) {\n    return false;\n  } // When priorities are equal and names are different - use identities.\n\n\n  return a.getIdentity() < b.getIdentity();\n} // Returns new position that is moved to near text node. Returns same position if there is no text node before of after\n// specified position.\n//\n//\t\t<p>foo[]</p>  ->  <p>foo{}</p>\n//\t\t<p>[]foo</p>  ->  <p>{}foo</p>\n//\n// @param {module:engine/view/position~Position} position\n// @returns {module:engine/view/position~Position} Position located inside text node or same position if there is no text nodes\n// before or after position location.\n\n\nfunction movePositionToTextNode(position) {\n  const nodeBefore = position.nodeBefore;\n\n  if (nodeBefore && nodeBefore.is('text')) {\n    return new Position(nodeBefore, nodeBefore.data.length);\n  }\n\n  const nodeAfter = position.nodeAfter;\n\n  if (nodeAfter && nodeAfter.is('text')) {\n    return new Position(nodeAfter, 0);\n  }\n\n  return position;\n} // Breaks text node into two text nodes when possible.\n//\n//\t\t<p>foo{}bar</p> -> <p>foo[]bar</p>\n//\t\t<p>{}foobar</p> -> <p>[]foobar</p>\n//\t\t<p>foobar{}</p> -> <p>foobar[]</p>\n//\n// @param {module:engine/view/position~Position} position Position that need to be placed inside text node.\n// @returns {module:engine/view/position~Position} New position after breaking text node.\n\n\nfunction breakTextNode(position) {\n  if (position.offset == position.parent.data.length) {\n    return new Position(position.parent.parent, position.parent.index + 1);\n  }\n\n  if (position.offset === 0) {\n    return new Position(position.parent.parent, position.parent.index);\n  } // Get part of the text that need to be moved.\n\n\n  const textToMove = position.parent.data.slice(position.offset); // Leave rest of the text in position's parent.\n\n  position.parent._data = position.parent.data.slice(0, position.offset); // Insert new text node after position's parent text node.\n\n  position.parent.parent._insertChild(position.parent.index + 1, new Text(textToMove)); // Return new position between two newly created text nodes.\n\n\n  return new Position(position.parent.parent, position.parent.index + 1);\n} // Merges two text nodes into first node. Removes second node and returns merge position.\n//\n// @param {module:engine/view/text~Text} t1 First text node to merge. Data from second text node will be moved at the end of\n// this text node.\n// @param {module:engine/view/text~Text} t2 Second text node to merge. This node will be removed after merging.\n// @returns {module:engine/view/position~Position} Position after merging text nodes.\n\n\nfunction mergeTextNodes(t1, t2) {\n  // Merge text data into first text node and remove second one.\n  const nodeBeforeLength = t1.data.length;\n  t1._data += t2.data;\n\n  t2._remove();\n\n  return new Position(t1, nodeBeforeLength);\n} // Checks if provided nodes are valid to insert. Checks if each node is an instance of\n// {@link module:engine/view/text~Text Text} or {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n// {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElement} or\n// {@link module:engine/view/uielement~UIElement UIElement}.\n//\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-insert-invalid-node` when nodes to insert\n// contains instances that are not {@link module:engine/view/text~Text Texts},\n// {@link module:engine/view/emptyelement~EmptyElement EmptyElements},\n// {@link module:engine/view/uielement~UIElement UIElements},\n// {@link module:engine/view/attributeelement~AttributeElement AttributeElements} or\n// {@link module:engine/view/containerelement~ContainerElement ContainerElements}.\n//\n// @param Iterable.<module:engine/view/text~Text|module:engine/view/attributeelement~AttributeElement\n// |module:engine/view/containerelement~ContainerElement> nodes\n// @param {Object} errorContext\n\n\nfunction validateNodesToInsert(nodes, errorContext) {\n  for (const node of nodes) {\n    if (!validNodesToInsert.some(validNode => node instanceof validNode)) {\n      // eslint-disable-line no-use-before-define\n\n      /**\n       * Inserted nodes should be valid to insert. of {@link module:engine/view/attributeelement~AttributeElement AttributeElement},\n       * {@link module:engine/view/containerelement~ContainerElement ContainerElement},\n       * {@link module:engine/view/emptyelement~EmptyElement EmptyElement},\n       * {@link module:engine/view/uielement~UIElement UIElement}, {@link module:engine/view/text~Text Text}.\n       *\n       * @error view-writer-insert-invalid-node\n       */\n      throw new CKEditorError('view-writer-insert-invalid-node', errorContext);\n    }\n\n    if (!node.is('text')) {\n      validateNodesToInsert(node.getChildren(), errorContext);\n    }\n  }\n}\n\nconst validNodesToInsert = [Text, AttributeElement, ContainerElement, EmptyElement, UIElement]; // Checks if node is ContainerElement or DocumentFragment, because in most cases they should be treated the same way.\n//\n// @param {module:engine/view/node~Node} node\n// @returns {Boolean} Returns `true` if node is instance of ContainerElement or DocumentFragment.\n\nfunction isContainerOrFragment(node) {\n  return node && (node.is('containerElement') || node.is('documentFragment'));\n} // Checks if {@link module:engine/view/range~Range#start range start} and {@link module:engine/view/range~Range#end range end} are placed\n// inside same {@link module:engine/view/containerelement~ContainerElement container element}.\n// Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `view-writer-invalid-range-container` when validation fails.\n//\n// @param {module:engine/view/range~Range} range\n// @param {Object} errorContext\n\n\nfunction validateRangeContainer(range, errorContext) {\n  const startContainer = getParentContainer(range.start);\n  const endContainer = getParentContainer(range.end);\n\n  if (!startContainer || !endContainer || startContainer !== endContainer) {\n    /**\n     * Range container is invalid. This can happen if {@link module:engine/view/range~Range#start range start} and\n     * {@link module:engine/view/range~Range#end range end} positions are not placed inside same container or\n     * parent container for these positions cannot be found.\n     *\n     * @error view-writer-invalid-range-container\n     */\n    throw new CKEditorError('view-writer-invalid-range-container', errorContext);\n  }\n} // Checks if two attribute elements can be joined together. Elements can be joined together if, and only if\n// they do not have ids specified.\n//\n// @private\n// @param {module:engine/view/element~Element} a\n// @param {module:engine/view/element~Element} b\n// @returns {Boolean}\n\n\nfunction canBeJoined(a, b) {\n  return a.id === null && b.id === null;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/istext\n */\n\n/**\n * Checks if the object is a native DOM Text node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isText(obj) {\n  return Object.prototype.toString.call(obj) == '[object Text]';\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\n/**\n * Set of utils related to block and inline fillers handling.\n *\n * Browsers do not allow to put caret in elements which does not have height. Because of it, we need to fill all\n * empty elements which should be selectable with elements or characters called \"fillers\". Unfortunately there is no one\n * universal filler, this is why two types are uses:\n *\n * * Block filler is an element which fill block elements, like `<p>`. CKEditor uses `<br>` as a block filler during the editing,\n * as browsers do natively. So instead of an empty `<p>` there will be `<p><br></p>`. The advantage of block filler is that\n * it is transparent for the selection, so when the caret is before the `<br>` and user presses right arrow he will be\n * moved to the next paragraph, not after the `<br>`. The disadvantage is that it breaks a block, so it can not be used\n * in the middle of a line of text. The {@link module:engine/view/filler~BR_FILLER `<br>` filler} can be replaced with any other\n * character in the data output, for instance {@link module:engine/view/filler~NBSP_FILLER non-breaking space}.\n *\n * * Inline filler is a filler which does not break a line of text, so it can be used inside the text, for instance in the empty\n * `<b>` surrendered by text: `foo<b></b>bar`, if we want to put the caret there. CKEditor uses a sequence of the zero-width\n * spaces as an {@link module:engine/view/filler~INLINE_FILLER inline filler} having the predetermined\n * {@link module:engine/view/filler~INLINE_FILLER_LENGTH length}. A sequence is used, instead of a single character to\n * avoid treating random zero-width spaces as the inline filler. Disadvantage of the inline filler is that it is not\n * transparent for the selection. The arrow key moves the caret between zero-width spaces characters, so the additional\n * code is needed to handle the caret.\n *\n * Both inline and block fillers are handled by the {@link module:engine/view/renderer~Renderer renderer} and are not present in the\n * view.\n *\n * @module engine/view/filler\n */\n\n/**\n * Non-breaking space filler creator. This is a function which creates `&nbsp;` text node.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~BR_FILLER\n * @function\n */\n\nexport const NBSP_FILLER = domDocument => domDocument.createTextNode('\\u00A0');\n/**\n * `<br>` filler creator. This is a function which creates `<br data-cke-filler=\"true\">` element.\n * It defines how the filler is created.\n *\n * @see module:engine/view/filler~NBSP_FILLER\n * @function\n */\n\nexport const BR_FILLER = domDocument => {\n  const fillerBr = domDocument.createElement('br');\n  fillerBr.dataset.ckeFiller = true;\n  return fillerBr;\n};\n/**\n * Length of the {@link module:engine/view/filler~INLINE_FILLER INLINE_FILLER}.\n */\n\nexport const INLINE_FILLER_LENGTH = 7;\n/**\n * Inline filler which is a sequence of the zero width spaces.\n */\n\nexport const INLINE_FILLER = (() => {\n  let inlineFiller = '';\n\n  for (let i = 0; i < INLINE_FILLER_LENGTH; i++) {\n    inlineFiller += '\\u200b';\n  }\n\n  return inlineFiller;\n})(); // Usu IIF so the INLINE_FILLER appears as a constant in the docs.\n\n/**\n * Checks if the node is a text node which starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // true\n *\t\tstartsWithFiller( document.createTextNode( 'foo' ) ); // false\n *\t\tstartsWithFiller( document.createElement( 'p' ) ); // false\n *\n * @param {Node} domNode DOM node.\n * @returns {Boolean} True if the text node starts with the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\n\nexport function startsWithFiller(domNode) {\n  return isText(domNode) && domNode.data.substr(0, INLINE_FILLER_LENGTH) === INLINE_FILLER;\n}\n/**\n * Checks if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n *\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER ) ); // true\n *\t\tisInlineFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ); // false\n *\n * @param {Text} domText DOM text node.\n * @returns {Boolean} True if the text node contains only the {@link module:engine/view/filler~INLINE_FILLER inline filler}.\n */\n\nexport function isInlineFiller(domText) {\n  return domText.data.length == INLINE_FILLER_LENGTH && startsWithFiller(domText);\n}\n/**\n * Get string data from the text node, removing an {@link module:engine/view/filler~INLINE_FILLER inline filler} from it,\n * if text node contains it.\n *\n *\t\tgetDataWithoutFiller( document.createTextNode( INLINE_FILLER + 'foo' ) ) == 'foo' // true\n *\t\tgetDataWithoutFiller( document.createTextNode( 'foo' ) ) == 'foo' // true\n *\n * @param {Text} domText DOM text node, possible with inline filler.\n * @returns {String} Data without filler.\n */\n\nexport function getDataWithoutFiller(domText) {\n  if (startsWithFiller(domText)) {\n    return domText.data.slice(INLINE_FILLER_LENGTH);\n  } else {\n    return domText.data;\n  }\n}\n/**\n * Assign key observer which move cursor from the end of the inline filler to the beginning of it when\n * the left arrow is pressed, so the filler does not break navigation.\n *\n * @param {module:engine/view/view~View} view View controller instance we should inject quirks handling on.\n */\n\nexport function injectQuirksHandling(view) {\n  view.document.on('keydown', jumpOverInlineFiller);\n} // Move cursor from the end of the inline filler to the beginning of it when, so the filler does not break navigation.\n\nfunction jumpOverInlineFiller(evt, data) {\n  if (data.keyCode == keyCodes.arrowleft) {\n    const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n    if (domSelection.rangeCount == 1 && domSelection.getRangeAt(0).collapsed) {\n      const domParent = domSelection.getRangeAt(0).startContainer;\n      const domOffset = domSelection.getRangeAt(0).startOffset;\n\n      if (startsWithFiller(domParent) && domOffset <= INLINE_FILLER_LENGTH) {\n        domSelection.collapse(domParent, 0);\n      }\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/fastdiff\n */\n\n/**\n * Finds positions of the first and last change in the given string/array and generates a set of changes:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ { index: 2, type: 'insert', values: [ 'x', 'y', 'z' ] } ]\n *\n *\t\tfastDiff( '12a', '12aa' );\n *\t\t// [ { index: 3, type: 'insert', values: [ 'a' ] } ]\n *\n *\t\tfastDiff( '12xyza', '12a' );\n *\t\t// [ { index: 2, type: 'delete', howMany: 3 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'a' ], [ '1', '2', 'a' ] );\n *\t\t// [ { index: 3, type: 'delete', howMany: 1 } ]\n *\n *\t\tfastDiff( [ '1', '2', 'a', 'b', 'c', '3' ], [ '2', 'a', 'b' ] );\n *\t\t// [ { index: 0, type: 'insert', values: [ '2', 'a', 'b' ] }, { index: 3, type: 'delete', howMany: 6 } ]\n *\n * Passed arrays can contain any type of data, however to compare them correctly custom comparator function\n * should be passed as a third parameter:\n *\n *\t\tfastDiff( [ { value: 1 }, { value: 2 } ], [ { value: 1 }, { value: 3 } ], ( a, b ) => {\n *\t\t\treturn a.value === b.value;\n *\t\t} );\n *\t\t// [ { index: 1, type: 'insert', values: [ { value: 3 } ] }, { index: 2, type: 'delete', howMany: 1 } ]\n *\n * The resulted set of changes can be applied to the input in order to transform it into the output, for example:\n *\n *\t\tlet input = '12abc3';\n *\t\tconst output = '2ab';\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + change.values.join( '' ) + input.substring( change.index );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.substring( 0, change.index ) + input.substring( change.index + change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * or in case of arrays:\n *\n *\t\tlet input = [ '1', '2', 'a', 'b', 'c', '3' ];\n *\t\tconst output = [ '2', 'a', 'b' ];\n *\t\tconst changes = fastDiff( input, output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( change.values, input.slice( change.index ) );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput = input.slice( 0, change.index ).concat( input.slice( change.index + change.howMany ) );\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// input equals output now\n *\n * By passing `true` as the fourth parameter (`atomicChanges`) the output of this function will become compatible with\n * the {@link module:utils/diff~diff `diff()`} function:\n *\n *\t\tfastDiff( '12a', '12xyza' );\n *\t\t// [ 'equal', 'equal', 'insert', 'insert', 'insert', 'equal' ]\n *\n * The default output format of this function is compatible with the output format of\n * {@link module:utils/difftochanges~diffToChanges `diffToChanges()`}. The `diffToChanges()` input format is, in turn,\n * compatible with the output of {@link module:utils/diff~diff `diff()`}:\n *\n *\t\tconst a = '1234';\n *\t\tconst b = '12xyz34';\n *\n *\t\t// Both calls will return the same results (grouped changes format).\n *\t\tfastDiff( a, b );\n *\t\tdiffToChanges( diff( a, b ) );\n *\n *\t\t// Again, both calls will return the same results (atomic changes format).\n *\t\tfastDiff( a, b, null, true );\n *\t\tdiff( a, b );\n *\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Input array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default `===` (strict equal operator) is used.\n * @param {Boolean} [atomicChanges=false] Whether an array of `inset|delete|equal` operations should\n * be returned instead of changes set. This makes this function compatible with {@link module:utils/diff~diff `diff()`}.\n * @returns {Array} Array of changes.\n */\nexport default function fastDiff(a, b, cmp, atomicChanges = false) {\n  // Set the comparator function.\n  cmp = cmp || function (a, b) {\n    return a === b;\n  }; // Transform text or any iterable into arrays for easier, consistent processing.\n\n\n  if (!Array.isArray(a)) {\n    a = Array.from(a);\n  }\n\n  if (!Array.isArray(b)) {\n    b = Array.from(b);\n  } // Find first and last change.\n\n\n  const changeIndexes = findChangeBoundaryIndexes(a, b, cmp); // Transform into changes array.\n\n  return atomicChanges ? changeIndexesToAtomicChanges(changeIndexes, b.length) : changeIndexesToChanges(b, changeIndexes);\n} // Finds position of the first and last change in the given arrays. For example:\n//\n//\t\tconst indexes = findChangeBoundaryIndexes( [ '1', '2', '3', '4' ], [ '1', '3', '4', '2', '4' ] );\n//\t\tconsole.log( indexes ); // { firstIndex: 1, lastIndexOld: 3, lastIndexNew: 4 }\n//\n// The above indexes means that in the first array the modified part is `1[23]4` and in the second array it is `1[342]4`.\n// Based on such indexes, array with `insert`/`delete` operations which allows transforming first value into the second one\n// can be generated.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Object}\n// @returns {Number} return.firstIndex Index of the first change in both values (always the same for both).\n// @returns {Number} result.lastIndexOld Index of the last common value in `arr1`.\n// @returns {Number} result.lastIndexNew Index of the last common value in `arr2`.\n\nfunction findChangeBoundaryIndexes(arr1, arr2, cmp) {\n  // Find the first difference between passed values.\n  const firstIndex = findFirstDifferenceIndex(arr1, arr2, cmp); // If arrays are equal return -1 indexes object.\n\n  if (firstIndex === -1) {\n    return {\n      firstIndex: -1,\n      lastIndexOld: -1,\n      lastIndexNew: -1\n    };\n  } // Remove the common part of each value and reverse them to make it simpler to find the last difference between them.\n\n\n  const oldArrayReversed = cutAndReverse(arr1, firstIndex);\n  const newArrayReversed = cutAndReverse(arr2, firstIndex); // Find the first difference between reversed values.\n  // It should be treated as \"how many elements from the end the last difference occurred\".\n  //\n  // For example:\n  //\n  // \t\t\t\tinitial\t->\tafter cut\t-> reversed:\n  // oldValue:\t'321ba'\t->\t'21ba'\t\t-> 'ab12'\n  // newValue:\t'31xba'\t->\t'1xba'\t\t-> 'abx1'\n  // lastIndex:\t\t\t\t\t\t\t-> 2\n  //\n  // So the last change occurred two characters from the end of the arrays.\n\n  const lastIndex = findFirstDifferenceIndex(oldArrayReversed, newArrayReversed, cmp); // Use `lastIndex` to calculate proper offset, starting from the beginning (`lastIndex` kind of starts from the end).\n\n  const lastIndexOld = arr1.length - lastIndex;\n  const lastIndexNew = arr2.length - lastIndex;\n  return {\n    firstIndex,\n    lastIndexOld,\n    lastIndexNew\n  };\n} // Returns a first index on which given arrays differ. If both arrays are the same, -1 is returned.\n//\n// @param {Array} arr1\n// @param {Array} arr2\n// @param {Function} cmp Comparator function.\n// @returns {Number}\n\n\nfunction findFirstDifferenceIndex(arr1, arr2, cmp) {\n  for (let i = 0; i < Math.max(arr1.length, arr2.length); i++) {\n    if (arr1[i] === undefined || arr2[i] === undefined || !cmp(arr1[i], arr2[i])) {\n      return i;\n    }\n  }\n\n  return -1; // Return -1 if arrays are equal.\n} // Returns a copy of the given array with `howMany` elements removed starting from the beginning and in reversed order.\n//\n// @param {Array} arr Array to be processed.\n// @param {Number} howMany How many elements from array beginning to remove.\n// @returns {Array} Shortened and reversed array.\n\n\nfunction cutAndReverse(arr, howMany) {\n  return arr.slice(howMany).reverse();\n} // Generates changes array based on change indexes from `findChangeBoundaryIndexes` function. This function will\n// generate array with 0 (no changes), 1 (deletion or insertion) or 2 records (insertion and deletion).\n//\n// @param {Array} newArray New array for which change indexes were calculated.\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @returns {Array.<Object>} Array of changes compatible with {@link module:utils/difftochanges~diffToChanges} format.\n\n\nfunction changeIndexesToChanges(newArray, changeIndexes) {\n  const result = [];\n  const {\n    firstIndex,\n    lastIndexOld,\n    lastIndexNew\n  } = changeIndexes; // Order operations as 'insert', 'delete' array to keep compatibility with {@link module:utils/difftochanges~diffToChanges}\n  // in most cases. However, 'diffToChanges' does not stick to any order so in some cases\n  // (for example replacing '12345' with 'abcd') it will generate 'delete', 'insert' order.\n\n  if (lastIndexNew - firstIndex > 0) {\n    result.push({\n      index: firstIndex,\n      type: 'insert',\n      values: newArray.slice(firstIndex, lastIndexNew)\n    });\n  }\n\n  if (lastIndexOld - firstIndex > 0) {\n    result.push({\n      index: firstIndex + (lastIndexNew - firstIndex),\n      // Increase index of what was inserted.\n      type: 'delete',\n      howMany: lastIndexOld - firstIndex\n    });\n  }\n\n  return result;\n} // Generates array with set `equal|insert|delete` operations based on change indexes from `findChangeBoundaryIndexes` function.\n//\n// @param {Object} changeIndexes Change indexes object from `findChangeBoundaryIndexes` function.\n// @param {Number} newLength Length of the new array on which `findChangeBoundaryIndexes` calculated change indexes.\n// @returns {Array.<String>} Array of changes compatible with {@link module:utils/diff~diff} format.\n\n\nfunction changeIndexesToAtomicChanges(changeIndexes, newLength) {\n  const {\n    firstIndex,\n    lastIndexOld,\n    lastIndexNew\n  } = changeIndexes; // No changes.\n\n  if (firstIndex === -1) {\n    return Array(newLength).fill('equal');\n  }\n\n  let result = [];\n\n  if (firstIndex > 0) {\n    result = result.concat(Array(firstIndex).fill('equal'));\n  }\n\n  if (lastIndexNew - firstIndex > 0) {\n    result = result.concat(Array(lastIndexNew - firstIndex).fill('insert'));\n  }\n\n  if (lastIndexOld - firstIndex > 0) {\n    result = result.concat(Array(lastIndexOld - firstIndex).fill('delete'));\n  }\n\n  if (lastIndexNew < newLength) {\n    result = result.concat(Array(newLength - lastIndexNew).fill('equal'));\n  }\n\n  return result;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/diff\n */\nimport fastDiff from '../src/fastdiff'; // The following code is based on the \"O(NP) Sequence Comparison Algorithm\"\n// by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n\n/**\n * Calculates the difference between two arrays or strings producing an array containing a list of changes\n * necessary to transform input into output.\n *\n *\t\tdiff( 'aba', 'acca' ); // [ 'equal', 'insert', 'insert', 'delete', 'equal' ]\n *\n * This function is based on the \"O(NP) Sequence Comparison Algorithm\" by Sun Wu, Udi Manber, Gene Myers, Webb Miller.\n * Unfortunately, while it gives the most precise results, its to complex for longer strings/arrow (above 200 items).\n * Therefore, `diff()` automatically switches to {@link module:utils/fastdiff~fastDiff `fastDiff()`} when detecting\n * such a scenario. The return formats of both functions are identical.\n *\n * @param {Array|String} a Input array or string.\n * @param {Array|String} b Output array or string.\n * @param {Function} [cmp] Optional function used to compare array values, by default === is used.\n * @returns {Array} Array of changes.\n */\n\nexport default function diff(a, b, cmp) {\n  // Set the comparator function.\n  cmp = cmp || function (a, b) {\n    return a === b;\n  };\n\n  const aLength = a.length;\n  const bLength = b.length; // Perform `fastDiff` for longer strings/arrays (see #269).\n\n  if (aLength > 200 || bLength > 200 || aLength + bLength > 300) {\n    return diff.fastDiff(a, b, cmp, true);\n  } // Temporary action type statics.\n\n\n  let _insert, _delete; // Swapped the arrays to use the shorter one as the first one.\n\n\n  if (bLength < aLength) {\n    const tmp = a;\n    a = b;\n    b = tmp; // We swap the action types as well.\n\n    _insert = 'delete';\n    _delete = 'insert';\n  } else {\n    _insert = 'insert';\n    _delete = 'delete';\n  }\n\n  const m = a.length;\n  const n = b.length;\n  const delta = n - m; // Edit scripts, for each diagonal.\n\n  const es = {}; // Furthest points, the furthest y we can get on each diagonal.\n\n  const fp = {};\n\n  function snake(k) {\n    // We use -1 as an alternative below to handle initial values ( instead of filling the fp with -1 first ).\n    // Furthest points (y) on the diagonal below k.\n    const y1 = (fp[k - 1] !== undefined ? fp[k - 1] : -1) + 1; // Furthest points (y) on the diagonal above k.\n\n    const y2 = fp[k + 1] !== undefined ? fp[k + 1] : -1; // The way we should go to get further.\n\n    const dir = y1 > y2 ? -1 : 1; // Clone previous changes array (if any).\n\n    if (es[k + dir]) {\n      es[k] = es[k + dir].slice(0);\n    } // Create changes array.\n\n\n    if (!es[k]) {\n      es[k] = [];\n    } // Push the action.\n\n\n    es[k].push(y1 > y2 ? _insert : _delete); // Set the beginning coordinates.\n\n    let y = Math.max(y1, y2);\n    let x = y - k; // Traverse the diagonal as long as the values match.\n\n    while (x < m && y < n && cmp(a[x], b[y])) {\n      x++;\n      y++; // Push no change action.\n\n      es[k].push('equal');\n    }\n\n    return y;\n  }\n\n  let p = 0;\n  let k; // Traverse the graph until we reach the end of the longer string.\n\n  do {\n    // Updates furthest points and edit scripts for diagonals below delta.\n    for (k = -p; k < delta; k++) {\n      fp[k] = snake(k);\n    } // Updates furthest points and edit scripts for diagonals above delta.\n\n\n    for (k = delta + p; k > delta; k--) {\n      fp[k] = snake(k);\n    } // Updates furthest point and edit script for the delta diagonal.\n    // note that the delta diagonal is the one which goes through the sink (m, n).\n\n\n    fp[delta] = snake(delta);\n    p++;\n  } while (fp[delta] !== n); // Return the final list of edit changes.\n  // We remove the first item that represents the action for the injected nulls.\n\n\n  return es[delta].slice(1);\n} // Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\n\ndiff.fastDiff = fastDiff;","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/insertat\n */\n\n/**\n * Inserts node to the parent at given index.\n *\n * @param {Element} parentElement Parent element.\n * @param {Number} index Insertions index.\n * @param {Node} nodeToInsert Node to insert.\n */\nexport default function insertAt(parentElement, index, nodeToInsert) {\n  parentElement.insertBefore(nodeToInsert, parentElement.childNodes[index] || null);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/remove\n */\n\n/**\n * Removes given node from parent.\n *\n * @param {Node} node Node to remove.\n */\nexport default function remove(node) {\n  const parent = node.parentNode;\n\n  if (parent) {\n    parent.removeChild(node);\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isnode\n */\n\n/**\n * Checks if the object is a native DOM Node.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isNode(obj) {\n  if (obj) {\n    if (obj.defaultView) {\n      return obj instanceof obj.defaultView.Document;\n    } else if (obj.ownerDocument && obj.ownerDocument.defaultView) {\n      return obj instanceof obj.ownerDocument.defaultView.Node;\n    }\n  }\n\n  return false;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module engine/view/renderer\n */\nimport ViewText from './text';\nimport ViewPosition from './position';\nimport { INLINE_FILLER, INLINE_FILLER_LENGTH, startsWithFiller, isInlineFiller } from './filler';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport insertAt from '@ckeditor/ckeditor5-utils/src/dom/insertat';\nimport remove from '@ckeditor/ckeditor5-utils/src/dom/remove';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport fastDiff from '@ckeditor/ckeditor5-utils/src/fastdiff';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Renderer is responsible for updating the DOM structure and the DOM selection based on\n * the {@link module:engine/view/renderer~Renderer#markToSync information about updated view nodes}.\n * In other words, it renders the view to the DOM.\n *\n * Its main responsibility is to make only the necessary, minimal changes to the DOM. However, unlike in many\n * virtual DOM implementations, the primary reason for doing minimal changes is not the performance but ensuring\n * that native editing features such as text composition, autocompletion, spell checking, selection's x-index are\n * affected as little as possible.\n *\n * Renderer uses {@link module:engine/view/domconverter~DomConverter} to transform view nodes and positions\n * to and from the DOM.\n */\n\nexport default class Renderer {\n  /**\n   * Creates a renderer instance.\n   *\n   * @param {module:engine/view/domconverter~DomConverter} domConverter Converter instance.\n   * @param {module:engine/view/documentselection~DocumentSelection} selection View selection.\n   */\n  constructor(domConverter, selection) {\n    /**\n     * Set of DOM Documents instances.\n     *\n     * @readonly\n     * @member {Set.<Document>}\n     */\n    this.domDocuments = new Set();\n    /**\n     * Converter instance.\n     *\n     * @readonly\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = domConverter;\n    /**\n     * Set of nodes which attributes changed and may need to be rendered.\n     *\n     * @readonly\n     * @member {Set.<module:engine/view/node~Node>}\n     */\n\n    this.markedAttributes = new Set();\n    /**\n     * Set of elements which child lists changed and may need to be rendered.\n     *\n     * @readonly\n     * @member {Set.<module:engine/view/node~Node>}\n     */\n\n    this.markedChildren = new Set();\n    /**\n     * Set of text nodes which text data changed and may need to be rendered.\n     *\n     * @readonly\n     * @member {Set.<module:engine/view/node~Node>}\n     */\n\n    this.markedTexts = new Set();\n    /**\n     * View selection. Renderer updates DOM selection based on the view selection.\n     *\n     * @readonly\n     * @member {module:engine/view/documentselection~DocumentSelection}\n     */\n\n    this.selection = selection;\n    /**\n     * Indicates if the view document is focused and selection can be rendered. Selection will not be rendered if\n     * this is set to `false`.\n     *\n     * @member {Boolean}\n     */\n\n    this.isFocused = false;\n    /**\n     * The text node in which the inline filler was rendered.\n     *\n     * @private\n     * @member {Text}\n     */\n\n    this._inlineFiller = null;\n    /**\n     * DOM element containing fake selection.\n     *\n     * @private\n     * @type {null|HTMLElement}\n     */\n\n    this._fakeSelectionContainer = null;\n  }\n  /**\n   * Marks a view node to be updated in the DOM by {@link #render `render()`}.\n   *\n   * Note that only view nodes whose parents have corresponding DOM elements need to be marked to be synchronized.\n   *\n   * @see #markedAttributes\n   * @see #markedChildren\n   * @see #markedTexts\n   *\n   * @param {module:engine/view/document~ChangeType} type Type of the change.\n   * @param {module:engine/view/node~Node} node Node to be marked.\n   */\n\n\n  markToSync(type, node) {\n    if (type === 'text') {\n      if (this.domConverter.mapViewToDom(node.parent)) {\n        this.markedTexts.add(node);\n      }\n    } else {\n      // If the node has no DOM element it is not rendered yet,\n      // its children/attributes do not need to be marked to be sync.\n      if (!this.domConverter.mapViewToDom(node)) {\n        return;\n      }\n\n      if (type === 'attributes') {\n        this.markedAttributes.add(node);\n      } else if (type === 'children') {\n        this.markedChildren.add(node);\n      } else {\n        /**\n         * Unknown type passed to Renderer.markToSync.\n         *\n         * @error renderer-unknown-type\n         */\n        throw new CKEditorError('view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.', this);\n      }\n    }\n  }\n  /**\n   * Renders all buffered changes ({@link #markedAttributes}, {@link #markedChildren} and {@link #markedTexts}) and\n   * the current view selection (if needed) to the DOM by applying a minimal set of changes to it.\n   *\n   * Renderer tries not to break the text composition (e.g. IME) and x-index of the selection,\n   * so it does as little as it is needed to update the DOM.\n   *\n   * Renderer also handles {@link module:engine/view/filler fillers}. Especially, it checks if the inline filler is needed\n   * at the selection position and adds or removes it. To prevent breaking text composition inline filler will not be\n   * removed as long as the selection is in the text node which needed it at first.\n   */\n\n\n  render() {\n    let inlineFillerPosition; // Refresh mappings.\n\n    for (const element of this.markedChildren) {\n      this._updateChildrenMappings(element);\n    } // There was inline filler rendered in the DOM but it's not\n    // at the selection position any more, so we can remove it\n    // (cause even if it's needed, it must be placed in another location).\n\n\n    if (this._inlineFiller && !this._isSelectionInInlineFiller()) {\n      this._removeInlineFiller();\n    } // If we've got the filler, let's try to guess its position in the view.\n\n\n    if (this._inlineFiller) {\n      inlineFillerPosition = this._getInlineFillerPosition();\n    } // Otherwise, if it's needed, create it at the selection position.\n    else if (this._needsInlineFillerAtSelection()) {\n        inlineFillerPosition = this.selection.getFirstPosition(); // Do not use `markToSync` so it will be added even if the parent is already added.\n\n        this.markedChildren.add(inlineFillerPosition.parent);\n      }\n\n    for (const element of this.markedAttributes) {\n      this._updateAttrs(element);\n    }\n\n    for (const element of this.markedChildren) {\n      this._updateChildren(element, {\n        inlineFillerPosition\n      });\n    }\n\n    for (const node of this.markedTexts) {\n      if (!this.markedChildren.has(node.parent) && this.domConverter.mapViewToDom(node.parent)) {\n        this._updateText(node, {\n          inlineFillerPosition\n        });\n      }\n    } // Check whether the inline filler is required and where it really is in the DOM.\n    // At this point in most cases it will be in the DOM, but there are exceptions.\n    // For example, if the inline filler was deep in the created DOM structure, it will not be created.\n    // Similarly, if it was removed at the beginning of this function and then neither text nor children were updated,\n    // it will not be present.\n    // Fix those and similar scenarios.\n\n\n    if (inlineFillerPosition) {\n      const fillerDomPosition = this.domConverter.viewPositionToDom(inlineFillerPosition);\n      const domDocument = fillerDomPosition.parent.ownerDocument;\n\n      if (!startsWithFiller(fillerDomPosition.parent)) {\n        // Filler has not been created at filler position. Create it now.\n        this._inlineFiller = addInlineFiller(domDocument, fillerDomPosition.parent, fillerDomPosition.offset);\n      } else {\n        // Filler has been found, save it.\n        this._inlineFiller = fillerDomPosition.parent;\n      }\n    } else {\n      // There is no filler needed.\n      this._inlineFiller = null;\n    }\n\n    this._updateSelection();\n\n    this._updateFocus();\n\n    this.markedTexts.clear();\n    this.markedAttributes.clear();\n    this.markedChildren.clear();\n  }\n  /**\n   * Updates mappings of view element's children.\n   *\n   * Children that were replaced in the view structure by similar elements (same tag name) are treated as 'replaced'.\n   * This means that their mappings can be updated so the new view elements are mapped to the existing DOM elements.\n   * Thanks to that these elements do not need to be re-rendered completely.\n   *\n   * @private\n   * @param {module:engine/view/node~Node} viewElement The view element whose children mappings will be updated.\n   */\n\n\n  _updateChildrenMappings(viewElement) {\n    const domElement = this.domConverter.mapViewToDom(viewElement);\n\n    if (!domElement) {\n      // If there is no `domElement` it means that it was already removed from DOM and there is no need to process it.\n      return;\n    }\n\n    const actualDomChildren = this.domConverter.mapViewToDom(viewElement).childNodes;\n    const expectedDomChildren = Array.from(this.domConverter.viewChildrenToDom(viewElement, domElement.ownerDocument, {\n      withChildren: false\n    }));\n\n    const diff = this._diffNodeLists(actualDomChildren, expectedDomChildren);\n\n    const actions = this._findReplaceActions(diff, actualDomChildren, expectedDomChildren);\n\n    if (actions.indexOf('replace') !== -1) {\n      const counter = {\n        equal: 0,\n        insert: 0,\n        delete: 0\n      };\n\n      for (const action of actions) {\n        if (action === 'replace') {\n          const insertIndex = counter.equal + counter.insert;\n          const deleteIndex = counter.equal + counter.delete;\n          const viewChild = viewElement.getChild(insertIndex); // The 'uiElement' is a special one and its children are not stored in a view (#799),\n          // so we cannot use it with replacing flow (since it uses view children during rendering\n          // which will always result in rendering empty element).\n\n          if (viewChild && !viewChild.is('uiElement')) {\n            this._updateElementMappings(viewChild, actualDomChildren[deleteIndex]);\n          }\n\n          remove(expectedDomChildren[insertIndex]);\n          counter.equal++;\n        } else {\n          counter[action]++;\n        }\n      }\n    }\n  }\n  /**\n   * Updates mappings of a given view element.\n   *\n   * @private\n   * @param {module:engine/view/node~Node} viewElement The view element whose mappings will be updated.\n   * @param {Node} domElement The DOM element representing the given view element.\n   */\n\n\n  _updateElementMappings(viewElement, domElement) {\n    // Remap 'DomConverter' bindings.\n    this.domConverter.unbindDomElement(domElement);\n    this.domConverter.bindElements(domElement, viewElement); // View element may have children which needs to be updated, but are not marked, mark them to update.\n\n    this.markedChildren.add(viewElement); // Because we replace new view element mapping with the existing one, the corresponding DOM element\n    // will not be rerendered. The new view element may have different attributes than the previous one.\n    // Since its corresponding DOM element will not be rerendered, new attributes will not be added\n    // to the DOM, so we need to mark it here to make sure its attributes gets updated. See #1427 for more\n    // detailed case study.\n    // Also there are cases where replaced element is removed from the view structure and then has\n    // its attributes changed or removed. In such cases the element will not be present in `markedAttributes`\n    // and also may be the same (`element.isSimilar()`) as the reused element not having its attributes updated.\n    // To prevent such situations we always mark reused element to have its attributes rerenderd (#1560).\n\n    this.markedAttributes.add(viewElement);\n  }\n  /**\n   * Gets the position of the inline filler based on the current selection.\n   * Here, we assume that we know that the filler is needed and\n   * {@link #_isSelectionInInlineFiller is at the selection position}, and, since it is needed,\n   * it is somewhere at the selection position.\n   *\n   * Note: The filler position cannot be restored based on the filler's DOM text node, because\n   * when this method is called (before rendering), the bindings will often be broken. View-to-DOM\n   * bindings are only dependable after rendering.\n   *\n   * @private\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  _getInlineFillerPosition() {\n    const firstPos = this.selection.getFirstPosition();\n\n    if (firstPos.parent.is('text')) {\n      return ViewPosition._createBefore(this.selection.getFirstPosition().parent);\n    } else {\n      return firstPos;\n    }\n  }\n  /**\n   * Returns `true` if the selection has not left the inline filler's text node.\n   * If it is `true`, it means that the filler had been added for a reason and the selection did not\n   * leave the filler's text node. For example, the user can be in the middle of a composition so it should not be touched.\n   *\n   * @private\n   * @returns {Boolean} `true` if the inline filler and selection are in the same place.\n   */\n\n\n  _isSelectionInInlineFiller() {\n    if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {\n      return false;\n    } // Note, we can't check if selection's position equals position of the\n    // this._inlineFiller node, because of #663. We may not be able to calculate\n    // the filler's position in the view at this stage.\n    // Instead, we check it the other way – whether selection is anchored in\n    // that text node or next to it.\n    // Possible options are:\n    // \"FILLER{}\"\n    // \"FILLERadded-text{}\"\n\n\n    const selectionPosition = this.selection.getFirstPosition();\n    const position = this.domConverter.viewPositionToDom(selectionPosition);\n\n    if (position && isText(position.parent) && startsWithFiller(position.parent)) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Removes the inline filler.\n   *\n   * @private\n   */\n\n\n  _removeInlineFiller() {\n    const domFillerNode = this._inlineFiller; // Something weird happened and the stored node doesn't contain the filler's text.\n\n    if (!startsWithFiller(domFillerNode)) {\n      /**\n       * The inline filler node was lost. Most likely, something overwrote the filler text node\n       * in the DOM.\n       *\n       * @error view-renderer-filler-was-lost\n       */\n      throw new CKEditorError('view-renderer-filler-was-lost: The inline filler node was lost.', this);\n    }\n\n    if (isInlineFiller(domFillerNode)) {\n      domFillerNode.parentNode.removeChild(domFillerNode);\n    } else {\n      domFillerNode.data = domFillerNode.data.substr(INLINE_FILLER_LENGTH);\n    }\n\n    this._inlineFiller = null;\n  }\n  /**\n   * Checks if the inline {@link module:engine/view/filler filler} should be added.\n   *\n   * @private\n   * @returns {Boolean} `true` if the inline filler should be added.\n   */\n\n\n  _needsInlineFillerAtSelection() {\n    if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {\n      return false;\n    }\n\n    const selectionPosition = this.selection.getFirstPosition();\n    const selectionParent = selectionPosition.parent;\n    const selectionOffset = selectionPosition.offset; // If there is no DOM root we do not care about fillers.\n\n    if (!this.domConverter.mapViewToDom(selectionParent.root)) {\n      return false;\n    }\n\n    if (!selectionParent.is('element')) {\n      return false;\n    } // Prevent adding inline filler inside elements with contenteditable=false.\n    // https://github.com/ckeditor/ckeditor5-engine/issues/1170\n\n\n    if (!isEditable(selectionParent)) {\n      return false;\n    } // We have block filler, we do not need inline one.\n\n\n    if (selectionOffset === selectionParent.getFillerOffset()) {\n      return false;\n    }\n\n    const nodeBefore = selectionPosition.nodeBefore;\n    const nodeAfter = selectionPosition.nodeAfter;\n\n    if (nodeBefore instanceof ViewText || nodeAfter instanceof ViewText) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Checks if text needs to be updated and possibly updates it.\n   *\n   * @private\n   * @param {module:engine/view/text~Text} viewText View text to update.\n   * @param {Object} options\n   * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n   * filler should be rendered.\n   */\n\n\n  _updateText(viewText, options) {\n    const domText = this.domConverter.findCorrespondingDomText(viewText);\n    const newDomText = this.domConverter.viewToDom(viewText, domText.ownerDocument);\n    const actualText = domText.data;\n    let expectedText = newDomText.data;\n    const filler = options.inlineFillerPosition;\n\n    if (filler && filler.parent == viewText.parent && filler.offset == viewText.index) {\n      expectedText = INLINE_FILLER + expectedText;\n    }\n\n    if (actualText != expectedText) {\n      const actions = fastDiff(actualText, expectedText);\n\n      for (const action of actions) {\n        if (action.type === 'insert') {\n          domText.insertData(action.index, action.values.join(''));\n        } else {\n          // 'delete'\n          domText.deleteData(action.index, action.howMany);\n        }\n      }\n    }\n  }\n  /**\n   * Checks if attribute list needs to be updated and possibly updates it.\n   *\n   * @private\n   * @param {module:engine/view/element~Element} viewElement The view element to update.\n   */\n\n\n  _updateAttrs(viewElement) {\n    const domElement = this.domConverter.mapViewToDom(viewElement);\n\n    if (!domElement) {\n      // If there is no `domElement` it means that 'viewElement' is outdated as its mapping was updated\n      // in 'this._updateChildrenMappings()'. There is no need to process it as new view element which\n      // replaced old 'viewElement' mapping was also added to 'this.markedAttributes'\n      // in 'this._updateChildrenMappings()' so it will be processed separately.\n      return;\n    }\n\n    const domAttrKeys = Array.from(domElement.attributes).map(attr => attr.name);\n    const viewAttrKeys = viewElement.getAttributeKeys(); // Add or overwrite attributes.\n\n    for (const key of viewAttrKeys) {\n      domElement.setAttribute(key, viewElement.getAttribute(key));\n    } // Remove from DOM attributes which do not exists in the view.\n\n\n    for (const key of domAttrKeys) {\n      if (!viewElement.hasAttribute(key)) {\n        domElement.removeAttribute(key);\n      }\n    }\n  }\n  /**\n   * Checks if elements child list needs to be updated and possibly updates it.\n   *\n   * @private\n   * @param {module:engine/view/element~Element} viewElement View element to update.\n   * @param {Object} options\n   * @param {module:engine/view/position~Position} options.inlineFillerPosition The position where the inline\n   * filler should be rendered.\n   */\n\n\n  _updateChildren(viewElement, options) {\n    const domElement = this.domConverter.mapViewToDom(viewElement);\n\n    if (!domElement) {\n      // If there is no `domElement` it means that it was already removed from DOM.\n      // There is no need to process it. It will be processed when re-inserted.\n      return;\n    }\n\n    const inlineFillerPosition = options.inlineFillerPosition;\n    const actualDomChildren = this.domConverter.mapViewToDom(viewElement).childNodes;\n    const expectedDomChildren = Array.from(this.domConverter.viewChildrenToDom(viewElement, domElement.ownerDocument, {\n      bind: true,\n      inlineFillerPosition\n    })); // Inline filler element has to be created as it is present in the DOM, but not in the view. It is required\n    // during diffing so text nodes could be compared correctly and also during rendering to maintain\n    // proper order and indexes while updating the DOM.\n\n    if (inlineFillerPosition && inlineFillerPosition.parent === viewElement) {\n      addInlineFiller(domElement.ownerDocument, expectedDomChildren, inlineFillerPosition.offset);\n    }\n\n    const diff = this._diffNodeLists(actualDomChildren, expectedDomChildren);\n\n    let i = 0;\n    const nodesToUnbind = new Set();\n\n    for (const action of diff) {\n      if (action === 'insert') {\n        insertAt(domElement, i, expectedDomChildren[i]);\n        i++;\n      } else if (action === 'delete') {\n        nodesToUnbind.add(actualDomChildren[i]);\n        remove(actualDomChildren[i]);\n      } else {\n        // 'equal'\n        // Force updating text nodes inside elements which did not change and do not need to be re-rendered (#1125).\n        this._markDescendantTextToSync(this.domConverter.domToView(expectedDomChildren[i]));\n\n        i++;\n      }\n    } // Unbind removed nodes. When node does not have a parent it means that it was removed from DOM tree during\n    // comparision with the expected DOM. We don't need to check child nodes, because if child node was reinserted,\n    // it was moved to DOM tree out of the removed node.\n\n\n    for (const node of nodesToUnbind) {\n      if (!node.parentNode) {\n        this.domConverter.unbindDomElement(node);\n      }\n    }\n  }\n  /**\n   * Shorthand for diffing two arrays or node lists of DOM nodes.\n   *\n   * @private\n   * @param {Array.<Node>|NodeList} actualDomChildren Actual DOM children\n   * @param {Array.<Node>|NodeList} expectedDomChildren Expected DOM children.\n   * @returns {Array.<String>} The list of actions based on the {@link module:utils/diff~diff} function.\n   */\n\n\n  _diffNodeLists(actualDomChildren, expectedDomChildren) {\n    actualDomChildren = filterOutFakeSelectionContainer(actualDomChildren, this._fakeSelectionContainer);\n    return diff(actualDomChildren, expectedDomChildren, sameNodes.bind(null, this.domConverter));\n  }\n  /**\n   * Finds DOM nodes that were replaced with the similar nodes (same tag name) in the view. All nodes are compared\n   * within one `insert`/`delete` action group, for example:\n   *\n   * \t\tActual DOM:\t\t<p><b>Foo</b>Bar<i>Baz</i><b>Bax</b></p>\n   * \t\tExpected DOM:\t<p>Bar<b>123</b><i>Baz</i><b>456</b></p>\n   * \t\tInput actions:\t[ insert, insert, delete, delete, equal, insert, delete ]\n   * \t\tOutput actions:\t[ insert, replace, delete, equal, replace ]\n   *\n   * @private\n   * @param {Array.<String>} actions Actions array which is a result of the {@link module:utils/diff~diff} function.\n   * @param {Array.<Node>|NodeList} actualDom Actual DOM children\n   * @param {Array.<Node>} expectedDom Expected DOM children.\n   * @returns {Array.<String>} Actions array modified with the `replace` actions.\n   */\n\n\n  _findReplaceActions(actions, actualDom, expectedDom) {\n    // If there is no both 'insert' and 'delete' actions, no need to check for replaced elements.\n    if (actions.indexOf('insert') === -1 || actions.indexOf('delete') === -1) {\n      return actions;\n    }\n\n    let newActions = [];\n    let actualSlice = [];\n    let expectedSlice = [];\n    const counter = {\n      equal: 0,\n      insert: 0,\n      delete: 0\n    };\n\n    for (const action of actions) {\n      if (action === 'insert') {\n        expectedSlice.push(expectedDom[counter.equal + counter.insert]);\n      } else if (action === 'delete') {\n        actualSlice.push(actualDom[counter.equal + counter.delete]);\n      } else {\n        // equal\n        newActions = newActions.concat(diff(actualSlice, expectedSlice, areSimilar).map(x => x === 'equal' ? 'replace' : x));\n        newActions.push('equal'); // Reset stored elements on 'equal'.\n\n        actualSlice = [];\n        expectedSlice = [];\n      }\n\n      counter[action]++;\n    }\n\n    return newActions.concat(diff(actualSlice, expectedSlice, areSimilar).map(x => x === 'equal' ? 'replace' : x));\n  }\n  /**\n   * Marks text nodes to be synchronized.\n   *\n   * If a text node is passed, it will be marked. If an element is passed, all descendant text nodes inside it will be marked.\n   *\n   * @private\n   * @param {module:engine/view/node~Node} viewNode View node to sync.\n   */\n\n\n  _markDescendantTextToSync(viewNode) {\n    if (!viewNode) {\n      return;\n    }\n\n    if (viewNode.is('text')) {\n      this.markedTexts.add(viewNode);\n    } else if (viewNode.is('element')) {\n      for (const child of viewNode.getChildren()) {\n        this._markDescendantTextToSync(child);\n      }\n    }\n  }\n  /**\n   * Checks if the selection needs to be updated and possibly updates it.\n   *\n   * @private\n   */\n\n\n  _updateSelection() {\n    // If there is no selection - remove DOM and fake selections.\n    if (this.selection.rangeCount === 0) {\n      this._removeDomSelection();\n\n      this._removeFakeSelection();\n\n      return;\n    }\n\n    const domRoot = this.domConverter.mapViewToDom(this.selection.editableElement); // Do nothing if there is no focus, or there is no DOM element corresponding to selection's editable element.\n\n    if (!this.isFocused || !domRoot) {\n      return;\n    } // Render selection.\n\n\n    if (this.selection.isFake) {\n      this._updateFakeSelection(domRoot);\n    } else {\n      this._removeFakeSelection();\n\n      this._updateDomSelection(domRoot);\n    }\n  }\n  /**\n   * Updates the fake selection.\n   *\n   * @private\n   * @param {HTMLElement} domRoot A valid DOM root where the fake selection container should be added.\n   */\n\n\n  _updateFakeSelection(domRoot) {\n    const domDocument = domRoot.ownerDocument;\n\n    if (!this._fakeSelectionContainer) {\n      this._fakeSelectionContainer = createFakeSelectionContainer(domDocument);\n    }\n\n    const container = this._fakeSelectionContainer; // Bind fake selection container with the current selection *position*.\n\n    this.domConverter.bindFakeSelection(container, this.selection);\n\n    if (!this._fakeSelectionNeedsUpdate(domRoot)) {\n      return;\n    }\n\n    if (!container.parentElement || container.parentElement != domRoot) {\n      domRoot.appendChild(container);\n    }\n\n    container.textContent = this.selection.fakeSelectionLabel || '\\u00A0';\n    const domSelection = domDocument.getSelection();\n    const domRange = domDocument.createRange();\n    domSelection.removeAllRanges();\n    domRange.selectNodeContents(container);\n    domSelection.addRange(domRange);\n  }\n  /**\n   * Updates the DOM selection.\n   *\n   * @private\n   * @param {HTMLElement} domRoot A valid DOM root where the DOM selection should be rendered.\n   */\n\n\n  _updateDomSelection(domRoot) {\n    const domSelection = domRoot.ownerDocument.defaultView.getSelection(); // Let's check whether DOM selection needs updating at all.\n\n    if (!this._domSelectionNeedsUpdate(domSelection)) {\n      return;\n    } // Multi-range selection is not available in most browsers, and, at least in Chrome, trying to\n    // set such selection, that is not continuous, throws an error. Because of that, we will just use anchor\n    // and focus of view selection.\n    // Since we are not supporting multi-range selection, we also do not need to check if proper editable is\n    // selected. If there is any editable selected, it is okay (editable is taken from selection anchor).\n\n\n    const anchor = this.domConverter.viewPositionToDom(this.selection.anchor);\n    const focus = this.domConverter.viewPositionToDom(this.selection.focus); // Focus the new editing host.\n    // Otherwise, FF may throw an error (https://github.com/ckeditor/ckeditor5/issues/721).\n\n    domRoot.focus();\n    domSelection.collapse(anchor.parent, anchor.offset);\n    domSelection.extend(focus.parent, focus.offset); // Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n\n    if (env.isGecko) {\n      fixGeckoSelectionAfterBr(focus, domSelection);\n    }\n  }\n  /**\n   * Checks whether a given DOM selection needs to be updated.\n   *\n   * @private\n   * @param {Selection} domSelection The DOM selection to check.\n   * @returns {Boolean}\n   */\n\n\n  _domSelectionNeedsUpdate(domSelection) {\n    if (!this.domConverter.isDomSelectionCorrect(domSelection)) {\n      // Current DOM selection is in incorrect position. We need to update it.\n      return true;\n    }\n\n    const oldViewSelection = domSelection && this.domConverter.domSelectionToView(domSelection);\n\n    if (oldViewSelection && this.selection.isEqual(oldViewSelection)) {\n      return false;\n    } // If selection is not collapsed, it does not need to be updated if it is similar.\n\n\n    if (!this.selection.isCollapsed && this.selection.isSimilar(oldViewSelection)) {\n      // Selection did not changed and is correct, do not update.\n      return false;\n    } // Selections are not similar.\n\n\n    return true;\n  }\n  /**\n   * Checks whether the fake selection needs to be updated.\n   *\n   * @private\n   * @param {HTMLElement} domRoot A valid DOM root where a new fake selection container should be added.\n   * @returns {Boolean}\n   */\n\n\n  _fakeSelectionNeedsUpdate(domRoot) {\n    const container = this._fakeSelectionContainer;\n    const domSelection = domRoot.ownerDocument.getSelection(); // Fake selection needs to be updated if there's no fake selection container, or the container currently sits\n    // in a different root.\n\n    if (!container || container.parentElement !== domRoot) {\n      return true;\n    } // Make sure that the selection actually is within the fake selection.\n\n\n    if (domSelection.anchorNode !== container && !container.contains(domSelection.anchorNode)) {\n      return true;\n    }\n\n    return container.textContent !== this.selection.fakeSelectionLabel;\n  }\n  /**\n   * Removes the DOM selection.\n   *\n   * @private\n   */\n\n\n  _removeDomSelection() {\n    for (const doc of this.domDocuments) {\n      const domSelection = doc.getSelection();\n\n      if (domSelection.rangeCount) {\n        const activeDomElement = doc.activeElement;\n        const viewElement = this.domConverter.mapDomToView(activeDomElement);\n\n        if (activeDomElement && viewElement) {\n          doc.getSelection().removeAllRanges();\n        }\n      }\n    }\n  }\n  /**\n   * Removes the fake selection.\n   *\n   * @private\n   */\n\n\n  _removeFakeSelection() {\n    const container = this._fakeSelectionContainer;\n\n    if (container) {\n      container.remove();\n    }\n  }\n  /**\n   * Checks if focus needs to be updated and possibly updates it.\n   *\n   * @private\n   */\n\n\n  _updateFocus() {\n    if (this.isFocused) {\n      const editable = this.selection.editableElement;\n\n      if (editable) {\n        this.domConverter.focus(editable);\n      }\n    }\n  }\n\n}\nmix(Renderer, ObservableMixin); // Checks if provided element is editable.\n//\n// @private\n// @param {module:engine/view/element~Element} element\n// @returns {Boolean}\n\nfunction isEditable(element) {\n  if (element.getAttribute('contenteditable') == 'false') {\n    return false;\n  }\n\n  const parent = element.findAncestor(element => element.hasAttribute('contenteditable'));\n  return !parent || parent.getAttribute('contenteditable') == 'true';\n} // Adds inline filler at a given position.\n//\n// The position can be given as an array of DOM nodes and an offset in that array,\n// or a DOM parent element and an offset in that element.\n//\n// @private\n// @param {Document} domDocument\n// @param {Element|Array.<Node>} domParentOrArray\n// @param {Number} offset\n// @returns {Text} The DOM text node that contains an inline filler.\n\n\nfunction addInlineFiller(domDocument, domParentOrArray, offset) {\n  const childNodes = domParentOrArray instanceof Array ? domParentOrArray : domParentOrArray.childNodes;\n  const nodeAfterFiller = childNodes[offset];\n\n  if (isText(nodeAfterFiller)) {\n    nodeAfterFiller.data = INLINE_FILLER + nodeAfterFiller.data;\n    return nodeAfterFiller;\n  } else {\n    const fillerNode = domDocument.createTextNode(INLINE_FILLER);\n\n    if (Array.isArray(domParentOrArray)) {\n      childNodes.splice(offset, 0, fillerNode);\n    } else {\n      insertAt(domParentOrArray, offset, fillerNode);\n    }\n\n    return fillerNode;\n  }\n} // Whether two DOM nodes should be considered as similar.\n// Nodes are considered similar if they have the same tag name.\n//\n// @private\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\n\n\nfunction areSimilar(node1, node2) {\n  return isNode(node1) && isNode(node2) && !isText(node1) && !isText(node2) && node1.tagName.toLowerCase() === node2.tagName.toLowerCase();\n} // Whether two dom nodes should be considered as the same.\n// Two nodes which are considered the same are:\n//\n//\t\t* Text nodes with the same text.\n//\t\t* Element nodes represented by the same object.\n//\t\t* Two block filler elements.\n//\n// @private\n// @param {String} blockFillerMode Block filler mode, see {@link module:engine/view/domconverter~DomConverter#blockFillerMode}.\n// @param {Node} node1\n// @param {Node} node2\n// @returns {Boolean}\n\n\nfunction sameNodes(domConverter, actualDomChild, expectedDomChild) {\n  // Elements.\n  if (actualDomChild === expectedDomChild) {\n    return true;\n  } // Texts.\n  else if (isText(actualDomChild) && isText(expectedDomChild)) {\n      return actualDomChild.data === expectedDomChild.data;\n    } // Block fillers.\n    else if (domConverter.isBlockFiller(actualDomChild) && domConverter.isBlockFiller(expectedDomChild)) {\n        return true;\n      } // Not matching types.\n\n\n  return false;\n} // The following is a Firefox–specific hack (https://github.com/ckeditor/ckeditor5-engine/issues/1439).\n// When the native DOM selection is at the end of the block and preceded by <br /> e.g.\n//\n//\t\t<p>foo<br/>[]</p>\n//\n// which happens a lot when using the soft line break, the browser fails to (visually) move the\n// caret to the new line. A quick fix is as simple as force–refreshing the selection with the same range.\n\n\nfunction fixGeckoSelectionAfterBr(focus, domSelection) {\n  const parent = focus.parent; // This fix works only when the focus point is at the very end of an element.\n  // There is no point in running it in cases unrelated to the browser bug.\n\n  if (parent.nodeType != Node.ELEMENT_NODE || focus.offset != parent.childNodes.length - 1) {\n    return;\n  }\n\n  const childAtOffset = parent.childNodes[focus.offset]; // To stay on the safe side, the fix being as specific as possible, it targets only the\n  // selection which is at the very end of the element and preceded by <br />.\n\n  if (childAtOffset && childAtOffset.tagName == 'BR') {\n    domSelection.addRange(domSelection.getRangeAt(0));\n  }\n}\n\nfunction filterOutFakeSelectionContainer(domChildList, fakeSelectionContainer) {\n  const childList = Array.from(domChildList);\n\n  if (childList.length == 0 || !fakeSelectionContainer) {\n    return childList;\n  }\n\n  const last = childList[childList.length - 1];\n\n  if (last == fakeSelectionContainer) {\n    childList.pop();\n  }\n\n  return childList;\n} // Creates a fake selection container for a given document.\n//\n// @private\n// @param {Document} domDocument\n// @returns {HTMLElement}\n\n\nfunction createFakeSelectionContainer(domDocument) {\n  const container = domDocument.createElement('div');\n  Object.assign(container.style, {\n    position: 'fixed',\n    top: 0,\n    left: '-9999px',\n    // See https://github.com/ckeditor/ckeditor5/issues/752.\n    width: '42px'\n  }); // Fill it with a text node so we can update it later.\n\n  container.textContent = '\\u00A0';\n  return container;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module utils/dom/global\n */\n\n/**\n * A helper (module) giving an access to the global DOM objects such as `window` and\n * `document`. Accessing these objects using this helper allows easy and bulletproof\n * testing, i.e. stubbing native properties:\n *\n *\t\timport global from 'ckeditor5/utils/dom/global.js';\n *\n *\t\t// This stub will work for any code using global module.\n *\t\ttestUtils.sinon.stub( global, 'window', {\n *\t\t\tinnerWidth: 10000\n *\t\t} );\n *\n *\t\tconsole.log( global.window.innerWidth );\n */\nexport default {\n  window,\n  document\n};","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/indexof\n */\n\n/**\n * Returns index of the node in the parent element.\n *\n * @param {Node} node Node which index is tested.\n * @returns {Number} Index of the node in the parent element. Returns 0 if node has no parent.\n */\nexport default function indexOf(node) {\n  let index = 0;\n\n  while (node.previousSibling) {\n    node = node.previousSibling;\n    index++;\n  }\n\n  return index;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals Node */\n\n/**\n * @module utils/dom/getancestors\n */\n\n/**\n * Returns all ancestors of given DOM node, starting from the top-most (root). Includes the given node itself. If the\n * node is a part of `DocumentFragment` that `DocumentFragment` will be returned. In contrary, if the node is\n * appended to a `Document`, that `Document` will not be returned (algorithms operating on DOM tree care for `Document#documentElement`\n * at most, which will be returned).\n *\n * @param {Node} node DOM node.\n * @returns {Array.<Node|DocumentFragment>} Array of given `node` parents.\n */\nexport default function getAncestors(node) {\n  const nodes = []; // We are interested in `Node`s `DocumentFragment`s only.\n\n  while (node && node.nodeType != Node.DOCUMENT_NODE) {\n    nodes.unshift(node);\n    node = node.parentNode;\n  }\n\n  return nodes;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/domconverter\n */\n\n/* globals document, Node, NodeFilter, Text */\nimport ViewText from './text';\nimport ViewElement from './element';\nimport ViewPosition from './position';\nimport ViewRange from './range';\nimport ViewSelection from './selection';\nimport ViewDocumentFragment from './documentfragment';\nimport ViewTreeWalker from './treewalker';\nimport { BR_FILLER, getDataWithoutFiller, INLINE_FILLER_LENGTH, isInlineFiller, NBSP_FILLER, startsWithFiller } from './filler';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport indexOf from '@ckeditor/ckeditor5-utils/src/dom/indexof';\nimport getAncestors from '@ckeditor/ckeditor5-utils/src/dom/getancestors';\nimport getCommonAncestor from '@ckeditor/ckeditor5-utils/src/dom/getcommonancestor';\nimport isText from '@ckeditor/ckeditor5-utils/src/dom/istext';\nimport { isElement } from 'lodash-es'; // eslint-disable-next-line new-cap\n\nconst BR_FILLER_REF = BR_FILLER(document);\n/**\n * DomConverter is a set of tools to do transformations between DOM nodes and view nodes. It also handles\n * {@link module:engine/view/domconverter~DomConverter#bindElements binding} these nodes.\n *\n * The instance of DOMConverter is available in {@link module:engine/view/view~View#domConverter `editor.editing.view.domConverter`}.\n *\n * DomConverter does not check which nodes should be rendered (use {@link module:engine/view/renderer~Renderer}), does not keep a\n * state of a tree nor keeps synchronization between tree view and DOM tree (use {@link module:engine/view/document~Document}).\n *\n * DomConverter keeps DOM elements to View element bindings, so when the converter will be destroyed, the binding will\n * be lost. Two converters will keep separate binding maps, so one tree view can be bound with two DOM trees.\n */\n\nexport default class DomConverter {\n  /**\n   * Creates DOM converter.\n   *\n   * @param {Object} options Object with configuration options.\n   * @param {module:engine/view/filler~BlockFillerMode} [options.blockFillerMode='br'] The type of the block filler to use.\n   */\n  constructor(options = {}) {\n    /**\n     * The mode of a block filler used by DOM converter.\n     *\n     * @readonly\n     * @member {'br'|'nbsp'} module:engine/view/domconverter~DomConverter#blockFillerMode\n     */\n    this.blockFillerMode = options.blockFillerMode || 'br';\n    /**\n     * Elements which are considered pre-formatted elements.\n     *\n     * @readonly\n     * @member {Array.<String>} module:engine/view/domconverter~DomConverter#preElements\n     */\n\n    this.preElements = ['pre'];\n    /**\n     * Elements which are considered block elements (and hence should be filled with a\n     * {@link #isBlockFiller block filler}).\n     *\n     * Whether an element is considered a block element also affects handling of trailing whitespaces.\n     *\n     * You can extend this array if you introduce support for block elements which are not yet recognized here.\n     *\n     * @readonly\n     * @member {Array.<String>} module:engine/view/domconverter~DomConverter#blockElements\n     */\n\n    this.blockElements = ['p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'dd', 'dt', 'figcaption'];\n    /**\n     * Block {@link module:engine/view/filler filler} creator, which is used to create all block fillers during the\n     * view to DOM conversion and to recognize block fillers during the DOM to view conversion.\n     *\n     * @readonly\n     * @private\n     * @member {Function} module:engine/view/domconverter~DomConverter#_blockFiller\n     */\n\n    this._blockFiller = this.blockFillerMode == 'br' ? BR_FILLER : NBSP_FILLER;\n    /**\n     * DOM to View mapping.\n     *\n     * @private\n     * @member {WeakMap} module:engine/view/domconverter~DomConverter#_domToViewMapping\n     */\n\n    this._domToViewMapping = new WeakMap();\n    /**\n     * View to DOM mapping.\n     *\n     * @private\n     * @member {WeakMap} module:engine/view/domconverter~DomConverter#_viewToDomMapping\n     */\n\n    this._viewToDomMapping = new WeakMap();\n    /**\n     * Holds mapping between fake selection containers and corresponding view selections.\n     *\n     * @private\n     * @member {WeakMap} module:engine/view/domconverter~DomConverter#_fakeSelectionMapping\n     */\n\n    this._fakeSelectionMapping = new WeakMap();\n  }\n  /**\n   * Binds given DOM element that represents fake selection to a **position** of a\n   * {@link module:engine/view/documentselection~DocumentSelection document selection}.\n   * Document selection copy is stored and can be retrieved by\n   * {@link module:engine/view/domconverter~DomConverter#fakeSelectionToView} method.\n   *\n   * @param {HTMLElement} domElement\n   * @param {module:engine/view/documentselection~DocumentSelection} viewDocumentSelection\n   */\n\n\n  bindFakeSelection(domElement, viewDocumentSelection) {\n    this._fakeSelectionMapping.set(domElement, new ViewSelection(viewDocumentSelection));\n  }\n  /**\n   * Returns {@link module:engine/view/selection~Selection view selection} instance corresponding to\n   * given DOM element that represents fake selection. Returns `undefined` if binding to given DOM element does not exists.\n   *\n   * @param {HTMLElement} domElement\n   * @returns {module:engine/view/selection~Selection|undefined}\n   */\n\n\n  fakeSelectionToView(domElement) {\n    return this._fakeSelectionMapping.get(domElement);\n  }\n  /**\n   * Binds DOM and View elements, so it will be possible to get corresponding elements using\n   * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n   * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n   *\n   * @param {HTMLElement} domElement DOM element to bind.\n   * @param {module:engine/view/element~Element} viewElement View element to bind.\n   */\n\n\n  bindElements(domElement, viewElement) {\n    this._domToViewMapping.set(domElement, viewElement);\n\n    this._viewToDomMapping.set(viewElement, domElement);\n  }\n  /**\n   * Unbinds given `domElement` from the view element it was bound to. Unbinding is deep, meaning that all children of\n   * `domElement` will be unbound too.\n   *\n   * @param {HTMLElement} domElement DOM element to unbind.\n   */\n\n\n  unbindDomElement(domElement) {\n    const viewElement = this._domToViewMapping.get(domElement);\n\n    if (viewElement) {\n      this._domToViewMapping.delete(domElement);\n\n      this._viewToDomMapping.delete(viewElement); // Use Array.from because of MS Edge (#923).\n\n\n      for (const child of Array.from(domElement.childNodes)) {\n        this.unbindDomElement(child);\n      }\n    }\n  }\n  /**\n   * Binds DOM and View document fragments, so it will be possible to get corresponding document fragments using\n   * {@link module:engine/view/domconverter~DomConverter#mapDomToView} and\n   * {@link module:engine/view/domconverter~DomConverter#mapViewToDom}.\n   *\n   * @param {DocumentFragment} domFragment DOM document fragment to bind.\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment View document fragment to bind.\n   */\n\n\n  bindDocumentFragments(domFragment, viewFragment) {\n    this._domToViewMapping.set(domFragment, viewFragment);\n\n    this._viewToDomMapping.set(viewFragment, domFragment);\n  }\n  /**\n   * Converts view to DOM. For all text nodes, not bound elements and document fragments new items will\n   * be created. For bound elements and document fragments function will return corresponding items.\n   *\n   * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} viewNode\n   * View node or document fragment to transform.\n   * @param {Document} domDocument Document which will be used to create DOM nodes.\n   * @param {Object} [options] Conversion options.\n   * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n   * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n   * @returns {Node|DocumentFragment} Converted node or DocumentFragment.\n   */\n\n\n  viewToDom(viewNode, domDocument, options = {}) {\n    if (viewNode.is('text')) {\n      const textData = this._processDataFromViewText(viewNode);\n\n      return domDocument.createTextNode(textData);\n    } else {\n      if (this.mapViewToDom(viewNode)) {\n        return this.mapViewToDom(viewNode);\n      }\n\n      let domElement;\n\n      if (viewNode.is('documentFragment')) {\n        // Create DOM document fragment.\n        domElement = domDocument.createDocumentFragment();\n\n        if (options.bind) {\n          this.bindDocumentFragments(domElement, viewNode);\n        }\n      } else if (viewNode.is('uiElement')) {\n        // UIElement has its own render() method (see #799).\n        domElement = viewNode.render(domDocument);\n\n        if (options.bind) {\n          this.bindElements(domElement, viewNode);\n        }\n\n        return domElement;\n      } else {\n        // Create DOM element.\n        if (viewNode.hasAttribute('xmlns')) {\n          domElement = domDocument.createElementNS(viewNode.getAttribute('xmlns'), viewNode.name);\n        } else {\n          domElement = domDocument.createElement(viewNode.name);\n        }\n\n        if (options.bind) {\n          this.bindElements(domElement, viewNode);\n        } // Copy element's attributes.\n\n\n        for (const key of viewNode.getAttributeKeys()) {\n          domElement.setAttribute(key, viewNode.getAttribute(key));\n        }\n      }\n\n      if (options.withChildren || options.withChildren === undefined) {\n        for (const child of this.viewChildrenToDom(viewNode, domDocument, options)) {\n          domElement.appendChild(child);\n        }\n      }\n\n      return domElement;\n    }\n  }\n  /**\n   * Converts children of the view element to DOM using the\n   * {@link module:engine/view/domconverter~DomConverter#viewToDom} method.\n   * Additionally, this method adds block {@link module:engine/view/filler filler} to the list of children, if needed.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElement Parent view element.\n   * @param {Document} domDocument Document which will be used to create DOM nodes.\n   * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#viewToDom} options parameter.\n   * @returns {Iterable.<Node>} DOM nodes.\n   */\n\n\n  *viewChildrenToDom(viewElement, domDocument, options = {}) {\n    const fillerPositionOffset = viewElement.getFillerOffset && viewElement.getFillerOffset();\n    let offset = 0;\n\n    for (const childView of viewElement.getChildren()) {\n      if (fillerPositionOffset === offset) {\n        yield this._blockFiller(domDocument);\n      }\n\n      yield this.viewToDom(childView, domDocument, options);\n      offset++;\n    }\n\n    if (fillerPositionOffset === offset) {\n      yield this._blockFiller(domDocument);\n    }\n  }\n  /**\n   * Converts view {@link module:engine/view/range~Range} to DOM range.\n   * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n   *\n   * @param {module:engine/view/range~Range} viewRange View range.\n   * @returns {Range} DOM range.\n   */\n\n\n  viewRangeToDom(viewRange) {\n    const domStart = this.viewPositionToDom(viewRange.start);\n    const domEnd = this.viewPositionToDom(viewRange.end);\n    const domRange = document.createRange();\n    domRange.setStart(domStart.parent, domStart.offset);\n    domRange.setEnd(domEnd.parent, domEnd.offset);\n    return domRange;\n  }\n  /**\n   * Converts view {@link module:engine/view/position~Position} to DOM parent and offset.\n   *\n   * Inline and block {@link module:engine/view/filler fillers} are handled during the conversion.\n   * If the converted position is directly before inline filler it is moved inside the filler.\n   *\n   * @param {module:engine/view/position~Position} viewPosition View position.\n   * @returns {Object|null} position DOM position or `null` if view position could not be converted to DOM.\n   * @returns {Node} position.parent DOM position parent.\n   * @returns {Number} position.offset DOM position offset.\n   */\n\n\n  viewPositionToDom(viewPosition) {\n    const viewParent = viewPosition.parent;\n\n    if (viewParent.is('text')) {\n      const domParent = this.findCorrespondingDomText(viewParent);\n\n      if (!domParent) {\n        // Position is in a view text node that has not been rendered to DOM yet.\n        return null;\n      }\n\n      let offset = viewPosition.offset;\n\n      if (startsWithFiller(domParent)) {\n        offset += INLINE_FILLER_LENGTH;\n      }\n\n      return {\n        parent: domParent,\n        offset\n      };\n    } else {\n      // viewParent is instance of ViewElement.\n      let domParent, domBefore, domAfter;\n\n      if (viewPosition.offset === 0) {\n        domParent = this.mapViewToDom(viewParent);\n\n        if (!domParent) {\n          // Position is in a view element that has not been rendered to DOM yet.\n          return null;\n        }\n\n        domAfter = domParent.childNodes[0];\n      } else {\n        const nodeBefore = viewPosition.nodeBefore;\n        domBefore = nodeBefore.is('text') ? this.findCorrespondingDomText(nodeBefore) : this.mapViewToDom(viewPosition.nodeBefore);\n\n        if (!domBefore) {\n          // Position is after a view element that has not been rendered to DOM yet.\n          return null;\n        }\n\n        domParent = domBefore.parentNode;\n        domAfter = domBefore.nextSibling;\n      } // If there is an inline filler at position return position inside the filler. We should never return\n      // the position before the inline filler.\n\n\n      if (isText(domAfter) && startsWithFiller(domAfter)) {\n        return {\n          parent: domAfter,\n          offset: INLINE_FILLER_LENGTH\n        };\n      }\n\n      const offset = domBefore ? indexOf(domBefore) + 1 : 0;\n      return {\n        parent: domParent,\n        offset\n      };\n    }\n  }\n  /**\n   * Converts DOM to view. For all text nodes, not bound elements and document fragments new items will\n   * be created. For bound elements and document fragments function will return corresponding items. For\n   * {@link module:engine/view/filler fillers} `null` will be returned.\n   * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n   *\n   * @param {Node|DocumentFragment} domNode DOM node or document fragment to transform.\n   * @param {Object} [options] Conversion options.\n   * @param {Boolean} [options.bind=false] Determines whether new elements will be bound.\n   * @param {Boolean} [options.withChildren=true] If `true`, node's and document fragment's children will be converted too.\n   * @param {Boolean} [options.keepOriginalCase=false] If `false`, node's tag name will be converter to lower case.\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} Converted node or document fragment\n   * or `null` if DOM node is a {@link module:engine/view/filler filler} or the given node is an empty text node.\n   */\n\n\n  domToView(domNode, options = {}) {\n    if (this.isBlockFiller(domNode, this.blockFillerMode)) {\n      return null;\n    } // When node is inside UIElement return that UIElement as it's view representation.\n\n\n    const uiElement = this.getParentUIElement(domNode, this._domToViewMapping);\n\n    if (uiElement) {\n      return uiElement;\n    }\n\n    if (isText(domNode)) {\n      if (isInlineFiller(domNode)) {\n        return null;\n      } else {\n        const textData = this._processDataFromDomText(domNode);\n\n        return textData === '' ? null : new ViewText(textData);\n      }\n    } else if (this.isComment(domNode)) {\n      return null;\n    } else {\n      if (this.mapDomToView(domNode)) {\n        return this.mapDomToView(domNode);\n      }\n\n      let viewElement;\n\n      if (this.isDocumentFragment(domNode)) {\n        // Create view document fragment.\n        viewElement = new ViewDocumentFragment();\n\n        if (options.bind) {\n          this.bindDocumentFragments(domNode, viewElement);\n        }\n      } else {\n        // Create view element.\n        const viewName = options.keepOriginalCase ? domNode.tagName : domNode.tagName.toLowerCase();\n        viewElement = new ViewElement(viewName);\n\n        if (options.bind) {\n          this.bindElements(domNode, viewElement);\n        } // Copy element's attributes.\n\n\n        const attrs = domNode.attributes;\n\n        for (let i = attrs.length - 1; i >= 0; i--) {\n          viewElement._setAttribute(attrs[i].name, attrs[i].value);\n        }\n      }\n\n      if (options.withChildren || options.withChildren === undefined) {\n        for (const child of this.domChildrenToView(domNode, options)) {\n          viewElement._appendChild(child);\n        }\n      }\n\n      return viewElement;\n    }\n  }\n  /**\n   * Converts children of the DOM element to view nodes using\n   * the {@link module:engine/view/domconverter~DomConverter#domToView} method.\n   * Additionally this method omits block {@link module:engine/view/filler filler}, if it exists in the DOM parent.\n   *\n   * @param {HTMLElement} domElement Parent DOM element.\n   * @param {Object} options See {@link module:engine/view/domconverter~DomConverter#domToView} options parameter.\n   * @returns {Iterable.<module:engine/view/node~Node>} View nodes.\n   */\n\n\n  *domChildrenToView(domElement, options = {}) {\n    for (let i = 0; i < domElement.childNodes.length; i++) {\n      const domChild = domElement.childNodes[i];\n      const viewChild = this.domToView(domChild, options);\n\n      if (viewChild !== null) {\n        yield viewChild;\n      }\n    }\n  }\n  /**\n   * Converts DOM selection to view {@link module:engine/view/selection~Selection}.\n   * Ranges which cannot be converted will be omitted.\n   *\n   * @param {Selection} domSelection DOM selection.\n   * @returns {module:engine/view/selection~Selection} View selection.\n   */\n\n\n  domSelectionToView(domSelection) {\n    // DOM selection might be placed in fake selection container.\n    // If container contains fake selection - return corresponding view selection.\n    if (domSelection.rangeCount === 1) {\n      let container = domSelection.getRangeAt(0).startContainer; // The DOM selection might be moved to the text node inside the fake selection container.\n\n      if (isText(container)) {\n        container = container.parentNode;\n      }\n\n      const viewSelection = this.fakeSelectionToView(container);\n\n      if (viewSelection) {\n        return viewSelection;\n      }\n    }\n\n    const isBackward = this.isDomSelectionBackward(domSelection);\n    const viewRanges = [];\n\n    for (let i = 0; i < domSelection.rangeCount; i++) {\n      // DOM Range have correct start and end, no matter what is the DOM Selection direction. So we don't have to fix anything.\n      const domRange = domSelection.getRangeAt(i);\n      const viewRange = this.domRangeToView(domRange);\n\n      if (viewRange) {\n        viewRanges.push(viewRange);\n      }\n    }\n\n    return new ViewSelection(viewRanges, {\n      backward: isBackward\n    });\n  }\n  /**\n   * Converts DOM Range to view {@link module:engine/view/range~Range}.\n   * If the start or end position can not be converted `null` is returned.\n   *\n   * @param {Range} domRange DOM range.\n   * @returns {module:engine/view/range~Range|null} View range.\n   */\n\n\n  domRangeToView(domRange) {\n    const viewStart = this.domPositionToView(domRange.startContainer, domRange.startOffset);\n    const viewEnd = this.domPositionToView(domRange.endContainer, domRange.endOffset);\n\n    if (viewStart && viewEnd) {\n      return new ViewRange(viewStart, viewEnd);\n    }\n\n    return null;\n  }\n  /**\n   * Converts DOM parent and offset to view {@link module:engine/view/position~Position}.\n   *\n   * If the position is inside a {@link module:engine/view/filler filler} which has no corresponding view node,\n   * position of the filler will be converted and returned.\n   *\n   * If the position is inside DOM element rendered by {@link module:engine/view/uielement~UIElement}\n   * that position will be converted to view position before that UIElement.\n   *\n   * If structures are too different and it is not possible to find corresponding position then `null` will be returned.\n   *\n   * @param {Node} domParent DOM position parent.\n   * @param {Number} domOffset DOM position offset.\n   * @returns {module:engine/view/position~Position} viewPosition View position.\n   */\n\n\n  domPositionToView(domParent, domOffset) {\n    if (this.isBlockFiller(domParent, this.blockFillerMode)) {\n      return this.domPositionToView(domParent.parentNode, indexOf(domParent));\n    } // If position is somewhere inside UIElement - return position before that element.\n\n\n    const viewElement = this.mapDomToView(domParent);\n\n    if (viewElement && viewElement.is('uiElement')) {\n      return ViewPosition._createBefore(viewElement);\n    }\n\n    if (isText(domParent)) {\n      if (isInlineFiller(domParent)) {\n        return this.domPositionToView(domParent.parentNode, indexOf(domParent));\n      }\n\n      const viewParent = this.findCorrespondingViewText(domParent);\n      let offset = domOffset;\n\n      if (!viewParent) {\n        return null;\n      }\n\n      if (startsWithFiller(domParent)) {\n        offset -= INLINE_FILLER_LENGTH;\n        offset = offset < 0 ? 0 : offset;\n      }\n\n      return new ViewPosition(viewParent, offset);\n    } // domParent instanceof HTMLElement.\n    else {\n        if (domOffset === 0) {\n          const viewParent = this.mapDomToView(domParent);\n\n          if (viewParent) {\n            return new ViewPosition(viewParent, 0);\n          }\n        } else {\n          const domBefore = domParent.childNodes[domOffset - 1];\n          const viewBefore = isText(domBefore) ? this.findCorrespondingViewText(domBefore) : this.mapDomToView(domBefore); // TODO #663\n\n          if (viewBefore && viewBefore.parent) {\n            return new ViewPosition(viewBefore.parent, viewBefore.index + 1);\n          }\n        }\n\n        return null;\n      }\n  }\n  /**\n   * Returns corresponding view {@link module:engine/view/element~Element Element} or\n   * {@link module:engine/view/documentfragment~DocumentFragment} for provided DOM element or\n   * document fragment. If there is no view item {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n   * to the given DOM - `undefined` is returned.\n   * For all DOM elements rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n   *\n   * @param {DocumentFragment|Element} domElementOrDocumentFragment DOM element or document fragment.\n   * @returns {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment|undefined}\n   * Corresponding view element, document fragment or `undefined` if no element was bound.\n   */\n\n\n  mapDomToView(domElementOrDocumentFragment) {\n    return this.getParentUIElement(domElementOrDocumentFragment) || this._domToViewMapping.get(domElementOrDocumentFragment);\n  }\n  /**\n   * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n   * corresponding text node is returned based on the sibling or parent.\n   *\n   * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n   * to find the corresponding text node.\n   *\n   * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n   * element, it is used to find the corresponding text node.\n   *\n   * For all text nodes rendered by {@link module:engine/view/uielement~UIElement} that UIElement will be returned.\n   *\n   * Otherwise `null` is returned.\n   *\n   * Note that for the block or inline {@link module:engine/view/filler filler} this method returns `null`.\n   *\n   * @param {Text} domText DOM text node.\n   * @returns {module:engine/view/text~Text|null} Corresponding view text node or `null`, if it was not possible to find a\n   * corresponding node.\n   */\n\n\n  findCorrespondingViewText(domText) {\n    if (isInlineFiller(domText)) {\n      return null;\n    } // If DOM text was rendered by UIElement - return that element.\n\n\n    const uiElement = this.getParentUIElement(domText);\n\n    if (uiElement) {\n      return uiElement;\n    }\n\n    const previousSibling = domText.previousSibling; // Try to use previous sibling to find the corresponding text node.\n\n    if (previousSibling) {\n      if (!this.isElement(previousSibling)) {\n        // The previous is text or comment.\n        return null;\n      }\n\n      const viewElement = this.mapDomToView(previousSibling);\n\n      if (viewElement) {\n        const nextSibling = viewElement.nextSibling; // It might be filler which has no corresponding view node.\n\n        if (nextSibling instanceof ViewText) {\n          return viewElement.nextSibling;\n        } else {\n          return null;\n        }\n      }\n    } // Try to use parent to find the corresponding text node.\n    else {\n        const viewElement = this.mapDomToView(domText.parentNode);\n\n        if (viewElement) {\n          const firstChild = viewElement.getChild(0); // It might be filler which has no corresponding view node.\n\n          if (firstChild instanceof ViewText) {\n            return firstChild;\n          } else {\n            return null;\n          }\n        }\n      }\n\n    return null;\n  }\n  /**\n   * Returns corresponding DOM item for provided {@link module:engine/view/element~Element Element} or\n   * {@link module:engine/view/documentfragment~DocumentFragment DocumentFragment}.\n   * To find a corresponding text for {@link module:engine/view/text~Text view Text instance}\n   * use {@link #findCorrespondingDomText}.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewNode\n   * View element or document fragment.\n   * @returns {Node|DocumentFragment|undefined} Corresponding DOM node or document fragment.\n   */\n\n\n  mapViewToDom(documentFragmentOrElement) {\n    return this._viewToDomMapping.get(documentFragmentOrElement);\n  }\n  /**\n   * Finds corresponding text node. Text nodes are not {@link module:engine/view/domconverter~DomConverter#bindElements bound},\n   * corresponding text node is returned based on the sibling or parent.\n   *\n   * If the directly previous sibling is a {@link module:engine/view/domconverter~DomConverter#bindElements bound} element, it is used\n   * to find the corresponding text node.\n   *\n   * If this is a first child in the parent and the parent is a {@link module:engine/view/domconverter~DomConverter#bindElements bound}\n   * element, it is used to find the corresponding text node.\n   *\n   * Otherwise `null` is returned.\n   *\n   * @param {module:engine/view/text~Text} viewText View text node.\n   * @returns {Text|null} Corresponding DOM text node or `null`, if it was not possible to find a corresponding node.\n   */\n\n\n  findCorrespondingDomText(viewText) {\n    const previousSibling = viewText.previousSibling; // Try to use previous sibling to find the corresponding text node.\n\n    if (previousSibling && this.mapViewToDom(previousSibling)) {\n      return this.mapViewToDom(previousSibling).nextSibling;\n    } // If this is a first node, try to use parent to find the corresponding text node.\n\n\n    if (!previousSibling && viewText.parent && this.mapViewToDom(viewText.parent)) {\n      return this.mapViewToDom(viewText.parent).childNodes[0];\n    }\n\n    return null;\n  }\n  /**\n   * Focuses DOM editable that is corresponding to provided {@link module:engine/view/editableelement~EditableElement}.\n   *\n   * @param {module:engine/view/editableelement~EditableElement} viewEditable\n   */\n\n\n  focus(viewEditable) {\n    const domEditable = this.mapViewToDom(viewEditable);\n\n    if (domEditable && domEditable.ownerDocument.activeElement !== domEditable) {\n      // Save the scrollX and scrollY positions before the focus.\n      const {\n        scrollX,\n        scrollY\n      } = global.window;\n      const scrollPositions = []; // Save all scrollLeft and scrollTop values starting from domEditable up to\n      // document#documentElement.\n\n      forEachDomNodeAncestor(domEditable, node => {\n        const {\n          scrollLeft,\n          scrollTop\n        } = node;\n        scrollPositions.push([scrollLeft, scrollTop]);\n      });\n      domEditable.focus(); // Restore scrollLeft and scrollTop values starting from domEditable up to\n      // document#documentElement.\n      // https://github.com/ckeditor/ckeditor5-engine/issues/951\n      // https://github.com/ckeditor/ckeditor5-engine/issues/957\n\n      forEachDomNodeAncestor(domEditable, node => {\n        const [scrollLeft, scrollTop] = scrollPositions.shift();\n        node.scrollLeft = scrollLeft;\n        node.scrollTop = scrollTop;\n      }); // Restore the scrollX and scrollY positions after the focus.\n      // https://github.com/ckeditor/ckeditor5-engine/issues/951\n\n      global.window.scrollTo(scrollX, scrollY);\n    }\n  }\n  /**\n   * Returns `true` when `node.nodeType` equals `Node.ELEMENT_NODE`.\n   *\n   * @param {Node} node Node to check.\n   * @returns {Boolean}\n   */\n\n\n  isElement(node) {\n    return node && node.nodeType == Node.ELEMENT_NODE;\n  }\n  /**\n   * Returns `true` when `node.nodeType` equals `Node.DOCUMENT_FRAGMENT_NODE`.\n   *\n   * @param {Node} node Node to check.\n   * @returns {Boolean}\n   */\n\n\n  isDocumentFragment(node) {\n    return node && node.nodeType == Node.DOCUMENT_FRAGMENT_NODE;\n  }\n  /**\n   * Returns `true` when `node.nodeType` equals `Node.COMMENT_NODE`.\n   *\n   * @param {Node} node Node to check.\n   * @returns {Boolean}\n   */\n\n\n  isComment(node) {\n    return node && node.nodeType == Node.COMMENT_NODE;\n  }\n  /**\n   * Checks if the node is an instance of the block filler for this DOM converter.\n   *\n   *\t\tconst converter = new DomConverter( { blockFillerMode: 'br' } );\n   *\n   *\t\tconverter.isBlockFiller( BR_FILLER( document ) ); // true\n   *\t\tconverter.isBlockFiller( NBSP_FILLER( document ) ); // false\n   *\n   * **Note:**: For the `'nbsp'` mode the method also checks context of a node so it cannot be a detached node.\n   *\n   * @param {Node} domNode DOM node to check.\n   * @returns {Boolean} True if a node is considered a block filler for given mode.\n   */\n\n\n  isBlockFiller(domNode) {\n    return this.blockFillerMode == 'br' ? domNode.isEqualNode(BR_FILLER_REF) : isNbspBlockFiller(domNode, this.blockElements);\n  }\n  /**\n   * Returns `true` if given selection is a backward selection, that is, if it's `focus` is before `anchor`.\n   *\n   * @param {Selection} DOM Selection instance to check.\n   * @returns {Boolean}\n   */\n\n\n  isDomSelectionBackward(selection) {\n    if (selection.isCollapsed) {\n      return false;\n    } // Since it takes multiple lines of code to check whether a \"DOM Position\" is before/after another \"DOM Position\",\n    // we will use the fact that range will collapse if it's end is before it's start.\n\n\n    const range = document.createRange();\n    range.setStart(selection.anchorNode, selection.anchorOffset);\n    range.setEnd(selection.focusNode, selection.focusOffset);\n    const backward = range.collapsed;\n    range.detach();\n    return backward;\n  }\n  /**\n   * Returns parent {@link module:engine/view/uielement~UIElement} for provided DOM node. Returns `null` if there is no\n   * parent UIElement.\n   *\n   * @param {Node} domNode\n   * @returns {module:engine/view/uielement~UIElement|null}\n   */\n\n\n  getParentUIElement(domNode) {\n    const ancestors = getAncestors(domNode); // Remove domNode from the list.\n\n    ancestors.pop();\n\n    while (ancestors.length) {\n      const domNode = ancestors.pop();\n\n      const viewNode = this._domToViewMapping.get(domNode);\n\n      if (viewNode && viewNode.is('uiElement')) {\n        return viewNode;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Checks if given selection's boundaries are at correct places.\n   *\n   * The following places are considered as incorrect for selection boundaries:\n   * * before or in the middle of the inline filler sequence,\n   * * inside the DOM element which represents {@link module:engine/view/uielement~UIElement a view ui element}.\n   *\n   * @param {Selection} domSelection DOM Selection object to be checked.\n   * @returns {Boolean} `true` if the given selection is at a correct place, `false` otherwise.\n   */\n\n\n  isDomSelectionCorrect(domSelection) {\n    return this._isDomSelectionPositionCorrect(domSelection.anchorNode, domSelection.anchorOffset) && this._isDomSelectionPositionCorrect(domSelection.focusNode, domSelection.focusOffset);\n  }\n  /**\n   * Checks if the given DOM position is a correct place for selection boundary. See {@link #isDomSelectionCorrect}.\n   *\n   * @private\n   * @param {Element} domParent Position parent.\n   * @param {Number} offset Position offset.\n   * @returns {Boolean} `true` if given position is at a correct place for selection boundary, `false` otherwise.\n   */\n\n\n  _isDomSelectionPositionCorrect(domParent, offset) {\n    // If selection is before or in the middle of inline filler string, it is incorrect.\n    if (isText(domParent) && startsWithFiller(domParent) && offset < INLINE_FILLER_LENGTH) {\n      // Selection in a text node, at wrong position (before or in the middle of filler).\n      return false;\n    }\n\n    if (this.isElement(domParent) && startsWithFiller(domParent.childNodes[offset])) {\n      // Selection in an element node, before filler text node.\n      return false;\n    }\n\n    const viewParent = this.mapDomToView(domParent); // If selection is in `view.UIElement`, it is incorrect. Note that `mapDomToView()` returns `view.UIElement`\n    // also for any dom element that is inside the view ui element (so we don't need to perform any additional checks).\n\n    if (viewParent && viewParent.is('uiElement')) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Takes text data from a given {@link module:engine/view/text~Text#data} and processes it so\n   * it is correctly displayed in the DOM.\n   *\n   * Following changes are done:\n   *\n   * * a space at the beginning is changed to `&nbsp;` if this is the first text node in its container\n   * element or if a previous text node ends with a space character,\n   * * space at the end of the text node is changed to `&nbsp;` if there are two spaces at the end of a node or if next node\n   * starts with a space or if it is the last text node in its container,\n   * * remaining spaces are replaced to a chain of spaces and `&nbsp;` (e.g. `'x   x'` becomes `'x &nbsp; x'`).\n   *\n   * Content of {@link #preElements} is not processed.\n   *\n   * @private\n   * @param {module:engine/view/text~Text} node View text node to process.\n   * @returns {String} Processed text data.\n   */\n\n\n  _processDataFromViewText(node) {\n    let data = node.data; // If any of node ancestors has a name which is in `preElements` array, then currently processed\n    // view text node is (will be) in preformatted element. We should not change whitespaces then.\n\n    if (node.getAncestors().some(parent => this.preElements.includes(parent.name))) {\n      return data;\n    } // 1. Replace the first space with a nbsp if the previous node ends with a space or there is no previous node\n    // (container element boundary).\n\n\n    if (data.charAt(0) == ' ') {\n      const prevNode = this._getTouchingViewTextNode(node, false);\n\n      const prevEndsWithSpace = prevNode && this._nodeEndsWithSpace(prevNode);\n\n      if (prevEndsWithSpace || !prevNode) {\n        data = '\\u00A0' + data.substr(1);\n      }\n    } // 2. Replace the last space with nbsp if there are two spaces at the end or if the next node starts with space or there is no\n    // next node (container element boundary).\n    //\n    // Keep in mind that Firefox prefers $nbsp; before tag, not inside it:\n    //\n    // Foo <span>&nbsp;bar</span>  <-- bad.\n    // Foo&nbsp;<span> bar</span>  <-- good.\n    //\n    // More here: https://github.com/ckeditor/ckeditor5-engine/issues/1747.\n\n\n    if (data.charAt(data.length - 1) == ' ') {\n      const nextNode = this._getTouchingViewTextNode(node, true);\n\n      if (data.charAt(data.length - 2) == ' ' || !nextNode || nextNode.data.charAt(0) == ' ') {\n        data = data.substr(0, data.length - 1) + '\\u00A0';\n      }\n    } // 3. Create space+nbsp pairs.\n\n\n    return data.replace(/ {2}/g, ' \\u00A0');\n  }\n  /**\n   * Checks whether given node ends with a space character after changing appropriate space characters to `&nbsp;`s.\n   *\n   * @private\n   * @param {module:engine/view/text~Text} node Node to check.\n   * @returns {Boolean} `true` if given `node` ends with space, `false` otherwise.\n   */\n\n\n  _nodeEndsWithSpace(node) {\n    if (node.getAncestors().some(parent => this.preElements.includes(parent.name))) {\n      return false;\n    }\n\n    const data = this._processDataFromViewText(node);\n\n    return data.charAt(data.length - 1) == ' ';\n  }\n  /**\n   * Takes text data from native `Text` node and processes it to a correct {@link module:engine/view/text~Text view text node} data.\n   *\n   * Following changes are done:\n   *\n   * * multiple whitespaces are replaced to a single space,\n   * * space at the beginning of a text node is removed if it is the first text node in its container\n   * element or if the previous text node ends with a space character,\n   * * space at the end of the text node is removed if there are two spaces at the end of a node or if next node\n   * starts with a space or if it is the last text node in its container\n   * * nbsps are converted to spaces.\n   *\n   * @param {Node} node DOM text node to process.\n   * @returns {String} Processed data.\n   * @private\n   */\n\n\n  _processDataFromDomText(node) {\n    let data = node.data;\n\n    if (_hasDomParentOfType(node, this.preElements)) {\n      return getDataWithoutFiller(node);\n    } // Change all consecutive whitespace characters (from the [ \\n\\t\\r] set –\n    // see https://github.com/ckeditor/ckeditor5-engine/issues/822#issuecomment-311670249) to a single space character.\n    // That's how multiple whitespaces are treated when rendered, so we normalize those whitespaces.\n    // We're replacing 1+ (and not 2+) to also normalize singular \\n\\t\\r characters (#822).\n\n\n    data = data.replace(/[ \\n\\t\\r]{1,}/g, ' ');\n\n    const prevNode = this._getTouchingInlineDomNode(node, false);\n\n    const nextNode = this._getTouchingInlineDomNode(node, true);\n\n    const shouldLeftTrim = this._checkShouldLeftTrimDomText(prevNode);\n\n    const shouldRightTrim = this._checkShouldRightTrimDomText(node, nextNode); // If the previous dom text node does not exist or it ends by whitespace character, remove space character from the beginning\n    // of this text node. Such space character is treated as a whitespace.\n\n\n    if (shouldLeftTrim) {\n      data = data.replace(/^ /, '');\n    } // If the next text node does not exist remove space character from the end of this text node.\n\n\n    if (shouldRightTrim) {\n      data = data.replace(/ $/, '');\n    } // At the beginning and end of a block element, Firefox inserts normal space + <br> instead of non-breaking space.\n    // This means that the text node starts/end with normal space instead of non-breaking space.\n    // This causes a problem because the normal space would be removed in `.replace` calls above. To prevent that,\n    // the inline filler is removed only after the data is initially processed (by the `.replace` above). See ckeditor5#692.\n\n\n    data = getDataWithoutFiller(new Text(data)); // At this point we should have removed all whitespaces from DOM text data.\n    //\n    // Now, We will reverse the process that happens in `_processDataFromViewText`.\n    //\n    // We have to change &nbsp; chars, that were in DOM text data because of rendering reasons, to spaces.\n    // First, change all ` \\u00A0` pairs (space + &nbsp;) to two spaces. DOM converter changes two spaces from model/view to\n    // ` \\u00A0` to ensure proper rendering. Since here we convert back, we recognize those pairs and change them back to `  `.\n\n    data = data.replace(/ \\u00A0/g, '  '); // Then, let's change the last nbsp to a space.\n\n    if (/( |\\u00A0)\\u00A0$/.test(data) || !nextNode || nextNode.data && nextNode.data.charAt(0) == ' ') {\n      data = data.replace(/\\u00A0$/, ' ');\n    } // Then, change &nbsp; character that is at the beginning of the text node to space character.\n    // We do that replacement only if this is the first node or the previous node ends on whitespace character.\n\n\n    if (shouldLeftTrim) {\n      data = data.replace(/^\\u00A0/, ' ');\n    } // At this point, all whitespaces should be removed and all &nbsp; created for rendering reasons should be\n    // changed to normal space. All left &nbsp; are &nbsp; inserted intentionally.\n\n\n    return data;\n  }\n  /**\n   * Helper function which checks if a DOM text node, preceded by the given `prevNode` should\n   * be trimmed from the left side.\n   *\n   * @param {Node} prevNode\n   */\n\n\n  _checkShouldLeftTrimDomText(prevNode) {\n    if (!prevNode) {\n      return true;\n    }\n\n    if (isElement(prevNode)) {\n      return true;\n    }\n\n    return /[^\\S\\u00A0]/.test(prevNode.data.charAt(prevNode.data.length - 1));\n  }\n  /**\n   * Helper function which checks if a DOM text node, succeeded by the given `nextNode` should\n   * be trimmed from the right side.\n   *\n   * @param {Node} node\n   * @param {Node} nextNode\n   */\n\n\n  _checkShouldRightTrimDomText(node, nextNode) {\n    if (nextNode) {\n      return false;\n    }\n\n    return !startsWithFiller(node);\n  }\n  /**\n   * Helper function. For given {@link module:engine/view/text~Text view text node}, it finds previous or next sibling\n   * that is contained in the same container element. If there is no such sibling, `null` is returned.\n   *\n   * @param {module:engine/view/text~Text} node Reference node.\n   * @param {Boolean} getNext\n   * @returns {module:engine/view/text~Text|null} Touching text node or `null` if there is no next or previous touching text node.\n   */\n\n\n  _getTouchingViewTextNode(node, getNext) {\n    const treeWalker = new ViewTreeWalker({\n      startPosition: getNext ? ViewPosition._createAfter(node) : ViewPosition._createBefore(node),\n      direction: getNext ? 'forward' : 'backward'\n    });\n\n    for (const value of treeWalker) {\n      // ViewContainerElement is found on a way to next ViewText node, so given `node` was first/last\n      // text node in its container element.\n      if (value.item.is('containerElement')) {\n        return null;\n      } // <br> found – it works like a block boundary, so do not scan further.\n      else if (value.item.is('br')) {\n          return null;\n        } // Found a text node in the same container element.\n        else if (value.item.is('textProxy')) {\n            return value.item;\n          }\n    }\n\n    return null;\n  }\n  /**\n   * Helper function. For the given text node, it finds the closest touching node which is either\n   * a text node or a `<br>`. The search is terminated at block element boundaries and if a matching node\n   * wasn't found so far, `null` is returned.\n   *\n   * In the following DOM structure:\n   *\n   *\t\t<p>foo<b>bar</b><br>bom</p>\n   *\n   * * `foo` doesn't have its previous touching inline node (`null` is returned),\n   * * `foo`'s next touching inline node is `bar`\n   * * `bar`'s next touching inline node is `<br>`\n   *\n   * This method returns text nodes and `<br>` elements because these types of nodes affect how\n   * spaces in the given text node need to be converted.\n   *\n   * @private\n   * @param {Text} node\n   * @param {Boolean} getNext\n   * @returns {Text|Element|null}\n   */\n\n\n  _getTouchingInlineDomNode(node, getNext) {\n    if (!node.parentNode) {\n      return null;\n    }\n\n    const direction = getNext ? 'nextNode' : 'previousNode';\n    const document = node.ownerDocument;\n    const topmostParent = getAncestors(node)[0];\n    const treeWalker = document.createTreeWalker(topmostParent, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {\n      acceptNode(node) {\n        if (isText(node)) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        if (node.tagName == 'BR') {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n\n        return NodeFilter.FILTER_SKIP;\n      }\n\n    });\n    treeWalker.currentNode = node;\n    const touchingNode = treeWalker[direction]();\n\n    if (touchingNode !== null) {\n      const lca = getCommonAncestor(node, touchingNode); // If there is common ancestor between the text node and next/prev text node,\n      // and there are no block elements on a way from the text node to that ancestor,\n      // and there are no block elements on a way from next/prev text node to that ancestor...\n\n      if (lca && !_hasDomParentOfType(node, this.blockElements, lca) && !_hasDomParentOfType(touchingNode, this.blockElements, lca)) {\n        // Then they are in the same container element.\n        return touchingNode;\n      }\n    }\n\n    return null;\n  }\n\n} // Helper function.\n// Used to check if given native `Element` or `Text` node has parent with tag name from `types` array.\n//\n// @param {Node} node\n// @param {Array.<String>} types\n// @param {Boolean} [boundaryParent] Can be given if parents should be checked up to a given element (excluding that element).\n// @returns {Boolean} `true` if such parent exists or `false` if it does not.\n\nfunction _hasDomParentOfType(node, types, boundaryParent) {\n  let parents = getAncestors(node);\n\n  if (boundaryParent) {\n    parents = parents.slice(parents.indexOf(boundaryParent) + 1);\n  }\n\n  return parents.some(parent => parent.tagName && types.includes(parent.tagName.toLowerCase()));\n} // A helper that executes given callback for each DOM node's ancestor, starting from the given node\n// and ending in document#documentElement.\n//\n// @param {Node} node\n// @param {Function} callback A callback to be executed for each ancestor.\n\n\nfunction forEachDomNodeAncestor(node, callback) {\n  while (node && node != global.document) {\n    callback(node);\n    node = node.parentNode;\n  }\n} // Checks if given node is a nbsp block filler.\n//\n// A &nbsp; is a block filler only if it is a single child of a block element.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\n\n\nfunction isNbspBlockFiller(domNode, blockElements) {\n  const isNBSP = isText(domNode) && domNode.data == '\\u00A0';\n  return isNBSP && hasBlockParent(domNode, blockElements) && domNode.parentNode.childNodes.length === 1;\n} // Checks if domNode has block parent.\n//\n// @param {Node} domNode DOM node.\n// @returns {Boolean}\n\n\nfunction hasBlockParent(domNode, blockElements) {\n  const parent = domNode.parentNode;\n  return parent && parent.tagName && blockElements.includes(parent.tagName.toLowerCase());\n}\n/**\n * Enum representing type of the block filler.\n *\n * Possible values:\n *\n * * `br` - for `<br>` block filler used in editing view,\n * * `nbsp` - for `&nbsp;` block fillers used in the data.\n *\n * @typedef {String} module:engine/view/filler~BlockFillerMode\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getcommonancestor\n */\nimport getAncestors from './getancestors';\n/**\n * Searches and returns the lowest common ancestor of two given nodes.\n *\n * @param {Node} nodeA First node.\n * @param {Node} nodeB Second node.\n * @returns {Node|DocumentFragment|Document|null} Lowest common ancestor of both nodes or `null` if nodes do not have a common ancestor.\n */\n\nexport default function getCommonAncestor(nodeA, nodeB) {\n  const ancestorsA = getAncestors(nodeA);\n  const ancestorsB = getAncestors(nodeB);\n  let i = 0; // It does not matter which array is shorter.\n\n  while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n    i++;\n  }\n\n  return i === 0 ? null : ancestorsA[i - 1];\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/iswindow\n */\n\n/**\n * Checks if the object is a native DOM Window.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isWindow(obj) {\n  const stringifiedObject = Object.prototype.toString.apply(obj); // Returns `true` for the `window` object in browser environments.\n\n  if (stringifiedObject == '[object Window]') {\n    return true;\n  } // Returns `true` for the `window` object in the Electron environment.\n\n\n  if (stringifiedObject == '[object global]') {\n    return true;\n  }\n\n  return false;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/emittermixin\n */\nimport { default as EmitterMixin, _getEmitterListenedTo, _setEmitterId } from '../emittermixin';\nimport uid from '../uid';\nimport isNode from './isnode';\nimport isWindow from './iswindow';\nimport { extend } from 'lodash-es';\n/**\n * Mixin that injects the DOM events API into its host. It provides the API\n * compatible with {@link module:utils/emittermixin~EmitterMixin}.\n *\n * DOM emitter mixin is by default available in the {@link module:ui/view~View} class,\n * but it can also be mixed into any other class:\n *\n *\t\timport mix from '../utils/mix.js';\n *\t\timport DomEmitterMixin from '../utils/dom/emittermixin.js';\n *\n *\t\tclass SomeView {}\n *\t\tmix( SomeView, DomEmitterMixin );\n *\n *\t\tconst view = new SomeView();\n *\t\tview.listenTo( domElement, ( evt, domEvt ) => {\n *\t\t\tconsole.log( evt, domEvt );\n *\t\t} );\n *\n * @mixin EmitterMixin\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n */\n\nconst DomEmitterMixin = extend({}, EmitterMixin, {\n  /**\n   * Registers a callback function to be executed when an event is fired in a specific Emitter or DOM Node.\n   * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n   *\n   * @param {module:utils/emittermixin~Emitter|Node} emitter The object that fires the event.\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to be called on event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of this event callback. The higher\n   * the priority value the sooner the callback will be fired. Events having the same priority are called in the\n   * order they were added.\n   * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n   * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n   */\n  listenTo(emitter, ...rest) {\n    // Check if emitter is an instance of DOM Node. If so, replace the argument with\n    // corresponding ProxyEmitter (or create one if not existing).\n    if (isNode(emitter) || isWindow(emitter)) {\n      const proxy = this._getProxyEmitter(emitter) || new ProxyEmitter(emitter);\n      proxy.attach(...rest);\n      emitter = proxy;\n    } // Execute parent class method with Emitter (or ProxyEmitter) instance.\n\n\n    EmitterMixin.listenTo.call(this, emitter, ...rest);\n  },\n\n  /**\n   * Stops listening for events. It can be used at different levels:\n   * It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#listenTo}.\n   *\n   * * To stop listening to a specific callback.\n   * * To stop listening to a specific event.\n   * * To stop listening to all events fired by a specific object.\n   * * To stop listening to all events fired by all object.\n   *\n   * @param {module:utils/emittermixin~Emitter|Node} [emitter] The object to stop listening to. If omitted, stops it for all objects.\n   * @param {String} [event] (Requires the `emitter`) The name of the event to stop listening to. If omitted, stops it\n   * for all events from `emitter`.\n   * @param {Function} [callback] (Requires the `event`) The function to be removed from the call list for the given\n   * `event`.\n   */\n  stopListening(emitter, event, callback) {\n    // Check if emitter is an instance of DOM Node. If so, replace the argument with corresponding ProxyEmitter.\n    if (isNode(emitter) || isWindow(emitter)) {\n      const proxy = this._getProxyEmitter(emitter); // Element has no listeners.\n\n\n      if (!proxy) {\n        return;\n      }\n\n      emitter = proxy;\n    } // Execute parent class method with Emitter (or ProxyEmitter) instance.\n\n\n    EmitterMixin.stopListening.call(this, emitter, event, callback);\n\n    if (emitter instanceof ProxyEmitter) {\n      emitter.detach(event);\n    }\n  },\n\n  /**\n   * Retrieves ProxyEmitter instance for given DOM Node residing in this Host.\n   *\n   * @pivate\n   * @param {Node} node DOM Node of the ProxyEmitter.\n   * @returns {module:utils/dom/emittermixin~ProxyEmitter} ProxyEmitter instance or null.\n   */\n  _getProxyEmitter(node) {\n    return _getEmitterListenedTo(this, getNodeUID(node));\n  }\n\n});\nexport default DomEmitterMixin;\n/**\n * Creates a ProxyEmitter instance. Such an instance is a bridge between a DOM Node firing events\n * and any Host listening to them. It is backwards compatible with {@link module:utils/emittermixin~EmitterMixin#on}.\n *\n *                                  listenTo( click, ... )\n *                    +-----------------------------------------+\n *                    |              stopListening( ... )       |\n *     +----------------------------+                           |             addEventListener( click, ... )\n *     | Host                       |                           |   +---------------------------------------------+\n *     +----------------------------+                           |   |       removeEventListener( click, ... )     |\n *     | _listeningTo: {            |                +----------v-------------+                                   |\n *     |   UID: {                   |                | ProxyEmitter           |                                   |\n *     |     emitter: ProxyEmitter, |                +------------------------+                      +------------v----------+\n *     |     callbacks: {           |                | events: {              |                      | Node (HTMLElement)    |\n *     |       click: [ callbacks ] |                |   click: [ callbacks ] |                      +-----------------------+\n *     |     }                      |                | },                     |                      | data-ck-expando: UID  |\n *     |   }                        |                | _domNode: Node,        |                      +-----------------------+\n *     | }                          |                | _domListeners: {},     |                                   |\n *     | +------------------------+ |                | _emitterId: UID        |                                   |\n *     | | DomEmitterMixin        | |                +--------------^---------+                                   |\n *     | +------------------------+ |                           |   |                                             |\n *     +--------------^-------------+                           |   +---------------------------------------------+\n *                    |                                         |                  click (DOM Event)\n *                    +-----------------------------------------+\n *                                fire( click, DOM Event )\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @implements module:utils/dom/emittermixin~Emitter\n * @private\n */\n\nclass ProxyEmitter {\n  /**\n   * @param {Node} node DOM Node that fires events.\n   * @returns {Object} ProxyEmitter instance bound to the DOM Node.\n   */\n  constructor(node) {\n    // Set emitter ID to match DOM Node \"expando\" property.\n    _setEmitterId(this, getNodeUID(node)); // Remember the DOM Node this ProxyEmitter is bound to.\n\n\n    this._domNode = node;\n  }\n\n}\n\nextend(ProxyEmitter.prototype, EmitterMixin, {\n  /**\n   * Collection of native DOM listeners.\n   *\n   * @private\n   * @member {Object} module:utils/dom/emittermixin~ProxyEmitter#_domListeners\n   */\n\n  /**\n   * Registers a callback function to be executed when an event is fired.\n   *\n   * It attaches a native DOM listener to the DOM Node. When fired,\n   * a corresponding Emitter event will also fire with DOM Event object as an argument.\n   *\n   * @method module:utils/dom/emittermixin~ProxyEmitter#attach\n   * @param {String} event The name of the event.\n   * @param {Function} callback The function to be called on event.\n   * @param {Object} [options={}] Additional options.\n   * @param {Boolean} [options.useCapture=false] Indicates that events of this type will be dispatched to the registered\n   * listener before being dispatched to any EventTarget beneath it in the DOM tree.\n   */\n  attach(event, callback, options = {}) {\n    // If the DOM Listener for given event already exist it is pointless\n    // to attach another one.\n    if (this._domListeners && this._domListeners[event]) {\n      return;\n    }\n\n    const domListener = this._createDomListener(event, !!options.useCapture); // Attach the native DOM listener to DOM Node.\n\n\n    this._domNode.addEventListener(event, domListener, !!options.useCapture);\n\n    if (!this._domListeners) {\n      this._domListeners = {};\n    } // Store the native DOM listener in this ProxyEmitter. It will be helpful\n    // when stopping listening to the event.\n\n\n    this._domListeners[event] = domListener;\n  },\n\n  /**\n   * Stops executing the callback on the given event.\n   *\n   * @method module:utils/dom/emittermixin~ProxyEmitter#detach\n   * @param {String} event The name of the event.\n   */\n  detach(event) {\n    let events; // Remove native DOM listeners which are orphans. If no callbacks\n    // are awaiting given event, detach native DOM listener from DOM Node.\n    // See: {@link attach}.\n\n    if (this._domListeners[event] && (!(events = this._events[event]) || !events.callbacks.length)) {\n      this._domListeners[event].removeListener();\n    }\n  },\n\n  /**\n   * Creates a native DOM listener callback. When the native DOM event\n   * is fired it will fire corresponding event on this ProxyEmitter.\n   * Note: A native DOM Event is passed as an argument.\n   *\n   * @private\n   * @method module:utils/dom/emittermixin~ProxyEmitter#_createDomListener\n   * @param {String} event The name of the event.\n   * @param {Boolean} useCapture Indicates whether the listener was created for capturing event.\n   * @returns {Function} The DOM listener callback.\n   */\n  _createDomListener(event, useCapture) {\n    const domListener = domEvt => {\n      this.fire(event, domEvt);\n    }; // Supply the DOM listener callback with a function that will help\n    // detach it from the DOM Node, when it is no longer necessary.\n    // See: {@link detach}.\n\n\n    domListener.removeListener = () => {\n      this._domNode.removeEventListener(event, domListener, useCapture);\n\n      delete this._domListeners[event];\n    };\n\n    return domListener;\n  }\n\n}); // Gets an unique DOM Node identifier. The identifier will be set if not defined.\n//\n// @private\n// @param {Node} node\n// @returns {String} UID for given DOM Node.\n\nfunction getNodeUID(node) {\n  return node['data-ck-expando'] || (node['data-ck-expando'] = uid());\n}\n/**\n * Interface representing classes which mix in {@link module:utils/dom/emittermixin~EmitterMixin}.\n *\n * @interface Emitter\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/observer\n */\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Abstract base observer class. Observers are classes which listen to DOM events, do the preliminary\n * processing and fire events on the {@link module:engine/view/document~Document} objects.\n * Observers can also add features to the view, for instance by updating its status or marking elements\n * which need refresh on DOM events.\n *\n * @abstract\n */\n\nexport default class Observer {\n  /**\n   * Creates an instance of the observer.\n   *\n   * @param {module:engine/view/view~View} view\n   */\n  constructor(view) {\n    /**\n     * Instance of the view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View}\n     */\n    this.view = view;\n    /**\n     * Reference to the {@link module:engine/view/document~Document} object.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document}\n     */\n\n    this.document = view.document;\n    /**\n     * State of the observer. If it is disabled events will not be fired.\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.isEnabled = false;\n  }\n  /**\n   * Enables the observer. This method is called when the observer is registered to the\n   * {@link module:engine/view/view~View} and after {@link module:engine/view/view~View#forceRender rendering}\n   * (all observers are {@link #disable disabled} before rendering).\n   *\n   * A typical use case for disabling observers is that mutation observers need to be disabled for the rendering.\n   * However, a child class may not need to be disabled, so it can implement an empty method.\n   *\n   * @see module:engine/view/observer/observer~Observer#disable\n   */\n\n\n  enable() {\n    this.isEnabled = true;\n  }\n  /**\n   * Disables the observer. This method is called before\n   * {@link module:engine/view/view~View#forceRender rendering} to prevent firing events during rendering.\n   *\n   * @see module:engine/view/observer/observer~Observer#enable\n   */\n\n\n  disable() {\n    this.isEnabled = false;\n  }\n  /**\n   * Disables and destroys the observer, among others removes event listeners created by the observer.\n   */\n\n\n  destroy() {\n    this.disable();\n    this.stopListening();\n  }\n  /**\n   * Starts observing the given root element.\n   *\n   * @method #observe\n   * @param {HTMLElement} domElement\n   * @param {String} name The name of the root element.\n   */\n\n\n}\nmix(Observer, DomEmitterMixin);","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nexport default setCacheAdd;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nexport default setCacheHas;\n","import MapCache from './_MapCache.js';\nimport setCacheAdd from './_setCacheAdd.js';\nimport setCacheHas from './_setCacheHas.js';\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nexport default SetCache;\n","/**\n * A specialized version of `_.some` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction arraySome(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (predicate(array[index], index, array)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport default arraySome;\n","/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction cacheHas(cache, key) {\n  return cache.has(key);\n}\n\nexport default cacheHas;\n","import SetCache from './_SetCache.js';\nimport arraySome from './_arraySome.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `array` and `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(array);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var index = -1,\n      result = true,\n      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\n\n  stack.set(array, other);\n  stack.set(other, array);\n\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, arrValue, index, other, array, stack)\n        : customizer(arrValue, othValue, index, array, other, stack);\n    }\n    if (compared !== undefined) {\n      if (compared) {\n        continue;\n      }\n      result = false;\n      break;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (seen) {\n      if (!arraySome(other, function(othValue, othIndex) {\n            if (!cacheHas(seen, othIndex) &&\n                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n        result = false;\n        break;\n      }\n    } else if (!(\n          arrValue === othValue ||\n            equalFunc(arrValue, othValue, bitmask, customizer, stack)\n        )) {\n      result = false;\n      break;\n    }\n  }\n  stack['delete'](array);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalArrays;\n","/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\nexport default mapToArray;\n","/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nexport default setToArray;\n","import Symbol from './_Symbol.js';\nimport Uint8Array from './_Uint8Array.js';\nimport eq from './eq.js';\nimport equalArrays from './_equalArrays.js';\nimport mapToArray from './_mapToArray.js';\nimport setToArray from './_setToArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]';\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * A specialized version of `baseIsEqualDeep` for comparing objects of\n * the same `toStringTag`.\n *\n * **Note:** This function only supports comparing values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {string} tag The `toStringTag` of the objects to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n  switch (tag) {\n    case dataViewTag:\n      if ((object.byteLength != other.byteLength) ||\n          (object.byteOffset != other.byteOffset)) {\n        return false;\n      }\n      object = object.buffer;\n      other = other.buffer;\n\n    case arrayBufferTag:\n      if ((object.byteLength != other.byteLength) ||\n          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {\n        return false;\n      }\n      return true;\n\n    case boolTag:\n    case dateTag:\n    case numberTag:\n      // Coerce booleans to `1` or `0` and dates to milliseconds.\n      // Invalid dates are coerced to `NaN`.\n      return eq(+object, +other);\n\n    case errorTag:\n      return object.name == other.name && object.message == other.message;\n\n    case regexpTag:\n    case stringTag:\n      // Coerce regexes to strings and treat strings, primitives and objects,\n      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring\n      // for more details.\n      return object == (other + '');\n\n    case mapTag:\n      var convert = mapToArray;\n\n    case setTag:\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n      convert || (convert = setToArray);\n\n      if (object.size != other.size && !isPartial) {\n        return false;\n      }\n      // Assume cyclic values are equal.\n      var stacked = stack.get(object);\n      if (stacked) {\n        return stacked == other;\n      }\n      bitmask |= COMPARE_UNORDERED_FLAG;\n\n      // Recursively compare objects (susceptible to call stack limits).\n      stack.set(object, other);\n      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n      stack['delete'](object);\n      return result;\n\n    case symbolTag:\n      if (symbolValueOf) {\n        return symbolValueOf.call(object) == symbolValueOf.call(other);\n      }\n  }\n  return false;\n}\n\nexport default equalByTag;\n","import getAllKeys from './_getAllKeys.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqualDeep` for objects with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} stack Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,\n      objProps = getAllKeys(object),\n      objLength = objProps.length,\n      othProps = getAllKeys(other),\n      othLength = othProps.length;\n\n  if (objLength != othLength && !isPartial) {\n    return false;\n  }\n  var index = objLength;\n  while (index--) {\n    var key = objProps[index];\n    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n      return false;\n    }\n  }\n  // Assume cyclic values are equal.\n  var stacked = stack.get(object);\n  if (stacked && stack.get(other)) {\n    return stacked == other;\n  }\n  var result = true;\n  stack.set(object, other);\n  stack.set(other, object);\n\n  var skipCtor = isPartial;\n  while (++index < objLength) {\n    key = objProps[index];\n    var objValue = object[key],\n        othValue = other[key];\n\n    if (customizer) {\n      var compared = isPartial\n        ? customizer(othValue, objValue, key, other, object, stack)\n        : customizer(objValue, othValue, key, object, other, stack);\n    }\n    // Recursively compare objects (susceptible to call stack limits).\n    if (!(compared === undefined\n          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))\n          : compared\n        )) {\n      result = false;\n      break;\n    }\n    skipCtor || (skipCtor = key == 'constructor');\n  }\n  if (result && !skipCtor) {\n    var objCtor = object.constructor,\n        othCtor = other.constructor;\n\n    // Non `Object` object instances with different constructors are not equal.\n    if (objCtor != othCtor &&\n        ('constructor' in object && 'constructor' in other) &&\n        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&\n          typeof othCtor == 'function' && othCtor instanceof othCtor)) {\n      result = false;\n    }\n  }\n  stack['delete'](object);\n  stack['delete'](other);\n  return result;\n}\n\nexport default equalObjects;\n","import Stack from './_Stack.js';\nimport equalArrays from './_equalArrays.js';\nimport equalByTag from './_equalByTag.js';\nimport equalObjects from './_equalObjects.js';\nimport getTag from './_getTag.js';\nimport isArray from './isArray.js';\nimport isBuffer from './isBuffer.js';\nimport isTypedArray from './isTypedArray.js';\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.\n * @param {Function} customizer The function to customize comparisons.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Object} [stack] Tracks traversed `object` and `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = objIsArr ? arrayTag : getTag(object),\n      othTag = othIsArr ? arrayTag : getTag(other);\n\n  objTag = objTag == argsTag ? objectTag : objTag;\n  othTag = othTag == argsTag ? objectTag : othTag;\n\n  var objIsObj = objTag == objectTag,\n      othIsObj = othTag == objectTag,\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && isBuffer(object)) {\n    if (!isBuffer(other)) {\n      return false;\n    }\n    objIsArr = true;\n    objIsObj = false;\n  }\n  if (isSameTag && !objIsObj) {\n    stack || (stack = new Stack);\n    return (objIsArr || isTypedArray(object))\n      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)\n      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n  }\n  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      var objUnwrapped = objIsWrapped ? object.value() : object,\n          othUnwrapped = othIsWrapped ? other.value() : other;\n\n      stack || (stack = new Stack);\n      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  stack || (stack = new Stack);\n  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n}\n\nexport default baseIsEqualDeep;\n","import baseIsEqualDeep from './_baseIsEqualDeep.js';\nimport isObjectLike from './isObjectLike.js';\n\n/**\n * The base implementation of `_.isEqual` which supports partial comparisons\n * and tracks traversed objects.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Unordered comparison\n *  2 - Partial comparison\n * @param {Function} [customizer] The function to customize comparisons.\n * @param {Object} [stack] Tracks traversed `value` and `other` objects.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n */\nfunction baseIsEqual(value, other, bitmask, customizer, stack) {\n  if (value === other) {\n    return true;\n  }\n  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {\n    return value !== value && other !== other;\n  }\n  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n}\n\nexport default baseIsEqual;\n","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * This method is like `_.isEqual` except that it accepts `customizer` which\n * is invoked to compare values. If `customizer` returns `undefined`, comparisons\n * are handled by the method instead. The `customizer` is invoked with up to\n * six arguments: (objValue, othValue [, index|key, object, other, stack]).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * function isGreeting(value) {\n *   return /^h(?:i|ello)$/.test(value);\n * }\n *\n * function customizer(objValue, othValue) {\n *   if (isGreeting(objValue) && isGreeting(othValue)) {\n *     return true;\n *   }\n * }\n *\n * var array = ['hello', 'goodbye'];\n * var other = ['hi', 'goodbye'];\n *\n * _.isEqualWith(array, other, customizer);\n * // => true\n */\nfunction isEqualWith(value, other, customizer) {\n  customizer = typeof customizer == 'function' ? customizer : undefined;\n  var result = customizer ? customizer(value, other) : undefined;\n  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;\n}\n\nexport default isEqualWith;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mutationobserver\n */\n\n/* globals window */\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { startsWithFiller, getDataWithoutFiller } from '../filler';\nimport { isEqualWith } from 'lodash-es';\n/**\n * Mutation observer class observes changes in the DOM, fires {@link module:engine/view/document~Document#event:mutations} event, mark view\n * elements as changed and call {@link module:engine/view/renderer~Renderer#render}.\n * Because all mutated nodes are marked as \"to be rendered\" and the\n * {@link module:engine/view/renderer~Renderer#render} is called, all changes will be reverted, unless the mutation will be handled by the\n * {@link module:engine/view/document~Document#event:mutations} event listener. It means user will see only handled changes, and the editor\n * will block all changes which are not handled.\n *\n * Mutation Observer also take care of reducing number of mutations which are fired. It removes duplicates and\n * mutations on elements which do not have corresponding view elements. Also\n * {@link module:engine/view/observer/mutationobserver~MutatedText text mutation} is fired only if parent element do not change child list.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class MutationObserver extends Observer {\n  constructor(view) {\n    super(view);\n    /**\n     * Native mutation observer config.\n     *\n     * @private\n     * @member {Object}\n     */\n\n    this._config = {\n      childList: true,\n      characterData: true,\n      characterDataOldValue: true,\n      subtree: true\n    };\n    /**\n     * Reference to the {@link module:engine/view/view~View#domConverter}.\n     *\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = view.domConverter;\n    /**\n     * Reference to the {@link module:engine/view/view~View#_renderer}.\n     *\n     * @member {module:engine/view/renderer~Renderer}\n     */\n\n    this.renderer = view._renderer;\n    /**\n     * Observed DOM elements.\n     *\n     * @private\n     * @member {Array.<HTMLElement>}\n     */\n\n    this._domElements = [];\n    /**\n     * Native mutation observer.\n     *\n     * @private\n     * @member {MutationObserver}\n     */\n\n    this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this));\n  }\n  /**\n   * Synchronously fires {@link module:engine/view/document~Document#event:mutations} event with all mutations in record queue.\n   * At the same time empties the queue so mutations will not be fired twice.\n   */\n\n\n  flush() {\n    this._onMutations(this._mutationObserver.takeRecords());\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe(domElement) {\n    this._domElements.push(domElement);\n\n    if (this.isEnabled) {\n      this._mutationObserver.observe(domElement, this._config);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  enable() {\n    super.enable();\n\n    for (const domElement of this._domElements) {\n      this._mutationObserver.observe(domElement, this._config);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  disable() {\n    super.disable();\n\n    this._mutationObserver.disconnect();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    this._mutationObserver.disconnect();\n  }\n  /**\n   * Handles mutations. Deduplicates, mark view elements to sync, fire event and call render.\n   *\n   * @private\n   * @param {Array.<Object>} domMutations Array of native mutations.\n   */\n\n\n  _onMutations(domMutations) {\n    // As a result of this.flush() we can have an empty collection.\n    if (domMutations.length === 0) {\n      return;\n    }\n\n    const domConverter = this.domConverter; // Use map and set for deduplication.\n\n    const mutatedTexts = new Map();\n    const mutatedElements = new Set(); // Handle `childList` mutations first, so we will be able to check if the `characterData` mutation is in the\n    // element with changed structure anyway.\n\n    for (const mutation of domMutations) {\n      if (mutation.type === 'childList') {\n        const element = domConverter.mapDomToView(mutation.target); // Do not collect mutations from UIElements.\n\n        if (element && element.is('uiElement')) {\n          continue;\n        }\n\n        if (element && !this._isBogusBrMutation(mutation)) {\n          mutatedElements.add(element);\n        }\n      }\n    } // Handle `characterData` mutations later, when we have the full list of nodes which changed structure.\n\n\n    for (const mutation of domMutations) {\n      const element = domConverter.mapDomToView(mutation.target); // Do not collect mutations from UIElements.\n\n      if (element && element.is('uiElement')) {\n        continue;\n      }\n\n      if (mutation.type === 'characterData') {\n        const text = domConverter.findCorrespondingViewText(mutation.target);\n\n        if (text && !mutatedElements.has(text.parent)) {\n          // Use text as a key, for deduplication. If there will be another mutation on the same text element\n          // we will have only one in the map.\n          mutatedTexts.set(text, {\n            type: 'text',\n            oldText: text.data,\n            newText: getDataWithoutFiller(mutation.target),\n            node: text\n          });\n        } // When we added first letter to the text node which had only inline filler, for the DOM it is mutation\n        // on text, but for the view, where filler text node did not existed, new text node was created, so we\n        // need to fire 'children' mutation instead of 'text'.\n        else if (!text && startsWithFiller(mutation.target)) {\n            mutatedElements.add(domConverter.mapDomToView(mutation.target.parentNode));\n          }\n      }\n    } // Now we build the list of mutations to fire and mark elements. We did not do it earlier to avoid marking the\n    // same node multiple times in case of duplication.\n    // List of mutations we will fire.\n\n\n    const viewMutations = [];\n\n    for (const mutatedText of mutatedTexts.values()) {\n      this.renderer.markToSync('text', mutatedText.node);\n      viewMutations.push(mutatedText);\n    }\n\n    for (const viewElement of mutatedElements) {\n      const domElement = domConverter.mapViewToDom(viewElement);\n      const viewChildren = Array.from(viewElement.getChildren());\n      const newViewChildren = Array.from(domConverter.domChildrenToView(domElement, {\n        withChildren: false\n      })); // It may happen that as a result of many changes (sth was inserted and then removed),\n      // both elements haven't really changed. #1031\n\n      if (!isEqualWith(viewChildren, newViewChildren, sameNodes)) {\n        this.renderer.markToSync('children', viewElement);\n        viewMutations.push({\n          type: 'children',\n          oldChildren: viewChildren,\n          newChildren: newViewChildren,\n          node: viewElement\n        });\n      }\n    } // Retrieve `domSelection` using `ownerDocument` of one of mutated nodes.\n    // There should not be simultaneous mutation in multiple documents, so it's fine.\n\n\n    const domSelection = domMutations[0].target.ownerDocument.getSelection();\n    let viewSelection = null;\n\n    if (domSelection && domSelection.anchorNode) {\n      // If `domSelection` is inside a dom node that is already bound to a view node from view tree, get\n      // corresponding selection in the view and pass it together with `viewMutations`. The `viewSelection` may\n      // be used by features handling mutations.\n      // Only one range is supported.\n      const viewSelectionAnchor = domConverter.domPositionToView(domSelection.anchorNode, domSelection.anchorOffset);\n      const viewSelectionFocus = domConverter.domPositionToView(domSelection.focusNode, domSelection.focusOffset); // Anchor and focus has to be properly mapped to view.\n\n      if (viewSelectionAnchor && viewSelectionFocus) {\n        viewSelection = new ViewSelection(viewSelectionAnchor);\n        viewSelection.setFocus(viewSelectionFocus);\n      }\n    }\n\n    this.document.fire('mutations', viewMutations, viewSelection); // If nothing changes on `mutations` event, at this point we have \"dirty DOM\" (changed) and de-synched\n    // view (which has not been changed). In order to \"reset DOM\" we render the view again.\n\n    this.view.forceRender();\n\n    function sameNodes(child1, child2) {\n      // First level of comparison (array of children vs array of children) – use the Lodash's default behavior.\n      if (Array.isArray(child1)) {\n        return;\n      } // Elements.\n\n\n      if (child1 === child2) {\n        return true;\n      } // Texts.\n      else if (child1.is('text') && child2.is('text')) {\n          return child1.data === child2.data;\n        } // Not matching types.\n\n\n      return false;\n    }\n  }\n  /**\n   * Checks if mutation was generated by the browser inserting bogus br on the end of the block element.\n   * Such mutations are generated while pressing space or performing native spellchecker correction\n   * on the end of the block element in Firefox browser.\n   *\n   * @private\n   * @param {Object} mutation Native mutation object.\n   * @returns {Boolean}\n   */\n\n\n  _isBogusBrMutation(mutation) {\n    let addedNode = null; // Check if mutation added only one node on the end of its parent.\n\n    if (mutation.nextSibling === null && mutation.removedNodes.length === 0 && mutation.addedNodes.length == 1) {\n      addedNode = this.domConverter.domToView(mutation.addedNodes[0], {\n        withChildren: false\n      });\n    }\n\n    return addedNode && addedNode.is('element', 'br');\n  }\n\n}\n/**\n * Fired when mutation occurred. If tree view is not changed on this event, DOM will be reverted to the state before\n * mutation, so all changes which should be applied, should be handled on this event.\n *\n * Introduced by {@link module:engine/view/observer/mutationobserver~MutationObserver}.\n *\n * Note that because {@link module:engine/view/observer/mutationobserver~MutationObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @event module:engine/view/document~Document#event:mutations\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|module:engine/view/observer/mutationobserver~MutatedChildren>}\n * viewMutations Array of mutations.\n * For mutated texts it will be {@link module:engine/view/observer/mutationobserver~MutatedText} and for mutated elements it will be\n * {@link module:engine/view/observer/mutationobserver~MutatedChildren}. You can recognize the type based on the `type` property.\n * @param {module:engine/view/selection~Selection|null} viewSelection View selection that is a result of converting DOM selection to view.\n * Keep in\n * mind that the DOM selection is already \"updated\", meaning that it already acknowledges changes done in mutation.\n */\n\n/**\n * Mutation item for text.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedText\n *\n * @property {String} type For text mutations it is always 'text'.\n * @property {module:engine/view/text~Text} node Mutated text node.\n * @property {String} oldText Old text.\n * @property {String} newText New text.\n */\n\n/**\n * Mutation item for child nodes.\n *\n * @see module:engine/view/document~Document#event:mutations\n * @see module:engine/view/observer/mutationobserver~MutatedText\n *\n * @typedef {Object} module:engine/view/observer/mutationobserver~MutatedChildren\n *\n * @property {String} type For child nodes mutations it is always 'children'.\n * @property {module:engine/view/element~Element} node Parent of the mutated children.\n * @property {Array.<module:engine/view/node~Node>} oldChildren Old child nodes.\n * @property {Array.<module:engine/view/node~Node>} newChildren New child nodes.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventdata\n */\nimport { extend } from 'lodash-es';\n/**\n * Information about a DOM event in context of the {@link module:engine/view/document~Document}.\n * It wraps the native event, which usually should not be used as the wrapper contains\n * additional data (like key code for keyboard events).\n */\n\nexport default class DomEventData {\n  /**\n   * @param {module:engine/view/view~View} view The instance of the view controller.\n   * @param {Event} domEvent The DOM event.\n   * @param {Object} [additionalData] Additional properties that the instance should contain.\n   */\n  constructor(view, domEvent, additionalData) {\n    /**\n     * Instance of the view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View} module:engine/view/observer/observer~Observer.DomEvent#view\n     */\n    this.view = view;\n    /**\n     * The instance of the document.\n     *\n     * @readonly\n     * @member {module:engine/view/document~Document} module:engine/view/observer/observer~Observer.DomEvent#document\n     */\n\n    this.document = view.document;\n    /**\n     * The DOM event.\n     *\n     * @readonly\n     * @member {Event} module:engine/view/observer/observer~Observer.DomEvent#domEvent\n     */\n\n    this.domEvent = domEvent;\n    /**\n     * The DOM target.\n     *\n     * @readonly\n     * @member {HTMLElement} module:engine/view/observer/observer~Observer.DomEvent#target\n     */\n\n    this.domTarget = domEvent.target;\n    extend(this, additionalData);\n  }\n  /**\n   * The tree view element representing the target.\n   *\n   * @readonly\n   * @type module:engine/view/element~Element\n   */\n\n\n  get target() {\n    return this.view.domConverter.mapDomToView(this.domTarget);\n  }\n  /**\n   * Prevents the native's event default action.\n   */\n\n\n  preventDefault() {\n    this.domEvent.preventDefault();\n  }\n  /**\n   * Stops native event propagation.\n   */\n\n\n  stopPropagation() {\n    this.domEvent.stopPropagation();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/domeventobserver\n */\nimport Observer from './observer';\nimport DomEventData from './domeventdata';\n/**\n * Base class for DOM event observers. This class handles\n * {@link module:engine/view/observer/observer~Observer#observe adding} listeners to DOM elements,\n * {@link module:engine/view/observer/observer~Observer#disable disabling} and\n * {@link module:engine/view/observer/observer~Observer#enable re-enabling} events.\n * Child class needs to define\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#domEventType DOM event type} and\n * {@link module:engine/view/observer/domeventobserver~DomEventObserver#onDomEvent callback}.\n *\n * For instance:\n *\n *\t\tclass ClickObserver extends DomEventObserver {\n *\t\t\t// It can also be defined as a normal property in the constructor.\n *\t\t\tget domEventType() {\n *\t\t\t\treturn 'click';\n *\t\t\t}\n *\n *\t\t\tonDomEvent( domEvent ) {\n *\t\t\t\tthis.fire( 'click', domEvent );\n *\t\t\t}\n *\t\t}\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class DomEventObserver extends Observer {\n  /**\n   * Type of the DOM event the observer should listen on. Array of types can be defined\n   * if the obsever should listen to multiple DOM events.\n   *\n   * @readonly\n   * @member {String|Array.<String>} #domEventType\n   */\n\n  /**\n   * Callback which should be called when the DOM event occurred. Note that the callback will not be called if\n   * observer {@link #isEnabled is not enabled}.\n   *\n   * @see #domEventType\n   * @abstract\n   * @method #onDomEvent\n   */\n\n  /**\n   * @inheritDoc\n   */\n  constructor(view) {\n    super(view);\n    /**\n     * If set to `true` DOM events will be listened on the capturing phase.\n     * Default value is `false`.\n     *\n     * @member {Boolean}\n     */\n\n    this.useCapture = false;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe(domElement) {\n    const types = typeof this.domEventType == 'string' ? [this.domEventType] : this.domEventType;\n    types.forEach(type => {\n      this.listenTo(domElement, type, (eventInfo, domEvent) => {\n        if (this.isEnabled) {\n          this.onDomEvent(domEvent);\n        }\n      }, {\n        useCapture: this.useCapture\n      });\n    });\n  }\n  /**\n   * Calls `Document#fire()` if observer {@link #isEnabled is enabled}.\n   *\n   * @see module:utils/emittermixin~EmitterMixin#fire\n   * @param {String} eventType The event type (name).\n   * @param {Event} domEvent The DOM event.\n   * @param {Object} [additionalData] The additional data which should extend the\n   * {@link module:engine/view/observer/domeventdata~DomEventData event data} object.\n   */\n\n\n  fire(eventType, domEvent, additionalData) {\n    if (this.isEnabled) {\n      this.document.fire(eventType, new DomEventData(this.view, domEvent, additionalData));\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/keyobserver\n */\nimport DomEventObserver from './domeventobserver';\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * Observer for events connected with pressing keyboard keys.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class KeyObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = ['keydown', 'keyup'];\n  }\n\n  onDomEvent(domEvt) {\n    this.fire(domEvt.type, domEvt, {\n      keyCode: domEvt.keyCode,\n      altKey: domEvt.altKey,\n      ctrlKey: domEvt.ctrlKey || domEvt.metaKey,\n      shiftKey: domEvt.shiftKey,\n\n      get keystroke() {\n        return getCode(this);\n      }\n\n    });\n  }\n\n}\n/**\n * Fired when a key has been pressed.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keydown\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * Fired when a key has been released.\n *\n * Introduced by {@link module:engine/view/observer/keyobserver~KeyObserver}.\n *\n * Note that because {@link module:engine/view/observer/keyobserver~KeyObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/keyobserver~KeyObserver\n * @event module:engine/view/document~Document#event:keyup\n * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEventData\n */\n\n/**\n * The value of both events - {@link module:engine/view/document~Document#event:keydown} and\n * {@link module:engine/view/document~Document#event:keyup}.\n *\n * @class module:engine/view/observer/keyobserver~KeyEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n * @implements module:utils/keyboard~KeystrokeInfo\n */\n\n/**\n * Code of the whole keystroke. See {@link module:utils/keyboard~getCode}.\n *\n * @readonly\n * @member {Number} module:engine/view/observer/keyobserver~KeyEventData#keystroke\n */","import root from './_root.js';\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nexport default now;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nexport default isSymbol;\n","import isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import isObject from './isObject.js';\nimport now from './now.js';\nimport toNumber from './toNumber.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nexport default debounce;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/fakeselectionobserver\n */\nimport Observer from './observer';\nimport ViewSelection from '../selection';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport { debounce } from 'lodash-es';\n/**\n * Fake selection observer class. If view selection is fake it is placed in dummy DOM container. This observer listens\n * on {@link module:engine/view/document~Document#event:keydown keydown} events and handles moving fake view selection to the correct place\n * if arrow keys are pressed.\n * Fires {@link module:engine/view/document~Document#event:selectionChange selectionChange event} simulating natural behaviour of\n * {@link module:engine/view/observer/selectionobserver~SelectionObserver SelectionObserver}.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class FakeSelectionObserver extends Observer {\n  /**\n   * Creates new FakeSelectionObserver instance.\n   *\n   * @param {module:engine/view/view~View} view\n   */\n  constructor(view) {\n    super(view);\n    /**\n     * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n     *\n     * @private\n     * @param {Object} data Selection change data.\n     * @method #_fireSelectionChangeDoneDebounced\n     */\n\n    this._fireSelectionChangeDoneDebounced = debounce(data => this.document.fire('selectionChangeDone', data), 200);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe() {\n    const document = this.document;\n    document.on('keydown', (eventInfo, data) => {\n      const selection = document.selection;\n\n      if (selection.isFake && _isArrowKeyCode(data.keyCode) && this.isEnabled) {\n        // Prevents default key down handling - no selection change will occur.\n        data.preventDefault();\n\n        this._handleSelectionMove(data.keyCode);\n      }\n    }, {\n      priority: 'lowest'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    this._fireSelectionChangeDoneDebounced.cancel();\n  }\n  /**\n   * Handles collapsing view selection according to given key code. If left or up key is provided - new selection will be\n   * collapsed to left. If right or down key is pressed - new selection will be collapsed to right.\n   *\n   * This method fires {@link module:engine/view/document~Document#event:selectionChange} and\n   * {@link module:engine/view/document~Document#event:selectionChangeDone} events imitating behaviour of\n   * {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n   *\n   * @private\n   * @param {Number} keyCode\n   * @fires module:engine/view/document~Document#event:selectionChange\n   * @fires module:engine/view/document~Document#event:selectionChangeDone\n   */\n\n\n  _handleSelectionMove(keyCode) {\n    const selection = this.document.selection;\n    const newSelection = new ViewSelection(selection.getRanges(), {\n      backward: selection.isBackward,\n      fake: false\n    }); // Left or up arrow pressed - move selection to start.\n\n    if (keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup) {\n      newSelection.setTo(newSelection.getFirstPosition());\n    } // Right or down arrow pressed - move selection to end.\n\n\n    if (keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowdown) {\n      newSelection.setTo(newSelection.getLastPosition());\n    }\n\n    const data = {\n      oldSelection: selection,\n      newSelection,\n      domSelection: null\n    }; // Fire dummy selection change event.\n\n    this.document.fire('selectionChange', data); // Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n    // This function is debounced what means that `selectionChangeDone` event will be fired only when\n    // defined int the function time will elapse since the last time the function was called.\n    // So `selectionChangeDone` will be fired when selection will stop changing.\n\n    this._fireSelectionChangeDoneDebounced(data);\n  }\n\n} // Checks if one of the arrow keys is pressed.\n//\n// @private\n// @param {Number} keyCode\n// @returns {Boolean}\n\nfunction _isArrowKeyCode(keyCode) {\n  return keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup || keyCode == keyCodes.arrowdown;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/selectionobserver\n */\n\n/* global setInterval, clearInterval */\nimport Observer from './observer';\nimport MutationObserver from './mutationobserver';\nimport { debounce } from 'lodash-es';\n/**\n * Selection observer class observes selection changes in the document. If selection changes on the document this\n * observer checks if there are any mutations and if DOM selection is different than the\n * {@link module:engine/view/document~Document#selection view selection}. Selection observer fires\n * {@link module:engine/view/document~Document#event:selectionChange} event only if selection change was the only change in the document\n * and DOM selection is different then the view selection.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @see module:engine/view/observer/mutationobserver~MutationObserver\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class SelectionObserver extends Observer {\n  constructor(view) {\n    super(view);\n    /**\n     * Instance of the mutation observer. Selection observer calls\n     * {@link module:engine/view/observer/mutationobserver~MutationObserver#flush} to ensure that the mutations will be handled\n     * before the {@link module:engine/view/document~Document#event:selectionChange} event is fired.\n     *\n     * @readonly\n     * @member {module:engine/view/observer/mutationobserver~MutationObserver}\n     * module:engine/view/observer/selectionobserver~SelectionObserver#mutationObserver\n     */\n\n    this.mutationObserver = view.getObserver(MutationObserver);\n    /**\n     * Reference to the view {@link module:engine/view/documentselection~DocumentSelection} object used to compare\n     * new selection with it.\n     *\n     * @readonly\n     * @member {module:engine/view/documentselection~DocumentSelection}\n     * module:engine/view/observer/selectionobserver~SelectionObserver#selection\n     */\n\n    this.selection = this.document.selection;\n    /* eslint-disable max-len */\n\n    /**\n     * Reference to the {@link module:engine/view/view~View#domConverter}.\n     *\n     * @readonly\n     * @member {module:engine/view/domconverter~DomConverter} module:engine/view/observer/selectionobserver~SelectionObserver#domConverter\n     */\n\n    /* eslint-enable max-len */\n\n    this.domConverter = view.domConverter;\n    /**\n     * Set of documents which have added \"selectionchange\" listener to avoid adding listener twice to the same\n     * document.\n     *\n     * @private\n     * @member {WeakSet.<Document>} module:engine/view/observer/selectionobserver~SelectionObserver#_documents\n     */\n\n    this._documents = new WeakSet();\n    /**\n     * Fires debounced event `selectionChangeDone`. It uses `lodash#debounce` method to delay function call.\n     *\n     * @private\n     * @param {Object} data Selection change data.\n     * @method #_fireSelectionChangeDoneDebounced\n     */\n\n    this._fireSelectionChangeDoneDebounced = debounce(data => this.document.fire('selectionChangeDone', data), 200);\n    this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1000);\n    /**\n     * Private property to check if the code does not enter infinite loop.\n     *\n     * @private\n     * @member {Number} module:engine/view/observer/selectionobserver~SelectionObserver#_loopbackCounter\n     */\n\n    this._loopbackCounter = 0;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe(domElement) {\n    const domDocument = domElement.ownerDocument; // Add listener once per each document.\n\n    if (this._documents.has(domDocument)) {\n      return;\n    }\n\n    this.listenTo(domDocument, 'selectionchange', () => {\n      this._handleSelectionChange(domDocument);\n    });\n\n    this._documents.add(domDocument);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n    clearInterval(this._clearInfiniteLoopInterval);\n\n    this._fireSelectionChangeDoneDebounced.cancel();\n  }\n  /**\n   * Selection change listener. {@link module:engine/view/observer/mutationobserver~MutationObserver#flush Flush} mutations, check if\n   * selection changes and fires {@link module:engine/view/document~Document#event:selectionChange} event on every change\n   * and {@link module:engine/view/document~Document#event:selectionChangeDone} when selection stop changing.\n   *\n   * @private\n   * @param {Document} domDocument DOM document.\n   */\n\n\n  _handleSelectionChange(domDocument) {\n    // Selection is handled when document is not focused but is read-only. This is because in read-only\n    // mode contenteditable is set as false and editor won't receive focus but we still need to know\n    // selection position.\n    if (!this.isEnabled || !this.document.isFocused && !this.document.isReadOnly) {\n      return;\n    } // Ensure the mutation event will be before selection event on all browsers.\n\n\n    this.mutationObserver.flush(); // If there were mutations then the view will be re-rendered by the mutation observer and selection\n    // will be updated, so selections will equal and event will not be fired, as expected.\n\n    const domSelection = domDocument.defaultView.getSelection();\n    const newViewSelection = this.domConverter.domSelectionToView(domSelection);\n\n    if (this.selection.isEqual(newViewSelection) && this.domConverter.isDomSelectionCorrect(domSelection)) {\n      return;\n    } // Ensure we are not in the infinite loop (#400).\n    // This counter is reset each second. 60 selection changes in 1 second is enough high number\n    // to be very difficult (impossible) to achieve using just keyboard keys (during normal editor use).\n\n\n    if (++this._loopbackCounter > 60) {\n      // Selection change observer detected an infinite rendering loop.\n      // Most probably you try to put the selection in the position which is not allowed\n      // by the browser and browser fixes it automatically what causes `selectionchange` event on\n      // which a loopback through a model tries to re-render the wrong selection and again.\n      //\n      // @if CK_DEBUG // console.warn( 'Selection change observer detected an infinite rendering loop.' );\n      return;\n    }\n\n    if (this.selection.isSimilar(newViewSelection)) {\n      // If selection was equal and we are at this point of algorithm, it means that it was incorrect.\n      // Just re-render it, no need to fire any events, etc.\n      this.view.forceRender();\n    } else {\n      const data = {\n        oldSelection: this.selection,\n        newSelection: newViewSelection,\n        domSelection\n      }; // Prepare data for new selection and fire appropriate events.\n\n      this.document.fire('selectionChange', data); // Call` #_fireSelectionChangeDoneDebounced` every time when `selectionChange` event is fired.\n      // This function is debounced what means that `selectionChangeDone` event will be fired only when\n      // defined int the function time will elapse since the last time the function was called.\n      // So `selectionChangeDone` will be fired when selection will stop changing.\n\n      this._fireSelectionChangeDoneDebounced(data);\n    }\n  }\n  /**\n   * Clears `SelectionObserver` internal properties connected with preventing infinite loop.\n   *\n   * @protected\n   */\n\n\n  _clearInfiniteLoop() {\n    this._loopbackCounter = 0;\n  }\n\n}\n/**\n * Fired when selection has changed. This event is fired only when the selection change was the only change that happened\n * in the document, and old selection is different then the new selection.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChange\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */\n\n/**\n * Fired when selection stops changing.\n *\n * Introduced by {@link module:engine/view/observer/selectionobserver~SelectionObserver}.\n *\n * Note that because {@link module:engine/view/observer/selectionobserver~SelectionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/selectionobserver~SelectionObserver\n * @event module:engine/view/document~Document#event:selectionChangeDone\n * @param {Object} data\n * @param {module:engine/view/documentselection~DocumentSelection} data.oldSelection Old View selection which is\n * {@link module:engine/view/document~Document#selection}.\n * @param {module:engine/view/selection~Selection} data.newSelection New View selection which is converted DOM selection.\n * @param {Selection} data.domSelection Native DOM selection.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/focusobserver\n */\n\n/* globals setTimeout, clearTimeout */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:focus Focus}\n * and {@link module:engine/view/document~Document#event:blur blur} events observer.\n * Focus observer handle also {@link module:engine/view/rooteditableelement~RootEditableElement#isFocused isFocused} property of the\n * {@link module:engine/view/rooteditableelement~RootEditableElement root elements}.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class FocusObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = ['focus', 'blur'];\n    this.useCapture = true;\n    const document = this.document;\n    document.on('focus', () => {\n      document.isFocused = true; // Unfortunately native `selectionchange` event is fired asynchronously.\n      // We need to wait until `SelectionObserver` handle the event and then render. Otherwise rendering will\n      // overwrite new DOM selection with selection from the view.\n      // See https://github.com/ckeditor/ckeditor5-engine/issues/795 for more details.\n      // Long timeout is needed to solve #676 and https://github.com/ckeditor/ckeditor5-engine/issues/1157 issues.\n\n      this._renderTimeoutId = setTimeout(() => view.forceRender(), 50);\n    });\n    document.on('blur', (evt, data) => {\n      const selectedEditable = document.selection.editableElement;\n\n      if (selectedEditable === null || selectedEditable === data.target) {\n        document.isFocused = false; // Re-render the document to update view elements.\n\n        view.forceRender();\n      }\n    });\n    /**\n     * Identifier of the timeout currently used by focus listener to delay rendering execution.\n     *\n     * @private\n     * @member {Number} #_renderTimeoutId\n     */\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    if (this._renderTimeoutId) {\n      clearTimeout(this._renderTimeoutId);\n    }\n\n    super.destroy();\n  }\n\n}\n/**\n * Fired when one of the editables gets focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:focus\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when one of the editables loses focus.\n *\n * Introduced by {@link module:engine/view/observer/focusobserver~FocusObserver}.\n *\n * Note that because {@link module:engine/view/observer/focusobserver~FocusObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/focusobserver~FocusObserver\n * @event module:engine/view/document~Document#event:blur\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/compositionobserver\n */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:compositionstart Compositionstart},\n * {@link module:engine/view/document~Document#event:compositionupdate compositionupdate} and\n * {@link module:engine/view/document~Document#event:compositionend compositionend} events observer.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class CompositionObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = ['compositionstart', 'compositionupdate', 'compositionend'];\n    const document = this.document;\n    document.on('compositionstart', () => {\n      document.isComposing = true;\n    });\n    document.on('compositionend', () => {\n      document.isComposing = false;\n    });\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n\n}\n/**\n * Fired when composition starts inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionstart\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition is updated inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionupdate\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */\n\n/**\n * Fired when composition ends inside one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * Note that because {@link module:engine/view/observer/compositionobserver~CompositionObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/compositionobserver~CompositionObserver\n * @event module:engine/view/document~Document#event:compositionend\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","/**\n * @license Copyright (c) 2003-2018, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module engine/view/observer/inputobserver\n */\nimport DomEventObserver from './domeventobserver';\n/**\n * Observer for events connected with data input.\n *\n * Note that this observer is attached by the {@link module:engine/view/view~View} and is available by default.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class InputObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = ['beforeinput'];\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n\n}\n/**\n * Fired before browser inputs (or deletes) some data.\n *\n * This event is available only on browsers which support DOM `beforeinput` event.\n *\n * Introduced by {@link module:engine/view/observer/inputobserver~InputObserver}.\n *\n * Note that because {@link module:engine/view/observer/inputobserver~InputObserver} is attached by the\n * {@link module:engine/view/view~View} this event is available by default.\n *\n * @see module:engine/view/observer/inputobserver~InputObserver\n * @event module:engine/view/document~Document#event:beforeinput\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/isrange\n */\n\n/**\n * Checks if the object is a native DOM Range.\n *\n * @param {*} obj\n * @returns {Boolean}\n */\nexport default function isRange(obj) {\n  return Object.prototype.toString.apply(obj) == '[object Range]';\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getborderwidths\n */\n\n/**\n * Returns an object containing CSS border widths of a specified HTML element.\n *\n * @param {HTMLElement} element An element which has CSS borders.\n * @returns {Object} An object containing `top`, `left`, `right` and `bottom` properties\n * with numerical values of the `border-[top,left,right,bottom]-width` CSS styles.\n */\nexport default function getBorderWidths(element) {\n  // Call getComputedStyle on the window the element document belongs to.\n  const style = element.ownerDocument.defaultView.getComputedStyle(element);\n  return {\n    top: parseInt(style.borderTopWidth, 10),\n    right: parseInt(style.borderRightWidth, 10),\n    bottom: parseInt(style.borderBottomWidth, 10),\n    left: parseInt(style.borderLeftWidth, 10)\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/rect\n */\nimport isRange from './isrange';\nimport isWindow from './iswindow';\nimport getBorderWidths from './getborderwidths';\nimport isText from './istext';\nimport { isElement } from 'lodash-es';\nconst rectProperties = ['top', 'right', 'bottom', 'left', 'width', 'height'];\n/**\n * A helper class representing a `ClientRect` object, e.g. value returned by\n * the native `object.getBoundingClientRect()` method. Provides a set of methods\n * to manipulate the rect and compare it against other rect instances.\n */\n\nexport default class Rect {\n  /**\n   * Creates an instance of rect.\n   *\n   *\t\t// Rect of an HTMLElement.\n   *\t\tconst rectA = new Rect( document.body );\n   *\n   *\t\t// Rect of a DOM Range.\n   *\t\tconst rectB = new Rect( document.getSelection().getRangeAt( 0 ) );\n   *\n   *\t\t// Rect of a window (web browser viewport).\n   *\t\tconst rectC = new Rect( window );\n   *\n   *\t\t// Rect out of an object.\n   *\t\tconst rectD = new Rect( { top: 0, right: 10, bottom: 10, left: 0, width: 10, height: 10 } );\n   *\n   *\t\t// Rect out of another Rect instance.\n   *\t\tconst rectE = new Rect( rectD );\n   *\n   *\t\t// Rect out of a ClientRect.\n   *\t\tconst rectF = new Rect( document.body.getClientRects().item( 0 ) );\n   *\n   * **Note**: By default a rect of an HTML element includes its CSS borders and scrollbars (if any)\n   * ant the rect of a `window` includes scrollbars too. Use {@link #excludeScrollbarsAndBorders}\n   * to get the inner part of the rect.\n   *\n   * @param {HTMLElement|Range|Window|ClientRect|module:utils/dom/rect~Rect|Object} source A source object to create the rect.\n   */\n  constructor(source) {\n    const isSourceRange = isRange(source);\n    /**\n     * The object this rect is for.\n     *\n     * @protected\n     * @readonly\n     * @member {HTMLElement|Range|ClientRect|module:utils/dom/rect~Rect|Object} #_source\n     */\n\n    Object.defineProperty(this, '_source', {\n      // If the source is a Rect instance, copy it's #_source.\n      value: source._source || source,\n      writable: true,\n      enumerable: false\n    });\n\n    if (isElement(source) || isSourceRange) {\n      // The `Rect` class depends on `getBoundingClientRect` and `getClientRects` DOM methods. If the source\n      // of a rect in an HTML element or a DOM range but it does not belong to any rendered DOM tree, these methods\n      // will fail to obtain the geometry and the rect instance makes little sense to the features using it.\n      // To get rid of this warning make sure the source passed to the constructor is a descendant of `window.document.body`.\n      // @if CK_DEBUG // const sourceNode = isSourceRange ? source.startContainer : source;\n      // @if CK_DEBUG // if ( !sourceNode.ownerDocument || !sourceNode.ownerDocument.body.contains( sourceNode ) ) {\n      // @if CK_DEBUG // \tconsole.warn(\n      // @if CK_DEBUG // \t\t'rect-source-not-in-dom: The source of this rect does not belong to any rendered DOM tree.',\n      // @if CK_DEBUG // \t\t{ source } );\n      // @if CK_DEBUG // }\n      if (isSourceRange) {\n        copyRectProperties(this, Rect.getDomRangeRects(source)[0]);\n      } else {\n        copyRectProperties(this, source.getBoundingClientRect());\n      }\n    } else if (isWindow(source)) {\n      const {\n        innerWidth,\n        innerHeight\n      } = source;\n      copyRectProperties(this, {\n        top: 0,\n        right: innerWidth,\n        bottom: innerHeight,\n        left: 0,\n        width: innerWidth,\n        height: innerHeight\n      });\n    } else {\n      copyRectProperties(this, source);\n    }\n    /**\n     * The \"top\" value of the rect.\n     *\n     * @readonly\n     * @member {Number} #top\n     */\n\n    /**\n     * The \"right\" value of the rect.\n     *\n     * @readonly\n     * @member {Number} #right\n     */\n\n    /**\n     * The \"bottom\" value of the rect.\n     *\n     * @readonly\n     * @member {Number} #bottom\n     */\n\n    /**\n     * The \"left\" value of the rect.\n     *\n     * @readonly\n     * @member {Number} #left\n     */\n\n    /**\n     * The \"width\" value of the rect.\n     *\n     * @readonly\n     * @member {Number} #width\n     */\n\n    /**\n     * The \"height\" value of the rect.\n     *\n     * @readonly\n     * @member {Number} #height\n     */\n\n  }\n  /**\n   * Returns a clone of the rect.\n   *\n   * @returns {module:utils/dom/rect~Rect} A cloned rect.\n   */\n\n\n  clone() {\n    return new Rect(this);\n  }\n  /**\n   * Moves the rect so that its upper–left corner lands in desired `[ x, y ]` location.\n   *\n   * @param {Number} x Desired horizontal location.\n   * @param {Number} y Desired vertical location.\n   * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n   */\n\n\n  moveTo(x, y) {\n    this.top = y;\n    this.right = x + this.width;\n    this.bottom = y + this.height;\n    this.left = x;\n    return this;\n  }\n  /**\n   * Moves the rect in–place by a dedicated offset.\n   *\n   * @param {Number} x A horizontal offset.\n   * @param {Number} y A vertical offset\n   * @returns {module:utils/dom/rect~Rect} A rect which has been moved.\n   */\n\n\n  moveBy(x, y) {\n    this.top += y;\n    this.right += x;\n    this.left += x;\n    this.bottom += y;\n    return this;\n  }\n  /**\n   * Returns a new rect a a result of intersection with another rect.\n   *\n   * @param {module:utils/dom/rect~Rect} anotherRect\n   * @returns {module:utils/dom/rect~Rect}\n   */\n\n\n  getIntersection(anotherRect) {\n    const rect = {\n      top: Math.max(this.top, anotherRect.top),\n      right: Math.min(this.right, anotherRect.right),\n      bottom: Math.min(this.bottom, anotherRect.bottom),\n      left: Math.max(this.left, anotherRect.left)\n    };\n    rect.width = rect.right - rect.left;\n    rect.height = rect.bottom - rect.top;\n\n    if (rect.width < 0 || rect.height < 0) {\n      return null;\n    } else {\n      return new Rect(rect);\n    }\n  }\n  /**\n   * Returns the area of intersection with another rect.\n   *\n   * @param {module:utils/dom/rect~Rect} anotherRect [description]\n   * @returns {Number} Area of intersection.\n   */\n\n\n  getIntersectionArea(anotherRect) {\n    const rect = this.getIntersection(anotherRect);\n\n    if (rect) {\n      return rect.getArea();\n    } else {\n      return 0;\n    }\n  }\n  /**\n   * Returns the area of the rect.\n   *\n   * @returns {Number}\n   */\n\n\n  getArea() {\n    return this.width * this.height;\n  }\n  /**\n   * Returns a new rect, a part of the original rect, which is actually visible to the user,\n   * e.g. an original rect cropped by parent element rects which have `overflow` set in CSS\n   * other than `\"visible\"`.\n   *\n   * If there's no such visible rect, which is when the rect is limited by one or many of\n   * the ancestors, `null` is returned.\n   *\n   * @returns {module:utils/dom/rect~Rect|null} A visible rect instance or `null`, if there's none.\n   */\n\n\n  getVisible() {\n    const source = this._source;\n    let visibleRect = this.clone(); // There's no ancestor to crop <body> with the overflow.\n\n    if (!isBody(source)) {\n      let parent = source.parentNode || source.commonAncestorContainer; // Check the ancestors all the way up to the <body>.\n\n      while (parent && !isBody(parent)) {\n        const parentRect = new Rect(parent);\n        const intersectionRect = visibleRect.getIntersection(parentRect);\n\n        if (intersectionRect) {\n          if (intersectionRect.getArea() < visibleRect.getArea()) {\n            // Reduce the visible rect to the intersection.\n            visibleRect = intersectionRect;\n          }\n        } else {\n          // There's no intersection, the rect is completely invisible.\n          return null;\n        }\n\n        parent = parent.parentNode;\n      }\n    }\n\n    return visibleRect;\n  }\n  /**\n   * Checks if all property values ({@link #top}, {@link #left}, {@link #right},\n   * {@link #bottom}, {@link #width} and {@link #height}) are the equal in both rect\n   * instances.\n   *\n   * @param {module:utils/dom/rect~Rect} rect A rect instance to compare with.\n   * @returns {Boolean} `true` when Rects are equal. `false` otherwise.\n   */\n\n\n  isEqual(anotherRect) {\n    for (const prop of rectProperties) {\n      if (this[prop] !== anotherRect[prop]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Checks whether a rect fully contains another rect instance.\n   *\n   * @param {module:utils/dom/rect~Rect} anotherRect\n   * @returns {Boolean} `true` if contains, `false` otherwise.\n   */\n\n\n  contains(anotherRect) {\n    const intersectRect = this.getIntersection(anotherRect);\n    return !!(intersectRect && intersectRect.isEqual(anotherRect));\n  }\n  /**\n   * Excludes scrollbars and CSS borders from the rect.\n   *\n   * * Borders are removed when {@link #_source} is an HTML element.\n   * * Scrollbars are excluded from HTML elements and the `window`.\n   *\n   * @returns {module:utils/dom/rect~Rect} A rect which has been updated.\n   */\n\n\n  excludeScrollbarsAndBorders() {\n    const source = this._source;\n    let scrollBarWidth, scrollBarHeight, direction;\n\n    if (isWindow(source)) {\n      scrollBarWidth = source.innerWidth - source.document.documentElement.clientWidth;\n      scrollBarHeight = source.innerHeight - source.document.documentElement.clientHeight;\n      direction = source.getComputedStyle(source.document.documentElement).direction;\n    } else {\n      const borderWidths = getBorderWidths(this._source);\n      scrollBarWidth = source.offsetWidth - source.clientWidth - borderWidths.left - borderWidths.right;\n      scrollBarHeight = source.offsetHeight - source.clientHeight - borderWidths.top - borderWidths.bottom;\n      direction = source.ownerDocument.defaultView.getComputedStyle(source).direction;\n      this.left += borderWidths.left;\n      this.top += borderWidths.top;\n      this.right -= borderWidths.right;\n      this.bottom -= borderWidths.bottom;\n      this.width = this.right - this.left;\n      this.height = this.bottom - this.top;\n    }\n\n    this.width -= scrollBarWidth;\n\n    if (direction === 'ltr') {\n      this.right -= scrollBarWidth;\n    } else {\n      this.left += scrollBarWidth;\n    }\n\n    this.height -= scrollBarHeight;\n    this.bottom -= scrollBarHeight;\n    return this;\n  }\n  /**\n   * Returns an array of rects of the given native DOM Range.\n   *\n   * @param {Range} range A native DOM range.\n   * @returns {Array.<module:utils/dom/rect~Rect>} DOM Range rects.\n   */\n\n\n  static getDomRangeRects(range) {\n    const rects = []; // Safari does not iterate over ClientRectList using for...of loop.\n\n    const clientRects = Array.from(range.getClientRects());\n\n    if (clientRects.length) {\n      for (const rect of clientRects) {\n        rects.push(new Rect(rect));\n      }\n    } // If there's no client rects for the Range, use parent container's bounding rect\n    // instead and adjust rect's width to simulate the actual geometry of such range.\n    // https://github.com/ckeditor/ckeditor5-utils/issues/153\n    // https://github.com/ckeditor/ckeditor5-ui/issues/317\n    else {\n        let startContainer = range.startContainer;\n\n        if (isText(startContainer)) {\n          startContainer = startContainer.parentNode;\n        }\n\n        const rect = new Rect(startContainer.getBoundingClientRect());\n        rect.right = rect.left;\n        rect.width = 0;\n        rects.push(rect);\n      }\n\n    return rects;\n  }\n\n} // Acquires all the rect properties from the passed source.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} rect\n// @param {ClientRect|module:utils/dom/rect~Rect|Object} source\n\nfunction copyRectProperties(rect, source) {\n  for (const p of rectProperties) {\n    rect[p] = source[p];\n  }\n} // Checks if provided object is a <body> HTML element.\n//\n// @private\n// @param {HTMLElement|Range} elementOrRange\n// @returns {Boolean}\n\n\nfunction isBody(elementOrRange) {\n  if (!isElement(elementOrRange)) {\n    return false;\n  }\n\n  return elementOrRange === elementOrRange.ownerDocument.body;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/scroll\n */\nimport isRange from './isrange';\nimport Rect from './rect';\nimport isText from './istext';\nconst utils = {};\n/**\n * Makes any page `HTMLElement` or `Range` (`target`) visible inside the browser viewport.\n * This helper will scroll all `target` ancestors and the web browser viewport to reveal the target to\n * the user. If the `target` is already visible, nothing will happen.\n *\n * @param {HTMLElement|Range} options.target A target, which supposed to become visible to the user.\n * @param {Number} [options.viewportOffset] An offset from the edge of the viewport (in pixels)\n * the `target` will be moved by when the viewport is scrolled. It enhances the user experience\n * by keeping the `target` some distance from the edge of the viewport and thus making it easier to\n * read or edit by the user.\n */\n\nexport function scrollViewportToShowTarget({\n  target,\n  viewportOffset = 0\n}) {\n  const targetWindow = getWindow(target);\n  let currentWindow = targetWindow;\n  let currentFrame = null; // Iterate over all windows, starting from target's parent window up to window#top.\n\n  while (currentWindow) {\n    let firstAncestorToScroll; // Let's scroll target's ancestors first to reveal it. Then, once the ancestor scrolls\n    // settled down, the algorithm can eventually scroll the viewport of the current window.\n    //\n    // Note: If the current window is target's **original** window (e.g. the first one),\n    // start scrolling the closest parent of the target. If not, scroll the closest parent\n    // of an iframe that resides in the current window.\n\n    if (currentWindow == targetWindow) {\n      firstAncestorToScroll = getParentElement(target);\n    } else {\n      firstAncestorToScroll = getParentElement(currentFrame);\n    } // Scroll the target's ancestors first. Once done, scrolling the viewport is easy.\n\n\n    scrollAncestorsToShowRect(firstAncestorToScroll, () => {\n      // Note: If the target does not belong to the current window **directly**,\n      // i.e. it resides in an iframe belonging to the window, obtain the target's rect\n      // in the coordinates of the current window. By default, a Rect returns geometry\n      // relative to the current window's viewport. To make it work in a parent window,\n      // it must be shifted.\n      return getRectRelativeToWindow(target, currentWindow);\n    }); // Obtain the rect of the target after it has been scrolled within its ancestors.\n    // It's time to scroll the viewport.\n\n    const targetRect = getRectRelativeToWindow(target, currentWindow);\n    scrollWindowToShowRect(currentWindow, targetRect, viewportOffset);\n\n    if (currentWindow.parent != currentWindow) {\n      // Keep the reference to the <iframe> element the \"previous current window\" was\n      // rendered within. It will be useful to re–calculate the rect of the target\n      // in the parent window's relative geometry. The target's rect must be shifted\n      // by it's iframe's position.\n      currentFrame = currentWindow.frameElement;\n      currentWindow = currentWindow.parent; // If the current window has some parent but frameElement is inaccessible, then they have\n      // different domains/ports and, due to security reasons, accessing and scrolling\n      // the parent window won't be possible.\n      // See https://github.com/ckeditor/ckeditor5/issues/930.\n\n      if (!currentFrame) {\n        return;\n      }\n    } else {\n      currentWindow = null;\n    }\n  }\n}\n/**\n * Makes any page `HTMLElement` or `Range` (target) visible within its scrollable ancestors,\n * e.g. if they have `overflow: scroll` CSS style.\n *\n * @param {HTMLElement|Range} target A target, which supposed to become visible to the user.\n */\n\nexport function scrollAncestorsToShowTarget(target) {\n  const targetParent = getParentElement(target);\n  scrollAncestorsToShowRect(targetParent, () => {\n    return new Rect(target);\n  });\n} // TODO: Using a property value shorthand in the top of the file\n// causes JSDoc to throw errors. See https://github.com/cksource/docs-builder/issues/75.\n\nObject.assign(utils, {\n  scrollViewportToShowTarget,\n  scrollAncestorsToShowTarget\n}); // Makes a given rect visible within its parent window.\n//\n// Note: Avoid the situation where the caret is still in the viewport, but totally\n// at the edge of it. In such situation, if it moved beyond the viewport in the next\n// action e.g. after paste, the scrolling would move it to the viewportOffset level\n// and it all would look like the caret visually moved up/down:\n//\n// 1.\n//\t\t| foo[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// 2. *paste*\n// 3.\n//\t\t|\n//\t\t|\n//\t\t+-foo-----------------------------...\n//\t\t  bar[]                              <--- caret below viewport, scrolling...\n//\n// 4. *scrolling*\n// 5.\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]                              <--- caret precisely at the edge\n//\t\t+---------------------------------...\n//\n// To prevent this, this method checks the rects moved by the viewportOffset to cover\n// the upper/lower edge of the viewport. It makes sure if the action repeats, there's\n// no twitching – it's a purely visual improvement:\n//\n// 5. (after fix)\n//\t\t|\n//\t\t| foo\n//\t\t| bar[]\n//\t\t|                                    <--- N px of space below the caret\n//\t\t+---------------------------------...\n//\n// @private\n// @param {Window} window A window which is scrolled to reveal the rect.\n// @param {module:utils/dom/rect~Rect} rect A rect which is to be revealed.\n// @param {Number} viewportOffset See scrollViewportToShowTarget.\n\nfunction scrollWindowToShowRect(window, rect, viewportOffset) {\n  const targetShiftedDownRect = rect.clone().moveBy(0, viewportOffset);\n  const targetShiftedUpRect = rect.clone().moveBy(0, -viewportOffset);\n  const viewportRect = new Rect(window).excludeScrollbarsAndBorders();\n  const rects = [targetShiftedUpRect, targetShiftedDownRect];\n\n  if (!rects.every(rect => viewportRect.contains(rect))) {\n    let {\n      scrollX,\n      scrollY\n    } = window;\n\n    if (isAbove(targetShiftedUpRect, viewportRect)) {\n      scrollY -= viewportRect.top - rect.top + viewportOffset;\n    } else if (isBelow(targetShiftedDownRect, viewportRect)) {\n      scrollY += rect.bottom - viewportRect.bottom + viewportOffset;\n    } // TODO: Web browsers scroll natively to place the target in the middle\n    // of the viewport. It's not a very popular case, though.\n\n\n    if (isLeftOf(rect, viewportRect)) {\n      scrollX -= viewportRect.left - rect.left + viewportOffset;\n    } else if (isRightOf(rect, viewportRect)) {\n      scrollX += rect.right - viewportRect.right + viewportOffset;\n    }\n\n    window.scrollTo(scrollX, scrollY);\n  }\n} // Recursively scrolls element ancestors to visually reveal a rect.\n//\n// @private\n// @param {HTMLElement} A parent The first ancestors to start scrolling.\n// @param {Function} getRect A function which returns the Rect, which is to be revealed.\n\n\nfunction scrollAncestorsToShowRect(parent, getRect) {\n  const parentWindow = getWindow(parent);\n  let parentRect, targetRect;\n\n  while (parent != parentWindow.document.body) {\n    targetRect = getRect();\n    parentRect = new Rect(parent).excludeScrollbarsAndBorders();\n\n    if (!parentRect.contains(targetRect)) {\n      if (isAbove(targetRect, parentRect)) {\n        parent.scrollTop -= parentRect.top - targetRect.top;\n      } else if (isBelow(targetRect, parentRect)) {\n        parent.scrollTop += targetRect.bottom - parentRect.bottom;\n      }\n\n      if (isLeftOf(targetRect, parentRect)) {\n        parent.scrollLeft -= parentRect.left - targetRect.left;\n      } else if (isRightOf(targetRect, parentRect)) {\n        parent.scrollLeft += targetRect.right - parentRect.right;\n      }\n    }\n\n    parent = parent.parentNode;\n  }\n} // Determines if a given `Rect` extends beyond the bottom edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\n\n\nfunction isBelow(firstRect, secondRect) {\n  return firstRect.bottom > secondRect.bottom;\n} // Determines if a given `Rect` extends beyond the top edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\n\n\nfunction isAbove(firstRect, secondRect) {\n  return firstRect.top < secondRect.top;\n} // Determines if a given `Rect` extends beyond the left edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\n\n\nfunction isLeftOf(firstRect, secondRect) {\n  return firstRect.left < secondRect.left;\n} // Determines if a given `Rect` extends beyond the right edge of the second `Rect`.\n//\n// @private\n// @param {module:utils/dom/rect~Rect} firstRect\n// @param {module:utils/dom/rect~Rect} secondRect\n\n\nfunction isRightOf(firstRect, secondRect) {\n  return firstRect.right > secondRect.right;\n} // Returns the closest window of an element or range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {Window}\n\n\nfunction getWindow(elementOrRange) {\n  if (isRange(elementOrRange)) {\n    return elementOrRange.startContainer.ownerDocument.defaultView;\n  } else {\n    return elementOrRange.ownerDocument.defaultView;\n  }\n} // Returns the closest parent of an element or DOM range.\n//\n// @private\n// @param {HTMLElement|Range} firstRect\n// @returns {HTMLelement}\n\n\nfunction getParentElement(elementOrRange) {\n  if (isRange(elementOrRange)) {\n    let parent = elementOrRange.commonAncestorContainer; // If a Range is attached to the Text, use the closest element ancestor.\n\n    if (isText(parent)) {\n      parent = parent.parentNode;\n    }\n\n    return parent;\n  } else {\n    return elementOrRange.parentNode;\n  }\n} // Returns the rect of an element or range residing in an iframe.\n// The result rect is relative to the geometry of the passed window instance.\n//\n// @private\n// @param {HTMLElement|Range} target Element or range which rect should be returned.\n// @param {Window} relativeWindow A window the rect should be relative to.\n// @returns {module:utils/dom/rect~Rect}\n\n\nfunction getRectRelativeToWindow(target, relativeWindow) {\n  const targetWindow = getWindow(target);\n  const rect = new Rect(target);\n\n  if (targetWindow === relativeWindow) {\n    return rect;\n  } else {\n    let currentWindow = targetWindow;\n\n    while (currentWindow != relativeWindow) {\n      const frame = currentWindow.frameElement;\n      const frameRect = new Rect(frame).excludeScrollbarsAndBorders();\n      rect.moveBy(frameRect.left, frameRect.top);\n      currentWindow = currentWindow.parent;\n    }\n  }\n\n  return rect;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/view\n */\nimport Document from './document';\nimport DowncastWriter from './downcastwriter';\nimport Renderer from './renderer';\nimport DomConverter from './domconverter';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\nimport MutationObserver from './observer/mutationobserver';\nimport KeyObserver from './observer/keyobserver';\nimport FakeSelectionObserver from './observer/fakeselectionobserver';\nimport SelectionObserver from './observer/selectionobserver';\nimport FocusObserver from './observer/focusobserver';\nimport CompositionObserver from './observer/compositionobserver';\nimport InputObserver from './observer/inputobserver';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { scrollViewportToShowTarget } from '@ckeditor/ckeditor5-utils/src/dom/scroll';\nimport { injectUiElementHandling } from './uielement';\nimport { injectQuirksHandling } from './filler';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Editor's view controller class. Its main responsibility is DOM - View management for editing purposes, to provide\n * abstraction over the DOM structure and events and hide all browsers quirks.\n *\n * View controller renders view document to DOM whenever view structure changes. To determine when view can be rendered,\n * all changes need to be done using the {@link module:engine/view/view~View#change} method, using\n * {@link module:engine/view/downcastwriter~DowncastWriter}:\n *\n *\t\tview.change( writer => {\n *\t\t\twriter.insert( position, writer.createText( 'foo' ) );\n *\t\t} );\n *\n * View controller also register {@link module:engine/view/observer/observer~Observer observers} which observes changes\n * on DOM and fire events on the {@link module:engine/view/document~Document Document}.\n * Note that the following observers are added by the class constructor and are always available:\n *\n * * {@link module:engine/view/observer/mutationobserver~MutationObserver},\n * * {@link module:engine/view/observer/selectionobserver~SelectionObserver},\n * * {@link module:engine/view/observer/focusobserver~FocusObserver},\n * * {@link module:engine/view/observer/keyobserver~KeyObserver},\n * * {@link module:engine/view/observer/fakeselectionobserver~FakeSelectionObserver}.\n * * {@link module:engine/view/observer/compositionobserver~CompositionObserver}.\n *\n * This class also {@link module:engine/view/view~View#attachDomRoot binds the DOM and the view elements}.\n *\n * If you do not need full a DOM - view management, and only want to transform a tree of view elements to a tree of DOM\n * elements you do not need this controller. You can use the {@link module:engine/view/domconverter~DomConverter DomConverter} instead.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class View {\n  constructor() {\n    /**\n     * Instance of the {@link module:engine/view/document~Document} associated with this view controller.\n     *\n     * @readonly\n     * @type {module:engine/view/document~Document}\n     */\n    this.document = new Document();\n    /**\n     * Instance of the {@link module:engine/view/domconverter~DomConverter domConverter} used by\n     * {@link module:engine/view/view~View#_renderer renderer}\n     * and {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @readonly\n     * @type {module:engine/view/domconverter~DomConverter}\n     */\n\n    this.domConverter = new DomConverter();\n    /**\n     * Roots of the DOM tree. Map on the `HTMLElement`s with roots names as keys.\n     *\n     * @readonly\n     * @type {Map.<String, HTMLElement>}\n     */\n\n    this.domRoots = new Map();\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @readonly\n     * @member {Boolean} #isRenderingInProgress\n     */\n\n    this.set('isRenderingInProgress', false);\n    /**\n     * Instance of the {@link module:engine/view/renderer~Renderer renderer}.\n     *\n     * @protected\n     * @type {module:engine/view/renderer~Renderer}\n     */\n\n    this._renderer = new Renderer(this.domConverter, this.document.selection);\n\n    this._renderer.bind('isFocused').to(this.document);\n    /**\n     * A DOM root attributes cache. It saves the initial values of DOM root attributes before the DOM element\n     * is {@link module:engine/view/view~View#attachDomRoot attached} to the view so later on, when\n     * the view is destroyed ({@link module:engine/view/view~View#detachDomRoot}), they can be easily restored.\n     * This way, the DOM element can go back to the (clean) state as if the editing view never used it.\n     *\n     * @private\n     * @member {WeakMap.<HTMLElement,Object>}\n     */\n\n\n    this._initialDomRootAttributes = new WeakMap();\n    /**\n     * Map of registered {@link module:engine/view/observer/observer~Observer observers}.\n     *\n     * @private\n     * @type {Map.<Function, module:engine/view/observer/observer~Observer>}\n     */\n\n    this._observers = new Map();\n    /**\n     * Is set to `true` when {@link #change view changes} are currently in progress.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._ongoingChange = false;\n    /**\n     * Used to prevent calling {@link #forceRender} and {@link #change} during rendering view to the DOM.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._postFixersInProgress = false;\n    /**\n     * Internal flag to temporary disable rendering. See the usage in the {@link #_disableRendering}.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._renderingDisabled = false;\n    /**\n     * Internal flag that disables rendering when there are no changes since the last rendering.\n     * It stores information about changed selection and changed elements from attached document roots.\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._hasChangedSinceTheLastRendering = false;\n    /**\n     * DowncastWriter instance used in {@link #change change method} callbacks.\n     *\n     * @private\n     * @type {module:engine/view/downcastwriter~DowncastWriter}\n     */\n\n    this._writer = new DowncastWriter(this.document); // Add default observers.\n\n    this.addObserver(MutationObserver);\n    this.addObserver(SelectionObserver);\n    this.addObserver(FocusObserver);\n    this.addObserver(KeyObserver);\n    this.addObserver(FakeSelectionObserver);\n    this.addObserver(CompositionObserver);\n\n    if (env.isAndroid) {\n      this.addObserver(InputObserver);\n    } // Inject quirks handlers.\n\n\n    injectQuirksHandling(this);\n    injectUiElementHandling(this); // Use 'normal' priority so that rendering is performed as first when using that priority.\n\n    this.on('render', () => {\n      this._render(); // Informs that layout has changed after render.\n\n\n      this.document.fire('layoutChanged'); // Reset the `_hasChangedSinceTheLastRendering` flag after rendering.\n\n      this._hasChangedSinceTheLastRendering = false;\n    }); // Listen to the document selection changes directly.\n\n    this.listenTo(this.document.selection, 'change', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n  }\n  /**\n   * Attaches a DOM root element to the view element and enable all observers on that element.\n   * Also {@link module:engine/view/renderer~Renderer#markToSync mark element} to be synchronized\n   * with the view what means that all child nodes will be removed and replaced with content of the view root.\n   *\n   * This method also will change view element name as the same as tag name of given dom root.\n   * Name is always transformed to lower case.\n   *\n   * **Note:** Use {@link #detachDomRoot `detachDomRoot()`} to revert this action.\n   *\n   * @param {Element} domRoot DOM root element.\n   * @param {String} [name='main'] Name of the root.\n   */\n\n\n  attachDomRoot(domRoot, name = 'main') {\n    const viewRoot = this.document.getRoot(name); // Set view root name the same as DOM root tag name.\n\n    viewRoot._name = domRoot.tagName.toLowerCase();\n    const initialDomRootAttributes = {}; // 1. Copy and cache the attributes to remember the state of the element before attaching.\n    //    The cached attributes will be restored in detachDomRoot() so the element goes to the\n    //    clean state as if the editing view never used it.\n    // 2. Apply the attributes using the view writer, so they all go under the control of the engine.\n    //    The editing view takes over the attribute management completely because various\n    //    features (e.g. addPlaceholder()) require dynamic changes of those attributes and they\n    //    cannot be managed by the engine and the UI library at the same time.\n\n    for (const {\n      name,\n      value\n    } of Array.from(domRoot.attributes)) {\n      initialDomRootAttributes[name] = value; // Do not use writer.setAttribute() for the class attribute. The EditableUIView class\n      // and its descendants could have already set some using the writer.addClass() on the view\n      // document root. They haven't been rendered yet so they are not present in the DOM root.\n      // Using writer.setAttribute( 'class', ... ) would override them completely.\n\n      if (name === 'class') {\n        this._writer.addClass(value.split(' '), viewRoot);\n      } else {\n        this._writer.setAttribute(name, value, viewRoot);\n      }\n    }\n\n    this._initialDomRootAttributes.set(domRoot, initialDomRootAttributes);\n\n    const updateContenteditableAttribute = () => {\n      this._writer.setAttribute('contenteditable', !viewRoot.isReadOnly, viewRoot);\n\n      if (viewRoot.isReadOnly) {\n        this._writer.addClass('ck-read-only', viewRoot);\n      } else {\n        this._writer.removeClass('ck-read-only', viewRoot);\n      }\n    }; // Set initial value.\n\n\n    updateContenteditableAttribute();\n    this.domRoots.set(name, domRoot);\n    this.domConverter.bindElements(domRoot, viewRoot);\n\n    this._renderer.markToSync('children', viewRoot);\n\n    this._renderer.markToSync('attributes', viewRoot);\n\n    this._renderer.domDocuments.add(domRoot.ownerDocument);\n\n    viewRoot.on('change:children', (evt, node) => this._renderer.markToSync('children', node));\n    viewRoot.on('change:attributes', (evt, node) => this._renderer.markToSync('attributes', node));\n    viewRoot.on('change:text', (evt, node) => this._renderer.markToSync('text', node));\n    viewRoot.on('change:isReadOnly', () => this.change(updateContenteditableAttribute));\n    viewRoot.on('change', () => {\n      this._hasChangedSinceTheLastRendering = true;\n    });\n\n    for (const observer of this._observers.values()) {\n      observer.observe(domRoot, name);\n    }\n  }\n  /**\n   * Detaches a DOM root element from the view element and restores its attributes to the state before\n   * {@link #attachDomRoot `attachDomRoot()`}.\n   *\n   * @param {String} name Name of the root to detach.\n   */\n\n\n  detachDomRoot(name) {\n    const domRoot = this.domRoots.get(name); // Remove all root attributes so the DOM element is \"bare\".\n\n    Array.from(domRoot.attributes).forEach(({\n      name\n    }) => domRoot.removeAttribute(name));\n\n    const initialDomRootAttributes = this._initialDomRootAttributes.get(domRoot); // Revert all view root attributes back to the state before attachDomRoot was called.\n\n\n    for (const attribute in initialDomRootAttributes) {\n      domRoot.setAttribute(attribute, initialDomRootAttributes[attribute]);\n    }\n\n    this.domRoots.delete(name);\n    this.domConverter.unbindDomElement(domRoot);\n  }\n  /**\n   * Gets DOM root element.\n   *\n   * @param {String} [name='main']  Name of the root.\n   * @returns {Element} DOM root element instance.\n   */\n\n\n  getDomRoot(name = 'main') {\n    return this.domRoots.get(name);\n  }\n  /**\n   * Creates observer of the given type if not yet created, {@link module:engine/view/observer/observer~Observer#enable enables} it\n   * and {@link module:engine/view/observer/observer~Observer#observe attaches} to all existing and future\n   * {@link #domRoots DOM roots}.\n   *\n   * Note: Observers are recognized by their constructor (classes). A single observer will be instantiated and used only\n   * when registered for the first time. This means that features and other components can register a single observer\n   * multiple times without caring whether it has been already added or not.\n   *\n   * @param {Function} Observer The constructor of an observer to add.\n   * Should create an instance inheriting from {@link module:engine/view/observer/observer~Observer}.\n   * @returns {module:engine/view/observer/observer~Observer} Added observer instance.\n   */\n\n\n  addObserver(Observer) {\n    let observer = this._observers.get(Observer);\n\n    if (observer) {\n      return observer;\n    }\n\n    observer = new Observer(this);\n\n    this._observers.set(Observer, observer);\n\n    for (const [name, domElement] of this.domRoots) {\n      observer.observe(domElement, name);\n    }\n\n    observer.enable();\n    return observer;\n  }\n  /**\n   * Returns observer of the given type or `undefined` if such observer has not been added yet.\n   *\n   * @param {Function} Observer The constructor of an observer to get.\n   * @returns {module:engine/view/observer/observer~Observer|undefined} Observer instance or undefined.\n   */\n\n\n  getObserver(Observer) {\n    return this._observers.get(Observer);\n  }\n  /**\n   * Disables all added observers.\n   */\n\n\n  disableObservers() {\n    for (const observer of this._observers.values()) {\n      observer.disable();\n    }\n  }\n  /**\n   * Enables all added observers.\n   */\n\n\n  enableObservers() {\n    for (const observer of this._observers.values()) {\n      observer.enable();\n    }\n  }\n  /**\n   * Scrolls the page viewport and {@link #domRoots} with their ancestors to reveal the\n   * caret, if not already visible to the user.\n   */\n\n\n  scrollToTheSelection() {\n    const range = this.document.selection.getFirstRange();\n\n    if (range) {\n      scrollViewportToShowTarget({\n        target: this.domConverter.viewRangeToDom(range),\n        viewportOffset: 20\n      });\n    }\n  }\n  /**\n   * It will focus DOM element representing {@link module:engine/view/editableelement~EditableElement EditableElement}\n   * that is currently having selection inside.\n   */\n\n\n  focus() {\n    if (!this.document.isFocused) {\n      const editable = this.document.selection.editableElement;\n\n      if (editable) {\n        this.domConverter.focus(editable);\n        this.forceRender();\n      } else {// Before focusing view document, selection should be placed inside one of the view's editables.\n        // Normally its selection will be converted from model document (which have default selection), but\n        // when using view document on its own, we need to manually place selection before focusing it.\n        //\n        // @if CK_DEBUG // console.warn( 'There is no selection in any editable to focus.' );\n      }\n    }\n  }\n  /**\n   * The `change()` method is the primary way of changing the view. You should use it to modify any node in the view tree.\n   * It makes sure that after all changes are made the view is rendered to the DOM (assuming that the view will be changed\n   * inside the callback). It prevents situations when the DOM is updated when the view state is not yet correct. It allows\n   * to nest calls one inside another and still performs a single rendering after all those changes are made.\n   * It also returns the return value of its callback.\n   *\n   *\t\tconst text = view.change( writer => {\n   *\t\t\tconst newText = writer.createText( 'foo' );\n   *\t\t\twriter.insert( position1, newText );\n   *\n   *\t\t\tview.change( writer => {\n   *\t\t\t\twriter.insert( position2, writer.createText( 'bar' ) );\n   *\t\t\t} );\n   *\n   * \t\t\twriter.remove( range );\n   *\n   * \t\t\treturn newText;\n   *\t\t} );\n   *\n   * When the outermost change block is done and rendering to the DOM is over the\n   * {@link module:engine/view/view~View#event:render `View#render`} event is fired.\n   *\n   * This method throws a `applying-view-changes-on-rendering` error when\n   * the change block is used after rendering to the DOM has started.\n   *\n   * @param {Function} callback Callback function which may modify the view.\n   * @returns {*} Value returned by the callback.\n   */\n\n\n  change(callback) {\n    if (this.isRenderingInProgress || this._postFixersInProgress) {\n      /**\n       * Thrown when there is an attempt to make changes to the view tree when it is in incorrect state. This may\n       * cause some unexpected behaviour and inconsistency between the DOM and the view.\n       * This may be caused by:\n       *\n       * * calling {@link #change} or {@link #forceRender} during rendering process,\n       * * calling {@link #change} or {@link #forceRender} inside of\n       *   {@link module:engine/view/document~Document#registerPostFixer post-fixer function}.\n       *\n       * @error cannot-change-view-tree\n       */\n      throw new CKEditorError('cannot-change-view-tree: ' + 'Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. ' + 'This may cause some unexpected behavior and inconsistency between the DOM and the view.', this);\n    }\n\n    try {\n      // Recursive call to view.change() method - execute listener immediately.\n      if (this._ongoingChange) {\n        return callback(this._writer);\n      } // This lock will assure that all recursive calls to view.change() will end up in same block - one \"render\"\n      // event for all nested calls.\n\n\n      this._ongoingChange = true;\n      const callbackResult = callback(this._writer);\n      this._ongoingChange = false; // This lock is used by editing controller to render changes from outer most model.change() once. As plugins might call\n      // view.change() inside model.change() block - this will ensures that postfixers and rendering are called once after all\n      // changes. Also, we don't need to render anything if there're no changes since last rendering.\n\n      if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {\n        this._postFixersInProgress = true;\n\n        this.document._callPostFixers(this._writer);\n\n        this._postFixersInProgress = false;\n        this.fire('render');\n      }\n\n      return callbackResult;\n    } catch (err) {\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  }\n  /**\n   * Forces rendering {@link module:engine/view/document~Document view document} to DOM. If any view changes are\n   * currently in progress, rendering will start after all {@link #change change blocks} are processed.\n   *\n   * Note that this method is dedicated for special cases. All view changes should be wrapped in the {@link #change}\n   * block and the view will automatically check whether it needs to render DOM or not.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `applying-view-changes-on-rendering` when\n   * trying to re-render when rendering to DOM has already started.\n   */\n\n\n  forceRender() {\n    this._hasChangedSinceTheLastRendering = true;\n    this.change(() => {});\n  }\n  /**\n   * Destroys this instance. Makes sure that all observers are destroyed and listeners removed.\n   */\n\n\n  destroy() {\n    for (const observer of this._observers.values()) {\n      observer.destroy();\n    }\n\n    this.document.destroy();\n    this.stopListening();\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link #createPositionBefore},\n   * * {@link #createPositionAfter},\n   *\n   * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  createPositionAt(itemOrPosition, offset) {\n    return Position._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionAfter(item) {\n    return Position._createAfter(item);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionBefore(item) {\n    return Position._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRange(start, end) {\n    return new Range(start, end);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeOn(item) {\n    return Range._createOn(item);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeIn(element) {\n    return Range._createIn(element);\n  }\n  /**\n   Creates new {@link module:engine/view/selection~Selection} instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = view.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = view.createRange( start, end );\n   *\t\tconst selection = view.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ view.createRange( start1, end2 ), view.createRange( star2, end2 ) ];\n   *\t\tconst selection = view.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = view.createSelection();\n   *\t\tconst selection = view.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = view.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = view.createPositionFromPath( root, path );\n   *\t\tconst selection = view.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = view.createContainerElement( 'paragraph' );\n   *\t\tconst selection = view.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = view.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = view.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s factory method allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = view.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = view.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   * @returns {module:engine/view/selection~Selection}\n   */\n\n\n  createSelection(selectable, placeOrOffset, options) {\n    return new Selection(selectable, placeOrOffset, options);\n  }\n  /**\n   * Disables or enables rendering. If the flag is set to `true` then the rendering will be disabled.\n   * If the flag is set to `false` and if there was some change in the meantime, then the rendering action will be performed.\n   *\n   * @protected\n   * @param {Boolean} flag A flag indicates whether the rendering should be disabled.\n   */\n\n\n  _disableRendering(flag) {\n    this._renderingDisabled = flag;\n\n    if (flag == false) {\n      // Render when you stop blocking rendering.\n      this.change(() => {});\n    }\n  }\n  /**\n   * Renders all changes. In order to avoid triggering the observers (e.g. mutations) all observers are disabled\n   * before rendering and re-enabled after that.\n   *\n   * @private\n   */\n\n\n  _render() {\n    this.isRenderingInProgress = true;\n    this.disableObservers();\n\n    this._renderer.render();\n\n    this.enableObservers();\n    this.isRenderingInProgress = false;\n  }\n  /**\n   * Fired after a topmost {@link module:engine/view/view~View#change change block} and all\n   * {@link module:engine/view/document~Document#registerPostFixer post-fixers} are executed.\n   *\n   * Actual rendering is performed as a first listener on 'normal' priority.\n   *\n   *\t\tview.on( 'render', () => {\n   *\t\t\t// Rendering to the DOM is complete.\n   *\t\t} );\n   *\n   * This event is useful when you want to update interface elements after the rendering, e.g. position of the\n   * balloon panel. If you wants to change view structure use\n   * {@link module:engine/view/document~Document#registerPostFixer post-fixers}.\n   *\n   * @event module:engine/view/view~View#event:render\n   */\n\n\n}\nmix(View, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/tomap\n */\nimport objectToMap from './objecttomap';\nimport { isPlainObject } from 'lodash-es';\n/**\n * Transforms object or iterable to map. Iterable needs to be in the format acceptable by the `Map` constructor.\n *\n *\t\tmap = toMap( { 'foo': 1, 'bar': 2 } );\n *\t\tmap = toMap( [ [ 'foo', 1 ], [ 'bar', 2 ] ] );\n *\t\tmap = toMap( anotherMap );\n *\n * @param {Object|Iterable} data Object or iterable to transform.\n * @returns {Map} Map created from data.\n */\n\nexport default function toMap(data) {\n  if (isPlainObject(data)) {\n    return objectToMap(data);\n  } else {\n    return new Map(data);\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/node\n */\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays'; // To check if component is loaded more than once.\n\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Model node. Most basic structure of model tree.\n *\n * This is an abstract class that is a base for other classes representing different nodes in model.\n *\n * **Note:** If a node is detached from the model tree, you can manipulate it using it's API.\n * However, it is **very important** that nodes already attached to model tree should be only changed through\n * {@link module:engine/model/writer~Writer Writer API}.\n *\n * Changes done by `Node` methods, like {@link module:engine/model/element~Element#_insertChild _insertChild} or\n * {@link module:engine/model/node~Node#_setAttribute _setAttribute}\n * do not generate {@link module:engine/model/operation/operation~Operation operations}\n * which are essential for correct editor work if you modify nodes in {@link module:engine/model/document~Document document} root.\n *\n * The flow of working on `Node` (and classes that inherits from it) is as such:\n * 1. You can create a `Node` instance, modify it using it's API.\n * 2. Add `Node` to the model using `Batch` API.\n * 3. Change `Node` that was already added to the model using `Batch` API.\n *\n * Similarly, you cannot use `Batch` API on a node that has not been added to the model tree, with the exception\n * of {@link module:engine/model/writer~Writer#insert inserting} that node to the model tree.\n *\n * Be aware that using {@link module:engine/model/writer~Writer#remove remove from Batch API} does not allow to use `Node` API because\n * the information about `Node` is still kept in model document.\n *\n * In case of {@link module:engine/model/element~Element element node}, adding and removing children also counts as changing a node and\n * follows same rules.\n */\n\nexport default class Node {\n  /**\n   * Creates a model node.\n   *\n   * This is an abstract class, so this constructor should not be used directly.\n   *\n   * @abstract\n   * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n  constructor(attrs) {\n    /**\n     * Parent of this node. It could be {@link module:engine/model/element~Element}\n     * or {@link module:engine/model/documentfragment~DocumentFragment}.\n     * Equals to `null` if the node has no parent.\n     *\n     * @readonly\n     * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n     */\n    this.parent = null;\n    /**\n     * Attributes set on this node.\n     *\n     * @private\n     * @member {Map} module:engine/model/node~Node#_attrs\n     */\n\n    this._attrs = toMap(attrs);\n  }\n  /**\n   * Index of this node in it's parent or `null` if the node has no parent.\n   *\n   * Accessing this property throws an error if this node's parent element does not contain it.\n   * This means that model tree got broken.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n\n\n  get index() {\n    let pos;\n\n    if (!this.parent) {\n      return null;\n    }\n\n    if ((pos = this.parent.getChildIndex(this)) === null) {\n      throw new CKEditorError('model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this);\n    }\n\n    return pos;\n  }\n  /**\n   * Offset at which this node starts in it's parent. It is equal to the sum of {@link #offsetSize offsetSize}\n   * of all it's previous siblings. Equals to `null` if node has no parent.\n   *\n   * Accessing this property throws an error if this node's parent element does not contain it.\n   * This means that model tree got broken.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n\n\n  get startOffset() {\n    let pos;\n\n    if (!this.parent) {\n      return null;\n    }\n\n    if ((pos = this.parent.getChildStartOffset(this)) === null) {\n      throw new CKEditorError('model-node-not-found-in-parent: The node\\'s parent does not contain this node.', this);\n    }\n\n    return pos;\n  }\n  /**\n   * Offset size of this node. Represents how much \"offset space\" is occupied by the node in it's parent.\n   * It is important for {@link module:engine/model/position~Position position}. When node has `offsetSize` greater than `1`, position\n   * can be placed between that node start and end. `offsetSize` greater than `1` is for nodes that represents more\n   * than one entity, i.e. {@link module:engine/model/text~Text text node}.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get offsetSize() {\n    return 1;\n  }\n  /**\n   * Offset at which this node ends in it's parent. It is equal to the sum of this node's\n   * {@link module:engine/model/node~Node#startOffset start offset} and {@link #offsetSize offset size}.\n   * Equals to `null` if the node has no parent.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n\n\n  get endOffset() {\n    if (!this.parent) {\n      return null;\n    }\n\n    return this.startOffset + this.offsetSize;\n  }\n  /**\n   * Node's next sibling or `null` if the node is a last child of it's parent or if the node has no parent.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|null}\n   */\n\n\n  get nextSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index + 1) || null;\n  }\n  /**\n   * Node's previous sibling or `null` if the node is a first child of it's parent or if the node has no parent.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|null}\n   */\n\n\n  get previousSibling() {\n    const index = this.index;\n    return index !== null && this.parent.getChild(index - 1) || null;\n  }\n  /**\n   * The top-most ancestor of the node. If node has no parent it is the root itself. If the node is a part\n   * of {@link module:engine/model/documentfragment~DocumentFragment}, it's `root` is equal to that `DocumentFragment`.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    let root = this; // eslint-disable-line consistent-this\n\n    while (root.parent) {\n      root = root.parent;\n    }\n\n    return root;\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns this node or `null` if the node has no parent or is inside\n   * a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n\n\n  get document() {\n    // This is a top element of a sub-tree.\n    if (this.root == this) {\n      return null;\n    } // Root may be `DocumentFragment` which does not have document property.\n\n\n    return this.root.document || null;\n  }\n  /**\n   * Gets path to the node. The path is an array containing starting offsets of consecutive ancestors of this node,\n   * beginning from {@link module:engine/model/node~Node#root root}, down to this node's starting offset. The path can be used to\n   * create {@link module:engine/model/position~Position Position} instance.\n   *\n   *\t\tconst abc = new Text( 'abc' );\n   *\t\tconst foo = new Text( 'foo' );\n   *\t\tconst h1 = new Element( 'h1', null, new Text( 'header' ) );\n   *\t\tconst p = new Element( 'p', null, [ abc, foo ] );\n   *\t\tconst div = new Element( 'div', null, [ h1, p ] );\n   *\t\tfoo.getPath(); // Returns [ 1, 3 ]. `foo` is in `p` which is in `div`. `p` starts at offset 1, while `foo` at 3.\n   *\t\th1.getPath(); // Returns [ 0 ].\n   *\t\tdiv.getPath(); // Returns [].\n   *\n   * @returns {Array.<Number>} The path.\n   */\n\n\n  getPath() {\n    const path = [];\n    let node = this; // eslint-disable-line consistent-this\n\n    while (node.parent) {\n      path.unshift(node.startOffset);\n      node = node.parent;\n    }\n\n    return path;\n  }\n  /**\n   * Returns ancestors array of this node.\n   *\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` this node will be also included in parent's array.\n   * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from node's parent to root element,\n   * otherwise root element will be the first item in the array.\n   * @returns {Array} Array with ancestors.\n   */\n\n\n  getAncestors(options = {\n    includeSelf: false,\n    parentFirst: false\n  }) {\n    const ancestors = [];\n    let parent = options.includeSelf ? this : this.parent;\n\n    while (parent) {\n      ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n      parent = parent.parent;\n    }\n\n    return ancestors;\n  }\n  /**\n   * Returns a {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n   * which is a common ancestor of both nodes.\n   *\n   * @param {module:engine/model/node~Node} node The second node.\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` both nodes will be considered \"ancestors\" too.\n   * Which means that if e.g. node A is inside B, then their common ancestor will be B.\n   * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor(node, options = {}) {\n    const ancestorsA = this.getAncestors(options);\n    const ancestorsB = node.getAncestors(options);\n    let i = 0;\n\n    while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n      i++;\n    }\n\n    return i === 0 ? null : ancestorsA[i - 1];\n  }\n  /**\n   * Returns whether this node is before given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/model/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n\n\n  isBefore(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    } // Return `false` if it is impossible to compare nodes.\n\n\n    if (this.root !== node.root) {\n      return false;\n    }\n\n    const thisPath = this.getPath();\n    const nodePath = node.getPath();\n    const result = compareArrays(thisPath, nodePath);\n\n    switch (result) {\n      case 'prefix':\n        return true;\n\n      case 'extension':\n        return false;\n\n      default:\n        return thisPath[result] < nodePath[result];\n    }\n  }\n  /**\n   * Returns whether this node is after given node. `false` is returned if nodes are in different trees (for example,\n   * in different {@link module:engine/model/documentfragment~DocumentFragment}s).\n   *\n   * @param {module:engine/model/node~Node} node Node to compare with.\n   * @returns {Boolean}\n   */\n\n\n  isAfter(node) {\n    // Given node is not before this node if they are same.\n    if (this == node) {\n      return false;\n    } // Return `false` if it is impossible to compare nodes.\n\n\n    if (this.root !== node.root) {\n      return false;\n    } // In other cases, just check if the `node` is before, and return the opposite.\n\n\n    return !this.isBefore(node);\n  }\n  /**\n   * Checks if the node has an attribute with given key.\n   *\n   * @param {String} key Key of attribute to check.\n   * @returns {Boolean} `true` if attribute with given key is set on node, `false` otherwise.\n   */\n\n\n  hasAttribute(key) {\n    return this._attrs.has(key);\n  }\n  /**\n   * Gets an attribute value for given key or `undefined` if that attribute is not set on node.\n   *\n   * @param {String} key Key of attribute to look for.\n   * @returns {*} Attribute value or `undefined`.\n   */\n\n\n  getAttribute(key) {\n    return this._attrs.get(key);\n  }\n  /**\n   * Returns iterator that iterates over this node's attributes.\n   *\n   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  getAttributes() {\n    return this._attrs.entries();\n  }\n  /**\n   * Returns iterator that iterates over this node's attribute keys.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getAttributeKeys() {\n    return this._attrs.keys();\n  }\n  /**\n   * Converts `Node` to plain object and returns it.\n   *\n   * @returns {Object} `Node` converted to plain object.\n   */\n\n\n  toJSON() {\n    const json = {}; // Serializes attributes to the object.\n    // attributes = { a: 'foo', b: 1, c: true }.\n\n    if (this._attrs.size) {\n      json.attributes = Array.from(this._attrs).reduce((result, attr) => {\n        result[attr[0]] = attr[1];\n        return result;\n      }, {});\n    }\n\n    return json;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   * This method is useful when processing model objects that are of unknown type. For example, a function\n   * may return a {@link module:engine/model/documentfragment~DocumentFragment} or a {@link module:engine/model/node~Node}\n   * that can be either a text node or an element. This method can be used to check what kind of object is returned.\n   *\n   *\t\tsomeObject.is( 'element' ); // -> true if this is an element\n   *\t\tsomeObject.is( 'node' ); // -> true if this is a node (a text node or an element)\n   *\t\tsomeObject.is( 'documentFragment' ); // -> true if this is a document fragment\n   *\n   * Since this method is also available on a range of view objects, you can prefix the type of the object with\n   * `model:` or `view:` to check, for example, if this is the model's or view's element:\n   *\n   *\t\tmodelElement.is( 'model:element' ); // -> true\n   *\t\tmodelElement.is( 'view:element' ); // -> false\n   *\n   * By using this method it is also possible to check a name of an element:\n   *\n   *\t\timageElement.is( 'image' ); // -> true\n   *\t\timageElement.is( 'element', 'image' ); // -> same as above\n   *\t\timageElement.is( 'model:element', 'image' ); // -> same as above, but more precise\n   *\n   * The list of model objects which implement the `is()` method:\n   *\n   * * {@link module:engine/model/node~Node#is `Node#is()`}\n   * * {@link module:engine/model/text~Text#is `Text#is()`}\n   * * {@link module:engine/model/element~Element#is `Element#is()`}\n   * * {@link module:engine/model/rootelement~RootElement#is `RootElement#is()`}\n   * * {@link module:engine/model/position~Position#is `Position#is()`}\n   * * {@link module:engine/model/liveposition~LivePosition#is `LivePosition#is()`}\n   * * {@link module:engine/model/range~Range#is `Range#is()`}\n   * * {@link module:engine/model/liverange~LiveRange#is `LiveRange#is()`}\n   * * {@link module:engine/model/documentfragment~DocumentFragment#is `DocumentFragment#is()`}\n   * * {@link module:engine/model/selection~Selection#is `Selection#is()`}\n   * * {@link module:engine/model/documentselection~DocumentSelection#is `DocumentSelection#is()`}\n   * * {@link module:engine/model/markercollection~Marker#is `Marker#is()`}\n   * * {@link module:engine/model/textproxy~TextProxy#is `TextProxy#is()`}\n   *\n   * @method #is\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'node' || type == 'model:node';\n  }\n  /**\n   * Creates a copy of this node, that is a node with exactly same attributes, and returns it.\n   *\n   * @protected\n   * @returns {module:engine/model/node~Node} Node with same attributes as this node.\n   */\n\n\n  _clone() {\n    return new Node(this._attrs);\n  }\n  /**\n   * Removes this node from it's parent.\n   *\n   * @see module:engine/model/writer~Writer#remove\n   * @protected\n   */\n\n\n  _remove() {\n    this.parent._removeChildren(this.index);\n  }\n  /**\n   * Sets attribute on the node. If attribute with the same key already is set, it's value is overwritten.\n   *\n   * @see module:engine/model/writer~Writer#setAttribute\n   * @protected\n   * @param {String} key Key of attribute to set.\n   * @param {*} value Attribute value.\n   */\n\n\n  _setAttribute(key, value) {\n    this._attrs.set(key, value);\n  }\n  /**\n   * Removes all attributes from the node and sets given attributes.\n   *\n   * @see module:engine/model/writer~Writer#setAttributes\n   * @protected\n   * @param {Object} [attrs] Attributes to set. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n\n\n  _setAttributesTo(attrs) {\n    this._attrs = toMap(attrs);\n  }\n  /**\n   * Removes an attribute with given key from the node.\n   *\n   * @see module:engine/model/writer~Writer#removeAttribute\n   * @protected\n   * @param {String} key Key of attribute to remove.\n   * @returns {Boolean} `true` if the attribute was set on the element, `false` otherwise.\n   */\n\n\n  _removeAttribute(key) {\n    return this._attrs.delete(key);\n  }\n  /**\n   * Removes all attributes from the node.\n   *\n   * @see module:engine/model/writer~Writer#clearAttributes\n   * @protected\n   */\n\n\n  _clearAttributes() {\n    this._attrs.clear();\n  }\n\n}\n/**\n * The node's parent does not contain this node.\n *\n * This error may be thrown from corrupted trees.\n *\n * @error model-node-not-found-in-parent\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/text\n */\nimport Node from './node';\n/**\n * Model text node. Type of {@link module:engine/model/node~Node node} that contains {@link module:engine/model/text~Text#data text data}.\n *\n * **Important:** see {@link module:engine/model/node~Node} to read about restrictions using `Text` and `Node` API.\n *\n * **Note:** keep in mind that `Text` instances might indirectly got removed from model tree when model is changed.\n * This happens when {@link module:engine/model/writer~Writer model writer} is used to change model and the text node is merged with\n * another text node. Then, both text nodes are removed and a new text node is inserted into the model. Because of\n * this behavior, keeping references to `Text` is not recommended. Instead, consider creating\n * {@link module:engine/model/liveposition~LivePosition live position} placed before the text node.\n *\n * @extends module:engine/model/node~Node\n */\n\nexport default class Text extends Node {\n  /**\n   * Creates a text node.\n   *\n   * **Note:** Constructor of this class shouldn't be used directly in the code.\n   * Use the {@link module:engine/model/writer~Writer#createText} method instead.\n   *\n   * @protected\n   * @param {String} data Node's text.\n   * @param {Object} [attrs] Node's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   */\n  constructor(data, attrs) {\n    super(attrs);\n    /**\n     * Text data contained in this text node.\n     *\n     * @protected\n     * @type {String}\n     */\n\n    this._data = data || '';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get offsetSize() {\n    return this.data.length;\n  }\n  /**\n   * Returns a text data contained in the node.\n   *\n   * @readonly\n   * @type {String}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\ttext.is( 'text' ); // -> true\n   *\t\ttext.is( 'node' ); // -> true\n   *\t\ttext.is( 'model:text' ); // -> true\n   *\t\ttext.is( 'model:node' ); // -> true\n   *\n   *\t\ttext.is( 'view:text' ); // -> false\n   *\t\ttext.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'text' || type == 'model:text' || super.is(type);\n  }\n  /**\n   * Converts `Text` instance to plain object and returns it.\n   *\n   * @returns {Object} `Text` instance converted to plain object.\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.data = this.data;\n    return json;\n  }\n  /**\n   * Creates a copy of this text node and returns it. Created text node has same text data and attributes as original text node.\n   *\n   * @protected\n   * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n   */\n\n\n  _clone() {\n    return new Text(this.data, this.getAttributes());\n  }\n  /**\n   * Creates a `Text` instance from given plain object (i.e. parsed JSON string).\n   *\n   * @param {Object} json Plain object to be converted to `Text`.\n   * @returns {module:engine/model/text~Text} `Text` instance created using given plain object.\n   */\n\n\n  static fromJSON(json) {\n    return new Text(json.data, json.attributes);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/textproxy\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * `TextProxy` represents a part of {@link module:engine/model/text~Text text node}.\n *\n * Since {@link module:engine/model/position~Position positions} can be placed between characters of a text node,\n * {@link module:engine/model/range~Range ranges} may contain only parts of text nodes. When {@link module:engine/model/range~Range#getItems\n * getting items}\n * contained in such range, we need to represent a part of that text node, since returning the whole text node would be incorrect.\n * `TextProxy` solves this issue.\n *\n * `TextProxy` has an API similar to {@link module:engine/model/text~Text Text} and allows to do most of the common tasks performed\n * on model nodes.\n *\n * **Note:** Some `TextProxy` instances may represent whole text node, not just a part of it.\n * See {@link module:engine/model/textproxy~TextProxy#isPartial}.\n *\n * **Note:** `TextProxy` is not an instance of {@link module:engine/model/node~Node node}. Keep this in mind when using it as a\n * parameter of methods.\n *\n * **Note:** `TextProxy` is a readonly interface. If you want to perform changes on model data represented by a `TextProxy`\n * use {@link module:engine/model/writer~Writer model writer API}.\n *\n * **Note:** `TextProxy` instances are created on the fly, basing on the current state of model. Because of this, it is\n * highly unrecommended to store references to `TextProxy` instances. `TextProxy` instances are not refreshed when\n * model changes, so they might get invalidated. Instead, consider creating {@link module:engine/model/liveposition~LivePosition live\n * position}.\n *\n * `TextProxy` instances are created by {@link module:engine/model/treewalker~TreeWalker model tree walker}. You should not need to create\n * an instance of this class by your own.\n */\n\nexport default class TextProxy {\n  /**\n   * Creates a text proxy.\n   *\n   * @protected\n   * @param {module:engine/model/text~Text} textNode Text node which part is represented by this text proxy.\n   * @param {Number} offsetInText Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy\n   * starts.\n   * @param {Number} length Text proxy length, that is how many text node's characters, starting from `offsetInText` it represents.\n   * @constructor\n   */\n  constructor(textNode, offsetInText, length) {\n    /**\n     * Text node which part is represented by this text proxy.\n     *\n     * @readonly\n     * @member {module:engine/model/text~Text}\n     */\n    this.textNode = textNode;\n\n    if (offsetInText < 0 || offsetInText > textNode.offsetSize) {\n      /**\n       * Given `offsetInText` value is incorrect.\n       *\n       * @error model-textproxy-wrong-offsetintext\n       */\n      throw new CKEditorError('model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.', this);\n    }\n\n    if (length < 0 || offsetInText + length > textNode.offsetSize) {\n      /**\n       * Given `length` value is incorrect.\n       *\n       * @error model-textproxy-wrong-length\n       */\n      throw new CKEditorError('model-textproxy-wrong-length: Given length value is incorrect.', this);\n    }\n    /**\n     * Text data represented by this text proxy.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n\n    this.data = textNode.data.substring(offsetInText, offsetInText + length);\n    /**\n     * Offset in {@link module:engine/model/textproxy~TextProxy#textNode text node} from which the text proxy starts.\n     *\n     * @readonly\n     * @member {Number}\n     */\n\n    this.offsetInText = offsetInText;\n  }\n  /**\n   * Offset at which this text proxy starts in it's parent.\n   *\n   * @see module:engine/model/node~Node#startOffset\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get startOffset() {\n    return this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null;\n  }\n  /**\n   * Offset size of this text proxy. Equal to the number of characters represented by the text proxy.\n   *\n   * @see module:engine/model/node~Node#offsetSize\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get offsetSize() {\n    return this.data.length;\n  }\n  /**\n   * Offset at which this text proxy ends in it's parent.\n   *\n   * @see module:engine/model/node~Node#endOffset\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get endOffset() {\n    return this.startOffset !== null ? this.startOffset + this.offsetSize : null;\n  }\n  /**\n   * Flag indicating whether `TextProxy` instance covers only part of the original {@link module:engine/model/text~Text text node}\n   * (`true`) or the whole text node (`false`).\n   *\n   * This is `false` when text proxy starts at the very beginning of {@link module:engine/model/textproxy~TextProxy#textNode textNode}\n   * ({@link module:engine/model/textproxy~TextProxy#offsetInText offsetInText} equals `0`) and text proxy sizes is equal to\n   * text node size.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isPartial() {\n    return this.offsetSize !== this.textNode.offsetSize;\n  }\n  /**\n   * Parent of this text proxy, which is same as parent of text node represented by this text proxy.\n   *\n   * @readonly\n   * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n   */\n\n\n  get parent() {\n    return this.textNode.parent;\n  }\n  /**\n   * Root of this text proxy, which is same as root of text node represented by this text proxy.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this.textNode.root;\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns text node represented by this text proxy or `null` if the text node\n   * has no parent or is inside a {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n\n\n  get document() {\n    return this.textNode.document;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\ttextProxy.is( 'textProxy' ); // -> true\n   *\t\ttextProxy.is( 'model:textProxy' ); // -> true\n   *\n   *\t\ttextProxy.is( 'view:textProxy' ); // -> false\n   *\t\ttextProxy.is( 'range' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'textProxy' || type == 'model:textProxy';\n  }\n  /**\n   * Gets path to this text proxy.\n   *\n   * @see module:engine/model/node~Node#getPath\n   * @returns {Array.<Number>}\n   */\n\n\n  getPath() {\n    const path = this.textNode.getPath();\n\n    if (path.length > 0) {\n      path[path.length - 1] += this.offsetInText;\n    }\n\n    return path;\n  }\n  /**\n   * Returns ancestors array of this text proxy.\n   *\n   * @param {Object} options Options object.\n   * @param {Boolean} [options.includeSelf=false] When set to `true` this text proxy will be also included in parent's array.\n   * @param {Boolean} [options.parentFirst=false] When set to `true`, array will be sorted from text proxy parent to root element,\n   * otherwise root element will be the first item in the array.\n   * @returns {Array} Array with ancestors.\n   */\n\n\n  getAncestors(options = {\n    includeSelf: false,\n    parentFirst: false\n  }) {\n    const ancestors = [];\n    let parent = options.includeSelf ? this : this.parent;\n\n    while (parent) {\n      ancestors[options.parentFirst ? 'push' : 'unshift'](parent);\n      parent = parent.parent;\n    }\n\n    return ancestors;\n  }\n  /**\n   * Checks if this text proxy has an attribute for given key.\n   *\n   * @param {String} key Key of attribute to check.\n   * @returns {Boolean} `true` if attribute with given key is set on text proxy, `false` otherwise.\n   */\n\n\n  hasAttribute(key) {\n    return this.textNode.hasAttribute(key);\n  }\n  /**\n   * Gets an attribute value for given key or `undefined` if that attribute is not set on text proxy.\n   *\n   * @param {String} key Key of attribute to look for.\n   * @returns {*} Attribute value or `undefined`.\n   */\n\n\n  getAttribute(key) {\n    return this.textNode.getAttribute(key);\n  }\n  /**\n   * Returns iterator that iterates over this node's attributes. Attributes are returned as arrays containing two\n   * items. First one is attribute key and second is attribute value.\n   *\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  getAttributes() {\n    return this.textNode.getAttributes();\n  }\n  /**\n   * Returns iterator that iterates over this node's attribute keys.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getAttributeKeys() {\n    return this.textNode.getAttributeKeys();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/nodelist\n */\nimport Node from './node';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Provides an interface to operate on a list of {@link module:engine/model/node~Node nodes}. `NodeList` is used internally\n * in classes like {@link module:engine/model/element~Element Element}\n * or {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment}.\n */\n\nexport default class NodeList {\n  /**\n   * Creates an empty node list.\n   *\n   * @protected\n   * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes contained in this node list.\n   */\n  constructor(nodes) {\n    /**\n     * Nodes contained in this node list.\n     *\n     * @private\n     * @member {Array.<module:engine/model/node~Node>}\n     */\n    this._nodes = [];\n\n    if (nodes) {\n      this._insertNodes(0, nodes);\n    }\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all nodes contained inside this node list.\n   *\n   * @returns {Iterable.<module:engine/model/node~Node>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._nodes[Symbol.iterator]();\n  }\n  /**\n   * Number of nodes contained inside this node list.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get length() {\n    return this._nodes.length;\n  }\n  /**\n   * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes contained inside this node list.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get maxOffset() {\n    return this._nodes.reduce((sum, node) => sum + node.offsetSize, 0);\n  }\n  /**\n   * Gets the node at the given index. Returns `null` if incorrect index was passed.\n   *\n   * @param {Number} index Index of node.\n   * @returns {module:engine/model/node~Node|null} Node at given index.\n   */\n\n\n  getNode(index) {\n    return this._nodes[index] || null;\n  }\n  /**\n   * Returns an index of the given node. Returns `null` if given node is not inside this node list.\n   *\n   * @param {module:engine/model/node~Node} node Child node to look for.\n   * @returns {Number|null} Child node's index.\n   */\n\n\n  getNodeIndex(node) {\n    const index = this._nodes.indexOf(node);\n\n    return index == -1 ? null : index;\n  }\n  /**\n   * Returns the starting offset of given node. Starting offset is equal to the sum of\n   * {@link module:engine/model/node~Node#offsetSize offset sizes} of all nodes that are before this node in this node list.\n   *\n   * @param {module:engine/model/node~Node} node Node to look for.\n   * @returns {Number|null} Node's starting offset.\n   */\n\n\n  getNodeStartOffset(node) {\n    const index = this.getNodeIndex(node);\n    return index === null ? null : this._nodes.slice(0, index).reduce((sum, node) => sum + node.offsetSize, 0);\n  }\n  /**\n   * Converts index to offset in node list.\n   *\n   * Returns starting offset of a node that is at given index. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n   * `model-nodelist-index-out-of-bounds` if given index is less than `0` or more than {@link #length}.\n   *\n   * @param {Number} index Node's index.\n   * @returns {Number} Node's starting offset.\n   */\n\n\n  indexToOffset(index) {\n    if (index == this._nodes.length) {\n      return this.maxOffset;\n    }\n\n    const node = this._nodes[index];\n\n    if (!node) {\n      /**\n       * Given index cannot be found in the node list.\n       *\n       * @error nodelist-index-out-of-bounds\n       */\n      throw new CKEditorError('model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.', this);\n    }\n\n    return this.getNodeStartOffset(node);\n  }\n  /**\n   * Converts offset in node list to index.\n   *\n   * Returns index of a node that occupies given offset. Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError}\n   * `model-nodelist-offset-out-of-bounds` if given offset is less than `0` or more than {@link #maxOffset}.\n   *\n   * @param {Number} offset Offset to look for.\n   * @returns {Number} Index of a node that occupies given offset.\n   */\n\n\n  offsetToIndex(offset) {\n    let totalOffset = 0;\n\n    for (const node of this._nodes) {\n      if (offset >= totalOffset && offset < totalOffset + node.offsetSize) {\n        return this.getNodeIndex(node);\n      }\n\n      totalOffset += node.offsetSize;\n    }\n\n    if (totalOffset != offset) {\n      /**\n       * Given offset cannot be found in the node list.\n       *\n       * @error model-nodelist-offset-out-of-bounds\n       * @param {Number} offset\n       * @param {module:engine/model/nodelist~NodeList} nodeList Stringified node list.\n       */\n      throw new CKEditorError('model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.', this, {\n        offset,\n        nodeList: this\n      });\n    }\n\n    return this.length;\n  }\n  /**\n   * Inserts given nodes at given index.\n   *\n   * @protected\n   * @param {Number} index Index at which nodes should be inserted.\n   * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to be inserted.\n   */\n\n\n  _insertNodes(index, nodes) {\n    // Validation.\n    for (const node of nodes) {\n      if (!(node instanceof Node)) {\n        /**\n         * Trying to insert an object which is not a Node instance.\n         *\n         * @error nodelist-insertNodes-not-node\n         */\n        throw new CKEditorError('model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.', this);\n      }\n    }\n\n    this._nodes.splice(index, 0, ...nodes);\n  }\n  /**\n   * Removes one or more nodes starting at the given index.\n   *\n   * @protected\n   * @param {Number} indexStart Index of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n   */\n\n\n  _removeNodes(indexStart, howMany = 1) {\n    return this._nodes.splice(indexStart, howMany);\n  }\n  /**\n   * Converts `NodeList` instance to an array containing nodes that were inserted in the node list. Nodes\n   * are also converted to their plain object representation.\n   *\n   * @returns {Array.<module:engine/model/node~Node>} `NodeList` instance converted to `Array`.\n   */\n\n\n  toJSON() {\n    return this._nodes.map(node => node.toJSON());\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/element\n */\nimport Node from './node';\nimport NodeList from './nodelist';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n/**\n * Model element. Type of {@link module:engine/model/node~Node node} that has a {@link module:engine/model/element~Element#name name} and\n * {@link module:engine/model/element~Element#getChildren child nodes}.\n *\n * **Important**: see {@link module:engine/model/node~Node} to read about restrictions using `Element` and `Node` API.\n *\n * @extends module:engine/model/node~Node\n */\n\nexport default class Element extends Node {\n  /**\n   * Creates a model element.\n   *\n   * **Note:** Constructor of this class shouldn't be used directly in the code.\n   * Use the {@link module:engine/model/writer~Writer#createElement} method instead.\n   *\n   * @protected\n   * @param {String} name Element's name.\n   * @param {Object} [attrs] Element's attributes. See {@link module:utils/tomap~toMap} for a list of accepted values.\n   * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n   * One or more nodes to be inserted as children of created element.\n   */\n  constructor(name, attrs, children) {\n    super(attrs);\n    /**\n     * Element name.\n     *\n     * @readonly\n     * @member {String} module:engine/model/element~Element#name\n     */\n\n    this.name = name;\n    /**\n     * List of children nodes.\n     *\n     * @private\n     * @member {module:engine/model/nodelist~NodeList} module:engine/model/element~Element#_children\n     */\n\n    this._children = new NodeList();\n\n    if (children) {\n      this._insertChild(0, children);\n    }\n  }\n  /**\n   * Number of this element's children.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get childCount() {\n    return this._children.length;\n  }\n  /**\n   * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this element's children.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get maxOffset() {\n    return this._children.maxOffset;\n  }\n  /**\n   * Is `true` if there are no nodes inside this element, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isEmpty() {\n    return this.childCount === 0;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\telement.is( 'element' ); // -> true\n   *\t\telement.is( 'node' ); // -> true\n   *\t\telement.is( 'model:element' ); // -> true\n   *\t\telement.is( 'model:node' ); // -> true\n   *\n   *\t\telement.is( 'view:element' ); // -> false\n   *\t\telement.is( 'documentSelection' ); // -> false\n   *\n   * Assuming that the object being checked is an element, you can also check its\n   * {@link module:engine/model/element~Element#name name}:\n   *\n   *\t\telement.is( 'image' ); // -> true if this is an <image> element\n   *\t\telement.is( 'element', 'image' ); // -> same as above\n   *\t\ttext.is( 'image' ); -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name = null) {\n    const cutType = type.replace(/^model:/, '');\n\n    if (!name) {\n      return cutType == 'element' || cutType == this.name || super.is(type);\n    } else {\n      return cutType == 'element' && name == this.name;\n    }\n  }\n  /**\n   * Gets the child at the given index.\n   *\n   * @param {Number} index Index of child.\n   * @returns {module:engine/model/node~Node} Child node.\n   */\n\n\n  getChild(index) {\n    return this._children.getNode(index);\n  }\n  /**\n   * Returns an iterator that iterates over all of this element's children.\n   *\n   * @returns {Iterable.<module:engine/model/node~Node>}\n   */\n\n\n  getChildren() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Returns an index of the given child node. Returns `null` if given node is not a child of this element.\n   *\n   * @param {module:engine/model/node~Node} node Child node to look for.\n   * @returns {Number} Child node's index in this element.\n   */\n\n\n  getChildIndex(node) {\n    return this._children.getNodeIndex(node);\n  }\n  /**\n   * Returns the starting offset of given child. Starting offset is equal to the sum of\n   * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n   * given node is not a child of this element.\n   *\n   * @param {module:engine/model/node~Node} node Child node to look for.\n   * @returns {Number} Child node's starting offset.\n   */\n\n\n  getChildStartOffset(node) {\n    return this._children.getNodeStartOffset(node);\n  }\n  /**\n   * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n   * too high, returns {@link module:engine/model/element~Element#getChildIndex index after last child}.\n   *\n   *\t\tconst textNode = new Text( 'foo' );\n   *\t\tconst pElement = new Element( 'p' );\n   *\t\tconst divElement = new Element( [ textNode, pElement ] );\n   *\t\tdivElement.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n   *\t\tdivElement.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n   *\t\tdivElement.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n   *\t\tdivElement.offsetToIndex( 2 ); // Returns 0.\n   *\t\tdivElement.offsetToIndex( 3 ); // Returns 1.\n   *\t\tdivElement.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n   *\n   * @param {Number} offset Offset to look for.\n   * @returns {Number}\n   */\n\n\n  offsetToIndex(offset) {\n    return this._children.offsetToIndex(offset);\n  }\n  /**\n   * Returns a descendant node by its path relative to this element.\n   *\n   *\t\t// <this>a<b>c</b></this>\n   *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n   *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n   *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n   *\n   * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n   * @returns {module:engine/model/node~Node}\n   */\n\n\n  getNodeByPath(relativePath) {\n    let node = this; // eslint-disable-line consistent-this\n\n    for (const index of relativePath) {\n      node = node.getChild(node.offsetToIndex(index));\n    }\n\n    return node;\n  }\n  /**\n   * Converts `Element` instance to plain object and returns it. Takes care of converting all of this element's children.\n   *\n   * @returns {Object} `Element` instance converted to plain object.\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.name = this.name;\n\n    if (this._children.length > 0) {\n      json.children = [];\n\n      for (const node of this._children) {\n        json.children.push(node.toJSON());\n      }\n    }\n\n    return json;\n  }\n  /**\n   * Creates a copy of this element and returns it. Created element has the same name and attributes as the original element.\n   * If clone is deep, the original element's children are also cloned. If not, then empty element is removed.\n   *\n   * @protected\n   * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any child.\n   */\n\n\n  _clone(deep = false) {\n    const children = deep ? Array.from(this._children).map(node => node._clone(true)) : null;\n    return new Element(this.name, this.getAttributes(), children);\n  }\n  /**\n   * {@link module:engine/model/element~Element#_insertChild Inserts} one or more nodes at the end of this element.\n   *\n   * @see module:engine/model/writer~Writer#append\n   * @protected\n   * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} nodes Nodes to be inserted.\n   */\n\n\n  _appendChild(nodes) {\n    this._insertChild(this.childCount, nodes);\n  }\n  /**\n   * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n   * to this element.\n   *\n   * @see module:engine/model/writer~Writer#insert\n   * @protected\n   * @param {Number} index Index at which nodes should be inserted.\n   * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n   */\n\n\n  _insertChild(index, items) {\n    const nodes = normalize(items);\n\n    for (const node of nodes) {\n      // If node that is being added to this element is already inside another element, first remove it from the old parent.\n      if (node.parent !== null) {\n        node._remove();\n      }\n\n      node.parent = this;\n    }\n\n    this._children._insertNodes(index, nodes);\n  }\n  /**\n   * Removes one or more nodes starting at the given index and sets\n   * {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n   *\n   * @see module:engine/model/writer~Writer#remove\n   * @protected\n   * @param {Number} index Index of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n   */\n\n\n  _removeChildren(index, howMany = 1) {\n    const nodes = this._children._removeNodes(index, howMany);\n\n    for (const node of nodes) {\n      node.parent = null;\n    }\n\n    return nodes;\n  }\n  /**\n   * Creates an `Element` instance from given plain object (i.e. parsed JSON string).\n   * Converts `Element` children to proper nodes.\n   *\n   * @param {Object} json Plain object to be converted to `Element`.\n   * @returns {module:engine/model/element~Element} `Element` instance created using given plain object.\n   */\n\n\n  static fromJSON(json) {\n    let children = null;\n\n    if (json.children) {\n      children = [];\n\n      for (const child of json.children) {\n        if (child.name) {\n          // If child has name property, it is an Element.\n          children.push(Element.fromJSON(child));\n        } else {\n          // Otherwise, it is a Text node.\n          children.push(Text.fromJSON(child));\n        }\n      }\n    }\n\n    return new Element(json.name, json.attributes, children);\n  }\n\n} // Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<String|module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\n\nfunction normalize(nodes) {\n  // Separate condition because string is iterable.\n  if (typeof nodes == 'string') {\n    return [new Text(nodes)];\n  }\n\n  if (!isIterable(nodes)) {\n    nodes = [nodes];\n  } // Array.from to enable .map() on non-arrays.\n\n\n  return Array.from(nodes).map(node => {\n    if (typeof node == 'string') {\n      return new Text(node);\n    }\n\n    if (node instanceof TextProxy) {\n      return new Text(node.data, node.getAttributes());\n    }\n\n    return node;\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/treewalker\n */\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport Element from './element';\nimport Position from './position';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Position iterator class. It allows to iterate forward and backward over the document.\n */\n\nexport default class TreeWalker {\n  /**\n   * Creates a range iterator. All parameters are optional, but you have to specify either `boundaries` or `startPosition`.\n   *\n   * @constructor\n   * @param {Object} [options={}] Object with configuration.\n   * @param {'forward'|'backward'} [options.direction='forward'] Walking direction.\n   * @param {module:engine/model/range~Range} [options.boundaries=null] Range to define boundaries of the iterator.\n   * @param {module:engine/model/position~Position} [options.startPosition] Starting position.\n   * @param {Boolean} [options.singleCharacters=false] Flag indicating whether all consecutive characters with the same attributes\n   * should be returned one by one as multiple {@link module:engine/model/textproxy~TextProxy} (`true`) objects or as one\n   * {@link module:engine/model/textproxy~TextProxy} (`false`).\n   * @param {Boolean} [options.shallow=false] Flag indicating whether iterator should enter elements or not. If the\n   * iterator is shallow child nodes of any iterated node will not be returned along with `elementEnd` tag.\n   * @param {Boolean} [options.ignoreElementEnd=false] Flag indicating whether iterator should ignore `elementEnd`\n   * tags. If the option is true walker will not return a parent node of start position. If this option is `true`\n   * each {@link module:engine/model/element~Element} will be returned once, while if the option is `false` they might be returned\n   * twice: for `'elementStart'` and `'elementEnd'`.\n   */\n  constructor(options = {}) {\n    if (!options.boundaries && !options.startPosition) {\n      /**\n       * Neither boundaries nor starting position of a `TreeWalker` have been defined.\n       *\n       * @error model-tree-walker-no-start-position\n       */\n      throw new CKEditorError('model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.', null);\n    }\n\n    const direction = options.direction || 'forward';\n\n    if (direction != 'forward' && direction != 'backward') {\n      throw new CKEditorError('model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.', options, {\n        direction\n      });\n    }\n    /**\n     * Walking direction. Defaults `'forward'`.\n     *\n     * @readonly\n     * @member {'backward'|'forward'} module:engine/model/treewalker~TreeWalker#direction\n     */\n\n\n    this.direction = direction;\n    /**\n     * Iterator boundaries.\n     *\n     * When the iterator is walking `'forward'` on the end of boundary or is walking `'backward'`\n     * on the start of boundary, then `{ done: true }` is returned.\n     *\n     * If boundaries are not defined they are set before first and after last child of the root node.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range} module:engine/model/treewalker~TreeWalker#boundaries\n     */\n\n    this.boundaries = options.boundaries || null;\n    /**\n     * Iterator position. This is always static position, even if the initial position was a\n     * {@link module:engine/model/liveposition~LivePosition live position}. If start position is not defined then position depends\n     * on {@link #direction}. If direction is `'forward'` position starts form the beginning, when direction\n     * is `'backward'` position starts from the end.\n     *\n     * @readonly\n     * @member {module:engine/model/position~Position} module:engine/model/treewalker~TreeWalker#position\n     */\n\n    if (options.startPosition) {\n      this.position = options.startPosition.clone();\n    } else {\n      this.position = Position._createAt(this.boundaries[this.direction == 'backward' ? 'end' : 'start']);\n    } // Reset position stickiness in case it was set to other value, as the stickiness is kept after cloning.\n\n\n    this.position.stickiness = 'toNone';\n    /**\n     * Flag indicating whether all consecutive characters with the same attributes should be\n     * returned as one {@link module:engine/model/textproxy~TextProxy} (`true`) or one by one (`false`).\n     *\n     * @readonly\n     * @member {Boolean} module:engine/model/treewalker~TreeWalker#singleCharacters\n     */\n\n    this.singleCharacters = !!options.singleCharacters;\n    /**\n     * Flag indicating whether iterator should enter elements or not. If the iterator is shallow child nodes of any\n     * iterated node will not be returned along with `elementEnd` tag.\n     *\n     * @readonly\n     * @member {Boolean} module:engine/model/treewalker~TreeWalker#shallow\n     */\n\n    this.shallow = !!options.shallow;\n    /**\n     * Flag indicating whether iterator should ignore `elementEnd` tags. If the option is true walker will not\n     * return a parent node of the start position. If this option is `true` each {@link module:engine/model/element~Element} will\n     * be returned once, while if the option is `false` they might be returned twice:\n     * for `'elementStart'` and `'elementEnd'`.\n     *\n     * @readonly\n     * @member {Boolean} module:engine/model/treewalker~TreeWalker#ignoreElementEnd\n     */\n\n    this.ignoreElementEnd = !!options.ignoreElementEnd;\n    /**\n     * Start boundary cached for optimization purposes.\n     *\n     * @private\n     * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryStartParent\n     */\n\n    this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;\n    /**\n     * End boundary cached for optimization purposes.\n     *\n     * @private\n     * @member {module:engine/model/element~Element} module:engine/model/treewalker~TreeWalker#_boundaryEndParent\n     */\n\n    this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;\n    /**\n     * Parent of the most recently visited node. Cached for optimization purposes.\n     *\n     * @private\n     * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n     * module:engine/model/treewalker~TreeWalker#_visitedParent\n     */\n\n    this._visitedParent = this.position.parent;\n  }\n  /**\n   * Iterable interface.\n   *\n   * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Moves {@link #position} in the {@link #direction} skipping values as long as the callback function returns `true`.\n   *\n   * For example:\n   *\n   * \t\twalker.skip( value => value.type == 'text' ); // <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n   * \t\twalker.skip( () => true ); // Move the position to the end: <paragraph>[]foo</paragraph> -> <paragraph>foo</paragraph>[]\n   * \t\twalker.skip( () => false ); // Do not move the position.\n   *\n   * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n   * return `true` if the value should be skipped or `false` if not.\n   */\n\n\n  skip(skip) {\n    let done, value, prevPosition, prevVisitedParent;\n\n    do {\n      prevPosition = this.position;\n      prevVisitedParent = this._visitedParent;\n      ({\n        done,\n        value\n      } = this.next());\n    } while (!done && skip(value));\n\n    if (!done) {\n      this.position = prevPosition;\n      this._visitedParent = prevVisitedParent;\n    }\n  }\n  /**\n   * Gets the next tree walker's value.\n   *\n   * @returns {module:engine/model/treewalker~TreeWalkerValue} Next tree walker's value.\n   */\n\n\n  next() {\n    if (this.direction == 'forward') {\n      return this._next();\n    } else {\n      return this._previous();\n    }\n  }\n  /**\n   * Makes a step forward in model. Moves the {@link #position} to the next position and returns the encountered value.\n   *\n   * @private\n   * @returns {Object}\n   * @returns {Boolean} return.done True if iterator is done.\n   * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n   */\n\n\n  _next() {\n    const previousPosition = this.position;\n    const position = this.position.clone();\n    const parent = this._visitedParent; // We are at the end of the root.\n\n    if (parent.parent === null && position.offset === parent.maxOffset) {\n      return {\n        done: true\n      };\n    } // We reached the walker boundary.\n\n\n    if (parent === this._boundaryEndParent && position.offset == this.boundaries.end.offset) {\n      return {\n        done: true\n      };\n    }\n\n    const node = position.textNode ? position.textNode : position.nodeAfter;\n\n    if (node instanceof Element) {\n      if (!this.shallow) {\n        // Manual operations on path internals for optimization purposes. Here and in the rest of the method.\n        position.path.push(0);\n        this._visitedParent = node;\n      } else {\n        position.offset++;\n      }\n\n      this.position = position;\n      return formatReturnValue('elementStart', node, previousPosition, position, 1);\n    } else if (node instanceof Text) {\n      let charactersCount;\n\n      if (this.singleCharacters) {\n        charactersCount = 1;\n      } else {\n        let offset = node.endOffset;\n\n        if (this._boundaryEndParent == parent && this.boundaries.end.offset < offset) {\n          offset = this.boundaries.end.offset;\n        }\n\n        charactersCount = offset - position.offset;\n      }\n\n      const offsetInTextNode = position.offset - node.startOffset;\n      const item = new TextProxy(node, offsetInTextNode, charactersCount);\n      position.offset += charactersCount;\n      this.position = position;\n      return formatReturnValue('text', item, previousPosition, position, charactersCount);\n    } else {\n      // `node` is not set, we reached the end of current `parent`.\n      position.path.pop();\n      position.offset++;\n      this.position = position;\n      this._visitedParent = parent.parent;\n\n      if (this.ignoreElementEnd) {\n        return this._next();\n      } else {\n        return formatReturnValue('elementEnd', parent, previousPosition, position);\n      }\n    }\n  }\n  /**\n   * Makes a step backward in model. Moves the {@link #position} to the previous position and returns the encountered value.\n   *\n   * @private\n   * @returns {Object}\n   * @returns {Boolean} return.done True if iterator is done.\n   * @returns {module:engine/model/treewalker~TreeWalkerValue} return.value Information about taken step.\n   */\n\n\n  _previous() {\n    const previousPosition = this.position;\n    const position = this.position.clone();\n    const parent = this._visitedParent; // We are at the beginning of the root.\n\n    if (parent.parent === null && position.offset === 0) {\n      return {\n        done: true\n      };\n    } // We reached the walker boundary.\n\n\n    if (parent == this._boundaryStartParent && position.offset == this.boundaries.start.offset) {\n      return {\n        done: true\n      };\n    } // Get node just before current position\n\n\n    const node = position.textNode ? position.textNode : position.nodeBefore;\n\n    if (node instanceof Element) {\n      position.offset--;\n\n      if (!this.shallow) {\n        position.path.push(node.maxOffset);\n        this.position = position;\n        this._visitedParent = node;\n\n        if (this.ignoreElementEnd) {\n          return this._previous();\n        } else {\n          return formatReturnValue('elementEnd', node, previousPosition, position);\n        }\n      } else {\n        this.position = position;\n        return formatReturnValue('elementStart', node, previousPosition, position, 1);\n      }\n    } else if (node instanceof Text) {\n      let charactersCount;\n\n      if (this.singleCharacters) {\n        charactersCount = 1;\n      } else {\n        let offset = node.startOffset;\n\n        if (this._boundaryStartParent == parent && this.boundaries.start.offset > offset) {\n          offset = this.boundaries.start.offset;\n        }\n\n        charactersCount = position.offset - offset;\n      }\n\n      const offsetInTextNode = position.offset - node.startOffset;\n      const item = new TextProxy(node, offsetInTextNode - charactersCount, charactersCount);\n      position.offset -= charactersCount;\n      this.position = position;\n      return formatReturnValue('text', item, previousPosition, position, charactersCount);\n    } else {\n      // `node` is not set, we reached the beginning of current `parent`.\n      position.path.pop();\n      this.position = position;\n      this._visitedParent = parent.parent;\n      return formatReturnValue('elementStart', parent, previousPosition, position, 1);\n    }\n  }\n\n}\n\nfunction formatReturnValue(type, item, previousPosition, nextPosition, length) {\n  return {\n    done: false,\n    value: {\n      type,\n      item,\n      previousPosition,\n      nextPosition,\n      length\n    }\n  };\n}\n/**\n * Type of the step made by {@link module:engine/model/treewalker~TreeWalker}.\n * Possible values: `'elementStart'` if walker is at the beginning of a node, `'elementEnd'` if walker is at the end of node,\n * `'character'` if walker traversed over a character, or `'text'` if walker traversed over multiple characters (available in\n * character merging mode, see {@link module:engine/model/treewalker~TreeWalker#constructor}).\n *\n * @typedef {'elementStart'|'elementEnd'|'character'|'text'} module:engine/model/treewalker~TreeWalkerValueType\n */\n\n/**\n * Object returned by {@link module:engine/model/treewalker~TreeWalker} when traversing tree model.\n *\n * @typedef {Object} module:engine/model/treewalker~TreeWalkerValue\n * @property {module:engine/model/treewalker~TreeWalkerValueType} type\n * @property {module:engine/model/item~Item} item Item between old and new positions of {@link module:engine/model/treewalker~TreeWalker}.\n * @property {module:engine/model/position~Position} previousPosition Previous position of the iterator.\n * * Forward iteration: For `'elementEnd'` it is the last position inside the element. For all other types it is the\n * position before the item.\n * * Backward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after item.\n * @property {module:engine/model/position~Position} nextPosition Next position of the iterator.\n * * Forward iteration: For `'elementStart'` it is the first position inside the element. For all other types it is\n * the position after the item.\n * * Backward iteration: For `'elementEnd'` it is last position inside element. For all other types it is the position\n * before the item.\n * @property {Number} [length] Length of the item. For `'elementStart'` and `'character'` it is 1. For `'text'` it is\n * the length of the text. For `'elementEnd'` it is `undefined`.\n */\n\n/**\n * Tree walking directions.\n *\n * @typedef {'forward'|'backward'} module:engine/view/treewalker~TreeWalkerDirection\n */","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/position\n */\nimport TreeWalker from './treewalker';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Text from './text';\nimport { last } from 'lodash-es'; // To check if component is loaded more than once.\n\nimport '@ckeditor/ckeditor5-utils/src/version';\n/**\n * Represents a position in the model tree.\n *\n * A position is represented by its {@link module:engine/model/position~Position#root} and\n * a {@link module:engine/model/position~Position#path} in that root.\n *\n * You can create position instances via its constructor or the `createPosition*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n *\n * **Note:** Position is based on offsets, not indexes. This means that a position between two text nodes\n * `foo` and `bar` has offset `3`, not `1`. See {@link module:engine/model/position~Position#path} for more information.\n *\n * Since a position in the model is represented by a {@link module:engine/model/position~Position#root position root} and\n * {@link module:engine/model/position~Position#path position path} it is possible to create positions placed in non-existing places.\n * This requirement is important for operational transformation algorithms.\n *\n * Also, {@link module:engine/model/operation/operation~Operation operations}\n * kept in the {@link module:engine/model/document~Document#history document history}\n * are storing positions (and ranges) which were correct when those operations were applied, but may not be correct\n * after the document has changed.\n *\n * When changes are applied to the model, it may also happen that {@link module:engine/model/position~Position#parent position parent}\n * will change even if position path has not changed. Keep in mind, that if a position leads to non-existing element,\n * {@link module:engine/model/position~Position#parent} and some other properties and methods will throw errors.\n *\n * In most cases, position with wrong path is caused by an error in code, but it is sometimes needed, as described above.\n */\n\nexport default class Position {\n  /**\n   * Creates a position.\n   *\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n   * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n   * See {@link module:engine/model/position~PositionStickiness}.\n   */\n  constructor(root, path, stickiness = 'toNone') {\n    if (!root.is('element') && !root.is('documentFragment')) {\n      /**\n       * Position root is invalid.\n       *\n       * Positions can only be anchored in elements or document fragments.\n       *\n       * @error model-position-root-invalid\n       */\n      throw new CKEditorError('model-position-root-invalid: Position root invalid.', root);\n    }\n\n    if (!(path instanceof Array) || path.length === 0) {\n      /**\n       * Position path must be an array with at least one item.\n       *\n       * @error model-position-path-incorrect-format\n       * @param path\n       */\n      throw new CKEditorError('model-position-path-incorrect-format: Position path must be an array with at least one item.', root, {\n        path\n      });\n    } // Normalize the root and path (if element was passed).\n\n\n    path = root.getPath().concat(path);\n    root = root.root;\n    /**\n     * Root of the position path.\n     *\n     * @readonly\n     * @member {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n     * module:engine/model/position~Position#root\n     */\n\n    this.root = root;\n    /**\n     * Position of the node in the tree. **Path contains offsets, not indexes.**\n     *\n     * Position can be placed before, after or in a {@link module:engine/model/node~Node node} if that node has\n     * {@link module:engine/model/node~Node#offsetSize} greater than `1`. Items in position path are\n     * {@link module:engine/model/node~Node#startOffset starting offsets} of position ancestors, starting from direct root children,\n     * down to the position offset in it's parent.\n     *\n     *\t\t ROOT\n     *\t\t  |- P            before: [ 0 ]         after: [ 1 ]\n     *\t\t  |- UL           before: [ 1 ]         after: [ 2 ]\n     *\t\t     |- LI        before: [ 1, 0 ]      after: [ 1, 1 ]\n     *\t\t     |  |- foo    before: [ 1, 0, 0 ]   after: [ 1, 0, 3 ]\n     *\t\t     |- LI        before: [ 1, 1 ]      after: [ 1, 2 ]\n     *\t\t        |- bar    before: [ 1, 1, 0 ]   after: [ 1, 1, 3 ]\n     *\n     * `foo` and `bar` are representing {@link module:engine/model/text~Text text nodes}. Since text nodes has offset size\n     * greater than `1` you can place position offset between their start and end:\n     *\n     *\t\t ROOT\n     *\t\t  |- P\n     *\t\t  |- UL\n     *\t\t     |- LI\n     *\t\t     |  |- f^o|o  ^ has path: [ 1, 0, 1 ]   | has path: [ 1, 0, 2 ]\n     *\t\t     |- LI\n     *\t\t        |- b^a|r  ^ has path: [ 1, 1, 1 ]   | has path: [ 1, 1, 2 ]\n     *\n     * @readonly\n     * @member {Array.<Number>} module:engine/model/position~Position#path\n     */\n\n    this.path = path;\n    /**\n     * Position stickiness. See {@link module:engine/model/position~PositionStickiness}.\n     *\n     * @member {module:engine/model/position~PositionStickiness} module:engine/model/position~Position#stickiness\n     */\n\n    this.stickiness = stickiness;\n  }\n  /**\n   * Offset at which this position is located in its {@link module:engine/model/position~Position#parent parent}. It is equal\n   * to the last item in position {@link module:engine/model/position~Position#path path}.\n   *\n   * @type {Number}\n   */\n\n\n  get offset() {\n    return last(this.path);\n  }\n  /**\n   * @param {Number} newOffset\n   */\n\n\n  set offset(newOffset) {\n    this.path[this.path.length - 1] = newOffset;\n  }\n  /**\n   * Parent element of this position.\n   *\n   * Keep in mind that `parent` value is calculated when the property is accessed.\n   * If {@link module:engine/model/position~Position#path position path}\n   * leads to a non-existing element, `parent` property will throw error.\n   *\n   * Also it is a good idea to cache `parent` property if it is used frequently in an algorithm (i.e. in a long loop).\n   *\n   * @readonly\n   * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  get parent() {\n    let parent = this.root;\n\n    for (let i = 0; i < this.path.length - 1; i++) {\n      parent = parent.getChild(parent.offsetToIndex(this.path[i]));\n\n      if (!parent) {\n        throw new CKEditorError('model-position-path-incorrect: The position\\'s path is incorrect.', this, {\n          position: this\n        });\n      }\n    }\n\n    if (parent.is('text')) {\n      /**\n       * The position's path is incorrect. This means that a position does not point to\n       * a correct place in the tree and hence, some of its methods and getters cannot work correctly.\n       *\n       * **Note**: Unlike DOM and view positions, in the model, the\n       * {@link module:engine/model/position~Position#parent position's parent} is always an element or a document fragment.\n       * The last offset in the {@link module:engine/model/position~Position#path position's path} is the point in this element where\n       * this position points.\n       *\n       * Read more about model positions and offsets in\n       * the {@glink framework/guides/architecture/editing-engine#indexes-and-offsets Editing engine architecture guide}.\n       *\n       * @error position-incorrect-path\n       * @param {module:engine/model/position~Position} position The incorrect position.\n       */\n      throw new CKEditorError('model-position-path-incorrect: The position\\'s path is incorrect.', this, {\n        position: this\n      });\n    }\n\n    return parent;\n  }\n  /**\n   * Position {@link module:engine/model/position~Position#offset offset} converted to an index in position's parent node. It is\n   * equal to the {@link module:engine/model/node~Node#index index} of a node after this position. If position is placed\n   * in text node, position index is equal to the index of that text node.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get index() {\n    return this.parent.offsetToIndex(this.offset);\n  }\n  /**\n   * Returns {@link module:engine/model/text~Text text node} instance in which this position is placed or `null` if this\n   * position is not in a text node.\n   *\n   * @readonly\n   * @type {module:engine/model/text~Text|null}\n   */\n\n\n  get textNode() {\n    const node = this.parent.getChild(this.index);\n    return node instanceof Text && node.startOffset < this.offset ? node : null;\n  }\n  /**\n   * Node directly after this position or `null` if this position is in text node.\n   *\n   * @readonly\n   * @type {module:engine/model/node~Node|null}\n   */\n\n\n  get nodeAfter() {\n    return this.textNode === null ? this.parent.getChild(this.index) : null;\n  }\n  /**\n   * Node directly before this position or `null` if this position is in text node.\n   *\n   * @readonly\n   * @type {Node}\n   */\n\n\n  get nodeBefore() {\n    return this.textNode === null ? this.parent.getChild(this.index - 1) : null;\n  }\n  /**\n   * Is `true` if position is at the beginning of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isAtStart() {\n    return this.offset === 0;\n  }\n  /**\n   * Is `true` if position is at the end of its {@link module:engine/model/position~Position#parent parent}, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isAtEnd() {\n    return this.offset == this.parent.maxOffset;\n  }\n  /**\n   * Checks whether this position is before or after given position.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n   * @returns {module:engine/model/position~PositionRelation}\n   */\n\n\n  compareWith(otherPosition) {\n    if (this.root != otherPosition.root) {\n      return 'different';\n    }\n\n    const result = compareArrays(this.path, otherPosition.path);\n\n    switch (result) {\n      case 'same':\n        return 'same';\n\n      case 'prefix':\n        return 'before';\n\n      case 'extension':\n        return 'after';\n\n      default:\n        return this.path[result] < otherPosition.path[result] ? 'before' : 'after';\n    }\n  }\n  /**\n   * Gets the farthest position which matches the callback using\n   * {@link module:engine/model/treewalker~TreeWalker TreeWalker}.\n   *\n   * For example:\n   *\n   * \t\tgetLastMatchingPosition( value => value.type == 'text' );\n   * \t\t// <paragraph>[]foo</paragraph> -> <paragraph>foo[]</paragraph>\n   *\n   * \t\tgetLastMatchingPosition( value => value.type == 'text', { direction: 'backward' } );\n   * \t\t// <paragraph>foo[]</paragraph> -> <paragraph>[]foo</paragraph>\n   *\n   * \t\tgetLastMatchingPosition( value => false );\n   * \t\t// Do not move the position.\n   *\n   * @param {Function} skip Callback function. Gets {@link module:engine/model/treewalker~TreeWalkerValue} and should\n   * return `true` if the value should be skipped or `false` if not.\n   * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n   *\n   * @returns {module:engine/model/position~Position} The position after the last item which matches the `skip` callback test.\n   */\n\n\n  getLastMatchingPosition(skip, options = {}) {\n    options.startPosition = this;\n    const treeWalker = new TreeWalker(options);\n    treeWalker.skip(skip);\n    return treeWalker.position;\n  }\n  /**\n   * Returns a path to this position's parent. Parent path is equal to position {@link module:engine/model/position~Position#path path}\n   * but without the last item.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @returns {Array.<Number>} Path to the parent.\n   */\n\n\n  getParentPath() {\n    return this.path.slice(0, -1);\n  }\n  /**\n   * Returns ancestors array of this position, that is this position's parent and its ancestors.\n   *\n   * @returns {Array.<module:engine/model/item~Item>} Array with ancestors.\n   */\n\n\n  getAncestors() {\n    if (this.parent.is('documentFragment')) {\n      return [this.parent];\n    } else {\n      return this.parent.getAncestors({\n        includeSelf: true\n      });\n    }\n  }\n  /**\n   * Returns the slice of two position {@link #path paths} which is identical. The {@link #root roots}\n   * of these two paths must be identical.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {module:engine/model/position~Position} position The second position.\n   * @returns {Array.<Number>} The common path.\n   */\n\n\n  getCommonPath(position) {\n    if (this.root != position.root) {\n      return [];\n    } // We find on which tree-level start and end have the lowest common ancestor\n\n\n    const cmp = compareArrays(this.path, position.path); // If comparison returned string it means that arrays are same.\n\n    const diffAt = typeof cmp == 'string' ? Math.min(this.path.length, position.path.length) : cmp;\n    return this.path.slice(0, diffAt);\n  }\n  /**\n   * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n   * which is a common ancestor of both positions. The {@link #root roots} of these two positions must be identical.\n   *\n   * @param {module:engine/model/position~Position} position The second position.\n   * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor(position) {\n    const ancestorsA = this.getAncestors();\n    const ancestorsB = position.getAncestors();\n    let i = 0;\n\n    while (ancestorsA[i] == ancestorsB[i] && ancestorsA[i]) {\n      i++;\n    }\n\n    return i === 0 ? null : ancestorsA[i - 1];\n  }\n  /**\n   * Returns a new instance of `Position`, that has same {@link #parent parent} but it's offset\n   * is shifted by `shift` value (can be a negative value).\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {Number} shift Offset shift. Can be a negative value.\n   * @returns {module:engine/model/position~Position} Shifted position.\n   */\n\n\n  getShiftedBy(shift) {\n    const shifted = this.clone();\n    const offset = shifted.offset + shift;\n    shifted.offset = offset < 0 ? 0 : offset;\n    return shifted;\n  }\n  /**\n   * Checks whether this position is after given position.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @see module:engine/model/position~Position#isBefore\n   * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} True if this position is after given position.\n   */\n\n\n  isAfter(otherPosition) {\n    return this.compareWith(otherPosition) == 'after';\n  }\n  /**\n   * Checks whether this position is before given position.\n   *\n   * **Note:** watch out when using negation of the value returned by this method, because the negation will also\n   * be `true` if positions are in different roots and you might not expect this. You should probably use\n   * `a.isAfter( b ) || a.isEqual( b )` or `!a.isBefore( p ) && a.root == b.root` in most scenarios. If your\n   * condition uses multiple `isAfter` and `isBefore` checks, build them so they do not use negated values, i.e.:\n   *\n   *\t\tif ( a.isBefore( b ) && c.isAfter( d ) ) {\n   *\t\t\t// do A.\n   *\t\t} else {\n   *\t\t\t// do B.\n   *\t\t}\n   *\n   * or, if you have only one if-branch:\n   *\n   *\t\tif ( !( a.isBefore( b ) && c.isAfter( d ) ) {\n   *\t\t\t// do B.\n   *\t\t}\n   *\n   * rather than:\n   *\n   *\t\tif ( !a.isBefore( b ) || && !c.isAfter( d ) ) {\n   *\t\t\t// do B.\n   *\t\t} else {\n   *\t\t\t// do A.\n   *\t\t}\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} True if this position is before given position.\n   */\n\n\n  isBefore(otherPosition) {\n    return this.compareWith(otherPosition) == 'before';\n  }\n  /**\n   * Checks whether this position is equal to given position.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} True if positions are same.\n   */\n\n\n  isEqual(otherPosition) {\n    return this.compareWith(otherPosition) == 'same';\n  }\n  /**\n   * Checks whether this position is touching given position. Positions touch when there are no text nodes\n   * or empty nodes in a range between them. Technically, those positions are not equal but in many cases\n   * they are very similar or even indistinguishable.\n   *\n   * @param {module:engine/model/position~Position} otherPosition Position to compare with.\n   * @returns {Boolean} True if positions touch.\n   */\n\n\n  isTouching(otherPosition) {\n    let left = null;\n    let right = null;\n    const compare = this.compareWith(otherPosition);\n\n    switch (compare) {\n      case 'same':\n        return true;\n\n      case 'before':\n        left = Position._createAt(this);\n        right = Position._createAt(otherPosition);\n        break;\n\n      case 'after':\n        left = Position._createAt(otherPosition);\n        right = Position._createAt(this);\n        break;\n\n      default:\n        return false;\n    } // Cached for optimization purposes.\n\n\n    let leftParent = left.parent;\n\n    while (left.path.length + right.path.length) {\n      if (left.isEqual(right)) {\n        return true;\n      }\n\n      if (left.path.length > right.path.length) {\n        if (left.offset !== leftParent.maxOffset) {\n          return false;\n        }\n\n        left.path = left.path.slice(0, -1);\n        leftParent = leftParent.parent;\n        left.offset++;\n      } else {\n        if (right.offset !== 0) {\n          return false;\n        }\n\n        right.path = right.path.slice(0, -1);\n      }\n    }\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tposition.is( 'position' ); // -> true\n   *\t\tposition.is( 'model:position' ); // -> true\n   *\n   *\t\tposition.is( 'view:position' ); // -> false\n   *\t\tposition.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'position' || type == 'model:position';\n  }\n  /**\n   * Checks if two positions are in the same parent.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {module:engine/model/position~Position} position Position to compare with.\n   * @returns {Boolean} `true` if positions have the same parent, `false` otherwise.\n   */\n\n\n  hasSameParentAs(position) {\n    if (this.root !== position.root) {\n      return false;\n    }\n\n    const thisParentPath = this.getParentPath();\n    const posParentPath = position.getParentPath();\n    return compareArrays(thisParentPath, posParentPath) == 'same';\n  }\n  /**\n   * Returns a copy of this position that is transformed by given `operation`.\n   *\n   * The new position's parameters are updated accordingly to the effect of the `operation`.\n   *\n   * For example, if `n` nodes are inserted before the position, the returned position {@link ~Position#offset} will be\n   * increased by `n`. If the position was in a merged element, it will be accordingly moved to the new element, etc.\n   *\n   * This method is safe to use it on non-existing positions (for example during operational transformation).\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation Operation to transform by.\n   * @returns {module:engine/model/position~Position} Transformed position.\n   */\n\n\n  getTransformedByOperation(operation) {\n    let result;\n\n    switch (operation.type) {\n      case 'insert':\n        result = this._getTransformedByInsertOperation(operation);\n        break;\n\n      case 'move':\n      case 'remove':\n      case 'reinsert':\n        result = this._getTransformedByMoveOperation(operation);\n        break;\n\n      case 'split':\n        result = this._getTransformedBySplitOperation(operation);\n        break;\n\n      case 'merge':\n        result = this._getTransformedByMergeOperation(operation);\n        break;\n\n      default:\n        result = Position._createAt(this);\n        break;\n    }\n\n    return result;\n  }\n  /**\n   * Returns a copy of this position transformed by an insert operation.\n   *\n   * @protected\n   * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  _getTransformedByInsertOperation(operation) {\n    return this._getTransformedByInsertion(operation.position, operation.howMany);\n  }\n  /**\n   * Returns a copy of this position transformed by a move operation.\n   *\n   * @protected\n   * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  _getTransformedByMoveOperation(operation) {\n    return this._getTransformedByMove(operation.sourcePosition, operation.targetPosition, operation.howMany);\n  }\n  /**\n   * Returns a copy of this position transformed by a split operation.\n   *\n   * @protected\n   * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  _getTransformedBySplitOperation(operation) {\n    const movedRange = operation.movedRange;\n    const isContained = movedRange.containsPosition(this) || movedRange.start.isEqual(this) && this.stickiness == 'toNext';\n\n    if (isContained) {\n      return this._getCombined(operation.splitPosition, operation.moveTargetPosition);\n    } else {\n      if (operation.graveyardPosition) {\n        return this._getTransformedByMove(operation.graveyardPosition, operation.insertionPosition, 1);\n      } else {\n        return this._getTransformedByInsertion(operation.insertionPosition, 1);\n      }\n    }\n  }\n  /**\n   * Returns a copy of this position transformed by merge operation.\n   *\n   * @protected\n   * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  _getTransformedByMergeOperation(operation) {\n    const movedRange = operation.movedRange;\n    const isContained = movedRange.containsPosition(this) || movedRange.start.isEqual(this);\n    let pos;\n\n    if (isContained) {\n      pos = this._getCombined(operation.sourcePosition, operation.targetPosition);\n\n      if (operation.sourcePosition.isBefore(operation.targetPosition)) {\n        // Above happens during OT when the merged element is moved before the merged-to element.\n        pos = pos._getTransformedByDeletion(operation.deletionPosition, 1);\n      }\n    } else if (this.isEqual(operation.deletionPosition)) {\n      pos = Position._createAt(operation.deletionPosition);\n    } else {\n      pos = this._getTransformedByMove(operation.deletionPosition, operation.graveyardPosition, 1);\n    }\n\n    return pos;\n  }\n  /**\n   * Returns a copy of this position that is updated by removing `howMany` nodes starting from `deletePosition`.\n   * It may happen that this position is in a removed node. If that is the case, `null` is returned instead.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} deletePosition Position before the first removed node.\n   * @param {Number} howMany How many nodes are removed.\n   * @returns {module:engine/model/position~Position|null} Transformed position or `null`.\n   */\n\n\n  _getTransformedByDeletion(deletePosition, howMany) {\n    const transformed = Position._createAt(this); // This position can't be affected if deletion was in a different root.\n\n\n    if (this.root != deletePosition.root) {\n      return transformed;\n    }\n\n    if (compareArrays(deletePosition.getParentPath(), this.getParentPath()) == 'same') {\n      // If nodes are removed from the node that is pointed by this position...\n      if (deletePosition.offset < this.offset) {\n        // And are removed from before an offset of that position...\n        if (deletePosition.offset + howMany > this.offset) {\n          // Position is in removed range, it's no longer in the tree.\n          return null;\n        } else {\n          // Decrement the offset accordingly.\n          transformed.offset -= howMany;\n        }\n      }\n    } else if (compareArrays(deletePosition.getParentPath(), this.getParentPath()) == 'prefix') {\n      // If nodes are removed from a node that is on a path to this position...\n      const i = deletePosition.path.length - 1;\n\n      if (deletePosition.offset <= this.path[i]) {\n        // And are removed from before next node of that path...\n        if (deletePosition.offset + howMany > this.path[i]) {\n          // If the next node of that path is removed return null\n          // because the node containing this position got removed.\n          return null;\n        } else {\n          // Otherwise, decrement index on that path.\n          transformed.path[i] -= howMany;\n        }\n      }\n    }\n\n    return transformed;\n  }\n  /**\n   * Returns a copy of this position that is updated by inserting `howMany` nodes at `insertPosition`.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n   * @param {Number} howMany How many nodes are inserted.\n   * @returns {module:engine/model/position~Position} Transformed position.\n   */\n\n\n  _getTransformedByInsertion(insertPosition, howMany) {\n    const transformed = Position._createAt(this); // This position can't be affected if insertion was in a different root.\n\n\n    if (this.root != insertPosition.root) {\n      return transformed;\n    }\n\n    if (compareArrays(insertPosition.getParentPath(), this.getParentPath()) == 'same') {\n      // If nodes are inserted in the node that is pointed by this position...\n      if (insertPosition.offset < this.offset || insertPosition.offset == this.offset && this.stickiness != 'toPrevious') {\n        // And are inserted before an offset of that position...\n        // \"Push\" this positions offset.\n        transformed.offset += howMany;\n      }\n    } else if (compareArrays(insertPosition.getParentPath(), this.getParentPath()) == 'prefix') {\n      // If nodes are inserted in a node that is on a path to this position...\n      const i = insertPosition.path.length - 1;\n\n      if (insertPosition.offset <= this.path[i]) {\n        // And are inserted before next node of that path...\n        // \"Push\" the index on that path.\n        transformed.path[i] += howMany;\n      }\n    }\n\n    return transformed;\n  }\n  /**\n   * Returns a copy of this position that is updated by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} sourcePosition Position before the first element to move.\n   * @param {module:engine/model/position~Position} targetPosition Position where moved elements will be inserted.\n   * @param {Number} howMany How many consecutive nodes to move, starting from `sourcePosition`.\n   * @returns {module:engine/model/position~Position} Transformed position.\n   */\n\n\n  _getTransformedByMove(sourcePosition, targetPosition, howMany) {\n    // Update target position, as it could be affected by nodes removal.\n    targetPosition = targetPosition._getTransformedByDeletion(sourcePosition, howMany);\n\n    if (sourcePosition.isEqual(targetPosition)) {\n      // If `targetPosition` is equal to `sourcePosition` this isn't really any move. Just return position as it is.\n      return Position._createAt(this);\n    } // Moving a range removes nodes from their original position. We acknowledge this by proper transformation.\n\n\n    const transformed = this._getTransformedByDeletion(sourcePosition, howMany);\n\n    const isMoved = transformed === null || sourcePosition.isEqual(this) && this.stickiness == 'toNext' || sourcePosition.getShiftedBy(howMany).isEqual(this) && this.stickiness == 'toPrevious';\n\n    if (isMoved) {\n      // This position is inside moved range (or sticks to it).\n      // In this case, we calculate a combination of this position, move source position and target position.\n      return this._getCombined(sourcePosition, targetPosition);\n    } else {\n      // This position is not inside a removed range.\n      //\n      // In next step, we simply reflect inserting `howMany` nodes, which might further affect the position.\n      return transformed._getTransformedByInsertion(targetPosition, howMany);\n    }\n  }\n  /**\n   * Returns a new position that is a combination of this position and given positions.\n   *\n   * The combined position is a copy of this position transformed by moving a range starting at `source` position\n   * to the `target` position. It is expected that this position is inside the moved range.\n   *\n   * Example:\n   *\n   *\t\tlet original = model.createPositionFromPath( root, [ 2, 3, 1 ] );\n   *\t\tlet source = model.createPositionFromPath( root, [ 2, 2 ] );\n   *\t\tlet target = model.createPositionFromPath( otherRoot, [ 1, 1, 3 ] );\n   *\t\toriginal._getCombined( source, target ); // path is [ 1, 1, 4, 1 ], root is `otherRoot`\n   *\n   * Explanation:\n   *\n   * We have a position `[ 2, 3, 1 ]` and move some nodes from `[ 2, 2 ]` to `[ 1, 1, 3 ]`. The original position\n   * was inside moved nodes and now should point to the new place. The moved nodes will be after\n   * positions `[ 1, 1, 3 ]`, `[ 1, 1, 4 ]`, `[ 1, 1, 5 ]`. Since our position was in the second moved node,\n   * the transformed position will be in a sub-tree of a node at `[ 1, 1, 4 ]`. Looking at original path, we\n   * took care of `[ 2, 3 ]` part of it. Now we have to add the rest of the original path to the transformed path.\n   * Finally, the transformed position will point to `[ 1, 1, 4, 1 ]`.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} source Beginning of the moved range.\n   * @param {module:engine/model/position~Position} target Position where the range is moved.\n   * @returns {module:engine/model/position~Position} Combined position.\n   */\n\n\n  _getCombined(source, target) {\n    const i = source.path.length - 1; // The first part of a path to combined position is a path to the place where nodes were moved.\n\n    const combined = Position._createAt(target);\n\n    combined.stickiness = this.stickiness; // Then we have to update the rest of the path.\n    // Fix the offset because this position might be after `from` position and we have to reflect that.\n\n    combined.offset = combined.offset + this.path[i] - source.offset; // Then, add the rest of the path.\n    // If this position is at the same level as `from` position nothing will get added.\n\n    combined.path = combined.path.concat(this.path.slice(i + 1));\n    return combined;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    return {\n      root: this.root.toJSON(),\n      path: Array.from(this.path),\n      stickiness: this.stickiness\n    };\n  }\n  /**\n   * Returns a new position that is equal to current position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  clone() {\n    return new this.constructor(this.root, this.path, this.stickiness);\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/model/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/model/item~Item model item} and `'before'` or `'after'` (sets position before or after given model item).\n   *\n   * This method is a shortcut to other factory methods such as:\n   *\n   * * {@link module:engine/model/position~Position._createBefore},\n   * * {@link module:engine/model/position~Position._createAfter}.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when the\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness. Used only when the\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   * @protected\n   */\n\n\n  static _createAt(itemOrPosition, offset, stickiness = 'toNone') {\n    if (itemOrPosition instanceof Position) {\n      return new Position(itemOrPosition.root, itemOrPosition.path, itemOrPosition.stickiness);\n    } else {\n      const node = itemOrPosition;\n\n      if (offset == 'end') {\n        offset = node.maxOffset;\n      } else if (offset == 'before') {\n        return this._createBefore(node, stickiness);\n      } else if (offset == 'after') {\n        return this._createAfter(node, stickiness);\n      } else if (offset !== 0 && !offset) {\n        /**\n         * {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}\n         * requires the offset to be specified when the first parameter is a model item.\n         *\n         * @error model-createPositionAt-offset-required\n         */\n        throw new CKEditorError('model-createPositionAt-offset-required: ' + 'Model#createPositionAt() requires the offset when the first parameter is a model item.', [this, itemOrPosition]);\n      }\n\n      if (!node.is('element') && !node.is('documentFragment')) {\n        /**\n         * Position parent have to be a model element or model document fragment.\n         *\n         * @error model-position-parent-incorrect\n         */\n        throw new CKEditorError('model-position-parent-incorrect: Position parent have to be a element or document fragment.', [this, itemOrPosition]);\n      }\n\n      const path = node.getPath();\n      path.push(offset);\n      return new this(node.root, path, stickiness);\n    }\n  }\n  /**\n   * Creates a new position, after given {@link module:engine/model/item~Item model item}.\n   *\n   * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n   * @returns {module:engine/model/position~Position}\n   * @protected\n   */\n\n\n  static _createAfter(item, stickiness) {\n    if (!item.parent) {\n      /**\n       * You can not make a position after a root element.\n       *\n       * @error model-position-after-root\n       * @param {module:engine/model/item~Item} root\n       */\n      throw new CKEditorError('model-position-after-root: You cannot make a position after root.', [this, item], {\n        root: item\n      });\n    }\n\n    return this._createAt(item.parent, item.endOffset, stickiness);\n  }\n  /**\n   * Creates a new position, before the given {@link module:engine/model/item~Item model item}.\n   *\n   * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n   * @returns {module:engine/model/position~Position}\n   * @protected\n   */\n\n\n  static _createBefore(item, stickiness) {\n    if (!item.parent) {\n      /**\n       * You can not make a position before a root element.\n       *\n       * @error model-position-before-root\n       * @param {module:engine/model/item~Item} root\n       */\n      throw new CKEditorError('model-position-before-root: You cannot make a position before root.', item, {\n        root: item\n      });\n    }\n\n    return this._createAt(item.parent, item.startOffset, stickiness);\n  }\n  /**\n   * Creates a `Position` instance from given plain object (i.e. parsed JSON string).\n   *\n   * @param {Object} json Plain object to be converted to `Position`.\n   * @param {module:engine/model/document~Document} doc Document object that will be position owner.\n   * @returns {module:engine/model/position~Position} `Position` instance created using given plain object.\n   */\n\n\n  static fromJSON(json, doc) {\n    if (json.root === '$graveyard') {\n      const pos = new Position(doc.graveyard, json.path);\n      pos.stickiness = json.stickiness;\n      return pos;\n    }\n\n    if (!doc.getRoot(json.root)) {\n      /**\n       * Cannot create position for document. Root with specified name does not exist.\n       *\n       * @error model-position-fromjson-no-root\n       * @param {String} rootName\n       */\n      throw new CKEditorError('model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.', doc, {\n        rootName: json.root\n      });\n    }\n\n    return new Position(doc.getRoot(json.root), json.path, json.stickiness);\n  }\n\n}\n/**\n * A flag indicating whether this position is `'before'` or `'after'` or `'same'` as given position.\n * If positions are in different roots `'different'` flag is returned.\n *\n * @typedef {String} module:engine/model/position~PositionRelation\n */\n\n/**\n * Represents how position is \"sticking\" with neighbour nodes. Used to define how position should be transformed (moved)\n * in edge cases. Possible values: `'toNone'`, `'toNext'`, `'toPrevious'`.\n *\n * Examples:\n *\n *\t\tInsert. Position is at | and nodes are inserted at the same position, marked as ^:\n *\n *\t\t- sticks to none:           <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to next node:      <p>f^|oo</p>  ->  <p>fbar|oo</p>\n *\t\t- sticks to previous node:  <p>f|^oo</p>  ->  <p>f|baroo</p>\n *\n *\n *\t\tMove. Position is at | and range [oo] is moved to position ^:\n *\n *\t\t- sticks to none:           <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to none:           <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to next node:      <p>f|[oo]</p><p>b^ar</p>  ->  <p>f</p><p>b|ooar</p>\n *\t\t- sticks to next node:      <p>f[oo]|</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\n *\t\t- sticks to previous node:  <p>f|[oo]</p><p>b^ar</p>  ->  <p>f|</p><p>booar</p>\n *\t\t- sticks to previous node:  <p>f[oo]|</p><p>b^ar</p>  ->  <p>f</p><p>boo|ar</p>\n *\n * @typedef {String} module:engine/model/position~PositionStickiness\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/range\n */\nimport Position from './position';\nimport TreeWalker from './treewalker';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\n/**\n * Represents a range in the model tree.\n *\n * A range is defined by its {@link module:engine/model/range~Range#start} and {@link module:engine/model/range~Range#end}\n * positions.\n *\n * You can create range instances via its constructor or the `createRange*()` factory methods of\n * {@link module:engine/model/model~Model} and {@link module:engine/model/writer~Writer}.\n */\n\nexport default class Range {\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * @param {module:engine/model/position~Position} start Start position.\n   * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   */\n  constructor(start, end = null) {\n    /**\n     * Start position.\n     *\n     * @readonly\n     * @member {module:engine/model/position~Position}\n     */\n    this.start = Position._createAt(start);\n    /**\n     * End position.\n     *\n     * @readonly\n     * @member {module:engine/model/position~Position}\n     */\n\n    this.end = end ? Position._createAt(end) : Position._createAt(start); // If the range is collapsed, treat in a similar way as a position and set its boundaries stickiness to 'toNone'.\n    // In other case, make the boundaries stick to the \"inside\" of the range.\n\n    this.start.stickiness = this.isCollapsed ? 'toNone' : 'toNext';\n    this.end.stickiness = this.isCollapsed ? 'toNone' : 'toPrevious';\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n   * them together with additional information like length or {@link module:engine/model/position~Position positions},\n   * grouped as {@link module:engine/model/treewalker~TreeWalkerValue}.\n   * It iterates over all {@link module:engine/model/textproxy~TextProxy text contents} that are inside the range\n   * and all the {@link module:engine/model/element~Element}s that are entered into when iterating over this range.\n   *\n   * This iterator uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range\n   * and `ignoreElementEnd` option set to `true`.\n   *\n   * @returns {Iterable.<module:engine/model/treewalker~TreeWalkerValue>}\n   */\n\n\n  *[Symbol.iterator]() {\n    yield* new TreeWalker({\n      boundaries: this,\n      ignoreElementEnd: true\n    });\n  }\n  /**\n   * Returns whether the range is collapsed, that is if {@link #start} and\n   * {@link #end} positions are equal.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isCollapsed() {\n    return this.start.isEqual(this.end);\n  }\n  /**\n   * Returns whether this range is flat, that is if {@link #start} position and\n   * {@link #end} position are in the same {@link module:engine/model/position~Position#parent}.\n   *\n   * @type {Boolean}\n   */\n\n\n  get isFlat() {\n    const startParentPath = this.start.getParentPath();\n    const endParentPath = this.end.getParentPath();\n    return compareArrays(startParentPath, endParentPath) == 'same';\n  }\n  /**\n   * Range root element.\n   *\n   * @type {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this.start.root;\n  }\n  /**\n   * Checks whether this range contains given {@link module:engine/model/position~Position position}.\n   *\n   * @param {module:engine/model/position~Position} position Position to check.\n   * @returns {Boolean} `true` if given {@link module:engine/model/position~Position position} is contained\n   * in this range,`false` otherwise.\n   */\n\n\n  containsPosition(position) {\n    return position.isAfter(this.start) && position.isBefore(this.end);\n  }\n  /**\n   * Checks whether this range contains given {@link ~Range range}.\n   *\n   * @param {module:engine/model/range~Range} otherRange Range to check.\n   * @param {Boolean} [loose=false] Whether the check is loose or strict. If the check is strict (`false`), compared range cannot\n   * start or end at the same position as this range boundaries. If the check is loose (`true`), compared range can start, end or\n   * even be equal to this range. Note that collapsed ranges are always compared in strict mode.\n   * @returns {Boolean} `true` if given {@link ~Range range} boundaries are contained by this range, `false` otherwise.\n   */\n\n\n  containsRange(otherRange, loose = false) {\n    if (otherRange.isCollapsed) {\n      loose = false;\n    }\n\n    const containsStart = this.containsPosition(otherRange.start) || loose && this.start.isEqual(otherRange.start);\n    const containsEnd = this.containsPosition(otherRange.end) || loose && this.end.isEqual(otherRange.end);\n    return containsStart && containsEnd;\n  }\n  /**\n   * Checks whether given {@link module:engine/model/item~Item} is inside this range.\n   *\n   * @param {module:engine/model/item~Item} item Model item to check.\n   */\n\n\n  containsItem(item) {\n    const pos = Position._createBefore(item);\n\n    return this.containsPosition(pos) || this.start.isEqual(pos);\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\trange.is( 'range' ); // -> true\n   *\t\trange.is( 'model:range' ); // -> true\n   *\n   *\t\trange.is( 'view:range' ); // -> false\n   *\t\trange.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'range' || type == 'model:range';\n  }\n  /**\n   * Two ranges are equal if their {@link #start} and {@link #end} positions are equal.\n   *\n   * @param {module:engine/model/range~Range} otherRange Range to compare with.\n   * @returns {Boolean} `true` if ranges are equal, `false` otherwise.\n   */\n\n\n  isEqual(otherRange) {\n    return this.start.isEqual(otherRange.start) && this.end.isEqual(otherRange.end);\n  }\n  /**\n   * Checks and returns whether this range intersects with given range.\n   *\n   * @param {module:engine/model/range~Range} otherRange Range to compare with.\n   * @returns {Boolean} `true` if ranges intersect, `false` otherwise.\n   */\n\n\n  isIntersecting(otherRange) {\n    return this.start.isBefore(otherRange.end) && this.end.isAfter(otherRange.start);\n  }\n  /**\n   * Computes which part(s) of this {@link ~Range range} is not a part of given {@link ~Range range}.\n   * Returned array contains zero, one or two {@link ~Range ranges}.\n   *\n   * Examples:\n   *\n   *\t\tlet range = model.createRange(\n   *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n   *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n   *\t\t);\n   *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n   *\t\tlet transformed = range.getDifference( otherRange );\n   *\t\t// transformed array has no ranges because `otherRange` contains `range`\n   *\n   *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 3 ] ) );\n   *\t\ttransformed = range.getDifference( otherRange );\n   *\t\t// transformed array has one range: from [ 3 ] to [ 4, 0, 1 ]\n   *\n   *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 4 ] ) );\n   *\t\ttransformed = range.getDifference( otherRange );\n   *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3 ] and from [ 4 ] to [ 4, 0, 1 ]\n   *\n   * @param {module:engine/model/range~Range} otherRange Range to differentiate against.\n   * @returns {Array.<module:engine/model/range~Range>} The difference between ranges.\n   */\n\n\n  getDifference(otherRange) {\n    const ranges = [];\n\n    if (this.isIntersecting(otherRange)) {\n      // Ranges intersect.\n      if (this.containsPosition(otherRange.start)) {\n        // Given range start is inside this range. This means that we have to\n        // add shrunken range - from the start to the middle of this range.\n        ranges.push(new Range(this.start, otherRange.start));\n      }\n\n      if (this.containsPosition(otherRange.end)) {\n        // Given range end is inside this range. This means that we have to\n        // add shrunken range - from the middle of this range to the end.\n        ranges.push(new Range(otherRange.end, this.end));\n      }\n    } else {\n      // Ranges do not intersect, return the original range.\n      ranges.push(new Range(this.start, this.end));\n    }\n\n    return ranges;\n  }\n  /**\n   * Returns an intersection of this {@link ~Range range} and given {@link ~Range range}.\n   * Intersection is a common part of both of those ranges. If ranges has no common part, returns `null`.\n   *\n   * Examples:\n   *\n   *\t\tlet range = model.createRange(\n   *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n   *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n   *\t\t);\n   *\t\tlet otherRange = model.createRange( model.createPositionFromPath( root, [ 1 ] ), model.createPositionFromPath( root, [ 2 ] ) );\n   *\t\tlet transformed = range.getIntersection( otherRange ); // null - ranges have no common part\n   *\n   *\t\totherRange = model.createRange( model.createPositionFromPath( root, [ 3 ] ), model.createPositionFromPath( root, [ 5 ] ) );\n   *\t\ttransformed = range.getIntersection( otherRange ); // range from [ 3 ] to [ 4, 0, 1 ]\n   *\n   * @param {module:engine/model/range~Range} otherRange Range to check for intersection.\n   * @returns {module:engine/model/range~Range|null} A common part of given ranges or `null` if ranges have no common part.\n   */\n\n\n  getIntersection(otherRange) {\n    if (this.isIntersecting(otherRange)) {\n      // Ranges intersect, so a common range will be returned.\n      // At most, it will be same as this range.\n      let commonRangeStart = this.start;\n      let commonRangeEnd = this.end;\n\n      if (this.containsPosition(otherRange.start)) {\n        // Given range start is inside this range. This means thaNt we have to\n        // shrink common range to the given range start.\n        commonRangeStart = otherRange.start;\n      }\n\n      if (this.containsPosition(otherRange.end)) {\n        // Given range end is inside this range. This means that we have to\n        // shrink common range to the given range end.\n        commonRangeEnd = otherRange.end;\n      }\n\n      return new Range(commonRangeStart, commonRangeEnd);\n    } // Ranges do not intersect, so they do not have common part.\n\n\n    return null;\n  }\n  /**\n   * Computes and returns the smallest set of {@link #isFlat flat} ranges, that covers this range in whole.\n   *\n   * See an example of a model structure (`[` and `]` are range boundaries):\n   *\n   *\t\troot                                                            root\n   *\t\t |- element DIV                         DIV             P2              P3             DIV\n   *\t\t |   |- element H                   H        P1        f o o           b a r       H         P4\n   *\t\t |   |   |- \"fir[st\"             fir[st     lorem                               se]cond     ipsum\n   *\t\t |   |- element P1\n   *\t\t |   |   |- \"lorem\"                                              ||\n   *\t\t |- element P2                                                   ||\n   *\t\t |   |- \"foo\"                                                    VV\n   *\t\t |- element P3\n   *\t\t |   |- \"bar\"                                                   root\n   *\t\t |- element DIV                         DIV             [P2             P3]             DIV\n   *\t\t |   |- element H                   H       [P1]       f o o           b a r        H         P4\n   *\t\t |   |   |- \"se]cond\"            fir[st]    lorem                               [se]cond     ipsum\n   *\t\t |   |- element P4\n   *\t\t |   |   |- \"ipsum\"\n   *\n   * As it can be seen, letters contained in the range are: `stloremfoobarse`, spread across different parents.\n   * We are looking for minimal set of flat ranges that contains the same nodes.\n   *\n   * Minimal flat ranges for above range `( [ 0, 0, 3 ], [ 3, 0, 2 ] )` will be:\n   *\n   *\t\t( [ 0, 0, 3 ], [ 0, 0, 5 ] ) = \"st\"\n   *\t\t( [ 0, 1 ], [ 0, 2 ] ) = element P1 (\"lorem\")\n   *\t\t( [ 1 ], [ 3 ] ) = element P2, element P3 (\"foobar\")\n   *\t\t( [ 3, 0, 0 ], [ 3, 0, 2 ] ) = \"se\"\n   *\n   * **Note:** if an {@link module:engine/model/element~Element element} is not wholly contained in this range, it won't be returned\n   * in any of the returned flat ranges. See in the example how `H` elements at the beginning and at the end of the range\n   * were omitted. Only their parts that were wholly in the range were returned.\n   *\n   * **Note:** this method is not returning flat ranges that contain no nodes.\n   *\n   * @returns {Array.<module:engine/model/range~Range>} Array of flat ranges covering this range.\n   */\n\n\n  getMinimalFlatRanges() {\n    const ranges = [];\n    const diffAt = this.start.getCommonPath(this.end).length;\n\n    const pos = Position._createAt(this.start);\n\n    let posParent = pos.parent; // Go up.\n\n    while (pos.path.length > diffAt + 1) {\n      const howMany = posParent.maxOffset - pos.offset;\n\n      if (howMany !== 0) {\n        ranges.push(new Range(pos, pos.getShiftedBy(howMany)));\n      }\n\n      pos.path = pos.path.slice(0, -1);\n      pos.offset++;\n      posParent = posParent.parent;\n    } // Go down.\n\n\n    while (pos.path.length <= this.end.path.length) {\n      const offset = this.end.path[pos.path.length - 1];\n      const howMany = offset - pos.offset;\n\n      if (howMany !== 0) {\n        ranges.push(new Range(pos, pos.getShiftedBy(howMany)));\n      }\n\n      pos.offset = offset;\n      pos.path.push(0);\n    }\n\n    return ranges;\n  }\n  /**\n   * Creates a {@link module:engine/model/treewalker~TreeWalker TreeWalker} instance with this range as a boundary.\n   *\n   * For example, to iterate over all items in the entire document root:\n   *\n   *\t\t// Create a range spanning over the entire root content:\n   *\t\tconst range = editor.model.createRangeIn( editor.model.document.getRoot() );\n   *\n   *\t\t// Iterate over all items in this range:\n   *\t\tfor ( const value of range.getWalker() ) {\n   *\t\t\tconsole.log( value.item );\n   *\t\t}\n   *\n   * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n   * @param {module:engine/model/position~Position} [options.startPosition]\n   * @param {Boolean} [options.singleCharacters=false]\n   * @param {Boolean} [options.shallow=false]\n   * @param {Boolean} [options.ignoreElementEnd=false]\n   */\n\n\n  getWalker(options = {}) {\n    options.boundaries = this;\n    return new TreeWalker(options);\n  }\n  /**\n   * Returns an iterator that iterates over all {@link module:engine/model/item~Item items} that are in this range and returns\n   * them.\n   *\n   * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range and `ignoreElementEnd` option\n   * set to `true`. However it returns only {@link module:engine/model/item~Item model items},\n   * not {@link module:engine/model/treewalker~TreeWalkerValue}.\n   *\n   * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n   * a full list of available options.\n   *\n   * @method getItems\n   * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n   * @returns {Iterable.<module:engine/model/item~Item>}\n   */\n\n\n  *getItems(options = {}) {\n    options.boundaries = this;\n    options.ignoreElementEnd = true;\n    const treeWalker = new TreeWalker(options);\n\n    for (const value of treeWalker) {\n      yield value.item;\n    }\n  }\n  /**\n   * Returns an iterator that iterates over all {@link module:engine/model/position~Position positions} that are boundaries or\n   * contained in this range.\n   *\n   * This method uses {@link module:engine/model/treewalker~TreeWalker} with `boundaries` set to this range. However it returns only\n   * {@link module:engine/model/position~Position positions}, not {@link module:engine/model/treewalker~TreeWalkerValue}.\n   *\n   * You may specify additional options for the tree walker. See {@link module:engine/model/treewalker~TreeWalker} for\n   * a full list of available options.\n   *\n   * @param {Object} options Object with configuration options. See {@link module:engine/model/treewalker~TreeWalker}.\n   * @returns {Iterable.<module:engine/model/position~Position>}\n   */\n\n\n  *getPositions(options = {}) {\n    options.boundaries = this;\n    const treeWalker = new TreeWalker(options);\n    yield treeWalker.position;\n\n    for (const value of treeWalker) {\n      yield value.nextPosition;\n    }\n  }\n  /**\n   * Returns a range that is a result of transforming this range by given `operation`.\n   *\n   * **Note:** transformation may break one range into multiple ranges (for example, when a part of the range is\n   * moved to a different part of document tree). For this reason, an array is returned by this method and it\n   * may contain one or more `Range` instances.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation Operation to transform range by.\n   * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n   */\n\n\n  getTransformedByOperation(operation) {\n    switch (operation.type) {\n      case 'insert':\n        return this._getTransformedByInsertOperation(operation);\n\n      case 'move':\n      case 'remove':\n      case 'reinsert':\n        return this._getTransformedByMoveOperation(operation);\n\n      case 'split':\n        return [this._getTransformedBySplitOperation(operation)];\n\n      case 'merge':\n        return [this._getTransformedByMergeOperation(operation)];\n    }\n\n    return [new Range(this.start, this.end)];\n  }\n  /**\n   * Returns a range that is a result of transforming this range by multiple `operations`.\n   *\n   * @see ~Range#getTransformedByOperation\n   * @param {Iterable.<module:engine/model/operation/operation~Operation>} operations Operations to transform the range by.\n   * @returns {Array.<module:engine/model/range~Range>} Range which is the result of transformation.\n   */\n\n\n  getTransformedByOperations(operations) {\n    const ranges = [new Range(this.start, this.end)];\n\n    for (const operation of operations) {\n      for (let i = 0; i < ranges.length; i++) {\n        const result = ranges[i].getTransformedByOperation(operation);\n        ranges.splice(i, 1, ...result);\n        i += result.length - 1;\n      }\n    } // It may happen that a range is split into two, and then the part of second \"piece\" is moved into first\n    // \"piece\". In this case we will have incorrect third range, which should not be included in the result --\n    // because it is already included in the first \"piece\". In this loop we are looking for all such ranges that\n    // are inside other ranges and we simply remove them.\n\n\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n\n      for (let j = i + 1; j < ranges.length; j++) {\n        const next = ranges[j];\n\n        if (range.containsRange(next) || next.containsRange(range) || range.isEqual(next)) {\n          ranges.splice(j, 1);\n        }\n      }\n    }\n\n    return ranges;\n  }\n  /**\n   * Returns an {@link module:engine/model/element~Element} or {@link module:engine/model/documentfragment~DocumentFragment}\n   * which is a common ancestor of the range's both ends (in which the entire range is contained).\n   *\n   * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment|null}\n   */\n\n\n  getCommonAncestor() {\n    return this.start.getCommonAncestor(this.end);\n  }\n  /**\n   * Converts `Range` to plain object and returns it.\n   *\n   * @returns {Object} `Node` converted to plain object.\n   */\n\n\n  toJSON() {\n    return {\n      start: this.start.toJSON(),\n      end: this.end.toJSON()\n    };\n  }\n  /**\n   * Returns a new range that is equal to current range.\n   *\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  clone() {\n    return new this.constructor(this.start, this.end);\n  }\n  /**\n   * Returns a result of transforming a copy of this range by insert operation.\n   *\n   * One or more ranges may be returned as a result of this transformation.\n   *\n   * @protected\n   * @param {module:engine/model/operation/insertoperation~InsertOperation} operation\n   * @returns {Array.<module:engine/model/range~Range>}\n   */\n\n\n  _getTransformedByInsertOperation(operation, spread = false) {\n    return this._getTransformedByInsertion(operation.position, operation.howMany, spread);\n  }\n  /**\n   * Returns a result of transforming a copy of this range by move operation.\n   *\n   * One or more ranges may be returned as a result of this transformation.\n   *\n   * @protected\n   * @param {module:engine/model/operation/moveoperation~MoveOperation} operation\n   * @returns {Array.<module:engine/model/range~Range>}\n   */\n\n\n  _getTransformedByMoveOperation(operation, spread = false) {\n    const sourcePosition = operation.sourcePosition;\n    const howMany = operation.howMany;\n    const targetPosition = operation.targetPosition;\n    return this._getTransformedByMove(sourcePosition, targetPosition, howMany, spread);\n  }\n  /**\n   * Returns a result of transforming a copy of this range by split operation.\n   *\n   * Always one range is returned. The transformation is done in a way to not break the range.\n   *\n   * @protected\n   * @param {module:engine/model/operation/splitoperation~SplitOperation} operation\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  _getTransformedBySplitOperation(operation) {\n    const start = this.start._getTransformedBySplitOperation(operation);\n\n    let end = this.end._getTransformedBySplitOperation(operation);\n\n    if (this.end.isEqual(operation.insertionPosition)) {\n      end = this.end.getShiftedBy(1);\n    } // Below may happen when range contains graveyard element used by split operation.\n\n\n    if (start.root != end.root) {\n      // End position was next to the moved graveyard element and was moved with it.\n      // Fix it by using old `end` which has proper `root`.\n      end = this.end.getShiftedBy(-1);\n    }\n\n    return new Range(start, end);\n  }\n  /**\n   * Returns a result of transforming a copy of this range by merge operation.\n   *\n   * Always one range is returned. The transformation is done in a way to not break the range.\n   *\n   * @protected\n   * @param {module:engine/model/operation/mergeoperation~MergeOperation} operation\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  _getTransformedByMergeOperation(operation) {\n    // Special case when the marker is set on \"the closing tag\" of an element. Marker can be set like that during\n    // transformations, especially when a content of a few block elements were removed. For example:\n    //\n    // {} is the transformed range, [] is the removed range.\n    // <p>F[o{o</p><p>B}ar</p><p>Xy]z</p>\n    //\n    // <p>Fo{o</p><p>B}ar</p><p>z</p>\n    // <p>F{</p><p>B}ar</p><p>z</p>\n    // <p>F{</p>}<p>z</p>\n    // <p>F{}z</p>\n    //\n    if (this.start.isEqual(operation.targetPosition) && this.end.isEqual(operation.deletionPosition)) {\n      return new Range(this.start);\n    }\n\n    let start = this.start._getTransformedByMergeOperation(operation);\n\n    let end = this.end._getTransformedByMergeOperation(operation);\n\n    if (start.root != end.root) {\n      // This happens when the end position was next to the merged (deleted) element.\n      // Then, the end position was moved to the graveyard root. In this case we need to fix\n      // the range cause its boundaries would be in different roots.\n      end = this.end.getShiftedBy(-1);\n    }\n\n    if (start.isAfter(end)) {\n      // This happens in three following cases:\n      //\n      // Case 1: Merge operation source position is before the target position (due to some transformations, OT, etc.)\n      //         This means that start can be moved before the end of the range.\n      //\n      // Before: <p>a{a</p><p>b}b</p><p>cc</p>\n      // Merge:  <p>b}b</p><p>cca{a</p>\n      // Fix:    <p>{b}b</p><p>ccaa</p>\n      //\n      // Case 2: Range start is before merged node but not directly.\n      //         Result should include all nodes that were in the original range.\n      //\n      // Before: <p>aa</p>{<p>cc</p><p>b}b</p>\n      // Merge:  <p>aab}b</p>{<p>cc</p>\n      // Fix:    <p>aa{bb</p><p>cc</p>}\n      //\n      //         The range is expanded by an additional `b` letter but it is better than dropping the whole `cc` paragraph.\n      //\n      // Case 3: Range start is directly before merged node.\n      //         Resulting range should include only nodes from the merged element:\n      //\n      // Before: <p>aa</p>{<p>b}b</p><p>cc</p>\n      // Merge:  <p>aab}b</p>{<p>cc</p>\n      // Fix:    <p>aa{b}b</p><p>cc</p>\n      //\n      if (operation.sourcePosition.isBefore(operation.targetPosition)) {\n        // Case 1.\n        start = Position._createAt(end);\n        start.offset = 0;\n      } else {\n        if (!operation.deletionPosition.isEqual(start)) {\n          // Case 2.\n          end = operation.deletionPosition;\n        } // In both case 2 and 3 start is at the end of the merge-to element.\n\n\n        start = operation.targetPosition;\n      }\n\n      return new Range(start, end);\n    }\n\n    return new Range(start, end);\n  }\n  /**\n   * Returns an array containing one or two {@link ~Range ranges} that are a result of transforming this\n   * {@link ~Range range} by inserting `howMany` nodes at `insertPosition`. Two {@link ~Range ranges} are\n   * returned if the insertion was inside this {@link ~Range range} and `spread` is set to `true`.\n   *\n   * Examples:\n   *\n   *\t\tlet range = model.createRange(\n   *\t\t\tmodel.createPositionFromPath( root, [ 2, 7 ] ),\n   *\t\t\tmodel.createPositionFromPath( root, [ 4, 0, 1 ] )\n   *\t\t);\n   *\t\tlet transformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 1 ] ), 2 );\n   *\t\t// transformed array has one range from [ 4, 7 ] to [ 6, 0, 1 ]\n   *\n   *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 4, 0, 0 ] ), 4 );\n   *\t\t// transformed array has one range from [ 2, 7 ] to [ 4, 0, 5 ]\n   *\n   *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4 );\n   *\t\t// transformed array has one range, which is equal to original range\n   *\n   *\t\ttransformed = range._getTransformedByInsertion( model.createPositionFromPath( root, [ 3, 2 ] ), 4, true );\n   *\t\t// transformed array has two ranges: from [ 2, 7 ] to [ 3, 2 ] and from [ 3, 6 ] to [ 4, 0, 1 ]\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} insertPosition Position where nodes are inserted.\n   * @param {Number} howMany How many nodes are inserted.\n   * @param {Boolean} [spread] Flag indicating whether this {~Range range} should be spread if insertion\n   * was inside the range. Defaults to `false`.\n   * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n   */\n\n\n  _getTransformedByInsertion(insertPosition, howMany, spread = false) {\n    if (spread && this.containsPosition(insertPosition)) {\n      // Range has to be spread. The first part is from original start to the spread point.\n      // The other part is from spread point to the original end, but transformed by\n      // insertion to reflect insertion changes.\n      return [new Range(this.start, insertPosition), new Range(insertPosition.getShiftedBy(howMany), this.end._getTransformedByInsertion(insertPosition, howMany))];\n    } else {\n      const range = new Range(this.start, this.end);\n      range.start = range.start._getTransformedByInsertion(insertPosition, howMany);\n      range.end = range.end._getTransformedByInsertion(insertPosition, howMany);\n      return [range];\n    }\n  }\n  /**\n   * Returns an array containing {@link ~Range ranges} that are a result of transforming this\n   * {@link ~Range range} by moving `howMany` nodes from `sourcePosition` to `targetPosition`.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} sourcePosition Position from which nodes are moved.\n   * @param {module:engine/model/position~Position} targetPosition Position to where nodes are moved.\n   * @param {Number} howMany How many nodes are moved.\n   * @param {Boolean} [spread=false] Whether the range should be spread if the move points inside the range.\n   * @returns {Array.<module:engine/model/range~Range>} Result of the transformation.\n   */\n\n\n  _getTransformedByMove(sourcePosition, targetPosition, howMany, spread = false) {\n    // Special case for transforming a collapsed range. Just transform it like a position.\n    if (this.isCollapsed) {\n      const newPos = this.start._getTransformedByMove(sourcePosition, targetPosition, howMany);\n\n      return [new Range(newPos)];\n    } // Special case for transformation when a part of the range is moved towards the range.\n    //\n    // Examples:\n    //\n    // <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p></div><p>c[d</p><p>e]f</p>\n    // <p>e[f</p><div><p>a]b</p><p>cd</p></div> --> <p>e[f</p><p>a]b</p><div><p>cd</p></div>\n    //\n    // Without this special condition, the default algorithm leaves an \"artifact\" range from one of `differenceSet` parts:\n    //\n    // <div><p>ab</p><p>c[d</p></div><p>e]f</p> --> <div><p>ab</p>{</div>}<p>c[d</p><p>e]f</p>\n    //\n    // This special case is applied only if the range is to be kept together (not spread).\n\n\n    const moveRange = Range._createFromPositionAndShift(sourcePosition, howMany);\n\n    const insertPosition = targetPosition._getTransformedByDeletion(sourcePosition, howMany);\n\n    if (this.containsPosition(targetPosition) && !spread) {\n      if (moveRange.containsPosition(this.start) || moveRange.containsPosition(this.end)) {\n        const start = this.start._getTransformedByMove(sourcePosition, targetPosition, howMany);\n\n        const end = this.end._getTransformedByMove(sourcePosition, targetPosition, howMany);\n\n        return [new Range(start, end)];\n      }\n    } // Default algorithm.\n\n\n    let result;\n    const differenceSet = this.getDifference(moveRange);\n    let difference = null;\n    const common = this.getIntersection(moveRange);\n\n    if (differenceSet.length == 1) {\n      // `moveRange` and this range may intersect but may be separate.\n      difference = new Range(differenceSet[0].start._getTransformedByDeletion(sourcePosition, howMany), differenceSet[0].end._getTransformedByDeletion(sourcePosition, howMany));\n    } else if (differenceSet.length == 2) {\n      // `moveRange` is inside this range.\n      difference = new Range(this.start, this.end._getTransformedByDeletion(sourcePosition, howMany));\n    } // else, `moveRange` contains this range.\n\n\n    if (difference) {\n      result = difference._getTransformedByInsertion(insertPosition, howMany, common !== null || spread);\n    } else {\n      result = [];\n    }\n\n    if (common) {\n      const transformedCommon = new Range(common.start._getCombined(moveRange.start, insertPosition), common.end._getCombined(moveRange.start, insertPosition));\n\n      if (result.length == 2) {\n        result.splice(1, 0, transformedCommon);\n      } else {\n        result.push(transformedCommon);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Returns a copy of this range that is transformed by deletion of `howMany` nodes from `deletePosition`.\n   *\n   * If the deleted range is intersecting with the transformed range, the transformed range will be shrank.\n   *\n   * If the deleted range contains transformed range, `null` will be returned.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} deletionPosition Position from which nodes are removed.\n   * @param {Number} howMany How many nodes are removed.\n   * @returns {module:engine/model/range~Range|null} Result of the transformation.\n   */\n\n\n  _getTransformedByDeletion(deletePosition, howMany) {\n    let newStart = this.start._getTransformedByDeletion(deletePosition, howMany);\n\n    let newEnd = this.end._getTransformedByDeletion(deletePosition, howMany);\n\n    if (newStart == null && newEnd == null) {\n      return null;\n    }\n\n    if (newStart == null) {\n      newStart = deletePosition;\n    }\n\n    if (newEnd == null) {\n      newEnd = deletePosition;\n    }\n\n    return new Range(newStart, newEnd);\n  }\n  /**\n   * Creates a new range, spreading from specified {@link module:engine/model/position~Position position} to a position moved by\n   * given `shift`. If `shift` is a negative value, shifted position is treated as the beginning of the range.\n   *\n   * @protected\n   * @param {module:engine/model/position~Position} position Beginning of the range.\n   * @param {Number} shift How long the range should be.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  static _createFromPositionAndShift(position, shift) {\n    const start = position;\n    const end = position.getShiftedBy(shift);\n    return shift > 0 ? new this(start, end) : new this(end, start);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @protected\n   * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  static _createIn(element) {\n    return new this(Position._createAt(element, 0), Position._createAt(element, element.maxOffset));\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/model/item~Item model item} and ends after it.\n   *\n   * @protected\n   * @param {module:engine/model/item~Item} item\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  static _createOn(item) {\n    return this._createFromPositionAndShift(Position._createBefore(item), item.offsetSize);\n  }\n  /**\n   * Combines all ranges from the passed array into a one range. At least one range has to be passed.\n   * Passed ranges must not have common parts.\n   *\n   * The first range from the array is a reference range. If other ranges start or end on the exactly same position where\n   * the reference range, they get combined into one range.\n   *\n   *\t\t[  ][]  [    ][ ][             ][ ][]  [  ]  // Passed ranges, shown sorted\n   *\t\t[    ]                                       // The result of the function if the first range was a reference range.\n   *\t            [                           ]        // The result of the function if the third-to-seventh range was a reference range.\n   *\t                                           [  ]  // The result of the function if the last range was a reference range.\n   *\n   * @param {Array.<module:engine/model/range~Range>} ranges Ranges to combine.\n   * @returns {module:engine/model/range~Range} Combined range.\n   */\n\n\n  static _createFromRanges(ranges) {\n    if (ranges.length === 0) {\n      /**\n       * At least one range has to be passed to\n       * {@link module:engine/model/range~Range._createFromRanges `Range._createFromRanges()`}.\n       *\n       * @error range-create-from-ranges-empty-array\n       */\n      throw new CKEditorError('range-create-from-ranges-empty-array: At least one range has to be passed.', null);\n    } else if (ranges.length == 1) {\n      return ranges[0].clone();\n    } // 1. Set the first range in `ranges` array as a reference range.\n    // If we are going to return just a one range, one of the ranges need to be the reference one.\n    // Other ranges will be stuck to that range, if possible.\n\n\n    const ref = ranges[0]; // 2. Sort all the ranges so it's easier to process them.\n\n    ranges.sort((a, b) => {\n      return a.start.isAfter(b.start) ? 1 : -1;\n    }); // 3. Check at which index the reference range is now.\n\n    const refIndex = ranges.indexOf(ref); // 4. At this moment we don't need the original range.\n    // We are going to modify the result and we need to return a new instance of Range.\n    // We have to create a copy of the reference range.\n\n    const result = new this(ref.start, ref.end); // 5. Ranges should be checked and glued starting from the range that is closest to the reference range.\n    // Since ranges are sorted, start with the range with index that is closest to reference range index.\n\n    if (refIndex > 0) {\n      for (let i = refIndex - 1; true; i++) {\n        if (ranges[i].end.isEqual(result.start)) {\n          result.start = Position._createAt(ranges[i].start);\n        } else {\n          // If ranges are not starting/ending at the same position there is no point in looking further.\n          break;\n        }\n      }\n    } // 6. Ranges should be checked and glued starting from the range that is closest to the reference range.\n    // Since ranges are sorted, start with the range with index that is closest to reference range index.\n\n\n    for (let i = refIndex + 1; i < ranges.length; i++) {\n      if (ranges[i].start.isEqual(result.end)) {\n        result.end = Position._createAt(ranges[i].end);\n      } else {\n        // If ranges are not starting/ending at the same position there is no point in looking further.\n        break;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Creates a `Range` instance from given plain object (i.e. parsed JSON string).\n   *\n   * @param {Object} json Plain object to be converted to `Range`.\n   * @param {module:engine/model/document~Document} doc Document object that will be range owner.\n   * @returns {module:engine/model/element~Element} `Range` instance created using given plain object.\n   */\n\n\n  static fromJSON(json, doc) {\n    return new this(Position.fromJSON(json.start, doc), Position.fromJSON(json.end, doc));\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/mapper\n */\nimport ModelPosition from '../model/position';\nimport ModelRange from '../model/range';\nimport ViewPosition from '../view/position';\nimport ViewRange from '../view/range';\nimport ViewText from '../view/text';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Maps elements, positions and markers between {@link module:engine/view/document~Document the view} and\n * {@link module:engine/model/model the model}.\n *\n * The instance of the Mapper used for the editing pipeline is available in\n * {@link module:engine/controller/editingcontroller~EditingController#mapper `editor.editing.mapper`}.\n *\n * Mapper uses bound elements to find corresponding elements and positions, so, to get proper results,\n * all model elements should be {@link module:engine/conversion/mapper~Mapper#bindElements bound}.\n *\n * To map complex model to/from view relations, you may provide custom callbacks for\n * {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition modelToViewPosition event} and\n * {@link module:engine/conversion/mapper~Mapper#event:viewToModelPosition viewToModelPosition event} that are fired whenever\n * a position mapping request occurs.\n * Those events are fired by {@link module:engine/conversion/mapper~Mapper#toViewPosition toViewPosition}\n * and {@link module:engine/conversion/mapper~Mapper#toModelPosition toModelPosition} methods. `Mapper` adds it's own default callbacks\n * with `'lowest'` priority. To override default `Mapper` mapping, add custom callback with higher priority and\n * stop the event.\n */\n\nexport default class Mapper {\n  /**\n   * Creates an instance of the mapper.\n   */\n  constructor() {\n    /**\n     * Model element to view element mapping.\n     *\n     * @private\n     * @member {WeakMap}\n     */\n    this._modelToViewMapping = new WeakMap();\n    /**\n     * View element to model element mapping.\n     *\n     * @private\n     * @member {WeakMap}\n     */\n\n    this._viewToModelMapping = new WeakMap();\n    /**\n     * A map containing callbacks between view element names and functions evaluating length of view elements\n     * in model.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._viewToModelLengthCallbacks = new Map();\n    /**\n     * Model marker name to view elements mapping.\n     *\n     * Keys are `String`s while values are `Set`s with {@link module:engine/view/element~Element view elements}.\n     * One marker (name) can be mapped to multiple elements.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._markerNameToElements = new Map();\n    /**\n     * View element to model marker names mapping.\n     *\n     * This is reverse to {@link ~Mapper#_markerNameToElements} map.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._elementToMarkerNames = new Map();\n    /**\n     * Stores marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n     * has been removed, moved or renamed).\n     *\n     * @private\n     * @member {Set.<module:engine/model/markercollection~Marker>}\n     */\n\n    this._unboundMarkerNames = new Set(); // Default mapper algorithm for mapping model position to view position.\n\n    this.on('modelToViewPosition', (evt, data) => {\n      if (data.viewPosition) {\n        return;\n      }\n\n      const viewContainer = this._modelToViewMapping.get(data.modelPosition.parent);\n\n      data.viewPosition = this._findPositionIn(viewContainer, data.modelPosition.offset);\n    }, {\n      priority: 'low'\n    }); // Default mapper algorithm for mapping view position to model position.\n\n    this.on('viewToModelPosition', (evt, data) => {\n      if (data.modelPosition) {\n        return;\n      }\n\n      const viewBlock = this.findMappedViewAncestor(data.viewPosition);\n\n      const modelParent = this._viewToModelMapping.get(viewBlock);\n\n      const modelOffset = this._toModelOffset(data.viewPosition.parent, data.viewPosition.offset, viewBlock);\n\n      data.modelPosition = ModelPosition._createAt(modelParent, modelOffset);\n    }, {\n      priority: 'low'\n    });\n  }\n  /**\n   * Marks model and view elements as corresponding. Corresponding elements can be retrieved by using\n   * the {@link module:engine/conversion/mapper~Mapper#toModelElement toModelElement} and\n   * {@link module:engine/conversion/mapper~Mapper#toViewElement toViewElement} methods.\n   * The information that elements are bound is also used to translate positions.\n   *\n   * @param {module:engine/model/element~Element} modelElement Model element.\n   * @param {module:engine/view/element~Element} viewElement View element.\n   */\n\n\n  bindElements(modelElement, viewElement) {\n    this._modelToViewMapping.set(modelElement, viewElement);\n\n    this._viewToModelMapping.set(viewElement, modelElement);\n  }\n  /**\n   * Unbinds given {@link module:engine/view/element~Element view element} from the map.\n   *\n   * **Note:** view-to-model binding will be removed, if it existed. However, corresponding model-to-view binding\n   * will be removed only if model element is still bound to passed `viewElement`.\n   *\n   * This behavior lets for re-binding model element to another view element without fear of losing the new binding\n   * when the previously bound view element is unbound.\n   *\n   * @param {module:engine/view/element~Element} viewElement View element to unbind.\n   */\n\n\n  unbindViewElement(viewElement) {\n    const modelElement = this.toModelElement(viewElement);\n\n    this._viewToModelMapping.delete(viewElement);\n\n    if (this._elementToMarkerNames.has(viewElement)) {\n      for (const markerName of this._elementToMarkerNames.get(viewElement)) {\n        this._unboundMarkerNames.add(markerName);\n      }\n    }\n\n    if (this._modelToViewMapping.get(modelElement) == viewElement) {\n      this._modelToViewMapping.delete(modelElement);\n    }\n  }\n  /**\n   * Unbinds given {@link module:engine/model/element~Element model element} from the map.\n   *\n   * **Note:** model-to-view binding will be removed, if it existed. However, corresponding view-to-model binding\n   * will be removed only if view element is still bound to passed `modelElement`.\n   *\n   * This behavior lets for re-binding view element to another model element without fear of losing the new binding\n   * when the previously bound model element is unbound.\n   *\n   * @param {module:engine/model/element~Element} modelElement Model element to unbind.\n   */\n\n\n  unbindModelElement(modelElement) {\n    const viewElement = this.toViewElement(modelElement);\n\n    this._modelToViewMapping.delete(modelElement);\n\n    if (this._viewToModelMapping.get(viewElement) == modelElement) {\n      this._viewToModelMapping.delete(viewElement);\n    }\n  }\n  /**\n   * Binds given marker name with given {@link module:engine/view/element~Element view element}. The element\n   * will be added to the current set of elements bound with given marker name.\n   *\n   * @param {module:engine/view/element~Element} element Element to bind.\n   * @param {String} name Marker name.\n   */\n\n\n  bindElementToMarker(element, name) {\n    const elements = this._markerNameToElements.get(name) || new Set();\n    elements.add(element);\n    const names = this._elementToMarkerNames.get(element) || new Set();\n    names.add(name);\n\n    this._markerNameToElements.set(name, elements);\n\n    this._elementToMarkerNames.set(element, names);\n  }\n  /**\n   * Unbinds an element from given marker name.\n   *\n   * @param {module:engine/view/element~Element} element Element to unbind.\n   * @param {String} name Marker name.\n   */\n\n\n  unbindElementFromMarkerName(element, name) {\n    const nameToElements = this._markerNameToElements.get(name);\n\n    if (nameToElements) {\n      nameToElements.delete(element);\n\n      if (nameToElements.size == 0) {\n        this._markerNameToElements.delete(name);\n      }\n    }\n\n    const elementToNames = this._elementToMarkerNames.get(element);\n\n    if (elementToNames) {\n      elementToNames.delete(name);\n\n      if (elementToNames.size == 0) {\n        this._elementToMarkerNames.delete(element);\n      }\n    }\n  }\n  /**\n   * Returns all marker names of markers which has changed due to unbinding a view element (so it is assumed that the view element\n   * has been removed, moved or renamed) since the last flush. After returning, the marker names list is cleared.\n   *\n   * @returns {Array.<String>}\n   */\n\n\n  flushUnboundMarkerNames() {\n    const markerNames = Array.from(this._unboundMarkerNames);\n\n    this._unboundMarkerNames.clear();\n\n    return markerNames;\n  }\n  /**\n   * Removes all model to view and view to model bindings.\n   */\n\n\n  clearBindings() {\n    this._modelToViewMapping = new WeakMap();\n    this._viewToModelMapping = new WeakMap();\n    this._markerNameToElements = new Map();\n    this._elementToMarkerNames = new Map();\n    this._unboundMarkerNames = new Set();\n  }\n  /**\n   * Gets the corresponding model element.\n   *\n   * **Note:** {@link module:engine/view/uielement~UIElement} does not have corresponding element in model.\n   *\n   * @param {module:engine/view/element~Element} viewElement View element.\n   * @returns {module:engine/model/element~Element|undefined} Corresponding model element or `undefined` if not found.\n   */\n\n\n  toModelElement(viewElement) {\n    return this._viewToModelMapping.get(viewElement);\n  }\n  /**\n   * Gets the corresponding view element.\n   *\n   * @param {module:engine/model/element~Element} modelElement Model element.\n   * @returns {module:engine/view/element~Element|undefined} Corresponding view element or `undefined` if not found.\n   */\n\n\n  toViewElement(modelElement) {\n    return this._modelToViewMapping.get(modelElement);\n  }\n  /**\n   * Gets the corresponding model range.\n   *\n   * @param {module:engine/view/range~Range} viewRange View range.\n   * @returns {module:engine/model/range~Range} Corresponding model range.\n   */\n\n\n  toModelRange(viewRange) {\n    return new ModelRange(this.toModelPosition(viewRange.start), this.toModelPosition(viewRange.end));\n  }\n  /**\n   * Gets the corresponding view range.\n   *\n   * @param {module:engine/model/range~Range} modelRange Model range.\n   * @returns {module:engine/view/range~Range} Corresponding view range.\n   */\n\n\n  toViewRange(modelRange) {\n    return new ViewRange(this.toViewPosition(modelRange.start), this.toViewPosition(modelRange.end));\n  }\n  /**\n   * Gets the corresponding model position.\n   *\n   * @fires viewToModelPosition\n   * @param {module:engine/view/position~Position} viewPosition View position.\n   * @returns {module:engine/model/position~Position} Corresponding model position.\n   */\n\n\n  toModelPosition(viewPosition) {\n    const data = {\n      viewPosition,\n      mapper: this\n    };\n    this.fire('viewToModelPosition', data);\n    return data.modelPosition;\n  }\n  /**\n   * Gets the corresponding view position.\n   *\n   * @fires modelToViewPosition\n   * @param {module:engine/model/position~Position} modelPosition Model position.\n   * @param {Object} [options] Additional options for position mapping process.\n   * @param {Boolean} [options.isPhantom=false] Should be set to `true` if the model position to map is pointing to a place\n   * in model tree which no longer exists. For example, it could be an end of a removed model range.\n   * @returns {module:engine/view/position~Position} Corresponding view position.\n   */\n\n\n  toViewPosition(modelPosition, options = {\n    isPhantom: false\n  }) {\n    const data = {\n      modelPosition,\n      mapper: this,\n      isPhantom: options.isPhantom\n    };\n    this.fire('modelToViewPosition', data);\n    return data.viewPosition;\n  }\n  /**\n   * Gets all view elements bound to the given marker name.\n   *\n   * @param {String} name Marker name.\n   * @returns {Set.<module:engine/view/element~Element>|null} View elements bound with given marker name or `null`\n   * if no elements are bound to given marker name.\n   */\n\n\n  markerNameToElements(name) {\n    const boundElements = this._markerNameToElements.get(name);\n\n    if (!boundElements) {\n      return null;\n    }\n\n    const elements = new Set();\n\n    for (const element of boundElements) {\n      if (element.is('attributeElement')) {\n        for (const clone of element.getElementsWithSameId()) {\n          elements.add(clone);\n        }\n      } else {\n        elements.add(element);\n      }\n    }\n\n    return elements;\n  }\n  /**\n   * Registers a callback that evaluates the length in the model of a view element with given name.\n   *\n   * The callback is fired with one argument, which is a view element instance. The callback is expected to return\n   * a number representing the length of view element in model.\n   *\n   *\t\t// List item in view may contain nested list, which have other list items. In model though,\n   *\t\t// the lists are represented by flat structure. Because of those differences, length of list view element\n   *\t\t// may be greater than one. In the callback it's checked how many nested list items are in evaluated list item.\n   *\n   *\t\tfunction getViewListItemLength( element ) {\n   *\t\t\tlet length = 1;\n   *\n   *\t\t\tfor ( let child of element.getChildren() ) {\n   *\t\t\t\tif ( child.name == 'ul' || child.name == 'ol' ) {\n   *\t\t\t\t\tfor ( let item of child.getChildren() ) {\n   *\t\t\t\t\t\tlength += getViewListItemLength( item );\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\n   *\t\t\treturn length;\n   *\t\t}\n   *\n   *\t\tmapper.registerViewToModelLength( 'li', getViewListItemLength );\n   *\n   * @param {String} viewElementName Name of view element for which callback is registered.\n   * @param {Function} lengthCallback Function return a length of view element instance in model.\n   */\n\n\n  registerViewToModelLength(viewElementName, lengthCallback) {\n    this._viewToModelLengthCallbacks.set(viewElementName, lengthCallback);\n  }\n  /**\n   * For given `viewPosition`, finds and returns the closest ancestor of this position that has a mapping to\n   * the model.\n   *\n   * @param {module:engine/view/position~Position} viewPosition Position for which mapped ancestor should be found.\n   * @returns {module:engine/view/element~Element}\n   */\n\n\n  findMappedViewAncestor(viewPosition) {\n    let parent = viewPosition.parent;\n\n    while (!this._viewToModelMapping.has(parent)) {\n      parent = parent.parent;\n    }\n\n    return parent;\n  }\n  /**\n   * Calculates model offset based on the view position and the block element.\n   *\n   * Example:\n   *\n   *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, p ) -> 5\n   *\n   * Is a sum of:\n   *\n   *\t\t<p>foo|<b>bar</b></p> // _toModelOffset( p, 3, p ) -> 3\n   *\t\t<p>foo<b>ba|r</b></p> // _toModelOffset( b, 2, b ) -> 2\n   *\n   * @private\n   * @param {module:engine/view/element~Element} viewParent Position parent.\n   * @param {Number} viewOffset Position offset.\n   * @param {module:engine/view/element~Element} viewBlock Block used as a base to calculate offset.\n   * @returns {Number} Offset in the model.\n   */\n\n\n  _toModelOffset(viewParent, viewOffset, viewBlock) {\n    if (viewBlock != viewParent) {\n      // See example.\n      const offsetToParentStart = this._toModelOffset(viewParent.parent, viewParent.index, viewBlock);\n\n      const offsetInParent = this._toModelOffset(viewParent, viewOffset, viewParent);\n\n      return offsetToParentStart + offsetInParent;\n    } // viewBlock == viewParent, so we need to calculate the offset in the parent element.\n    // If the position is a text it is simple (\"ba|r\" -> 2).\n\n\n    if (viewParent.is('text')) {\n      return viewOffset;\n    } // If the position is in an element we need to sum lengths of siblings ( <b> bar </b> foo | -> 3 + 3 = 6 ).\n\n\n    let modelOffset = 0;\n\n    for (let i = 0; i < viewOffset; i++) {\n      modelOffset += this.getModelLength(viewParent.getChild(i));\n    }\n\n    return modelOffset;\n  }\n  /**\n   * Gets the length of the view element in the model.\n   *\n   * The length is calculated as follows:\n   * * if {@link #registerViewToModelLength length mapping callback} is provided for given `viewNode` it is used to\n   * evaluate model length (`viewNode` is used as first and only parameter passed to the callback),\n   * * length of a {@link module:engine/view/text~Text text node} is equal to the length of it's\n   * {@link module:engine/view/text~Text#data data},\n   * * length of a {@link module:engine/view/uielement~UIElement ui element} is equal to 0,\n   * * length of a mapped {@link module:engine/view/element~Element element} is equal to 1,\n   * * length of a not-mapped {@link module:engine/view/element~Element element} is equal to the length of it's children.\n   *\n   * Examples:\n   *\n   *\t\tfoo                          -> 3 // Text length is equal to it's data length.\n   *\t\t<p>foo</p>                   -> 1 // Length of an element which is mapped is by default equal to 1.\n   *\t\t<b>foo</b>                   -> 3 // Length of an element which is not mapped is a length of its children.\n   *\t\t<div><p>x</p><p>y</p></div>  -> 2 // Assuming that <div> is not mapped and <p> are mapped.\n   *\n   * @param {module:engine/view/element~Element} viewNode View node.\n   * @returns {Number} Length of the node in the tree model.\n   */\n\n\n  getModelLength(viewNode) {\n    if (this._viewToModelLengthCallbacks.get(viewNode.name)) {\n      const callback = this._viewToModelLengthCallbacks.get(viewNode.name);\n\n      return callback(viewNode);\n    } else if (this._viewToModelMapping.has(viewNode)) {\n      return 1;\n    } else if (viewNode.is('text')) {\n      return viewNode.data.length;\n    } else if (viewNode.is('uiElement')) {\n      return 0;\n    } else {\n      let len = 0;\n\n      for (const child of viewNode.getChildren()) {\n        len += this.getModelLength(child);\n      }\n\n      return len;\n    }\n  }\n  /**\n   * Finds the position in the view node (or its children) with the expected model offset.\n   *\n   * Example:\n   *\n   *\t\t<p>fo<b>bar</b>bom</p> -> expected offset: 4\n   *\n   *\t\t_findPositionIn( p, 4 ):\n   *\t\t<p>|fo<b>bar</b>bom</p> -> expected offset: 4, actual offset: 0\n   *\t\t<p>fo|<b>bar</b>bom</p> -> expected offset: 4, actual offset: 2\n   *\t\t<p>fo<b>bar</b>|bom</p> -> expected offset: 4, actual offset: 5 -> we are too far\n   *\n   *\t\t_findPositionIn( b, 4 - ( 5 - 3 ) ):\n   *\t\t<p>fo<b>|bar</b>bom</p> -> expected offset: 2, actual offset: 0\n   *\t\t<p>fo<b>bar|</b>bom</p> -> expected offset: 2, actual offset: 3 -> we are too far\n   *\n   *\t\t_findPositionIn( bar, 2 - ( 3 - 3 ) ):\n   *\t\tWe are in the text node so we can simple find the offset.\n   *\t\t<p>fo<b>ba|r</b>bom</p> -> expected offset: 2, actual offset: 2 -> position found\n   *\n   * @private\n   * @param {module:engine/view/element~Element} viewParent Tree view element in which we are looking for the position.\n   * @param {Number} expectedOffset Expected offset.\n   * @returns {module:engine/view/position~Position} Found position.\n   */\n\n\n  _findPositionIn(viewParent, expectedOffset) {\n    // Last scanned view node.\n    let viewNode; // Length of the last scanned view node.\n\n    let lastLength = 0;\n    let modelOffset = 0;\n    let viewOffset = 0; // In the text node it is simple: offset in the model equals offset in the text.\n\n    if (viewParent.is('text')) {\n      return new ViewPosition(viewParent, expectedOffset);\n    } // In other cases we add lengths of child nodes to find the proper offset.\n    // If it is smaller we add the length.\n\n\n    while (modelOffset < expectedOffset) {\n      viewNode = viewParent.getChild(viewOffset);\n      lastLength = this.getModelLength(viewNode);\n      modelOffset += lastLength;\n      viewOffset++;\n    } // If it equals we found the position.\n\n\n    if (modelOffset == expectedOffset) {\n      return this._moveViewPositionToTextNode(new ViewPosition(viewParent, viewOffset));\n    } // If it is higher we need to enter last child.\n    else {\n        // ( modelOffset - lastLength ) is the offset to the child we enter,\n        // so we subtract it from the expected offset to fine the offset in the child.\n        return this._findPositionIn(viewNode, expectedOffset - (modelOffset - lastLength));\n      }\n  }\n  /**\n   * Because we prefer positions in text nodes over positions next to text node moves view position to the text node\n   * if it was next to it.\n   *\n   *\t\t<p>[]<b>foo</b></p> -> <p>[]<b>foo</b></p> // do not touch if position is not directly next to text\n   *\t\t<p>foo[]<b>foo</b></p> -> <p>foo{}<b>foo</b></p> // move to text node\n   *\t\t<p><b>[]foo</b></p> -> <p><b>{}foo</b></p> // move to text node\n   *\n   * @private\n   * @param {module:engine/view/position~Position} viewPosition Position potentially next to text node.\n   * @returns {module:engine/view/position~Position} Position in text node if possible.\n   */\n\n\n  _moveViewPositionToTextNode(viewPosition) {\n    // If the position is just after text node, put it at the end of that text node.\n    // If the position is just before text node, put it at the beginning of that text node.\n    const nodeBefore = viewPosition.nodeBefore;\n    const nodeAfter = viewPosition.nodeAfter;\n\n    if (nodeBefore instanceof ViewText) {\n      return new ViewPosition(nodeBefore, nodeBefore.data.length);\n    } else if (nodeAfter instanceof ViewText) {\n      return new ViewPosition(nodeAfter, 0);\n    } // Otherwise, just return the given position.\n\n\n    return viewPosition;\n  }\n  /**\n   * Fired for each model-to-view position mapping request. The purpose of this event is to enable custom model-to-view position\n   * mapping. Callbacks added to this event take {@link module:engine/model/position~Position model position} and are expected to\n   * calculate {@link module:engine/view/position~Position view position}. Calculated view position should be added as `viewPosition`\n   * value in `data` object that is passed as one of parameters to the event callback.\n   *\n   * \t\t// Assume that \"captionedImage\" model element is converted to <img> and following <span> elements in view,\n   * \t\t// and the model element is bound to <img> element. Force mapping model positions inside \"captionedImage\" to that\n   * \t\t// <span> element.\n   *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n   *\t\t\tconst positionParent = modelPosition.parent;\n   *\n   *\t\t\tif ( positionParent.name == 'captionedImage' ) {\n   *\t\t\t\tconst viewImg = data.mapper.toViewElement( positionParent );\n   *\t\t\t\tconst viewCaption = viewImg.nextSibling; // The <span> element.\n   *\n   *\t\t\t\tdata.viewPosition = new ViewPosition( viewCaption, modelPosition.offset );\n   *\n   *\t\t\t\t// Stop the event if other callbacks should not modify calculated value.\n   *\t\t\t\tevt.stop();\n   *\t\t\t}\n   *\t\t} );\n   *\n   * **Note:** keep in mind that sometimes a \"phantom\" model position is being converted. \"Phantom\" model position is\n   * a position that points to a non-existing place in model. Such position might still be valid for conversion, though\n   * (it would point to a correct place in view when converted). One example of such situation is when a range is\n   * removed from model, there may be a need to map the range's end (which is no longer valid model position). To\n   * handle such situation, check `data.isPhantom` flag:\n   *\n   * \t\t// Assume that there is \"customElement\" model element and whenever position is before it, we want to move it\n   * \t\t// to the inside of the view element bound to \"customElement\".\n   *\t\tmapper.on( 'modelToViewPosition', ( evt, data ) => {\n   *\t\t\tif ( data.isPhantom ) {\n   *\t\t\t\treturn;\n   *\t\t\t}\n   *\n   *\t\t\t// Below line might crash for phantom position that does not exist in model.\n   *\t\t\tconst sibling = data.modelPosition.nodeBefore;\n   *\n   *\t\t\t// Check if this is the element we are interested in.\n   *\t\t\tif ( !sibling.is( 'customElement' ) ) {\n   *\t\t\t\treturn;\n   *\t\t\t}\n   *\n   *\t\t\tconst viewElement = data.mapper.toViewElement( sibling );\n   *\n   *\t\t\tdata.viewPosition = new ViewPosition( sibling, 0 );\n   *\n   *\t\t\tevt.stop();\n   *\t\t} );\n   *\n   * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n   * attach a custom callback after default callback and also use `data.viewPosition` calculated by default callback\n   * (for example to fix it).\n   *\n   * **Note:** default mapping callback will not fire if `data.viewPosition` is already set.\n   *\n   * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n   * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n   * the condition that checks if special case scenario happened should be as simple as possible.\n   *\n   * @event modelToViewPosition\n   * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n   * `viewPosition` value to that object with calculated {@link module:engine/view/position~Position view position}.\n   * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n   */\n\n  /**\n   * Fired for each view-to-model position mapping request. See {@link module:engine/conversion/mapper~Mapper#event:modelToViewPosition}.\n   *\n   * \t\t// See example in `modelToViewPosition` event description.\n   * \t\t// This custom mapping will map positions from <span> element next to <img> to the \"captionedImage\" element.\n   *\t\tmapper.on( 'viewToModelPosition', ( evt, data ) => {\n   *\t\t\tconst positionParent = viewPosition.parent;\n   *\n   *\t\t\tif ( positionParent.hasClass( 'image-caption' ) ) {\n   *\t\t\t\tconst viewImg = positionParent.previousSibling;\n   *\t\t\t\tconst modelImg = data.mapper.toModelElement( viewImg );\n   *\n   *\t\t\t\tdata.modelPosition = new ModelPosition( modelImg, viewPosition.offset );\n   *\t\t\t\tevt.stop();\n   *\t\t\t}\n   *\t\t} );\n   *\n   * **Note:** default mapping callback is provided with `low` priority setting and does not cancel the event, so it is possible to\n   * attach a custom callback after default callback and also use `data.modelPosition` calculated by default callback\n   * (for example to fix it).\n   *\n   * **Note:** default mapping callback will not fire if `data.modelPosition` is already set.\n   *\n   * **Note:** these callbacks are called **very often**. For efficiency reasons, it is advised to use them only when position\n   * mapping between given model and view elements is unsolvable using just elements mapping and default algorithm. Also,\n   * the condition that checks if special case scenario happened should be as simple as possible.\n   *\n   * @event viewToModelPosition\n   * @param {Object} data Data pipeline object that can store and pass data between callbacks. The callback should add\n   * `modelPosition` value to that object with calculated {@link module:engine/model/position~Position model position}.\n   * @param {module:engine/conversion/mapper~Mapper} data.mapper Mapper instance that fired the event.\n   */\n\n\n}\nmix(Mapper, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/modelconsumable\n */\nimport TextProxy from '../model/textproxy';\n/**\n * Manages a list of consumable values for {@link module:engine/model/item~Item model items}.\n *\n * Consumables are various aspects of the model. A model item can be broken down into singular properties that might be\n * taken into consideration when converting that item.\n *\n * `ModelConsumable` is used by {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} while analyzing changed\n * parts of {@link module:engine/model/document~Document the document}. The added / changed / removed model items are broken down\n * into singular properties (the item itself and it's attributes). All those parts are saved in `ModelConsumable`. Then,\n * during conversion, when given part of model item is converted (i.e. the view element has been inserted into the view,\n * but without attributes), consumable value is removed from `ModelConsumable`.\n *\n * For model items, `ModelConsumable` stores consumable values of one of following types: `insert`, `addattribute:<attributeKey>`,\n * `changeattributes:<attributeKey>`, `removeattributes:<attributeKey>`.\n *\n * In most cases, it is enough to let {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * gather consumable values, so there is no need to use\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#add add method} directly.\n * However, it is important to understand how consumable values can be\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n * See {@link module:engine/conversion/downcasthelpers default downcast converters} for more information.\n *\n * Keep in mind, that one conversion event may have multiple callbacks (converters) attached to it. Each of those is\n * able to convert one or more parts of the model. However, when one of those callbacks actually converts\n * something, other should not, because they would duplicate the results. Using `ModelConsumable` helps avoiding\n * this situation, because callbacks should only convert those values, which were not yet consumed from `ModelConsumable`.\n *\n * Consuming multiple values in a single callback:\n *\n *\t\t// Converter for custom `image` element that might have a `caption` element inside which changes\n *\t\t// how the image is displayed in the view:\n *\t\t//\n *\t\t// Model:\n *\t\t//\n *\t\t// [image]\n *\t\t//   └─ [caption]\n *\t\t//       └─ foo\n *\t\t//\n *\t\t// View:\n *\t\t//\n *\t\t// <figure>\n *\t\t//   ├─ <img />\n *\t\t//   └─ <caption>\n *\t\t//       └─ foo\n *\t\tmodelConversionDispatcher.on( 'insert:image', ( evt, data, conversionApi ) => {\n *\t\t\t// First, consume the `image` element.\n *\t\t\tconversionApi.consumable.consume( data.item, 'insert' );\n *\n *\t\t\t// Just create normal image element for the view.\n *\t\t\t// Maybe it will be \"decorated\" later.\n *\t\t\tconst viewImage = new ViewElement( 'img' );\n *\t\t\tconst insertPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\t\t\tconst viewWriter = conversionApi.writer;\n *\n *\t\t\t// Check if the `image` element has children.\n *\t\t\tif ( data.item.childCount > 0 ) {\n *\t\t\t\tconst modelCaption = data.item.getChild( 0 );\n *\n *\t\t\t\t// `modelCaption` insertion change is consumed from consumable values.\n *\t\t\t\t// It will not be converted by other converters, but it's children (probably some text) will be.\n *\t\t\t\t// Through mapping, converters for text will know where to insert contents of `modelCaption`.\n *\t\t\t\tif ( conversionApi.consumable.consume( modelCaption, 'insert' ) ) {\n *\t\t\t\t\tconst viewCaption = new ViewElement( 'figcaption' );\n *\n *\t\t\t\t\tconst viewImageHolder = new ViewElement( 'figure', null, [ viewImage, viewCaption ] );\n *\n *\t\t\t\t\tconversionApi.mapper.bindElements( modelCaption, viewCaption );\n *\t\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImageHolder );\n *\t\t\t\t\tviewWriter.insert( insertPosition, viewImageHolder );\n *\t\t\t\t}\n *\t\t\t} else {\n *\t\t\t\tconversionApi.mapper.bindElements( data.item, viewImage );\n *\t\t\t\tviewWriter.insert( insertPosition, viewImage );\n *\t\t\t}\n *\n *\t\t\tevt.stop();\n *\t\t} );\n */\n\nexport default class ModelConsumable {\n  /**\n   * Creates an empty consumables list.\n   */\n  constructor() {\n    /**\n     * Contains list of consumable values.\n     *\n     * @private\n     * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_consumable\n     */\n    this._consumable = new Map();\n    /**\n     * For each {@link module:engine/model/textproxy~TextProxy} added to `ModelConsumable`, this registry holds parent\n     * of that `TextProxy` and start and end indices of that `TextProxy`. This allows identification of `TextProxy`\n     * instances that points to the same part of the model but are different instances. Each distinct `TextProxy`\n     * is given unique `Symbol` which is then registered as consumable. This process is transparent for `ModelConsumable`\n     * API user because whenever `TextProxy` is added, tested, consumed or reverted, internal mechanisms of\n     * `ModelConsumable` translates `TextProxy` to that unique `Symbol`.\n     *\n     * @private\n     * @member {Map} module:engine/conversion/modelconsumable~ModelConsumable#_textProxyRegistry\n     */\n\n    this._textProxyRegistry = new Map();\n  }\n  /**\n   * Adds a consumable value to the consumables list and links it with given model item.\n   *\n   *\t\tmodelConsumable.add( modelElement, 'insert' ); // Add `modelElement` insertion change to consumable values.\n   *\t\tmodelConsumable.add( modelElement, 'addAttribute:bold' ); // Add `bold` attribute insertion on `modelElement` change.\n   *\t\tmodelConsumable.add( modelElement, 'removeAttribute:bold' ); // Add `bold` attribute removal on `modelElement` change.\n   *\t\tmodelConsumable.add( modelSelection, 'selection' ); // Add `modelSelection` to consumable values.\n   *\t\tmodelConsumable.add( modelRange, 'range' ); // Add `modelRange` to consumable values.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection that has the consumable.\n   * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n   * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n   */\n\n\n  add(item, type) {\n    type = _normalizeConsumableType(type);\n\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n\n    if (!this._consumable.has(item)) {\n      this._consumable.set(item, new Map());\n    }\n\n    this._consumable.get(item).set(type, true);\n  }\n  /**\n   * Removes given consumable value from given model item.\n   *\n   *\t\tmodelConsumable.consume( modelElement, 'insert' ); // Remove `modelElement` insertion change from consumable values.\n   *\t\tmodelConsumable.consume( modelElement, 'addAttribute:bold' ); // Remove `bold` attribute insertion on `modelElement` change.\n   *\t\tmodelConsumable.consume( modelElement, 'removeAttribute:bold' ); // Remove `bold` attribute removal on `modelElement` change.\n   *\t\tmodelConsumable.consume( modelSelection, 'selection' ); // Remove `modelSelection` from consumable values.\n   *\t\tmodelConsumable.consume( modelRange, 'range' ); // Remove 'modelRange' from consumable values.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection from which consumable will be consumed.\n   * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n   * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n   * @returns {Boolean} `true` if consumable value was available and was consumed, `false` otherwise.\n   */\n\n\n  consume(item, type) {\n    type = _normalizeConsumableType(type);\n\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n\n    if (this.test(item, type)) {\n      this._consumable.get(item).set(type, false);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Tests whether there is a consumable value of given type connected with given model item.\n   *\n   *\t\tmodelConsumable.test( modelElement, 'insert' ); // Check for `modelElement` insertion change.\n   *\t\tmodelConsumable.test( modelElement, 'addAttribute:bold' ); // Check for `bold` attribute insertion on `modelElement` change.\n   *\t\tmodelConsumable.test( modelElement, 'removeAttribute:bold' ); // Check for `bold` attribute removal on `modelElement` change.\n   *\t\tmodelConsumable.test( modelSelection, 'selection' ); // Check if `modelSelection` is consumable.\n   *\t\tmodelConsumable.test( modelRange, 'range' ); // Check if `modelRange` is consumable.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection to be tested.\n   * @param {String} type Consumable type. Will be normalized to a proper form, that is either `<word>` or `<part>:<part>`.\n   * Second colon and everything after will be cut. Passing event name is a safe and good practice.\n   * @returns {null|Boolean} `null` if such consumable was never added, `false` if the consumable values was\n   * already consumed or `true` if it was added and not consumed yet.\n   */\n\n\n  test(item, type) {\n    type = _normalizeConsumableType(type);\n\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n\n    const itemConsumables = this._consumable.get(item);\n\n    if (itemConsumables === undefined) {\n      return null;\n    }\n\n    const value = itemConsumables.get(type);\n\n    if (value === undefined) {\n      return null;\n    }\n\n    return value;\n  }\n  /**\n   * Reverts consuming of consumable value.\n   *\n   *\t\tmodelConsumable.revert( modelElement, 'insert' ); // Revert consuming `modelElement` insertion change.\n   *\t\tmodelConsumable.revert( modelElement, 'addAttribute:bold' ); // Revert consuming `bold` attribute insert from `modelElement`.\n   *\t\tmodelConsumable.revert( modelElement, 'removeAttribute:bold' ); // Revert consuming `bold` attribute remove from `modelElement`.\n   *\t\tmodelConsumable.revert( modelSelection, 'selection' ); // Revert consuming `modelSelection`.\n   *\t\tmodelConsumable.revert( modelRange, 'range' ); // Revert consuming `modelRange`.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection|module:engine/model/range~Range} item\n   * Model item, range or selection to be reverted.\n   * @param {String} type Consumable type.\n   * @returns {null|Boolean} `true` if consumable has been reversed, `false` otherwise. `null` if the consumable has\n   * never been added.\n   */\n\n\n  revert(item, type) {\n    type = _normalizeConsumableType(type);\n\n    if (item instanceof TextProxy) {\n      item = this._getSymbolForTextProxy(item);\n    }\n\n    const test = this.test(item, type);\n\n    if (test === false) {\n      this._consumable.get(item).set(type, true);\n\n      return true;\n    } else if (test === true) {\n      return false;\n    }\n\n    return null;\n  }\n  /**\n   * Gets a unique symbol for passed {@link module:engine/model/textproxy~TextProxy} instance. All `TextProxy` instances that\n   * have same parent, same start index and same end index will get the same symbol.\n   *\n   * Used internally to correctly consume `TextProxy` instances.\n   *\n   * @private\n   * @param {module:engine/model/textproxy~TextProxy} textProxy `TextProxy` instance to get a symbol for.\n   * @returns {Symbol} Symbol representing all equal instances of `TextProxy`.\n   */\n\n\n  _getSymbolForTextProxy(textProxy) {\n    let symbol = null;\n\n    const startMap = this._textProxyRegistry.get(textProxy.startOffset);\n\n    if (startMap) {\n      const endMap = startMap.get(textProxy.endOffset);\n\n      if (endMap) {\n        symbol = endMap.get(textProxy.parent);\n      }\n    }\n\n    if (!symbol) {\n      symbol = this._addSymbolForTextProxy(textProxy.startOffset, textProxy.endOffset, textProxy.parent);\n    }\n\n    return symbol;\n  }\n  /**\n   * Adds a symbol for given properties that characterizes a {@link module:engine/model/textproxy~TextProxy} instance.\n   *\n   * Used internally to correctly consume `TextProxy` instances.\n   *\n   * @private\n   * @param {Number} startIndex Text proxy start index in it's parent.\n   * @param {Number} endIndex Text proxy end index in it's parent.\n   * @param {module:engine/model/element~Element} parent Text proxy parent.\n   * @returns {Symbol} Symbol generated for given properties.\n   */\n\n\n  _addSymbolForTextProxy(start, end, parent) {\n    const symbol = Symbol('textProxySymbol');\n    let startMap, endMap;\n    startMap = this._textProxyRegistry.get(start);\n\n    if (!startMap) {\n      startMap = new Map();\n\n      this._textProxyRegistry.set(start, startMap);\n    }\n\n    endMap = startMap.get(end);\n\n    if (!endMap) {\n      endMap = new Map();\n      startMap.set(end, endMap);\n    }\n\n    endMap.set(parent, symbol);\n    return symbol;\n  }\n\n} // Returns a normalized consumable type name from given string. A normalized consumable type name is a string that has\n// at most one colon, for example: `insert` or `addMarker:highlight`. If string to normalize has more \"parts\" (more colons),\n// the other parts are dropped, for example: `addattribute:bold:$text` -> `addattributes:bold`.\n//\n// @param {String} type Consumable type.\n// @returns {String} Normalized consumable type.\n\nfunction _normalizeConsumableType(type) {\n  const parts = type.split(':');\n  return parts.length > 1 ? parts[0] + ':' + parts[1] : parts[0];\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/downcastdispatcher\n */\nimport Consumable from './modelconsumable';\nimport Range from '../model/range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { extend } from 'lodash-es';\n/**\n * `DowncastDispatcher` is a central point of downcasting (conversion from model to view), which is a process of reacting to changes\n * in the model and firing a set of events. Callbacks listening to those events are called converters. Those\n * converters role is to convert the model changes to changes in view (for example, adding view nodes or\n * changing attributes on view elements).\n *\n * During conversion process, `DowncastDispatcher` fires events, basing on state of the model and prepares\n * data for those events. It is important to understand that those events are connected with changes done on model,\n * for example: \"node has been inserted\" or \"attribute has changed\". This is in a contrary to upcasting (view to model conversion),\n * where we convert view state (view nodes) to a model tree.\n *\n * The events are prepared basing on a diff created by {@link module:engine/model/differ~Differ Differ}, which buffers them\n * and then passes to `DowncastDispatcher` as a diff between old model state and new model state.\n *\n * Note, that because changes are converted there is a need to have a mapping between model structure and view structure.\n * To map positions and elements during downcast (model to view conversion) use {@link module:engine/conversion/mapper~Mapper}.\n *\n * `DowncastDispatcher` fires following events for model tree changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * if a range of nodes has been inserted to the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove remove}\n * if a range of nodes has been removed from the model tree,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute}\n * if attribute has been added, changed or removed from a model node.\n *\n * For {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert insert}\n * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute attribute},\n * `DowncastDispatcher` generates {@link module:engine/conversion/modelconsumable~ModelConsumable consumables}.\n * These are used to have a control over which changes has been already consumed. It is useful when some converters\n * overwrite other or converts multiple changes (for example converts insertion of an element and also converts that\n * element's attributes during insertion).\n *\n * Additionally, `DowncastDispatcher` fires events for {@link module:engine/model/markercollection~Marker marker} changes:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} if a marker has been added,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} if a marker has been removed.\n *\n * Note, that changing a marker is done through removing the marker from the old range, and adding on the new range,\n * so both those events are fired.\n *\n * Finally, `DowncastDispatcher` also handles firing events for {@link module:engine/model/selection model selection}\n * conversion:\n *\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:selection}\n * which converts selection from model to view,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute}\n * which is fired for every selection attribute,\n * * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}\n * which is fired for every marker which contains selection.\n *\n * Unlike model tree and markers, events for selection are not fired for changes but for selection state.\n *\n * When providing custom listeners for `DowncastDispatcher` remember to check whether given change has not been\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} yet.\n *\n * When providing custom listeners for `DowncastDispatcher` keep in mind that any callback that had\n * {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed} a value from a consumable and\n * converted the change should also stop the event (for efficiency purposes).\n *\n * When providing custom listeners for `DowncastDispatcher` remember to use provided\n * {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer} to apply changes to the view document.\n *\n * Example of a custom converter for `DowncastDispatcher`:\n *\n *\t\t// We will convert inserting \"paragraph\" model element into the model.\n *\t\tdowncastDispatcher.on( 'insert:paragraph', ( evt, data, conversionApi ) => {\n *\t\t\t// Remember to check whether the change has not been consumed yet and consume it.\n *\t\t\tif ( conversionApi.consumable.consume( data.item, 'insert' ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\t// Translate position in model to position in view.\n *\t\t\tconst viewPosition = conversionApi.mapper.toViewPosition( data.range.start );\n *\n *\t\t\t// Create <p> element that will be inserted in view at `viewPosition`.\n *\t\t\tconst viewElement = conversionApi.writer.createContainerElement( 'p' );\n *\n *\t\t\t// Bind the newly created view element to model element so positions will map accordingly in future.\n *\t\t\tconversionApi.mapper.bindElements( data.item, viewElement );\n *\n *\t\t\t// Add the newly created view element to the view.\n *\t\t\tconversionApi.writer.insert( viewPosition, viewElement );\n *\n *\t\t\t// Remember to stop the event propagation.\n *\t\t\tevt.stop();\n *\t\t} );\n */\n\nexport default class DowncastDispatcher {\n  /**\n   * Creates a `DowncastDispatcher` instance.\n   *\n   * @see module:engine/conversion/downcastdispatcher~DowncastConversionApi\n   * @param {Object} conversionApi Additional properties for interface that will be passed to events fired\n   * by `DowncastDispatcher`.\n   */\n  constructor(conversionApi) {\n    /**\n     * Interface passed by dispatcher to the events callbacks.\n     *\n     * @member {module:engine/conversion/downcastdispatcher~DowncastConversionApi}\n     */\n    this.conversionApi = extend({\n      dispatcher: this\n    }, conversionApi);\n  }\n  /**\n   * Takes {@link module:engine/model/differ~Differ model differ} object with buffered changes and fires conversion basing on it.\n   *\n   * @param {module:engine/model/differ~Differ} differ Differ object with buffered changes.\n   * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertChanges(differ, markers, writer) {\n    // Before the view is updated, remove markers which have changed.\n    for (const change of differ.getMarkersToRemove()) {\n      this.convertMarkerRemove(change.name, change.range, writer);\n    } // Convert changes that happened on model tree.\n\n\n    for (const entry of differ.getChanges()) {\n      if (entry.type == 'insert') {\n        this.convertInsert(Range._createFromPositionAndShift(entry.position, entry.length), writer);\n      } else if (entry.type == 'remove') {\n        this.convertRemove(entry.position, entry.length, entry.name, writer);\n      } else {\n        // entry.type == 'attribute'.\n        this.convertAttribute(entry.range, entry.attributeKey, entry.attributeOldValue, entry.attributeNewValue, writer);\n      }\n    }\n\n    for (const markerName of this.conversionApi.mapper.flushUnboundMarkerNames()) {\n      const markerRange = markers.get(markerName).getRange();\n      this.convertMarkerRemove(markerName, markerRange, writer);\n      this.convertMarkerAdd(markerName, markerRange, writer);\n    } // After the view is updated, convert markers which have changed.\n\n\n    for (const change of differ.getMarkersToAdd()) {\n      this.convertMarkerAdd(change.name, change.range, writer);\n    }\n  }\n  /**\n   * Starts conversion of a range insertion.\n   *\n   * For each node in the range, {@link #event:insert insert event is fired}. For each attribute on each node,\n   * {@link #event:attribute attribute event is fired}.\n   *\n   * @fires insert\n   * @fires attribute\n   * @param {module:engine/model/range~Range} range Inserted range.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertInsert(range, writer) {\n    this.conversionApi.writer = writer; // Create a list of things that can be consumed, consisting of nodes and their attributes.\n\n    this.conversionApi.consumable = this._createInsertConsumable(range); // Fire a separate insert event for each node and text fragment contained in the range.\n\n    for (const value of range) {\n      const item = value.item;\n\n      const itemRange = Range._createFromPositionAndShift(value.previousPosition, value.length);\n\n      const data = {\n        item,\n        range: itemRange\n      };\n\n      this._testAndFire('insert', data); // Fire a separate addAttribute event for each attribute that was set on inserted items.\n      // This is important because most attributes converters will listen only to add/change/removeAttribute events.\n      // If we would not add this part, attributes on inserted nodes would not be converted.\n\n\n      for (const key of item.getAttributeKeys()) {\n        data.attributeKey = key;\n        data.attributeOldValue = null;\n        data.attributeNewValue = item.getAttribute(key);\n\n        this._testAndFire(`attribute:${key}`, data);\n      }\n    }\n\n    this._clearConversionApi();\n  }\n  /**\n   * Fires conversion of a single node removal. Fires {@link #event:remove remove event} with provided data.\n   *\n   * @param {module:engine/model/position~Position} position Position from which node was removed.\n   * @param {Number} length Offset size of removed node.\n   * @param {String} name Name of removed node.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertRemove(position, length, name, writer) {\n    this.conversionApi.writer = writer;\n    this.fire('remove:' + name, {\n      position,\n      length\n    }, this.conversionApi);\n\n    this._clearConversionApi();\n  }\n  /**\n   * Starts conversion of attribute change on given `range`.\n   *\n   * For each node in the given `range`, {@link #event:attribute attribute event} is fired with the passed data.\n   *\n   * @fires attribute\n   * @param {module:engine/model/range~Range} range Changed range.\n   * @param {String} key Key of the attribute that has changed.\n   * @param {*} oldValue Attribute value before the change or `null` if the attribute has not been set before.\n   * @param {*} newValue New attribute value or `null` if the attribute has been removed.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertAttribute(range, key, oldValue, newValue, writer) {\n    this.conversionApi.writer = writer; // Create a list with attributes to consume.\n\n    this.conversionApi.consumable = this._createConsumableForRange(range, `attribute:${key}`); // Create a separate attribute event for each node in the range.\n\n    for (const value of range) {\n      const item = value.item;\n\n      const itemRange = Range._createFromPositionAndShift(value.previousPosition, value.length);\n\n      const data = {\n        item,\n        range: itemRange,\n        attributeKey: key,\n        attributeOldValue: oldValue,\n        attributeNewValue: newValue\n      };\n\n      this._testAndFire(`attribute:${key}`, data);\n    }\n\n    this._clearConversionApi();\n  }\n  /**\n   * Starts model selection conversion.\n   *\n   * Fires events for given {@link module:engine/model/selection~Selection selection} to start selection conversion.\n   *\n   * @fires selection\n   * @fires addMarker\n   * @fires attribute\n   * @param {module:engine/model/selection~Selection} selection Selection to convert.\n   * @param {module:engine/model/markercollection~MarkerCollection} markers Markers connected with converted model.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertSelection(selection, markers, writer) {\n    const markersAtSelection = Array.from(markers.getMarkersAtPosition(selection.getFirstPosition()));\n    this.conversionApi.writer = writer;\n    this.conversionApi.consumable = this._createSelectionConsumable(selection, markersAtSelection);\n    this.fire('selection', {\n      selection\n    }, this.conversionApi);\n\n    if (!selection.isCollapsed) {\n      return;\n    }\n\n    for (const marker of markersAtSelection) {\n      const markerRange = marker.getRange();\n\n      if (!shouldMarkerChangeBeConverted(selection.getFirstPosition(), marker, this.conversionApi.mapper)) {\n        continue;\n      }\n\n      const data = {\n        item: selection,\n        markerName: marker.name,\n        markerRange\n      };\n\n      if (this.conversionApi.consumable.test(selection, 'addMarker:' + marker.name)) {\n        this.fire('addMarker:' + marker.name, data, this.conversionApi);\n      }\n    }\n\n    for (const key of selection.getAttributeKeys()) {\n      const data = {\n        item: selection,\n        range: selection.getFirstRange(),\n        attributeKey: key,\n        attributeOldValue: null,\n        attributeNewValue: selection.getAttribute(key)\n      }; // Do not fire event if the attribute has been consumed.\n\n      if (this.conversionApi.consumable.test(selection, 'attribute:' + data.attributeKey)) {\n        this.fire('attribute:' + data.attributeKey + ':$text', data, this.conversionApi);\n      }\n    }\n\n    this._clearConversionApi();\n  }\n  /**\n   * Converts added marker. Fires {@link #event:addMarker addMarker} event for each item\n   * in marker's range. If range is collapsed single event is dispatched. See event description for more details.\n   *\n   * @fires addMarker\n   * @param {String} markerName Marker name.\n   * @param {module:engine/model/range~Range} markerRange Marker range.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertMarkerAdd(markerName, markerRange, writer) {\n    // Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n    if (!markerRange.root.document || markerRange.root.rootName == '$graveyard') {\n      return;\n    }\n\n    this.conversionApi.writer = writer; // In markers' case, event name == consumable name.\n\n    const eventName = 'addMarker:' + markerName; //\n    // First, fire an event for the whole marker.\n    //\n\n    const consumable = new Consumable();\n    consumable.add(markerRange, eventName);\n    this.conversionApi.consumable = consumable;\n    this.fire(eventName, {\n      markerName,\n      markerRange\n    }, this.conversionApi); //\n    // Do not fire events for each item inside the range if the range got consumed.\n    //\n\n    if (!consumable.test(markerRange, eventName)) {\n      return;\n    } //\n    // Then, fire an event for each item inside the marker range.\n    //\n\n\n    this.conversionApi.consumable = this._createConsumableForRange(markerRange, eventName);\n\n    for (const item of markerRange.getItems()) {\n      // Do not fire event for already consumed items.\n      if (!this.conversionApi.consumable.test(item, eventName)) {\n        continue;\n      }\n\n      const data = {\n        item,\n        range: Range._createOn(item),\n        markerName,\n        markerRange\n      };\n      this.fire(eventName, data, this.conversionApi);\n    }\n\n    this._clearConversionApi();\n  }\n  /**\n   * Fires conversion of marker removal. Fires {@link #event:removeMarker removeMarker} event with provided data.\n   *\n   * @fires removeMarker\n   * @param {String} markerName Marker name.\n   * @param {module:engine/model/range~Range} markerRange Marker range.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that should be used to modify view document.\n   */\n\n\n  convertMarkerRemove(markerName, markerRange, writer) {\n    // Do not convert if range is in graveyard or not in the document (e.g. in DocumentFragment).\n    if (!markerRange.root.document || markerRange.root.rootName == '$graveyard') {\n      return;\n    }\n\n    this.conversionApi.writer = writer;\n    this.fire('removeMarker:' + markerName, {\n      markerName,\n      markerRange\n    }, this.conversionApi);\n\n    this._clearConversionApi();\n  }\n  /**\n   * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume from given range,\n   * assuming that the range has just been inserted to the model.\n   *\n   * @private\n   * @param {module:engine/model/range~Range} range Inserted range.\n   * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n   */\n\n\n  _createInsertConsumable(range) {\n    const consumable = new Consumable();\n\n    for (const value of range) {\n      const item = value.item;\n      consumable.add(item, 'insert');\n\n      for (const key of item.getAttributeKeys()) {\n        consumable.add(item, 'attribute:' + key);\n      }\n    }\n\n    return consumable;\n  }\n  /**\n   * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with values to consume for given range.\n   *\n   * @private\n   * @param {module:engine/model/range~Range} range Affected range.\n   * @param {String} type Consumable type.\n   * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n   */\n\n\n  _createConsumableForRange(range, type) {\n    const consumable = new Consumable();\n\n    for (const item of range.getItems()) {\n      consumable.add(item, type);\n    }\n\n    return consumable;\n  }\n  /**\n   * Creates {@link module:engine/conversion/modelconsumable~ModelConsumable} with selection consumable values.\n   *\n   * @private\n   * @param {module:engine/model/selection~Selection} selection Selection to create consumable from.\n   * @param {Iterable.<module:engine/model/markercollection~Marker>} markers Markers which contains selection.\n   * @returns {module:engine/conversion/modelconsumable~ModelConsumable} Values to consume.\n   */\n\n\n  _createSelectionConsumable(selection, markers) {\n    const consumable = new Consumable();\n    consumable.add(selection, 'selection');\n\n    for (const marker of markers) {\n      consumable.add(selection, 'addMarker:' + marker.name);\n    }\n\n    for (const key of selection.getAttributeKeys()) {\n      consumable.add(selection, 'attribute:' + key);\n    }\n\n    return consumable;\n  }\n  /**\n   * Tests passed `consumable` to check whether given event can be fired and if so, fires it.\n   *\n   * @private\n   * @fires insert\n   * @fires attribute\n   * @param {String} type Event type.\n   * @param {Object} data Event data.\n   */\n\n\n  _testAndFire(type, data) {\n    if (!this.conversionApi.consumable.test(data.item, type)) {\n      // Do not fire event if the item was consumed.\n      return;\n    }\n\n    const name = data.item.name || '$text';\n    this.fire(type + ':' + name, data, this.conversionApi);\n  }\n  /**\n   * Clears conversion API object.\n   *\n   * @private\n   */\n\n\n  _clearConversionApi() {\n    delete this.conversionApi.writer;\n    delete this.conversionApi.consumable;\n  }\n  /**\n   * Fired for inserted nodes.\n   *\n   * `insert` is a namespace for a class of events. Names of actually called events follow this pattern:\n   * `insert:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been inserted,\n   * or {@link module:engine/model/element~Element#name name} of inserted element.\n   *\n   * This way listeners can either listen to a general `insert` event or specific event (for example `insert:paragraph`).\n   *\n   * @event insert\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/model/item~Item} data.item Inserted item.\n   * @param {module:engine/model/range~Range} data.range Range spanning over inserted item.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n   * to be used by callback, passed in `DowncastDispatcher` constructor.\n   */\n\n  /**\n   * Fired for removed nodes.\n   *\n   * `remove` is a namespace for a class of events. Names of actually called events follow this pattern:\n   * `remove:name`. `name` is either `'$text'`, when {@link module:engine/model/text~Text a text node} has been removed,\n   * or the {@link module:engine/model/element~Element#name name} of removed element.\n   *\n   * This way listeners can either listen to a general `remove` event or specific event (for example `remove:paragraph`).\n   *\n   * @event remove\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/model/position~Position} data.position Position from which the node has been removed.\n   * @param {Number} data.length Offset size of the removed node.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n   * to be used by callback, passed in `DowncastDispatcher` constructor.\n   */\n\n  /**\n   * Fired in the following cases:\n   *\n   * * when an attribute has been added, changed, or removed from a node,\n   * * when a node with an attribute is inserted,\n   * * when collapsed model selection attribute is converted.\n   *\n   * `attribute` is a namespace for a class of events. Names of actually called events follow this pattern:\n   * `attribute:attributeKey:name`. `attributeKey` is the key of added/changed/removed attribute.\n   * `name` is either `'$text'` if change was on {@link module:engine/model/text~Text a text node},\n   * or the {@link module:engine/model/element~Element#name name} of element which attribute has changed.\n   *\n   * This way listeners can either listen to a general `attribute:bold` event or specific event (for example `attribute:src:image`).\n   *\n   * @event attribute\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/model/item~Item|module:engine/model/documentselection~DocumentSelection} data.item Changed item\n   * or converted selection.\n   * @param {module:engine/model/range~Range} data.range Range spanning over changed item or selection range.\n   * @param {String} data.attributeKey Attribute key.\n   * @param {*} data.attributeOldValue Attribute value before the change. This is `null` when selection attribute is converted.\n   * @param {*} data.attributeNewValue New attribute value.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n   * to be used by callback, passed in `DowncastDispatcher` constructor.\n   */\n\n  /**\n   * Fired for {@link module:engine/model/selection~Selection selection} changes.\n   *\n   * @event selection\n   * @param {module:engine/model/selection~Selection} selection Selection that is converted.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n   * to be used by callback, passed in `DowncastDispatcher` constructor.\n   */\n\n  /**\n   * Fired when a new marker is added to the model. Also fired when collapsed model selection that is inside marker is converted.\n   *\n   * `addMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n   * `addMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n   * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `addMarker:foo` or `addMarker:foo:abc` and\n   * `addMarker:foo:bar` events.\n   *\n   * If the marker range is not collapsed:\n   *\n   * * the event is fired for each item in the marker range one by one,\n   * * `conversionApi.consumable` includes each item of the marker range and the consumable value is same as event name.\n   *\n   * If the marker range is collapsed:\n   *\n   * * there is only one event,\n   * * `conversionApi.consumable` includes marker range with event name.\n   *\n   * If selection inside a marker is converted:\n   *\n   * * there is only one event,\n   * * `conversionApi.consumable` includes selection instance with event name.\n   *\n   * @event addMarker\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/model/item~Item|module:engine/model/selection~Selection} data.item Item inside the new marker or\n   * the selection that is being converted.\n   * @param {module:engine/model/range~Range} [data.range] Range spanning over converted item. Available only in marker conversion, if\n   * the marker range was not collapsed.\n   * @param {module:engine/model/range~Range} data.markerRange Marker range.\n   * @param {String} data.markerName Marker name.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n   * to be used by callback, passed in `DowncastDispatcher` constructor.\n   */\n\n  /**\n   * Fired when marker is removed from the model.\n   *\n   * `removeMarker` is a namespace for a class of events. Names of actually called events follow this pattern:\n   * `removeMarker:markerName`. By specifying certain marker names, you can make the events even more gradual. For example,\n   * if markers are named `foo:abc`, `foo:bar`, then it is possible to listen to `removeMarker:foo` or `removeMarker:foo:abc` and\n   * `removeMarker:foo:bar` events.\n   *\n   * @event removeMarker\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/model/range~Range} data.markerRange Marker range.\n   * @param {String} data.markerName Marker name.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface\n   * to be used by callback, passed in `DowncastDispatcher` constructor.\n   */\n\n\n}\nmix(DowncastDispatcher, EmitterMixin); // Helper function, checks whether change of `marker` at `modelPosition` should be converted. Marker changes are not\n// converted if they happen inside an element with custom conversion method.\n//\n// @param {module:engine/model/position~Position} modelPosition\n// @param {module:engine/model/markercollection~Marker} marker\n// @param {module:engine/conversion/mapper~Mapper} mapper\n// @returns {Boolean}\n\nfunction shouldMarkerChangeBeConverted(modelPosition, marker, mapper) {\n  const range = marker.getRange();\n  const ancestors = Array.from(modelPosition.getAncestors());\n  ancestors.shift(); // Remove root element. It cannot be passed to `model.Range#containsItem`.\n\n  ancestors.reverse();\n  const hasCustomHandling = ancestors.some(element => {\n    if (range.containsItem(element)) {\n      const viewElement = mapper.toViewElement(element);\n      return !!viewElement.getCustomProperty('addHighlight');\n    }\n  });\n  return !hasCustomHandling;\n}\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/downcastdispatcher~DowncastConversionApi\n */\n\n/**\n * The {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} instance.\n *\n * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #dispatcher\n */\n\n/**\n * Stores information about what parts of processed model item are still waiting to be handled. After a piece of model item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/modelconsumable~ModelConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/modelconsumable~ModelConsumable} #consumable\n */\n\n/**\n * The {@link module:engine/conversion/mapper~Mapper} instance.\n *\n * @member {module:engine/conversion/mapper~Mapper} #mapper\n */\n\n/**\n * The {@link module:engine/view/downcastwriter~DowncastWriter} instance used to manipulate data during conversion.\n *\n * @member {module:engine/view/downcastwriter~DowncastWriter} #writer\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/selection\n */\nimport Position from './position';\nimport Element from './element';\nimport Node from './node';\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n/**\n * Selection is a set of {@link module:engine/model/range~Range ranges}. It has a direction specified by its\n * {@link module:engine/model/selection~Selection#anchor anchor} and {@link module:engine/model/selection~Selection#focus focus}\n * (it can be {@link module:engine/model/selection~Selection#isBackward forward or backward}).\n * Additionally, selection may have its own attributes (think – whether text typed in in this selection\n * should have those attributes – e.g. whether you type a bolded text).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class Selection {\n  /**\n   * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n   * or creates an empty selection if no arguments were passed.\n   *\n   *\t\t// Creates empty selection without ranges.\n   *\t\tconst selection = writer.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = writer.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tconst selection = writer.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\t// Note: It doesn't copies selection attributes.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = writer.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the given document selection.\n   *\t\t// Note: It doesn't copies selection attributes.\n   *\t\tconst documentSelection = model.document.selection;\n   *\t\tconst selection = writer.createSelection( documentSelection );\n   *\n   *\t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tconst selection = writer.createSelection( position );\n   *\n   *\t\t// Creates selection at the given offset in the given element.\n   *\t\tconst paragraph = writer.createElement( 'paragraph' );\n   *\t\tconst selection = writer.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n   *\n   * Selection's constructor allow passing additional options (`'backward'`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * @param {module:engine/model/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   */\n  constructor(selectable, placeOrOffset, options) {\n    /**\n     * Specifies whether the last added range was added as a backward or forward range.\n     *\n     * @private\n     * @type {Boolean}\n     */\n    this._lastRangeBackward = false;\n    /**\n     * Stores selection ranges.\n     *\n     * @protected\n     * @type {Array.<module:engine/model/range~Range>}\n     */\n\n    this._ranges = [];\n    /**\n     * List of attributes set on current selection.\n     *\n     * @protected\n     * @type {Map.<String,*>}\n     */\n\n    this._attrs = new Map();\n\n    if (selectable) {\n      this.setTo(selectable, placeOrOffset, options);\n    }\n  }\n  /**\n   * Selection anchor. Anchor is the position from which the selection was started. If a user is making a selection\n   * by dragging the mouse, the anchor is where the user pressed the mouse button (the beggining of the selection).\n   *\n   * Anchor and {@link #focus} define the direction of the selection, which is important\n   * when expanding/shrinking selection. The focus moves, while the anchor should remain in the same place.\n   *\n   * Anchor is always set to the {@link module:engine/model/range~Range#start start} or\n   * {@link module:engine/model/range~Range#end end} position of the last of selection's ranges. Whether it is\n   * the `start` or `end` depends on the specified `options.backward`. See the {@link #setTo `setTo()`} method.\n   *\n   * May be set to `null` if there are no ranges in the selection.\n   *\n   * @see #focus\n   * @readonly\n   * @type {module:engine/model/position~Position|null}\n   */\n\n\n  get anchor() {\n    if (this._ranges.length > 0) {\n      const range = this._ranges[this._ranges.length - 1];\n      return this._lastRangeBackward ? range.end : range.start;\n    }\n\n    return null;\n  }\n  /**\n   * Selection focus. Focus is the position where the selection ends. If a user is making a selection\n   * by dragging the mouse, the focus is where the mouse cursor is.\n   *\n   * May be set to `null` if there are no ranges in the selection.\n   *\n   * @see #anchor\n   * @readonly\n   * @type {module:engine/model/position~Position|null}\n   */\n\n\n  get focus() {\n    if (this._ranges.length > 0) {\n      const range = this._ranges[this._ranges.length - 1];\n      return this._lastRangeBackward ? range.start : range.end;\n    }\n\n    return null;\n  }\n  /**\n   * Whether the selection is collapsed. Selection is collapsed when there is exactly one range in it\n   * and it is collapsed.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isCollapsed() {\n    const length = this._ranges.length;\n\n    if (length === 1) {\n      return this._ranges[0].isCollapsed;\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Returns the number of ranges in the selection.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get rangeCount() {\n    return this._ranges.length;\n  }\n  /**\n   * Specifies whether the selection's {@link #focus} precedes the selection's {@link #anchor}.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isBackward() {\n    return !this.isCollapsed && this._lastRangeBackward;\n  }\n  /**\n   * Checks whether this selection is equal to the given selection. Selections are equal if they have the same directions,\n   * the same number of ranges and all ranges from one selection equal to ranges from the another selection.\n   *\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} otherSelection\n   * Selection to compare with.\n   * @returns {Boolean} `true` if selections are equal, `false` otherwise.\n   */\n\n\n  isEqual(otherSelection) {\n    if (this.rangeCount != otherSelection.rangeCount) {\n      return false;\n    } else if (this.rangeCount === 0) {\n      return true;\n    }\n\n    if (!this.anchor.isEqual(otherSelection.anchor) || !this.focus.isEqual(otherSelection.focus)) {\n      return false;\n    }\n\n    for (const thisRange of this._ranges) {\n      let found = false;\n\n      for (const otherRange of otherSelection._ranges) {\n        if (thisRange.isEqual(otherRange)) {\n          found = true;\n          break;\n        }\n      }\n\n      if (!found) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Returns an iterable object that iterates over copies of selection ranges.\n   *\n   * @returns {Iterable.<module:engine/model/range~Range>}\n   */\n\n\n  *getRanges() {\n    for (const range of this._ranges) {\n      yield new Range(range.start, range.end);\n    }\n  }\n  /**\n   * Returns a copy of the first range in the selection.\n   * First range is the one which {@link module:engine/model/range~Range#start start} position\n   * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n   * (not to confuse with the first range added to the selection).\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/range~Range|null}\n   */\n\n\n  getFirstRange() {\n    let first = null;\n\n    for (const range of this._ranges) {\n      if (!first || range.start.isBefore(first.start)) {\n        first = range;\n      }\n    }\n\n    return first ? new Range(first.start, first.end) : null;\n  }\n  /**\n   * Returns a copy of the last range in the selection.\n   * Last range is the one which {@link module:engine/model/range~Range#end end} position\n   * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n   * recently added to the selection).\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/range~Range|null}\n   */\n\n\n  getLastRange() {\n    let last = null;\n\n    for (const range of this._ranges) {\n      if (!last || range.end.isAfter(last.end)) {\n        last = range;\n      }\n    }\n\n    return last ? new Range(last.start, last.end) : null;\n  }\n  /**\n   * Returns the first position in the selection.\n   * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n   * any other position in the selection.\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/position~Position|null}\n   */\n\n\n  getFirstPosition() {\n    const first = this.getFirstRange();\n    return first ? first.start.clone() : null;\n  }\n  /**\n   * Returns the last position in the selection.\n   * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n   * any other position in the selection.\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/position~Position|null}\n   */\n\n\n  getLastPosition() {\n    const lastRange = this.getLastRange();\n    return lastRange ? lastRange.end.clone() : null;\n  }\n  /**\n   * Sets this selection's ranges and direction to the specified location based on the given\n   * {@link module:engine/model/selection~Selectable selectable}.\n   *\n   *\t\t// Removes all selection's ranges.\n   *\t\tselection.setTo( null );\n   *\n   *\t\t// Sets selection to the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tselection.setTo( range );\n   *\n   *\t\t// Sets selection to given ranges.\n   *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tselection.setTo( ranges );\n   *\n   *\t\t// Sets selection to other selection.\n   *\t\t// Note: It doesn't copies selection attributes.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tselection.setTo( otherSelection );\n   *\n   *\t\t// Sets selection to the given document selection.\n   *\t\t// Note: It doesn't copies selection attributes.\n   *\t\tconst documentSelection = new DocumentSelection( doc );\n   *\t\tselection.setTo( documentSelection );\n   *\n   *\t\t// Sets collapsed selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tselection.setTo( position );\n   *\n   *\t\t// Sets collapsed selection at the position of the given node and an offset.\n   *\t\tselection.setTo( paragraph, offset );\n   *\n   * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n  \t * that element and ends after the last child of that element.\n   *\n   *\t\tselection.setTo( paragraph, 'in' );\n   *\n   * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n   *\n   *\t\tselection.setTo( paragraph, 'on' );\n   *\n   * `Selection#setTo()`' method allow passing additional options (`backward`) as the last argument.\n   *\n   *\t\t// Sets backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * @param {module:engine/model/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   */\n\n\n  setTo(selectable, placeOrOffset, options) {\n    if (selectable === null) {\n      this._setRanges([]);\n    } else if (selectable instanceof Selection) {\n      this._setRanges(selectable.getRanges(), selectable.isBackward);\n    } else if (selectable && typeof selectable.getRanges == 'function') {\n      // We assume that the selectable is a DocumentSelection.\n      // It can't be imported here, because it would lead to circular imports.\n      this._setRanges(selectable.getRanges(), selectable.isBackward);\n    } else if (selectable instanceof Range) {\n      this._setRanges([selectable], !!placeOrOffset && !!placeOrOffset.backward);\n    } else if (selectable instanceof Position) {\n      this._setRanges([new Range(selectable)]);\n    } else if (selectable instanceof Node) {\n      const backward = !!options && !!options.backward;\n      let range;\n\n      if (placeOrOffset == 'in') {\n        range = Range._createIn(selectable);\n      } else if (placeOrOffset == 'on') {\n        range = Range._createOn(selectable);\n      } else if (placeOrOffset !== undefined) {\n        range = new Range(Position._createAt(selectable, placeOrOffset));\n      } else {\n        /**\n         * selection.setTo requires the second parameter when the first parameter is a node.\n         *\n         * @error model-selection-setTo-required-second-parameter\n         */\n        throw new CKEditorError('model-selection-setTo-required-second-parameter: ' + 'selection.setTo requires the second parameter when the first parameter is a node.', [this, selectable]);\n      }\n\n      this._setRanges([range], backward);\n    } else if (isIterable(selectable)) {\n      // We assume that the selectable is an iterable of ranges.\n      this._setRanges(selectable, placeOrOffset && !!placeOrOffset.backward);\n    } else {\n      /**\n       * Cannot set the selection to the given place.\n       *\n       * Invalid parameters were specified when setting the selection. Common issues:\n       *\n       * * A {@link module:engine/model/textproxy~TextProxy} instance was passed instead of\n       * a real {@link module:engine/model/text~Text}.\n       * * View nodes were passed instead of model nodes.\n       * * `null`/`undefined` was passed.\n       *\n       * @error model-selection-setTo-not-selectable\n       */\n      throw new CKEditorError('model-selection-setTo-not-selectable: Cannot set the selection to the given place.', [this, selectable]);\n    }\n  }\n  /**\n   * Replaces all ranges that were added to the selection with given array of ranges. Last range of the array\n   * is treated like the last added range and is used to set {@link module:engine/model/selection~Selection#anchor} and\n   * {@link module:engine/model/selection~Selection#focus}. Accepts a flag describing in which direction the selection is made.\n   *\n   * @protected\n   * @fires change:range\n   * @param {Iterable.<module:engine/model/range~Range>} newRanges Ranges to set.\n   * @param {Boolean} [isLastBackward=false] Flag describing if last added range was selected forward - from start to end (`false`)\n   * or backward - from end to start (`true`).\n   */\n\n\n  _setRanges(newRanges, isLastBackward = false) {\n    newRanges = Array.from(newRanges); // Check whether there is any range in new ranges set that is different than all already added ranges.\n\n    const anyNewRange = newRanges.some(newRange => {\n      if (!(newRange instanceof Range)) {\n        /**\n         * Selection range set to an object that is not an instance of {@link module:engine/model/range~Range}.\n         *\n         * Only {@link module:engine/model/range~Range} instances can be used to set a selection.\n         * Common mistakes leading to this error are:\n         *\n         * * using DOM `Range` object,\n         * * incorrect CKEditor 5 installation with multiple `ckeditor5-engine` packages having different versions.\n         *\n         * @error model-selection-set-ranges-not-range\n         */\n        throw new CKEditorError('model-selection-set-ranges-not-range: ' + 'Selection range set to an object that is not an instance of model.Range.', [this, newRanges]);\n      }\n\n      return this._ranges.every(oldRange => {\n        return !oldRange.isEqual(newRange);\n      });\n    }); // Don't do anything if nothing changed.\n\n    if (newRanges.length === this._ranges.length && !anyNewRange) {\n      return;\n    }\n\n    this._removeAllRanges();\n\n    for (const range of newRanges) {\n      this._pushRange(range);\n    }\n\n    this._lastRangeBackward = !!isLastBackward;\n    this.fire('change:range', {\n      directChange: true\n    });\n  }\n  /**\n   * Moves {@link module:engine/model/selection~Selection#focus} to the specified location.\n   *\n   * The location can be specified in the same form as\n   * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n   *\n   * @fires change:range\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  setFocus(itemOrPosition, offset) {\n    if (this.anchor === null) {\n      /**\n       * Cannot set selection focus if there are no ranges in selection.\n       *\n       * @error model-selection-setFocus-no-ranges\n       */\n      throw new CKEditorError('model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.', [this, itemOrPosition]);\n    }\n\n    const newFocus = Position._createAt(itemOrPosition, offset);\n\n    if (newFocus.compareWith(this.focus) == 'same') {\n      return;\n    }\n\n    const anchor = this.anchor;\n\n    if (this._ranges.length) {\n      this._popRange();\n    }\n\n    if (newFocus.compareWith(anchor) == 'before') {\n      this._pushRange(new Range(newFocus, anchor));\n\n      this._lastRangeBackward = true;\n    } else {\n      this._pushRange(new Range(anchor, newFocus));\n\n      this._lastRangeBackward = false;\n    }\n\n    this.fire('change:range', {\n      directChange: true\n    });\n  }\n  /**\n   * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n   *\n   * @param {String} key Key of attribute to look for.\n   * @returns {*} Attribute value or `undefined`.\n   */\n\n\n  getAttribute(key) {\n    return this._attrs.get(key);\n  }\n  /**\n   * Returns iterable that iterates over this selection's attributes.\n   *\n   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  getAttributes() {\n    return this._attrs.entries();\n  }\n  /**\n   * Returns iterable that iterates over this selection's attribute keys.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getAttributeKeys() {\n    return this._attrs.keys();\n  }\n  /**\n   * Checks if the selection has an attribute for given key.\n   *\n   * @param {String} key Key of attribute to check.\n   * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n   */\n\n\n  hasAttribute(key) {\n    return this._attrs.has(key);\n  }\n  /**\n   * Removes an attribute with given key from the selection.\n   *\n   * If given attribute was set on the selection, fires the {@link #event:change:range} event with\n   * removed attribute key.\n   *\n   * @fires change:attribute\n   * @param {String} key Key of attribute to remove.\n   */\n\n\n  removeAttribute(key) {\n    if (this.hasAttribute(key)) {\n      this._attrs.delete(key);\n\n      this.fire('change:attribute', {\n        attributeKeys: [key],\n        directChange: true\n      });\n    }\n  }\n  /**\n   * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n   *\n   * If the attribute value has changed, fires the {@link #event:change:range} event with\n   * the attribute key.\n   *\n   * @fires change:attribute\n   * @param {String} key Key of attribute to set.\n   * @param {*} value Attribute value.\n   */\n\n\n  setAttribute(key, value) {\n    if (this.getAttribute(key) !== value) {\n      this._attrs.set(key, value);\n\n      this.fire('change:attribute', {\n        attributeKeys: [key],\n        directChange: true\n      });\n    }\n  }\n  /**\n   * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n   * one range in the selection, and that range contains exactly one element.\n   * Returns `null` if there is no selected element.\n   *\n   * @returns {module:engine/model/element~Element|null}\n   */\n\n\n  getSelectedElement() {\n    if (this.rangeCount !== 1) {\n      return null;\n    }\n\n    const range = this.getFirstRange();\n    const nodeAfterStart = range.start.nodeAfter;\n    const nodeBeforeEnd = range.end.nodeBefore;\n    return nodeAfterStart instanceof Element && nodeAfterStart == nodeBeforeEnd ? nodeAfterStart : null;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tselection.is( 'selection' ); // -> true\n   *\t\tselection.is( 'model:selection' ); // -> true\n   *\n   *\t\tselection.is( 'view:selection' ); // -> false\n   *\t\tselection.is( 'range' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'selection' || type == 'model:selection';\n  }\n  /**\n   * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n   *\n   * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n   *\n   * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n   * but will not return blocks nested in other blocks.\n   *\n   * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n   *\n   *\t\t<paragraph>[a</paragraph>\n   *\t\t<blockQuote>\n   *\t\t\t<paragraph>b</paragraph>\n   *\t\t</blockQuote>\n   *\t\t<paragraph>c]d</paragraph>\n   *\n   * In this case the paragraph will also be returned, despite the collapsed selection:\n   *\n   *\t\t<paragraph>[]a</paragraph>\n   *\n   * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n   *\n   *\t\t[<blockA></blockA>\n   *\t\t<blockB>\n   *\t\t\t<blockC></blockC>\n   *\t\t\t<blockD></blockD>\n   *\t\t</blockB>\n   *\t\t<blockE></blockE>]\n   *\n   * If the selection is inside a block all the inner blocks (A & B) are returned:\n   *\n   * \t\t<block>\n   *\t\t\t<blockA>[a</blockA>\n   * \t\t\t<blockB>b]</blockB>\n   * \t\t</block>\n   *\n   * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n   * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n   *\n   *\t\t<paragraph>[a</paragraph>\n   *\t\t<paragraph>b</paragraph>\n   *\t\t<paragraph>]c</paragraph> // this block will not be returned\n   *\n   * @returns {Iterable.<module:engine/model/element~Element>}\n   */\n\n\n  *getSelectedBlocks() {\n    const visited = new WeakSet();\n\n    for (const range of this.getRanges()) {\n      // Get start block of range in case of a collapsed range.\n      const startBlock = getParentBlock(range.start, visited);\n\n      if (startBlock && isTopBlockInRange(startBlock, range)) {\n        yield startBlock;\n      }\n\n      for (const value of range.getWalker()) {\n        const block = value.item;\n\n        if (value.type == 'elementEnd' && isUnvisitedTopBlock(block, visited, range)) {\n          yield block;\n        }\n      }\n\n      const endBlock = getParentBlock(range.end, visited); // #984. Don't return the end block if the range ends right at its beginning.\n\n      if (endBlock && !range.end.isTouching(Position._createAt(endBlock, 0)) && isTopBlockInRange(endBlock, range)) {\n        yield endBlock;\n      }\n    }\n  }\n  /**\n   * Checks whether the selection contains the entire content of the given element. This means that selection must start\n   * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n   * touching the element's end.\n   *\n   * By default, this method will check whether the entire content of the selection's current root is selected.\n   * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n   *\n   * @param {module:engine/model/element~Element} [element=this.anchor.root]\n   * @returns {Boolean}\n   */\n\n\n  containsEntireContent(element = this.anchor.root) {\n    const limitStartPosition = Position._createAt(element, 0);\n\n    const limitEndPosition = Position._createAt(element, 'end');\n\n    return limitStartPosition.isTouching(this.getFirstPosition()) && limitEndPosition.isTouching(this.getLastPosition());\n  }\n  /**\n   * Adds given range to internal {@link #_ranges ranges array}. Throws an error\n   * if given range is intersecting with any range that is already stored in this selection.\n   *\n   * @protected\n   * @param {module:engine/model/range~Range} range Range to add.\n   */\n\n\n  _pushRange(range) {\n    this._checkRange(range);\n\n    this._ranges.push(new Range(range.start, range.end));\n  }\n  /**\n   * Checks if given range intersects with ranges that are already in the selection. Throws an error if it does.\n   *\n   * @protected\n   * @param {module:engine/model/range~Range} range Range to check.\n   */\n\n\n  _checkRange(range) {\n    for (let i = 0; i < this._ranges.length; i++) {\n      if (range.isIntersecting(this._ranges[i])) {\n        /**\n         * Trying to add a range that intersects with another range in the selection.\n         *\n         * @error model-selection-range-intersects\n         * @param {module:engine/model/range~Range} addedRange Range that was added to the selection.\n         * @param {module:engine/model/range~Range} intersectingRange Range in the selection that intersects with `addedRange`.\n         */\n        throw new CKEditorError('model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.', [this, range], {\n          addedRange: range,\n          intersectingRange: this._ranges[i]\n        });\n      }\n    }\n  }\n  /**\n   * Deletes ranges from internal range array. Uses {@link #_popRange _popRange} to\n   * ensure proper ranges removal.\n   *\n   * @protected\n   */\n\n\n  _removeAllRanges() {\n    while (this._ranges.length > 0) {\n      this._popRange();\n    }\n  }\n  /**\n   * Removes most recently added range from the selection.\n   *\n   * @protected\n   */\n\n\n  _popRange() {\n    this._ranges.pop();\n  }\n  /**\n   * Fired when selection range(s) changed.\n   *\n   * @event change:range\n   * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n   * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n   * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n   * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n   * changed because the structure of the model has been changed (which means an indirect change).\n   * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n   * which mean that they are not updated once the document changes.\n   */\n\n  /**\n   * Fired when selection attribute changed.\n   *\n   * @event change:attribute\n   * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n   * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n   * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n   * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n   * changed in the model and its attributes were refreshed (which means an indirect change).\n   * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n   * which mean that they are not updated once the document changes.\n   * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n   */\n\n\n}\nmix(Selection, EmitterMixin); // Checks whether the given element extends $block in the schema and has a parent (is not a root).\n// Marks it as already visited.\n\nfunction isUnvisitedBlock(element, visited) {\n  if (visited.has(element)) {\n    return false;\n  }\n\n  visited.add(element);\n  return element.document.model.schema.isBlock(element) && element.parent;\n} // Checks if the given element is a $block was not previously visited and is a top block in a range.\n\n\nfunction isUnvisitedTopBlock(element, visited, range) {\n  return isUnvisitedBlock(element, visited) && isTopBlockInRange(element, range);\n} // Finds the lowest element in position's ancestors which is a block.\n// It will search until first ancestor that is a limit element.\n// Marks all ancestors as already visited to not include any of them later on.\n\n\nfunction getParentBlock(position, visited) {\n  const schema = position.parent.document.model.schema;\n  const ancestors = position.parent.getAncestors({\n    parentFirst: true,\n    includeSelf: true\n  });\n  let hasParentLimit = false;\n  const block = ancestors.find(element => {\n    // Stop searching after first parent node that is limit element.\n    if (hasParentLimit) {\n      return false;\n    }\n\n    hasParentLimit = schema.isLimit(element);\n    return !hasParentLimit && isUnvisitedBlock(element, visited);\n  }); // Mark all ancestors of this position's parent, because find() might've stopped early and\n  // the found block may be a child of another block.\n\n  ancestors.forEach(element => visited.add(element));\n  return block;\n} // Checks if the blocks is not nested in other block inside a range.\n//\n// @param {module:engine/model/elmenent~Element} block Block to check.\n// @param {module:engine/model/range~Range} range Range to check.\n\n\nfunction isTopBlockInRange(block, range) {\n  const parentBlock = findAncestorBlock(block);\n\n  if (!parentBlock) {\n    return true;\n  } // Add loose flag to check as parentRange can be equal to range.\n\n\n  const isParentInRange = range.containsRange(Range._createOn(parentBlock), true);\n  return !isParentInRange;\n} // Returns first ancestor block of a node.\n//\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/node~Node|undefined}\n\n\nfunction findAncestorBlock(node) {\n  const schema = node.document.model.schema;\n  let parent = node.parent;\n\n  while (parent) {\n    if (schema.isBlock(parent)) {\n      return parent;\n    }\n\n    parent = parent.parent;\n  }\n}\n/**\n * An entity that is used to set selection.\n *\n * See also {@link module:engine/model/selection~Selection#setTo}\n *\n * @typedef {\n *     module:engine/model/selection~Selection|\n *     module:engine/model/documentselection~DocumentSelection|\n *     module:engine/model/position~Position|\n *     module:engine/model/range~Range|\n *     module:engine/model/node~Node|\n *     Iterable.<module:engine/model/range~Range>|\n *     null\n * } module:engine/model/selection~Selectable\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liverange\n */\nimport Range from './range';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * `LiveRange` is a type of {@link module:engine/model/range~Range Range}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Be very careful when dealing with `LiveRange`. Each `LiveRange` instance bind events that might\n * have to be unbound. Use {@link module:engine/model/liverange~LiveRange#detach detach} whenever you don't need `LiveRange` anymore.\n */\n\nexport default class LiveRange extends Range {\n  /**\n   * Creates a live range.\n   *\n   * @see module:engine/model/range~Range\n   */\n  constructor(start, end) {\n    super(start, end);\n    bindWithDocument.call(this);\n  }\n  /**\n   * Unbinds all events previously bound by `LiveRange`. Use it whenever you don't need `LiveRange` instance\n   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n   * referring to it).\n   */\n\n\n  detach() {\n    this.stopListening();\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tliveRange.is( 'range' ); // -> true\n   *\t\tliveRange.is( 'model:range' ); // -> true\n   *\t\tliveRange.is( 'liveRange' ); // -> true\n   *\t\tliveRange.is( 'model:liveRange' ); // -> true\n   *\n   *\t\tliveRange.is( 'view:range' ); // -> false\n   *\t\tliveRange.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'liveRange' || type == 'model:liveRange' || super.is(type);\n  }\n  /**\n   * Creates a {@link module:engine/model/range~Range range instance} that is equal to this live range.\n   *\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  toRange() {\n    return new Range(this.start, this.end);\n  }\n  /**\n   * Creates a `LiveRange` instance that is equal to the given range.\n   *\n   * @param {module:engine/model/range~Range} range\n   * @returns {module:engine/model/liverange~LiveRange}\n   */\n\n\n  static fromRange(range) {\n    return new LiveRange(range.start, range.end);\n  }\n  /**\n   * @see module:engine/model/range~Range._createIn\n   * @static\n   * @protected\n   * @method module:engine/model/liverange~LiveRange._createIn\n   * @param {module:engine/model/element~Element} element\n   * @returns {module:engine/model/liverange~LiveRange}\n   */\n\n  /**\n   * @see module:engine/model/range~Range._createOn\n   * @static\n   * @protected\n   * @method module:engine/model/liverange~LiveRange._createOn\n   * @param {module:engine/model/element~Element} element\n   * @returns {module:engine/model/liverange~LiveRange}\n   */\n\n  /**\n   * @see module:engine/model/range~Range._createFromPositionAndShift\n   * @static\n   * @protected\n   * @method module:engine/model/liverange~LiveRange._createFromPositionAndShift\n   * @param {module:engine/model/position~Position} position\n   * @param {Number} shift\n   * @returns {module:engine/model/liverange~LiveRange}\n   */\n\n  /**\n   * Fired when `LiveRange` instance boundaries have changed due to changes in the\n   * {@link module:engine/model/document~Document document}.\n   *\n   * @event change:range\n   * @param {module:engine/model/range~Range} oldRange Range with start and end position equal to start and end position of this live\n   * range before it got changed.\n   * @param {Object} data Object with additional information about the change.\n   * @param {module:engine/model/position~Position|null} data.deletionPosition Source position for remove and merge changes.\n   * Available if the range was moved to the graveyard root, `null` otherwise.\n   */\n\n  /**\n   * Fired when `LiveRange` instance boundaries have not changed after a change in {@link module:engine/model/document~Document document}\n   * but the change took place inside the range, effectively changing its content.\n   *\n   * @event change:content\n   * @param {module:engine/model/range~Range} range Range with start and end position equal to start and end position of\n   * change range.\n   * @param {Object} data Object with additional information about the change.\n   * @param {null} data.deletionPosition Due to the nature of this event, this property is always set to `null`. It is passed\n   * for compatibility with the {@link module:engine/model/liverange~LiveRange#event:change:range} event.\n   */\n\n\n} // Binds this `LiveRange` to the {@link module:engine/model/document~Document document}\n// that owns this range's {@link module:engine/model/range~Range#root root}.\n//\n// @private\n\nfunction bindWithDocument() {\n  this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n    const operation = args[0];\n\n    if (!operation.isDocumentOperation) {\n      return;\n    }\n\n    transform.call(this, operation);\n  }, {\n    priority: 'low'\n  });\n} // Updates this range accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n\n\nfunction transform(operation) {\n  // Transform the range by the operation. Join the result ranges if needed.\n  const ranges = this.getTransformedByOperation(operation);\n\n  const result = Range._createFromRanges(ranges);\n\n  const boundariesChanged = !result.isEqual(this);\n  const contentChanged = doesOperationChangeRangeContent(this, operation);\n  let deletionPosition = null;\n\n  if (boundariesChanged) {\n    // If range boundaries have changed, fire `change:range` event.\n    //\n    if (result.root.rootName == '$graveyard') {\n      // If the range was moved to the graveyard root, set `deletionPosition`.\n      if (operation.type == 'remove') {\n        deletionPosition = operation.sourcePosition;\n      } else {\n        // Merge operation.\n        deletionPosition = operation.deletionPosition;\n      }\n    }\n\n    const oldRange = this.toRange();\n    this.start = result.start;\n    this.end = result.end;\n    this.fire('change:range', oldRange, {\n      deletionPosition\n    });\n  } else if (contentChanged) {\n    // If range boundaries have not changed, but there was change inside the range, fire `change:content` event.\n    this.fire('change:content', this.toRange(), {\n      deletionPosition\n    });\n  }\n} // Checks whether given operation changes something inside the range (even if it does not change boundaries).\n//\n// @private\n// @param {module:engine/model/range~Range} range Range to check.\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n// @returns {Boolean}\n\n\nfunction doesOperationChangeRangeContent(range, operation) {\n  switch (operation.type) {\n    case 'insert':\n      return range.containsPosition(operation.position);\n\n    case 'move':\n    case 'remove':\n    case 'reinsert':\n    case 'merge':\n      return range.containsPosition(operation.sourcePosition) || range.start.isEqual(operation.sourcePosition) || range.containsPosition(operation.targetPosition);\n\n    case 'split':\n      return range.containsPosition(operation.splitPosition) || range.containsPosition(operation.insertionPosition);\n  }\n\n  return false;\n}\n\nmix(LiveRange, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/documentselection\n */\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport Selection from './selection';\nimport LiveRange from './liverange';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nconst storePrefix = 'selection:';\n/**\n * `DocumentSelection` is a special selection which is used as the\n * {@link module:engine/model/document~Document#selection document's selection}.\n * There can be only one instance of `DocumentSelection` per document.\n *\n * Document selection can only be changed by using the {@link module:engine/model/writer~Writer} instance\n * inside the {@link module:engine/model/model~Model#change `change()`} block, as it provides a secure way to modify model.\n *\n * `DocumentSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n * to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n *\n * Differences between {@link module:engine/model/selection~Selection} and `DocumentSelection` are:\n * * there is always a range in `DocumentSelection` - even if no ranges were added there is a \"default range\"\n * present in the selection,\n * * ranges added to this selection updates automatically when the document changes,\n * * attributes of `DocumentSelection` are updated automatically according to selection ranges.\n *\n * Since `DocumentSelection` uses {@link module:engine/model/liverange~LiveRange live ranges}\n * and is updated when {@link module:engine/model/document~Document document}\n * changes, it cannot be set on {@link module:engine/model/node~Node nodes}\n * that are inside {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n * If you need to represent a selection in document fragment,\n * use {@link module:engine/model/selection~Selection Selection class} instead.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class DocumentSelection {\n  /**\n   * Creates an empty live selection for given {@link module:engine/model/document~Document}.\n   *\n   * @param {module:engine/model/document~Document} doc Document which owns this selection.\n   */\n  constructor(doc) {\n    /**\n     * Selection used internally by that class (`DocumentSelection` is a proxy to that selection).\n     *\n     * @protected\n     */\n    this._selection = new LiveSelection(doc);\n\n    this._selection.delegate('change:range').to(this);\n\n    this._selection.delegate('change:attribute').to(this);\n  }\n  /**\n   * Returns whether the selection is collapsed. Selection is collapsed when there is exactly one range which is\n   * collapsed.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isCollapsed() {\n    return this._selection.isCollapsed;\n  }\n  /**\n   * Selection anchor. Anchor may be described as a position where the most recent part of the selection starts.\n   * Together with {@link #focus} they define the direction of selection, which is important\n   * when expanding/shrinking selection. Anchor is always {@link module:engine/model/range~Range#start start} or\n   * {@link module:engine/model/range~Range#end end} position of the most recently added range.\n   *\n   * Is set to `null` if there are no ranges in selection.\n   *\n   * @see #focus\n   * @readonly\n   * @type {module:engine/model/position~Position|null}\n   */\n\n\n  get anchor() {\n    return this._selection.anchor;\n  }\n  /**\n   * Selection focus. Focus is a position where the selection ends.\n   *\n   * Is set to `null` if there are no ranges in selection.\n   *\n   * @see #anchor\n   * @readonly\n   * @type {module:engine/model/position~Position|null}\n   */\n\n\n  get focus() {\n    return this._selection.focus;\n  }\n  /**\n   * Returns number of ranges in selection.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get rangeCount() {\n    return this._selection.rangeCount;\n  }\n  /**\n   * Describes whether `Documentselection` has own range(s) set, or if it is defaulted to\n   * {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get hasOwnRange() {\n    return this._selection.hasOwnRange;\n  }\n  /**\n   * Specifies whether the {@link #focus}\n   * precedes {@link #anchor}.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isBackward() {\n    return this._selection.isBackward;\n  }\n  /**\n   * Describes whether the gravity is overridden (using {@link module:engine/model/writer~Writer#overrideSelectionGravity}) or not.\n   *\n   * Note that the gravity remains overridden as long as will not be restored the same number of times as it was overridden.\n   *\n   * @readonly\n   * @returns {Boolean}\n   */\n\n\n  get isGravityOverridden() {\n    return this._selection.isGravityOverridden;\n  }\n  /**\n   * A collection of selection markers.\n   * Marker is a selection marker when selection range is inside the marker range.\n   *\n   * @readonly\n   * @type {module:utils/collection~Collection.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  get markers() {\n    return this._selection.markers;\n  }\n  /**\n   * Used for the compatibility with the {@link module:engine/model/selection~Selection#isEqual} method.\n   *\n   * @protected\n   */\n\n\n  get _ranges() {\n    return this._selection._ranges;\n  }\n  /**\n   * Returns an iterable that iterates over copies of selection ranges.\n   *\n   * @returns {Iterable.<module:engine/model/range~Range>}\n   */\n\n\n  getRanges() {\n    return this._selection.getRanges();\n  }\n  /**\n   * Returns the first position in the selection.\n   * First position is the position that {@link module:engine/model/position~Position#isBefore is before}\n   * any other position in the selection.\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/position~Position|null}\n   */\n\n\n  getFirstPosition() {\n    return this._selection.getFirstPosition();\n  }\n  /**\n   * Returns the last position in the selection.\n   * Last position is the position that {@link module:engine/model/position~Position#isAfter is after}\n   * any other position in the selection.\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/position~Position|null}\n   */\n\n\n  getLastPosition() {\n    return this._selection.getLastPosition();\n  }\n  /**\n   * Returns a copy of the first range in the selection.\n   * First range is the one which {@link module:engine/model/range~Range#start start} position\n   * {@link module:engine/model/position~Position#isBefore is before} start position of all other ranges\n   * (not to confuse with the first range added to the selection).\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/range~Range|null}\n   */\n\n\n  getFirstRange() {\n    return this._selection.getFirstRange();\n  }\n  /**\n   * Returns a copy of the last range in the selection.\n   * Last range is the one which {@link module:engine/model/range~Range#end end} position\n   * {@link module:engine/model/position~Position#isAfter is after} end position of all other ranges (not to confuse with the range most\n   * recently added to the selection).\n   *\n   * Returns `null` if there are no ranges in selection.\n   *\n   * @returns {module:engine/model/range~Range|null}\n   */\n\n\n  getLastRange() {\n    return this._selection.getLastRange();\n  }\n  /**\n   * Gets elements of type {@link module:engine/model/schema~Schema#isBlock \"block\"} touched by the selection.\n   *\n   * This method's result can be used for example to apply block styling to all blocks covered by this selection.\n   *\n   * **Note:** `getSelectedBlocks()` returns blocks that are nested in other non-block elements\n   * but will not return blocks nested in other blocks.\n   *\n   * In this case the function will return exactly all 3 paragraphs (note: `<blockQuote>` is not a block itself):\n   *\n   *\t\t<paragraph>[a</paragraph>\n   *\t\t<blockQuote>\n   *\t\t\t<paragraph>b</paragraph>\n   *\t\t</blockQuote>\n   *\t\t<paragraph>c]d</paragraph>\n   *\n   * In this case the paragraph will also be returned, despite the collapsed selection:\n   *\n   *\t\t<paragraph>[]a</paragraph>\n   *\n   * In such a scenario, however, only blocks A, B & E will be returned as blocks C & D are nested in block B:\n   *\n   *\t\t[<blockA></blockA>\n   *\t\t<blockB>\n   *\t\t\t<blockC></blockC>\n   *\t\t\t<blockD></blockD>\n   *\t\t</blockB>\n   *\t\t<blockE></blockE>]\n   *\n   * If the selection is inside a block all the inner blocks (A & B) are returned:\n   *\n   * \t\t<block>\n   *\t\t\t<blockA>[a</blockA>\n   * \t\t\t<blockB>b]</blockB>\n   * \t\t</block>\n   *\n   * **Special case**: If a selection ends at the beginning of a block, that block is not returned as from user perspective\n   * this block wasn't selected. See [#984](https://github.com/ckeditor/ckeditor5-engine/issues/984) for more details.\n   *\n   *\t\t<paragraph>[a</paragraph>\n   *\t\t<paragraph>b</paragraph>\n   *\t\t<paragraph>]c</paragraph> // this block will not be returned\n   *\n   * @returns {Iterable.<module:engine/model/element~Element>}\n   */\n\n\n  getSelectedBlocks() {\n    return this._selection.getSelectedBlocks();\n  }\n  /**\n   * Returns the selected element. {@link module:engine/model/element~Element Element} is considered as selected if there is only\n   * one range in the selection, and that range contains exactly one element.\n   * Returns `null` if there is no selected element.\n   *\n   * @returns {module:engine/model/element~Element|null}\n   */\n\n\n  getSelectedElement() {\n    return this._selection.getSelectedElement();\n  }\n  /**\n   * Checks whether the selection contains the entire content of the given element. This means that selection must start\n   * at a position {@link module:engine/model/position~Position#isTouching touching} the element's start and ends at position\n   * touching the element's end.\n   *\n   * By default, this method will check whether the entire content of the selection's current root is selected.\n   * Useful to check if e.g. the user has just pressed <kbd>Ctrl</kbd> + <kbd>A</kbd>.\n   *\n   * @param {module:engine/model/element~Element} [element=this.anchor.root]\n   * @returns {Boolean}\n   */\n\n\n  containsEntireContent(element) {\n    return this._selection.containsEntireContent(element);\n  }\n  /**\n   * Unbinds all events previously bound by document selection.\n   */\n\n\n  destroy() {\n    this._selection.destroy();\n  }\n  /**\n   * Returns iterable that iterates over this selection's attribute keys.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getAttributeKeys() {\n    return this._selection.getAttributeKeys();\n  }\n  /**\n   * Returns iterable that iterates over this selection's attributes.\n   *\n   * Attributes are returned as arrays containing two items. First one is attribute key and second is attribute value.\n   * This format is accepted by native `Map` object and also can be passed in `Node` constructor.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  getAttributes() {\n    return this._selection.getAttributes();\n  }\n  /**\n   * Gets an attribute value for given key or `undefined` if that attribute is not set on the selection.\n   *\n   * @param {String} key Key of attribute to look for.\n   * @returns {*} Attribute value or `undefined`.\n   */\n\n\n  getAttribute(key) {\n    return this._selection.getAttribute(key);\n  }\n  /**\n   * Checks if the selection has an attribute for given key.\n   *\n   * @param {String} key Key of attribute to check.\n   * @returns {Boolean} `true` if attribute with given key is set on selection, `false` otherwise.\n   */\n\n\n  hasAttribute(key) {\n    return this._selection.hasAttribute(key);\n  }\n  /**\n   * Refreshes selection attributes and markers according to the current position in the model.\n   */\n\n\n  refresh() {\n    this._selection._updateMarkers();\n\n    this._selection._updateAttributes(false);\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\tselection.is( 'selection' ); // -> true\n   *\t\tselection.is( 'documentSelection' ); // -> true\n   *\t\tselection.is( 'model:selection' ); // -> true\n   *\t\tselection.is( 'model:documentSelection' ); // -> true\n   *\n   *\t\tselection.is( 'view:selection' ); // -> false\n   *\t\tselection.is( 'element' ); // -> false\n   *\t\tselection.is( 'node' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'selection' || type == 'model:selection' || type == 'documentSelection' || type == 'model:documentSelection';\n  }\n  /**\n   * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n   * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionFocus} method.\n   *\n   * The location can be specified in the same form as\n   * {@link module:engine/model/writer~Writer#createPositionAt writer.createPositionAt()} parameters.\n   *\n   * @see module:engine/model/writer~Writer#setSelectionFocus\n   * @protected\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  _setFocus(itemOrPosition, offset) {\n    this._selection.setFocus(itemOrPosition, offset);\n  }\n  /**\n   * Sets this selection's ranges and direction to the specified location based on the given\n   * {@link module:engine/model/selection~Selectable selectable}.\n   * Should be used only within the {@link module:engine/model/writer~Writer#setSelection} method.\n   *\n   * @see module:engine/model/writer~Writer#setSelection\n   * @protected\n   * @param {module:engine/model/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   */\n\n\n  _setTo(selectable, placeOrOffset, options) {\n    this._selection.setTo(selectable, placeOrOffset, options);\n  }\n  /**\n   * Sets attribute on the selection. If attribute with the same key already is set, it's value is overwritten.\n   * Should be used only within the {@link module:engine/model/writer~Writer#setSelectionAttribute} method.\n   *\n   * @see module:engine/model/writer~Writer#setSelectionAttribute\n   * @protected\n   * @param {String} key Key of the attribute to set.\n   * @param {*} value Attribute value.\n   */\n\n\n  _setAttribute(key, value) {\n    this._selection.setAttribute(key, value);\n  }\n  /**\n   * Removes an attribute with given key from the selection.\n   * If the given attribute was set on the selection, fires the {@link module:engine/model/selection~Selection#event:change:range}\n   * event with removed attribute key.\n   * Should be used only within the {@link module:engine/model/writer~Writer#removeSelectionAttribute} method.\n   *\n   * @see module:engine/model/writer~Writer#removeSelectionAttribute\n   * @protected\n   * @param {String} key Key of the attribute to remove.\n   */\n\n\n  _removeAttribute(key) {\n    this._selection.removeAttribute(key);\n  }\n  /**\n   * Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n   *\n   * @protected\n   * @returns {Iterable.<*>}\n   */\n\n\n  _getStoredAttributes() {\n    return this._selection._getStoredAttributes();\n  }\n  /**\n   * Temporarily changes the gravity of the selection from the left to the right.\n   *\n   * The gravity defines from which direction the selection inherits its attributes. If it's the default left\n   * gravity, the selection (after being moved by the the user) inherits attributes from its left hand side.\n   * This method allows to temporarily override this behavior by forcing the gravity to the right.\n   *\n   * It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n   * of the process.\n   *\n   * @see module:engine/model/writer~Writer#overrideSelectionGravity\n   * @protected\n   * @returns {String} The unique id which allows restoring the gravity.\n   */\n\n\n  _overrideGravity() {\n    return this._selection.overrideGravity();\n  }\n  /**\n   * Restores the {@link ~DocumentSelection#_overrideGravity overridden gravity}.\n   *\n   * Restoring the gravity is only possible using the unique identifier returned by\n   * {@link ~DocumentSelection#_overrideGravity}. Note that the gravity remains overridden as long as won't be restored\n   * the same number of times it was overridden.\n   *\n   * @see module:engine/model/writer~Writer#restoreSelectionGravity\n   * @protected\n   * @param {String} uid The unique id returned by {@link #_overrideGravity}.\n   */\n\n\n  _restoreGravity(uid) {\n    this._selection.restoreGravity(uid);\n  }\n  /**\n   * Generates and returns an attribute key for selection attributes store, basing on original attribute key.\n   *\n   * @protected\n   * @param {String} key Attribute key to convert.\n   * @returns {String} Converted attribute key, applicable for selection store.\n   */\n\n\n  static _getStoreAttributeKey(key) {\n    return storePrefix + key;\n  }\n  /**\n   * Checks whether the given attribute key is an attribute stored on an element.\n   *\n   * @protected\n   * @param {String} key\n   * @returns {Boolean}\n   */\n\n\n  static _isStoreAttributeKey(key) {\n    return key.startsWith(storePrefix);\n  }\n\n}\nmix(DocumentSelection, EmitterMixin);\n/**\n * Fired when selection range(s) changed.\n *\n * @event change:range\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its position\n * was directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed because the structure of the model has been changed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n */\n\n/**\n * Fired when selection attribute changed.\n *\n * @event change:attribute\n * @param {Boolean} directChange In case of {@link module:engine/model/selection~Selection} class it is always set\n * to `true` which indicates that the selection change was caused by a direct use of selection's API.\n * The {@link module:engine/model/documentselection~DocumentSelection}, however, may change because its attributes\n * were directly changed through the {@link module:engine/model/writer~Writer writer} or because its position was\n * changed in the model and its attributes were refreshed (which means an indirect change).\n * The indirect change does not occur in case of normal (detached) selections because they are \"static\" (as \"not live\")\n * which mean that they are not updated once the document changes.\n * @param {Array.<String>} attributeKeys Array containing keys of attributes that changed.\n */\n// `LiveSelection` is used internally by {@link module:engine/model/documentselection~DocumentSelection} and shouldn't be used directly.\n//\n// LiveSelection` is automatically updated upon changes in the {@link module:engine/model/document~Document document}\n// to always contain valid ranges. Its attributes are inherited from the text unless set explicitly.\n//\n// Differences between {@link module:engine/model/selection~Selection} and `LiveSelection` are:\n// * there is always a range in `LiveSelection` - even if no ranges were added there is a \"default range\"\n// present in the selection,\n// * ranges added to this selection updates automatically when the document changes,\n// * attributes of `LiveSelection` are updated automatically according to selection ranges.\n//\n// @extends module:engine/model/selection~Selection\n//\n\nclass LiveSelection extends Selection {\n  // Creates an empty live selection for given {@link module:engine/model/document~Document}.\n  // @param {module:engine/model/document~Document} doc Document which owns this selection.\n  constructor(doc) {\n    super(); // List of selection markers.\n    // Marker is a selection marker when selection range is inside the marker range.\n    //\n    // @type {module:utils/collection~Collection}\n\n    this.markers = new Collection({\n      idProperty: 'name'\n    }); // Document which owns this selection.\n    //\n    // @protected\n    // @member {module:engine/model/model~Model}\n\n    this._model = doc.model; // Document which owns this selection.\n    //\n    // @protected\n    // @member {module:engine/model/document~Document}\n\n    this._document = doc; // Keeps mapping of attribute name to priority with which the attribute got modified (added/changed/removed)\n    // last time. Possible values of priority are: `'low'` and `'normal'`.\n    //\n    // Priorities are used by internal `LiveSelection` mechanisms. All attributes set using `LiveSelection`\n    // attributes API are set with `'normal'` priority.\n    //\n    // @private\n    // @member {Map} module:engine/model/liveselection~LiveSelection#_attributePriority\n\n    this._attributePriority = new Map(); // Contains data required to fix ranges which have been moved to the graveyard.\n    // @private\n    // @member {Array} module:engine/model/liveselection~LiveSelection#_fixGraveyardRangesData\n\n    this._fixGraveyardRangesData = []; // Flag that informs whether the selection ranges have changed. It is changed on true when `LiveRange#change:range` event is fired.\n    // @private\n    // @member {Array} module:engine/model/liveselection~LiveSelection#_hasChangedRange\n\n    this._hasChangedRange = false; // Each overriding gravity adds an UID to the set and each removal removes it.\n    // Gravity is overridden when there's at least one UID in the set.\n    // Gravity is restored when the set is empty.\n    // This is to prevent conflicts when gravity is overridden by more than one feature at the same time.\n    // @private\n    // @type {Set}\n\n    this._overriddenGravityRegister = new Set(); // Ensure selection is correct after each operation.\n\n    this.listenTo(this._model, 'applyOperation', (evt, args) => {\n      const operation = args[0];\n\n      if (!operation.isDocumentOperation || operation.type == 'marker' || operation.type == 'rename' || operation.type == 'noop') {\n        return;\n      }\n\n      while (this._fixGraveyardRangesData.length) {\n        const {\n          liveRange,\n          sourcePosition\n        } = this._fixGraveyardRangesData.shift();\n\n        this._fixGraveyardSelection(liveRange, sourcePosition);\n      }\n\n      if (this._hasChangedRange) {\n        this._hasChangedRange = false;\n        this.fire('change:range', {\n          directChange: false\n        });\n      }\n    }, {\n      priority: 'lowest'\n    }); // Ensure selection is correct and up to date after each range change.\n\n    this.on('change:range', () => {\n      for (const range of this.getRanges()) {\n        if (!this._document._validateSelectionRange(range)) {\n          /**\n           * Range from {@link module:engine/model/documentselection~DocumentSelection document selection}\n           * starts or ends at incorrect position.\n           *\n           * @error document-selection-wrong-position\n           * @param {module:engine/model/range~Range} range\n           */\n          throw new CKEditorError('document-selection-wrong-position: Range from document selection starts or ends at incorrect position.', this, {\n            range\n          });\n        }\n      }\n    }); // Update markers data stored by the selection after each marker change.\n\n    this.listenTo(this._model.markers, 'update', () => this._updateMarkers()); // Ensure selection is up to date after each change block.\n\n    this.listenTo(this._document, 'change', (evt, batch) => {\n      clearAttributesStoredInElement(this._model, batch);\n    });\n  }\n\n  get isCollapsed() {\n    const length = this._ranges.length;\n    return length === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed;\n  }\n\n  get anchor() {\n    return super.anchor || this._document._getDefaultRange().start;\n  }\n\n  get focus() {\n    return super.focus || this._document._getDefaultRange().end;\n  }\n\n  get rangeCount() {\n    return this._ranges.length ? this._ranges.length : 1;\n  } // Describes whether `LiveSelection` has own range(s) set, or if it is defaulted to\n  // {@link module:engine/model/document~Document#_getDefaultRange document's default range}.\n  //\n  // @readonly\n  // @type {Boolean}\n\n\n  get hasOwnRange() {\n    return this._ranges.length > 0;\n  } // When set to `true` then selection attributes on node before the caret won't be taken\n  // into consideration while updating selection attributes.\n  //\n  // @protected\n  // @type {Boolean}\n\n\n  get isGravityOverridden() {\n    return !!this._overriddenGravityRegister.size;\n  } // Unbinds all events previously bound by live selection.\n\n\n  destroy() {\n    for (let i = 0; i < this._ranges.length; i++) {\n      this._ranges[i].detach();\n    }\n\n    this.stopListening();\n  }\n\n  *getRanges() {\n    if (this._ranges.length) {\n      yield* super.getRanges();\n    } else {\n      yield this._document._getDefaultRange();\n    }\n  }\n\n  getFirstRange() {\n    return super.getFirstRange() || this._document._getDefaultRange();\n  }\n\n  getLastRange() {\n    return super.getLastRange() || this._document._getDefaultRange();\n  }\n\n  setTo(selectable, optionsOrPlaceOrOffset, options) {\n    super.setTo(selectable, optionsOrPlaceOrOffset, options);\n\n    this._updateAttributes(true);\n  }\n\n  setFocus(itemOrPosition, offset) {\n    super.setFocus(itemOrPosition, offset);\n\n    this._updateAttributes(true);\n  }\n\n  setAttribute(key, value) {\n    if (this._setAttribute(key, value)) {\n      // Fire event with exact data.\n      const attributeKeys = [key];\n      this.fire('change:attribute', {\n        attributeKeys,\n        directChange: true\n      });\n    }\n  }\n\n  removeAttribute(key) {\n    if (this._removeAttribute(key)) {\n      // Fire event with exact data.\n      const attributeKeys = [key];\n      this.fire('change:attribute', {\n        attributeKeys,\n        directChange: true\n      });\n    }\n  }\n\n  overrideGravity() {\n    const overrideUid = uid(); // Remember that another overriding has been requested. It will need to be removed\n    // before the gravity is to be restored.\n\n    this._overriddenGravityRegister.add(overrideUid);\n\n    if (this._overriddenGravityRegister.size === 1) {\n      this._updateAttributes(true);\n    }\n\n    return overrideUid;\n  }\n\n  restoreGravity(uid) {\n    if (!this._overriddenGravityRegister.has(uid)) {\n      /**\n       * Restoring gravity for an unknown UID is not possible. Make sure you are using a correct\n       * UID obtained from the {@link module:engine/model/writer~Writer#overrideSelectionGravity} to restore.\n       *\n       * @error document-selection-gravity-wrong-restore\n       * @param {String} uid The unique identifier returned by\n       * {@link module:engine/model/documentselection~DocumentSelection#_overrideGravity}.\n       */\n      throw new CKEditorError('document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.', this, {\n        uid\n      });\n    }\n\n    this._overriddenGravityRegister.delete(uid); // Restore gravity only when all overriding have been restored.\n\n\n    if (!this.isGravityOverridden) {\n      this._updateAttributes(true);\n    }\n  }\n\n  _popRange() {\n    this._ranges.pop().detach();\n  }\n\n  _pushRange(range) {\n    const liveRange = this._prepareRange(range); // `undefined` is returned when given `range` is in graveyard root.\n\n\n    if (liveRange) {\n      this._ranges.push(liveRange);\n    }\n  } // Prepares given range to be added to selection. Checks if it is correct,\n  // converts it to {@link module:engine/model/liverange~LiveRange LiveRange}\n  // and sets listeners listening to the range's change event.\n  //\n  // @private\n  // @param {module:engine/model/range~Range} range\n\n\n  _prepareRange(range) {\n    this._checkRange(range);\n\n    if (range.root == this._document.graveyard) {\n      // @if CK_DEBUG // console.warn( 'Trying to add a Range that is in the graveyard root. Range rejected.' );\n      return;\n    }\n\n    const liveRange = LiveRange.fromRange(range);\n    liveRange.on('change:range', (evt, oldRange, data) => {\n      this._hasChangedRange = true; // If `LiveRange` is in whole moved to the graveyard, save necessary data. It will be fixed on `Model#applyOperation` event.\n\n      if (liveRange.root == this._document.graveyard) {\n        this._fixGraveyardRangesData.push({\n          liveRange,\n          sourcePosition: data.deletionPosition\n        });\n      }\n    });\n    return liveRange;\n  }\n\n  _updateMarkers() {\n    const markers = [];\n\n    for (const marker of this._model.markers) {\n      const markerRange = marker.getRange();\n\n      for (const selectionRange of this.getRanges()) {\n        if (markerRange.containsRange(selectionRange, !selectionRange.isCollapsed)) {\n          markers.push(marker);\n        }\n      }\n    }\n\n    for (const marker of markers) {\n      if (!this.markers.has(marker)) {\n        this.markers.add(marker);\n      }\n    }\n\n    for (const marker of Array.from(this.markers)) {\n      if (!markers.includes(marker)) {\n        this.markers.remove(marker);\n      }\n    }\n  } // Updates this selection attributes according to its ranges and the {@link module:engine/model/document~Document model document}.\n  //\n  // @protected\n  // @param {Boolean} clearAll\n  // @fires change:attribute\n\n\n  _updateAttributes(clearAll) {\n    const newAttributes = toMap(this._getSurroundingAttributes());\n    const oldAttributes = toMap(this.getAttributes());\n\n    if (clearAll) {\n      // If `clearAll` remove all attributes and reset priorities.\n      this._attributePriority = new Map();\n      this._attrs = new Map();\n    } else {\n      // If not, remove only attributes added with `low` priority.\n      for (const [key, priority] of this._attributePriority) {\n        if (priority == 'low') {\n          this._attrs.delete(key);\n\n          this._attributePriority.delete(key);\n        }\n      }\n    }\n\n    this._setAttributesTo(newAttributes); // Let's evaluate which attributes really changed.\n\n\n    const changed = []; // First, loop through all attributes that are set on selection right now.\n    // Check which of them are different than old attributes.\n\n    for (const [newKey, newValue] of this.getAttributes()) {\n      if (!oldAttributes.has(newKey) || oldAttributes.get(newKey) !== newValue) {\n        changed.push(newKey);\n      }\n    } // Then, check which of old attributes got removed.\n\n\n    for (const [oldKey] of oldAttributes) {\n      if (!this.hasAttribute(oldKey)) {\n        changed.push(oldKey);\n      }\n    } // Fire event with exact data (fire only if anything changed).\n\n\n    if (changed.length > 0) {\n      this.fire('change:attribute', {\n        attributeKeys: changed,\n        directChange: false\n      });\n    }\n  } // Internal method for setting `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n  // parameter).\n  //\n  // @private\n  // @param {String} key Attribute key.\n  // @param {*} value Attribute value.\n  // @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n  // is caused by `Batch` API.\n  // @returns {Boolean} Whether value has changed.\n\n\n  _setAttribute(key, value, directChange = true) {\n    const priority = directChange ? 'normal' : 'low';\n\n    if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n      // Priority too low.\n      return false;\n    }\n\n    const oldValue = super.getAttribute(key); // Don't do anything if value has not changed.\n\n    if (oldValue === value) {\n      return false;\n    }\n\n    this._attrs.set(key, value); // Update priorities map.\n\n\n    this._attributePriority.set(key, priority);\n\n    return true;\n  } // Internal method for removing `LiveSelection` attribute. Supports attribute priorities (through `directChange`\n  // parameter).\n  //\n  // NOTE: Even if attribute is not present in the selection but is provided to this method, it's priority will\n  // be changed according to `directChange` parameter.\n  //\n  // @private\n  // @param {String} key Attribute key.\n  // @param {Boolean} [directChange=true] `true` if the change is caused by `Selection` API, `false` if change\n  // is caused by `Batch` API.\n  // @returns {Boolean} Whether attribute was removed. May not be true if such attributes didn't exist or the\n  // existing attribute had higher priority.\n\n\n  _removeAttribute(key, directChange = true) {\n    const priority = directChange ? 'normal' : 'low';\n\n    if (priority == 'low' && this._attributePriority.get(key) == 'normal') {\n      // Priority too low.\n      return false;\n    } // Update priorities map.\n\n\n    this._attributePriority.set(key, priority); // Don't do anything if value has not changed.\n\n\n    if (!super.hasAttribute(key)) {\n      return false;\n    }\n\n    this._attrs.delete(key);\n\n    return true;\n  } // Internal method for setting multiple `LiveSelection` attributes. Supports attribute priorities (through\n  // `directChange` parameter).\n  //\n  // @private\n  // @param {Map.<String,*>} attrs Iterable object containing attributes to be set.\n  // @returns {Set.<String>} Changed attribute keys.\n\n\n  _setAttributesTo(attrs) {\n    const changed = new Set();\n\n    for (const [oldKey, oldValue] of this.getAttributes()) {\n      // Do not remove attribute if attribute with same key and value is about to be set.\n      if (attrs.get(oldKey) === oldValue) {\n        continue;\n      } // All rest attributes will be removed so changed attributes won't change .\n\n\n      this._removeAttribute(oldKey, false);\n    }\n\n    for (const [key, value] of attrs) {\n      // Attribute may not be set because of attributes or because same key/value is already added.\n      const gotAdded = this._setAttribute(key, value, false);\n\n      if (gotAdded) {\n        changed.add(key);\n      }\n    }\n\n    return changed;\n  } // Returns an iterable that iterates through all selection attributes stored in current selection's parent.\n  //\n  // @protected\n  // @returns {Iterable.<*>}\n\n\n  *_getStoredAttributes() {\n    const selectionParent = this.getFirstPosition().parent;\n\n    if (this.isCollapsed && selectionParent.isEmpty) {\n      for (const key of selectionParent.getAttributeKeys()) {\n        if (key.startsWith(storePrefix)) {\n          const realKey = key.substr(storePrefix.length);\n          yield [realKey, selectionParent.getAttribute(key)];\n        }\n      }\n    }\n  } // Checks model text nodes that are closest to the selection's first position and returns attributes of first\n  // found element. If there are no text nodes in selection's first position parent, it returns selection\n  // attributes stored in that parent.\n  //\n  // @private\n  // @returns {Iterable.<*>} Collection of attributes.\n\n\n  _getSurroundingAttributes() {\n    const position = this.getFirstPosition();\n    const schema = this._model.schema;\n    let attrs = null;\n\n    if (!this.isCollapsed) {\n      // 1. If selection is a range...\n      const range = this.getFirstRange(); // ...look for a first character node in that range and take attributes from it.\n\n      for (const value of range) {\n        // If the item is an object, we don't want to get attributes from its children.\n        if (value.item.is('element') && schema.isObject(value.item)) {\n          break;\n        }\n\n        if (value.type == 'text') {\n          attrs = value.item.getAttributes();\n          break;\n        }\n      }\n    } else {\n      // 2. If the selection is a caret or the range does not contain a character node...\n      const nodeBefore = position.textNode ? position.textNode : position.nodeBefore;\n      const nodeAfter = position.textNode ? position.textNode : position.nodeAfter; // When gravity is overridden then don't take node before into consideration.\n\n      if (!this.isGravityOverridden) {\n        // ...look at the node before caret and take attributes from it if it is a character node.\n        attrs = getAttrsIfCharacter(nodeBefore);\n      } // 3. If not, look at the node after caret...\n\n\n      if (!attrs) {\n        attrs = getAttrsIfCharacter(nodeAfter);\n      } // 4. If not, try to find the first character on the left, that is in the same node.\n      // When gravity is overridden then don't take node before into consideration.\n\n\n      if (!this.isGravityOverridden && !attrs) {\n        let node = nodeBefore;\n\n        while (node && !attrs) {\n          node = node.previousSibling;\n          attrs = getAttrsIfCharacter(node);\n        }\n      } // 5. If not found, try to find the first character on the right, that is in the same node.\n\n\n      if (!attrs) {\n        let node = nodeAfter;\n\n        while (node && !attrs) {\n          node = node.nextSibling;\n          attrs = getAttrsIfCharacter(node);\n        }\n      } // 6. If not found, selection should retrieve attributes from parent.\n\n\n      if (!attrs) {\n        attrs = this._getStoredAttributes();\n      }\n    }\n\n    return attrs;\n  } // Fixes a selection range after it ends up in graveyard root.\n  //\n  // @private\n  // @param {module:engine/model/liverange~LiveRange} liveRange The range from selection, that ended up in the graveyard root.\n  // @param {module:engine/model/position~Position} removedRangeStart Start position of a range which was removed.\n\n\n  _fixGraveyardSelection(liveRange, removedRangeStart) {\n    // The start of the removed range is the closest position to the `liveRange` - the original selection range.\n    // This is a good candidate for a fixed selection range.\n    const positionCandidate = removedRangeStart.clone(); // Find a range that is a correct selection range and is closest to the start of removed range.\n\n    const selectionRange = this._model.schema.getNearestSelectionRange(positionCandidate); // Remove the old selection range before preparing and adding new selection range. This order is important,\n    // because new range, in some cases, may intersect with old range (it depends on `getNearestSelectionRange()` result).\n\n\n    const index = this._ranges.indexOf(liveRange);\n\n    this._ranges.splice(index, 1);\n\n    liveRange.detach(); // If nearest valid selection range has been found - add it in the place of old range.\n\n    if (selectionRange) {\n      // Check the range, convert it to live range, bind events, etc.\n      const newRange = this._prepareRange(selectionRange); // Add new range in the place of old range.\n\n\n      this._ranges.splice(index, 0, newRange);\n    } // If nearest valid selection range cannot be found - just removing the old range is fine.\n\n  }\n\n} // Helper function for {@link module:engine/model/liveselection~LiveSelection#_updateAttributes}.\n//\n// It takes model item, checks whether it is a text node (or text proxy) and, if so, returns it's attributes. If not, returns `null`.\n//\n// @param {module:engine/model/item~Item|null}  node\n// @returns {Boolean}\n\n\nfunction getAttrsIfCharacter(node) {\n  if (node instanceof TextProxy || node instanceof Text) {\n    return node.getAttributes();\n  }\n\n  return null;\n} // Removes selection attributes from element which is not empty anymore.\n//\n// @private\n// @param {module:engine/model/model~Model} model\n// @param {module:engine/model/batch~Batch} batch\n\n\nfunction clearAttributesStoredInElement(model, batch) {\n  const differ = model.document.differ;\n\n  for (const entry of differ.getChanges()) {\n    if (entry.type != 'insert') {\n      continue;\n    }\n\n    const changeParent = entry.position.parent;\n    const isNoLongerEmpty = entry.length === changeParent.maxOffset;\n\n    if (isNoLongerEmpty) {\n      model.enqueueChange(batch, writer => {\n        const storedAttributes = Array.from(changeParent.getAttributeKeys()).filter(key => key.startsWith(storePrefix));\n\n        for (const key of storedAttributes) {\n          writer.removeAttribute(key, changeParent);\n        }\n      });\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversionhelpers\n */\n\n/**\n * Base class for conversion helpers.\n */\nexport default class ConversionHelpers {\n  /**\n   * Creates a conversion helpers instance.\n   *\n   * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} dispatchers\n   */\n  constructor(dispatchers) {\n    this._dispatchers = dispatchers;\n  }\n  /**\n   * Registers a conversion helper.\n   *\n   * **Note**: See full usage example in the `{@link module:engine/conversion/conversion~Conversion#for conversion.for()}`\n   * method description.\n   *\n   * @param {Function} conversionHelper The function to be called on event.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n\n\n  add(conversionHelper) {\n    for (const dispatcher of this._dispatchers) {\n      conversionHelper(dispatcher);\n    }\n\n    return this;\n  }\n\n}","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nexport default cloneDeep;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Contains downcast (model-to-view) converters for {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}.\n *\n * @module engine/conversion/downcasthelpers\n */\nimport ModelRange from '../model/range';\nimport ModelSelection from '../model/selection';\nimport ModelElement from '../model/element';\nimport ViewAttributeElement from '../view/attributeelement';\nimport DocumentSelection from '../model/documentselection';\nimport ConversionHelpers from './conversionhelpers';\nimport { cloneDeep } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Downcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\n\nexport default class DowncastHelpers extends ConversionHelpers {\n  /**\n   * Model element to view element conversion helper.\n   *\n   * This conversion results in creating a view element. For example, model `<paragraph>Foo</paragraph>` becomes `<p>Foo</p>` in the view.\n   *\n   *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n   *\t\t\tmodel: 'paragraph',\n   *\t\t\tview: 'p'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n   *\t\t\tmodel: 'paragraph',\n   *\t\t\tview: 'div',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n   *\t\t\tmodel: 'fancyParagraph',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'p',\n   *\t\t\t\tclasses: 'fancy'\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).elementToElement( {\n   *\t\t\tmodel: 'heading',\n   *\t\t\tview: ( modelElement, viewWriter ) => {\n   *\t\t\t\treturn viewWriter.createContainerElement( 'h' + modelElement.getAttribute( 'level' ) )\n   *\t\t\t}\n   *\t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #elementToElement\n   * @param {Object} config Conversion configuration.\n   * @param {String} config.model The name of the model element to convert.\n   * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n   * that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n   * as parameters and returns a view container element.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n   */\n  elementToElement(config) {\n    return this.add(downcastElementToElement(config));\n  }\n  /**\n   * Model attribute to view element conversion helper.\n   *\n   * This conversion results in wrapping view nodes with a view attribute element. For example, a model text node with\n   * `\"Foo\"` as data and the `bold` attribute becomes `<strong>Foo</strong>` in the view.\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: 'strong'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: 'b',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n   *\t\t\tmodel: 'invert',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tclasses: [ 'font-light', 'bg-dark' ]\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'fontSize',\n   *\t\t\t\tvalues: [ 'big', 'small' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tbig: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-size': '1.2em'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tsmall: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-size': '0.8em'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n   *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n   *\t\t\t\t\tstyle: 'font-weight:' + modelAttributeValue\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'color',\n   *\t\t\t\tname: '$text'\n   *\t\t\t},\n   *\t\t\tview: ( modelAttributeValue, viewWriter ) => {\n   *\t\t\t\treturn viewWriter.createAttributeElement( 'span', {\n   *\t\t\t\t\tstyle: 'color:' + modelAttributeValue\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #attributeToElement\n   * @param {Object} config Conversion configuration.\n   * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n   * of `String`s with possible values if the model attribute is an enumerable.\n   * @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n   * that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n   * as parameters and returns a view attribute element. If `config.model.values` is\n   * given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n   */\n\n\n  attributeToElement(config) {\n    return this.add(downcastAttributeToElement(config));\n  }\n  /**\n   * Model attribute to view attribute conversion helper.\n   *\n   * This conversion results in adding an attribute to a view node, basing on an attribute from a model node. For example,\n   * `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>`.\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n   *\t\t\tmodel: 'source',\n   *\t\t\tview: 'src'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n   *\t\t\tmodel: 'source',\n   *\t\t\tview: 'href',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tname: 'image',\n   *\t\t\t\tkey: 'source'\n   *\t\t\t},\n   *\t\t\tview: 'src'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tname: 'styled',\n   *\t\t\t\tvalues: [ 'dark', 'light' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tdark: {\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: [ 'styled', 'styled-dark' ]\n   *\t\t\t\t},\n   *\t\t\t\tlight: {\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: [ 'styled', 'styled-light' ]\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n   *\t\t\tmodel: 'styled',\n   *\t\t\tview: modelAttributeValue => ( { key: 'class', value: 'styled-' + modelAttributeValue } )\n   *\t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #attributeToAttribute\n   * @param {Object} config Conversion configuration.\n   * @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n   * the attribute key, possible values and, optionally, an element name to convert from.\n   * @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n   * the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n   * array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n   * If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n   * `{ key, value }` objects or a functions.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n   */\n\n\n  attributeToAttribute(config) {\n    return this.add(downcastAttributeToAttribute(config));\n  }\n  /**\n   * Model marker to view element conversion helper.\n   *\n   * This conversion results in creating a view element on the boundaries of the converted marker. If the converted marker\n   * is collapsed, only one element is created. For example, model marker set like this: `<paragraph>F[oo b]ar</paragraph>`\n   * becomes `<p>F<span data-marker=\"search\"></span>oo b<span data-marker=\"search\"></span>ar</p>` in the view.\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n   *\t\t\tmodel: 'search',\n   *\t\t\tview: 'marker-search'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n   *\t\t\tmodel: 'search',\n   *\t\t\tview: 'search-result',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n   *\t\t\tmodel: 'search',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tattributes: {\n   *\t\t\t\t\t'data-marker': 'search'\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToElement( {\n   *\t\t\tmodel: 'search',\n   *\t\t\tview: ( markerData, viewWriter ) => {\n   *\t\t\t\treturn viewWriter.createUIElement( 'span', {\n   *\t\t\t\t\t'data-marker': 'search',\n   *\t\t\t\t\t'data-start': markerData.isOpening\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\t\t} );\n   *\n   * If a function is passed as the `config.view` parameter, it will be used to generate both boundary elements. The function\n   * receives the `data` object as a parameter and should return an instance of the\n   * {@link module:engine/view/uielement~UIElement view UI element}. The `data` object and\n   * {@link module:engine/conversion/downcastdispatcher~DowncastConversionApi `conversionApi`} are passed from\n   * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}. Additionally,\n   * the `data.isOpening` parameter is passed, which is set to `true` for the marker start boundary element, and `false` to\n   * the marker end boundary element.\n   *\n   * This kind of conversion is useful for saving data into the database, so it should be used in the data conversion pipeline.\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #markerToElement\n   * @param {Object} config Conversion configuration.\n   * @param {String} config.model The name of the model marker (or model marker group) to convert.\n   * @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n   * that takes the model marker data as a parameter and returns a view UI element.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n   */\n\n\n  markerToElement(config) {\n    return this.add(downcastMarkerToElement(config));\n  }\n  /**\n   * Model marker to highlight conversion helper.\n   *\n   * This conversion results in creating a highlight on view nodes. For this kind of conversion,\n   * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} should be provided.\n   *\n   * For text nodes, a `<span>` {@link module:engine/view/attributeelement~AttributeElement} is created and it wraps all text nodes\n   * in the converted marker range. For example, a model marker set like this: `<paragraph>F[oo b]ar</paragraph>` becomes\n   * `<p>F<span class=\"comment\">oo b</span>ar</p>` in the view.\n   *\n   * {@link module:engine/view/containerelement~ContainerElement} may provide a custom way of handling highlight. Most often,\n   * the element itself is given classes and attributes described in the highlight descriptor (instead of being wrapped in `<span>`).\n   * For example, a model marker set like this: `[<image src=\"foo.jpg\"></image>]` becomes `<img src=\"foo.jpg\" class=\"comment\"></img>`\n   * in the view.\n   *\n   * For container elements, the conversion is two-step. While the converter processes the highlight descriptor and passes it\n   * to a container element, it is the container element instance itself that applies values from the highlight descriptor.\n   * So, in a sense, the converter takes care of stating what should be applied on what, while the element decides how to apply that.\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( { model: 'comment', view: { classes: 'comment' } } );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n   *\t\t\tmodel: 'comment',\n   *\t\t\tview: { classes: 'new-comment' },\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'downcast' ).markerToHighlight( {\n   *\t\t\tmodel: 'comment',\n   *\t\t\tview: data => {\n   *\t\t\t\t// Assuming that the marker name is in a form of comment:commentType.\n   *\t\t\t\tconst commentType = data.markerName.split( ':' )[ 1 ];\n   *\n   *\t\t\t\treturn {\n   *\t\t\t\t\tclasses: [ 'comment', 'comment-' + commentType ]\n   *\t\t\t\t};\n   *\t\t\t}\n   *\t\t} );\n   *\n   * If a function is passed as the `config.view` parameter, it will be used to generate the highlight descriptor. The function\n   * receives the `data` object as a parameter and should return a\n   * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor}.\n   * The `data` object properties are passed from {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker}.\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #markerToHighlight\n   * @param {Object} config Conversion configuration.\n   * @param {String} config.model The name of the model marker (or model marker group) to convert.\n   * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n   * that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers}\n   */\n\n\n  markerToHighlight(config) {\n    return this.add(downcastMarkerToHighlight(config));\n  }\n\n}\n/**\n * Function factory that creates a default downcast converter for text insertion changes.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'insert:$text', insertText() );\n *\n * @returns {Function} Insert text event converter.\n */\n\nexport function insertText() {\n  return (evt, data, conversionApi) => {\n    if (!conversionApi.consumable.consume(data.item, 'insert')) {\n      return;\n    }\n\n    const viewWriter = conversionApi.writer;\n    const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n    const viewText = viewWriter.createText(data.item.data);\n    viewWriter.insert(viewPosition, viewText);\n  };\n}\n/**\n * Function factory that creates a default downcast converter for node remove changes.\n *\n *\t\tmodelDispatcher.on( 'remove', remove() );\n *\n * @returns {Function} Remove event converter.\n */\n\nexport function remove() {\n  return (evt, data, conversionApi) => {\n    // Find view range start position by mapping model position at which the remove happened.\n    const viewStart = conversionApi.mapper.toViewPosition(data.position);\n    const modelEnd = data.position.getShiftedBy(data.length);\n    const viewEnd = conversionApi.mapper.toViewPosition(modelEnd, {\n      isPhantom: true\n    });\n    const viewRange = conversionApi.writer.createRange(viewStart, viewEnd); // Trim the range to remove in case some UI elements are on the view range boundaries.\n\n    const removed = conversionApi.writer.remove(viewRange.getTrimmed()); // After the range is removed, unbind all view elements from the model.\n    // Range inside view document fragment is used to unbind deeply.\n\n    for (const child of conversionApi.writer.createRangeIn(removed).getItems()) {\n      conversionApi.mapper.unbindViewElement(child);\n    }\n  };\n}\n/**\n * Creates a `<span>` {@link module:engine/view/attributeelement~AttributeElement view attribute element} from the information\n * provided by the {@link module:engine/conversion/downcasthelpers~HighlightDescriptor highlight descriptor} object. If a priority\n * is not provided in the descriptor, the default priority will be used.\n *\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\n\nexport function createViewElementFromHighlightDescriptor(descriptor) {\n  const viewElement = new ViewAttributeElement('span', descriptor.attributes);\n\n  if (descriptor.classes) {\n    viewElement._addClass(descriptor.classes);\n  }\n\n  if (descriptor.priority) {\n    viewElement._priority = descriptor.priority;\n  }\n\n  viewElement._id = descriptor.id;\n  return viewElement;\n}\n/**\n * Function factory that creates a converter which converts a non-collapsed {@link module:engine/model/selection~Selection model selection}\n * to a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object and maps model positions from the selection to view positions.\n *\n *\t\tmodelDispatcher.on( 'selection', convertRangeSelection() );\n *\n * @returns {Function} Selection converter.\n */\n\nexport function convertRangeSelection() {\n  return (evt, data, conversionApi) => {\n    const selection = data.selection;\n\n    if (selection.isCollapsed) {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(selection, 'selection')) {\n      return;\n    }\n\n    const viewRanges = [];\n\n    for (const range of selection.getRanges()) {\n      const viewRange = conversionApi.mapper.toViewRange(range);\n      viewRanges.push(viewRange);\n    }\n\n    conversionApi.writer.setSelection(viewRanges, {\n      backward: selection.isBackward\n    });\n  };\n}\n/**\n * Function factory that creates a converter which converts a collapsed {@link module:engine/model/selection~Selection model selection} to\n * a {@link module:engine/view/documentselection~DocumentSelection view selection}. The converter consumes appropriate\n * value from the `consumable` object, maps the model selection position to the view position and breaks\n * {@link module:engine/view/attributeelement~AttributeElement attribute elements} at the selection position.\n *\n *\t\tmodelDispatcher.on( 'selection', convertCollapsedSelection() );\n *\n * An example of the view state before and after converting the collapsed selection:\n *\n *\t\t   <p><strong>f^oo<strong>bar</p>\n *\t\t-> <p><strong>f</strong>^<strong>oo</strong>bar</p>\n *\n * By breaking attribute elements like `<strong>`, the selection is in a correct element. Then, when the selection attribute is\n * converted, broken attributes might be merged again, or the position where the selection is may be wrapped\n * with different, appropriate attribute elements.\n *\n * See also {@link module:engine/conversion/downcasthelpers~clearAttributes} which does a clean-up\n * by merging attributes.\n *\n * @returns {Function} Selection converter.\n */\n\nexport function convertCollapsedSelection() {\n  return (evt, data, conversionApi) => {\n    const selection = data.selection;\n\n    if (!selection.isCollapsed) {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(selection, 'selection')) {\n      return;\n    }\n\n    const viewWriter = conversionApi.writer;\n    const modelPosition = selection.getFirstPosition();\n    const viewPosition = conversionApi.mapper.toViewPosition(modelPosition);\n    const brokenPosition = viewWriter.breakAttributes(viewPosition);\n    viewWriter.setSelection(brokenPosition);\n  };\n}\n/**\n * Function factory that creates a converter which clears artifacts after the previous\n * {@link module:engine/model/selection~Selection model selection} conversion. It removes all empty\n * {@link module:engine/view/attributeelement~AttributeElement view attribute elements} and merges sibling attributes at all start and end\n * positions of all ranges.\n *\n *\t\t   <p><strong>^</strong></p>\n *\t\t-> <p>^</p>\n *\n *\t\t   <p><strong>foo</strong>^<strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n *\t\t   <p><strong>foo</strong><em>^</em><strong>bar</strong>bar</p>\n *\t\t-> <p><strong>foo^bar<strong>bar</p>\n *\n * This listener should be assigned before any converter for the new selection:\n *\n *\t\tmodelDispatcher.on( 'selection', clearAttributes() );\n *\n * See {@link module:engine/conversion/downcasthelpers~convertCollapsedSelection}\n * which does the opposite by breaking attributes in the selection position.\n *\n * @returns {Function} Selection converter.\n */\n\nexport function clearAttributes() {\n  return (evt, data, conversionApi) => {\n    const viewWriter = conversionApi.writer;\n    const viewSelection = viewWriter.document.selection;\n\n    for (const range of viewSelection.getRanges()) {\n      // Not collapsed selection should not have artifacts.\n      if (range.isCollapsed) {\n        // Position might be in the node removed by the view writer.\n        if (range.end.parent.document) {\n          conversionApi.writer.mergeAttributes(range.start);\n        }\n      }\n    }\n\n    viewWriter.setSelection(null);\n  };\n}\n/**\n * Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n * It can also be used to convert selection attributes. In that case, an empty attribute element will be created and the\n * selection will be put inside it.\n *\n * Attributes from the model are converted to a view element that will be wrapping these view nodes that are bound to\n * model elements having the given attribute. This is useful for attributes like `bold` that may be set on text nodes in the model\n * but are represented as an element in the view:\n *\n *\t\t[paragraph]              MODEL ====> VIEW        <p>\n *\t\t\t|- a {bold: true}                             |- <b>\n *\t\t\t|- b {bold: true}                             |   |- ab\n *\t\t\t|- c                                          |- c\n *\n * Passed `Function` will be provided with the attribute value and then all the parameters of the\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute `attribute` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be the wrapping element.\n * When the provided `Function` does not return any element, no conversion will take place.\n *\n * The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n *\n *\t\tmodelDispatcher.on( 'attribute:bold', wrap( ( modelAttributeValue, viewWriter ) => {\n *\t\t\treturn viewWriter.createAttributeElement( 'strong' );\n *\t\t} );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element that will be used for wrapping.\n * @returns {Function} Set/change attribute converter.\n */\n\nexport function wrap(elementCreator) {\n  return (evt, data, conversionApi) => {\n    // Recreate current wrapping node. It will be used to unwrap view range if the attribute value has changed\n    // or the attribute was removed.\n    const oldViewElement = elementCreator(data.attributeOldValue, conversionApi.writer); // Create node to wrap with.\n\n    const newViewElement = elementCreator(data.attributeNewValue, conversionApi.writer);\n\n    if (!oldViewElement && !newViewElement) {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const viewWriter = conversionApi.writer;\n    const viewSelection = viewWriter.document.selection;\n\n    if (data.item instanceof ModelSelection || data.item instanceof DocumentSelection) {\n      // Selection attribute conversion.\n      viewWriter.wrap(viewSelection.getFirstRange(), newViewElement);\n    } else {\n      // Node attribute conversion.\n      let viewRange = conversionApi.mapper.toViewRange(data.range); // First, unwrap the range from current wrapper.\n\n      if (data.attributeOldValue !== null && oldViewElement) {\n        viewRange = viewWriter.unwrap(viewRange, oldViewElement);\n      }\n\n      if (data.attributeNewValue !== null && newViewElement) {\n        viewWriter.wrap(viewRange, newViewElement);\n      }\n    }\n  };\n}\n/**\n * Function factory that creates a converter which converts node insertion changes from the model to the view.\n * The function passed will be provided with all the parameters of the dispatcher's\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert `insert` event}.\n * It is expected that the function returns an {@link module:engine/view/element~Element}.\n * The result of the function will be inserted into the view.\n *\n * The converter automatically consumes the corresponding value from the consumables list, stops the event (see\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}) and binds the model and view elements.\n *\n *\t\tdowncastDispatcher.on(\n *\t\t\t'insert:myElem',\n *\t\t\tinsertElement( ( modelItem, viewWriter ) => {\n *\t\t\t\tconst text = viewWriter.createText( 'myText' );\n *\t\t\t\tconst myElem = viewWriter.createElement( 'myElem', { myAttr: 'my-' + modelItem.getAttribute( 'myAttr' ) }, text );\n *\n *\t\t\t\t// Do something fancy with `myElem` using `modelItem` or other parameters.\n *\n *\t\t\t\treturn myElem;\n *\t\t\t}\n *\t\t) );\n *\n * @protected\n * @param {Function} elementCreator Function returning a view element, which will be inserted.\n * @returns {Function} Insert element event converter.\n */\n\nexport function insertElement(elementCreator) {\n  return (evt, data, conversionApi) => {\n    const viewElement = elementCreator(data.item, conversionApi.writer);\n\n    if (!viewElement) {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(data.item, 'insert')) {\n      return;\n    }\n\n    const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n    conversionApi.mapper.bindElements(data.item, viewElement);\n    conversionApi.writer.insert(viewPosition, viewElement);\n  };\n}\n/**\n * Function factory that creates a converter which converts marker adding change to the\n * {@link module:engine/view/uielement~UIElement view UI element}.\n *\n * The view UI element that will be added to the view depends on the passed parameter. See {@link ~insertElement}.\n * In case of a non-collapsed range, the UI element will not wrap nodes but separate elements will be placed at the beginning\n * and at the end of the range.\n *\n * This converter binds created UI elements with the marker name using {@link module:engine/conversion/mapper~Mapper#bindElementToMarker}.\n *\n * @protected\n * @param {module:engine/view/uielement~UIElement|Function} elementCreator A view UI element or a function returning the view element\n * that will be inserted.\n * @returns {Function} Insert element event converter.\n */\n\nexport function insertUIElement(elementCreator) {\n  return (evt, data, conversionApi) => {\n    // Create two view elements. One will be inserted at the beginning of marker, one at the end.\n    // If marker is collapsed, only \"opening\" element will be inserted.\n    data.isOpening = true;\n    const viewStartElement = elementCreator(data, conversionApi.writer);\n    data.isOpening = false;\n    const viewEndElement = elementCreator(data, conversionApi.writer);\n\n    if (!viewStartElement || !viewEndElement) {\n      return;\n    }\n\n    const markerRange = data.markerRange; // Marker that is collapsed has consumable build differently that non-collapsed one.\n    // For more information see `addMarker` event description.\n    // If marker's range is collapsed - check if it can be consumed.\n\n    if (markerRange.isCollapsed && !conversionApi.consumable.consume(markerRange, evt.name)) {\n      return;\n    } // If marker's range is not collapsed - consume all items inside.\n\n\n    for (const value of markerRange) {\n      if (!conversionApi.consumable.consume(value.item, evt.name)) {\n        return;\n      }\n    }\n\n    const mapper = conversionApi.mapper;\n    const viewWriter = conversionApi.writer; // Add \"opening\" element.\n\n    viewWriter.insert(mapper.toViewPosition(markerRange.start), viewStartElement);\n    conversionApi.mapper.bindElementToMarker(viewStartElement, data.markerName); // Add \"closing\" element only if range is not collapsed.\n\n    if (!markerRange.isCollapsed) {\n      viewWriter.insert(mapper.toViewPosition(markerRange.end), viewEndElement);\n      conversionApi.mapper.bindElementToMarker(viewEndElement, data.markerName);\n    }\n\n    evt.stop();\n  };\n} // Function factory that returns a default downcast converter for removing a {@link module:engine/view/uielement~UIElement UI element}\n// basing on marker remove change.\n//\n// This converter unbinds elements from the marker name.\n//\n// @returns {Function} Removed UI element converter.\n\nfunction removeUIElement() {\n  return (evt, data, conversionApi) => {\n    const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n\n    if (!elements) {\n      return;\n    }\n\n    for (const element of elements) {\n      conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n      conversionApi.writer.clear(conversionApi.writer.createRangeOn(element), element);\n    }\n\n    conversionApi.writer.clearClonedElementsGroup(data.markerName);\n    evt.stop();\n  };\n} // Function factory that creates a converter which converts set/change/remove attribute changes from the model to the view.\n//\n// Attributes from the model are converted to the view element attributes in the view. You may provide a custom function to generate\n// a key-value attribute pair to add/change/remove. If not provided, model attributes will be converted to view element\n// attributes on a one-to-one basis.\n//\n// *Note:** The provided attribute creator should always return the same `key` for a given attribute from the model.\n//\n// The converter automatically consumes the corresponding value from the consumables list and stops the event (see\n// {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher}).\n//\n//\t\tmodelDispatcher.on( 'attribute:customAttr:myElem', changeAttribute( ( value, data ) => {\n//\t\t\t// Change attribute key from `customAttr` to `class` in the view.\n//\t\t\tconst key = 'class';\n//\t\t\tlet value = data.attributeNewValue;\n//\n//\t\t\t// Force attribute value to 'empty' if the model element is empty.\n//\t\t\tif ( data.item.childCount === 0 ) {\n//\t\t\t\tvalue = 'empty';\n//\t\t\t}\n//\n//\t\t\t// Return the key-value pair.\n//\t\t\treturn { key, value };\n//\t\t} ) );\n//\n// @param {Function} [attributeCreator] Function returning an object with two properties: `key` and `value`, which\n// represent the attribute key and attribute value to be set on a {@link module:engine/view/element~Element view element}.\n// The function is passed the model attribute value as the first parameter and additional data about the change as the second parameter.\n// @returns {Function} Set/change attribute converter.\n\n\nfunction changeAttribute(attributeCreator) {\n  return (evt, data, conversionApi) => {\n    const oldAttribute = attributeCreator(data.attributeOldValue, data);\n    const newAttribute = attributeCreator(data.attributeNewValue, data);\n\n    if (!oldAttribute && !newAttribute) {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const viewElement = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer; // If model item cannot be mapped to a view element, it means item is not an `Element` instance but a `TextProxy` node.\n    // Only elements can have attributes in a view so do not proceed for anything else (#1587).\n\n    if (!viewElement) {\n      /**\n       * This error occurs when a {@link module:engine/model/textproxy~TextProxy text node's} attribute is to be downcasted\n       * by {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `Attribute to Attribute converter`}.\n       * In most cases it is caused by converters misconfiguration when only \"generic\" converter is defined:\n       *\n       *\t\teditor.conversion.for( 'downcast' ).attributeToAttribute( {\n       *\t\t\tmodel: 'attribute-name',\n       *\t\t\tview: 'attribute-name'\n       *\t\t} ) );\n       *\n       * and given attribute is used on text node, for example:\n       *\n       *\t\tmodel.change( writer => {\n       *\t\t\twriter.insertText( 'Foo', { 'attribute-name': 'bar' }, parent, 0 );\n       *\t\t} );\n       *\n       * In such cases, to convert the same attribute for both {@link module:engine/model/element~Element}\n       * and {@link module:engine/model/textproxy~TextProxy `Text`} nodes, text specific\n       * {@link module:engine/conversion/conversion~Conversion#attributeToElement `Attribute to Element converter`}\n       * with higher {@link module:utils/priorities~PriorityString priority} must also be defined:\n       *\n       *\t\teditor.conversion.for( 'downcast' ).attributeToElement( {\n       *\t\t\tmodel: {\n       *\t\t\t\tkey: 'attribute-name',\n       *\t\t\t\tname: '$text'\n       *\t\t\t},\n       *\t\t\tview: ( value, writer ) => {\n       *\t\t\t\treturn writer.createAttributeElement( 'span', { 'attribute-name': value } );\n       *\t\t\t},\n       *\t\t\tconverterPriority: 'high'\n       *\t\t} ) );\n       *\n       * @error conversion-attribute-to-attribute-on-text\n       */\n      throw new CKEditorError('conversion-attribute-to-attribute-on-text: ' + 'Trying to convert text node\\'s attribute with attribute-to-attribute converter.', [data, conversionApi]);\n    } // First remove the old attribute if there was one.\n\n\n    if (data.attributeOldValue !== null && oldAttribute) {\n      if (oldAttribute.key == 'class') {\n        const classes = Array.isArray(oldAttribute.value) ? oldAttribute.value : [oldAttribute.value];\n\n        for (const className of classes) {\n          viewWriter.removeClass(className, viewElement);\n        }\n      } else if (oldAttribute.key == 'style') {\n        const keys = Object.keys(oldAttribute.value);\n\n        for (const key of keys) {\n          viewWriter.removeStyle(key, viewElement);\n        }\n      } else {\n        viewWriter.removeAttribute(oldAttribute.key, viewElement);\n      }\n    } // Then set the new attribute.\n\n\n    if (data.attributeNewValue !== null && newAttribute) {\n      if (newAttribute.key == 'class') {\n        const classes = Array.isArray(newAttribute.value) ? newAttribute.value : [newAttribute.value];\n\n        for (const className of classes) {\n          viewWriter.addClass(className, viewElement);\n        }\n      } else if (newAttribute.key == 'style') {\n        const keys = Object.keys(newAttribute.value);\n\n        for (const key of keys) {\n          viewWriter.setStyle(key, newAttribute.value[key], viewElement);\n        }\n      } else {\n        viewWriter.setAttribute(newAttribute.key, newAttribute.value, viewElement);\n      }\n    }\n  };\n} // Function factory that creates a converter which converts the text inside marker's range. The converter wraps the text with\n// {@link module:engine/view/attributeelement~AttributeElement} created from the provided descriptor.\n// See {link module:engine/conversion/downcasthelpers~createViewElementFromHighlightDescriptor}.\n//\n// It can also be used to convert the selection that is inside a marker. In that case, an empty attribute element will be\n// created and the selection will be put inside it.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds the created {@link module:engine/view/attributeelement~AttributeElement attribute elemens} with the marker name\n// using the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\n\n\nfunction highlightText(highlightDescriptor) {\n  return (evt, data, conversionApi) => {\n    if (!data.item) {\n      return;\n    }\n\n    if (!(data.item instanceof ModelSelection || data.item instanceof DocumentSelection) && !data.item.is('textProxy')) {\n      return;\n    }\n\n    const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n\n    if (!descriptor) {\n      return;\n    }\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const viewElement = createViewElementFromHighlightDescriptor(descriptor);\n    const viewWriter = conversionApi.writer;\n    const viewSelection = viewWriter.document.selection;\n\n    if (data.item instanceof ModelSelection || data.item instanceof DocumentSelection) {\n      viewWriter.wrap(viewSelection.getFirstRange(), viewElement, viewSelection);\n    } else {\n      const viewRange = conversionApi.mapper.toViewRange(data.range);\n      const rangeAfterWrap = viewWriter.wrap(viewRange, viewElement);\n\n      for (const element of rangeAfterWrap.getItems()) {\n        if (element.is('attributeElement') && element.isSimilar(viewElement)) {\n          conversionApi.mapper.bindElementToMarker(element, data.markerName); // One attribute element is enough, because all of them are bound together by the view writer.\n          // Mapper uses this binding to get all the elements no matter how many of them are registered in the mapper.\n\n          break;\n        }\n      }\n    }\n  };\n} // Converter function factory. It creates a function which applies the marker's highlight to an element inside the marker's range.\n//\n// The converter checks if an element has the `addHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property} and, if so, uses it to apply the highlight.\n// In such case the converter will consume all element's children, assuming that they were handled by the element itself.\n//\n// When the `addHighlight` custom property is not present, the element is not converted in any special way.\n// This means that converters will proceed to convert the element's child nodes.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter binds altered {@link module:engine/view/containerelement~ContainerElement container elements} with the marker name using\n// the {@link module:engine/conversion/mapper~Mapper#bindElementToMarker} method.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\n\n\nfunction highlightElement(highlightDescriptor) {\n  return (evt, data, conversionApi) => {\n    if (!data.item) {\n      return;\n    }\n\n    if (!(data.item instanceof ModelElement)) {\n      return;\n    }\n\n    const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n\n    if (!descriptor) {\n      return;\n    }\n\n    if (!conversionApi.consumable.test(data.item, evt.name)) {\n      return;\n    }\n\n    const viewElement = conversionApi.mapper.toViewElement(data.item);\n\n    if (viewElement && viewElement.getCustomProperty('addHighlight')) {\n      // Consume element itself.\n      conversionApi.consumable.consume(data.item, evt.name); // Consume all children nodes.\n\n      for (const value of ModelRange._createIn(data.item)) {\n        conversionApi.consumable.consume(value.item, evt.name);\n      }\n\n      viewElement.getCustomProperty('addHighlight')(viewElement, descriptor, conversionApi.writer);\n      conversionApi.mapper.bindElementToMarker(viewElement, data.markerName);\n    }\n  };\n} // Function factory that creates a converter which converts the removing model marker to the view.\n//\n// Both text nodes and elements are handled by this converter but they are handled a bit differently.\n//\n// Text nodes are unwrapped using the {@link module:engine/view/attributeelement~AttributeElement attribute element} created from the\n// provided highlight descriptor. See {link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n//\n// For elements, the converter checks if an element has the `removeHighlight` function stored as a\n// {@link module:engine/view/element~Element#_setCustomProperty custom property}. If so, it uses it to remove the highlight.\n// In such case, the children of that element will not be converted.\n//\n// When `removeHighlight` is not present, the element is not converted in any special way.\n// The converter will proceed to convert the element's child nodes instead.\n//\n// If the highlight descriptor does not provide the `priority` property, `10` will be used.\n//\n// If the highlight descriptor does not provide the `id` property, the name of the marker will be used.\n//\n// This converter unbinds elements from the marker name.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} highlightDescriptor\n// @returns {Function}\n\n\nfunction removeHighlight(highlightDescriptor) {\n  return (evt, data, conversionApi) => {\n    // This conversion makes sense only for non-collapsed range.\n    if (data.markerRange.isCollapsed) {\n      return;\n    }\n\n    const descriptor = prepareDescriptor(highlightDescriptor, data, conversionApi);\n\n    if (!descriptor) {\n      return;\n    } // View element that will be used to unwrap `AttributeElement`s.\n\n\n    const viewHighlightElement = createViewElementFromHighlightDescriptor(descriptor); // Get all elements bound with given marker name.\n\n    const elements = conversionApi.mapper.markerNameToElements(data.markerName);\n\n    if (!elements) {\n      return;\n    }\n\n    for (const element of elements) {\n      conversionApi.mapper.unbindElementFromMarkerName(element, data.markerName);\n\n      if (element.is('attributeElement')) {\n        conversionApi.writer.unwrap(conversionApi.writer.createRangeOn(element), viewHighlightElement);\n      } else {\n        // if element.is( 'containerElement' ).\n        element.getCustomProperty('removeHighlight')(element, descriptor.id, conversionApi.writer);\n      }\n    }\n\n    conversionApi.writer.clearClonedElementsGroup(data.markerName);\n    evt.stop();\n  };\n} // Model element to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#elementToElement `.elementToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model element to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model element and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view container element.\n// @returns {Function} Conversion helper.\n\n\nfunction downcastElementToElement(config) {\n  config = cloneDeep(config);\n  config.view = normalizeToElementConfig(config.view, 'container');\n  return dispatcher => {\n    dispatcher.on('insert:' + config.model, insertElement(config.view), {\n      priority: config.converterPriority || 'normal'\n    });\n  };\n} // Model attribute to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToElement `.attributeToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values }` object. `values` is an array\n// of `String`s with possible values if the model attribute is an enumerable.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function|Object} config.view A view element definition or a function\n// that takes the model attribute value and {@link module:engine/view/downcastwriter~DowncastWriter view downcast writer}\n// as parameters and returns a view attribute element. If `config.model.values` is\n// given, `config.view` should be an object assigning values from `config.model.values` to view element definitions or functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction downcastAttributeToElement(config) {\n  config = cloneDeep(config);\n  const modelKey = config.model.key ? config.model.key : config.model;\n  let eventName = 'attribute:' + modelKey;\n\n  if (config.model.name) {\n    eventName += ':' + config.model.name;\n  }\n\n  if (config.model.values) {\n    for (const modelValue of config.model.values) {\n      config.view[modelValue] = normalizeToElementConfig(config.view[modelValue], 'attribute');\n    }\n  } else {\n    config.view = normalizeToElementConfig(config.view, 'attribute');\n  }\n\n  const elementCreator = getFromAttributeCreator(config);\n  return dispatcher => {\n    dispatcher.on(eventName, wrap(elementCreator), {\n      priority: config.converterPriority || 'normal'\n    });\n  };\n} // Model attribute to view attribute conversion helper.\n//\n// See {@link ~DowncastHelpers#attributeToAttribute `.attributeToAttribute()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.model The key of the attribute to convert from or a `{ key, values, [ name ] }` object describing\n// the attribute key, possible values and, optionally, an element name to convert from.\n// @param {String|Object|Function} config.view A view attribute key, or a `{ key, value }` object or a function that takes\n// the model attribute value and returns a `{ key, value }` object. If `key` is `'class'`, `value` can be a `String` or an\n// array of `String`s. If `key` is `'style'`, `value` is an object with key-value pairs. In other cases, `value` is a `String`.\n// If `config.model.values` is set, `config.view` should be an object assigning values from `config.model.values` to\n// `{ key, value }` objects or a functions.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction downcastAttributeToAttribute(config) {\n  config = cloneDeep(config);\n  const modelKey = config.model.key ? config.model.key : config.model;\n  let eventName = 'attribute:' + modelKey;\n\n  if (config.model.name) {\n    eventName += ':' + config.model.name;\n  }\n\n  if (config.model.values) {\n    for (const modelValue of config.model.values) {\n      config.view[modelValue] = normalizeToAttributeConfig(config.view[modelValue]);\n    }\n  } else {\n    config.view = normalizeToAttributeConfig(config.view);\n  }\n\n  const elementCreator = getFromAttributeCreator(config);\n  return dispatcher => {\n    dispatcher.on(eventName, changeAttribute(elementCreator), {\n      priority: config.converterPriority || 'normal'\n    });\n  };\n} // Model marker to view element conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} config.view A view element definition or a function\n// that takes the model marker data as a parameter and returns a view UI element.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction downcastMarkerToElement(config) {\n  config = cloneDeep(config);\n  config.view = normalizeToElementConfig(config.view, 'ui');\n  return dispatcher => {\n    dispatcher.on('addMarker:' + config.model, insertUIElement(config.view), {\n      priority: config.converterPriority || 'normal'\n    });\n    dispatcher.on('removeMarker:' + config.model, removeUIElement(config.view), {\n      priority: config.converterPriority || 'normal'\n    });\n  };\n} // Model marker to highlight conversion helper.\n//\n// See {@link ~DowncastHelpers#markerToElement `.markerToElement()` downcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String} config.model The name of the model marker (or model marker group) to convert.\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor|Function} config.view A highlight descriptor\n// that will be used for highlighting or a function that takes the model marker data as a parameter and returns a highlight descriptor.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction downcastMarkerToHighlight(config) {\n  return dispatcher => {\n    dispatcher.on('addMarker:' + config.model, highlightText(config.view), {\n      priority: config.converterPriority || 'normal'\n    });\n    dispatcher.on('addMarker:' + config.model, highlightElement(config.view), {\n      priority: config.converterPriority || 'normal'\n    });\n    dispatcher.on('removeMarker:' + config.model, removeHighlight(config.view), {\n      priority: config.converterPriority || 'normal'\n    });\n  };\n} // Takes `config.view`, and if it is an {@link module:engine/view/elementdefinition~ElementDefinition}, converts it\n// to a function (because lower level converters accept only element creator functions).\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition|Function} view View configuration.\n// @param {'container'|'attribute'|'ui'} viewElementType View element type to create.\n// @returns {Function} Element creator function to use in lower level converters.\n\n\nfunction normalizeToElementConfig(view, viewElementType) {\n  if (typeof view == 'function') {\n    // If `view` is already a function, don't do anything.\n    return view;\n  }\n\n  return (modelData, viewWriter) => createViewElementFromDefinition(view, viewWriter, viewElementType);\n} // Creates a view element instance from the provided {@link module:engine/view/elementdefinition~ElementDefinition} and class.\n//\n// @param {module:engine/view/elementdefinition~ElementDefinition} viewElementDefinition\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @param {'container'|'attribute'|'ui'} viewElementType\n// @returns {module:engine/view/element~Element}\n\n\nfunction createViewElementFromDefinition(viewElementDefinition, viewWriter, viewElementType) {\n  if (typeof viewElementDefinition == 'string') {\n    // If `viewElementDefinition` is given as a `String`, normalize it to an object with `name` property.\n    viewElementDefinition = {\n      name: viewElementDefinition\n    };\n  }\n\n  let element;\n  const attributes = Object.assign({}, viewElementDefinition.attributes);\n\n  if (viewElementType == 'container') {\n    element = viewWriter.createContainerElement(viewElementDefinition.name, attributes);\n  } else if (viewElementType == 'attribute') {\n    const options = {\n      priority: viewElementDefinition.priority || ViewAttributeElement.DEFAULT_PRIORITY\n    };\n    element = viewWriter.createAttributeElement(viewElementDefinition.name, attributes, options);\n  } else {\n    // 'ui'.\n    element = viewWriter.createUIElement(viewElementDefinition.name, attributes);\n  }\n\n  if (viewElementDefinition.styles) {\n    const keys = Object.keys(viewElementDefinition.styles);\n\n    for (const key of keys) {\n      viewWriter.setStyle(key, viewElementDefinition.styles[key], element);\n    }\n  }\n\n  if (viewElementDefinition.classes) {\n    const classes = viewElementDefinition.classes;\n\n    if (typeof classes == 'string') {\n      viewWriter.addClass(classes, element);\n    } else {\n      for (const className of classes) {\n        viewWriter.addClass(className, element);\n      }\n    }\n  }\n\n  return element;\n}\n\nfunction getFromAttributeCreator(config) {\n  if (config.model.values) {\n    return (modelAttributeValue, viewWriter) => {\n      const view = config.view[modelAttributeValue];\n\n      if (view) {\n        return view(modelAttributeValue, viewWriter);\n      }\n\n      return null;\n    };\n  } else {\n    return config.view;\n  }\n} // Takes the configuration, adds default parameters if they do not exist and normalizes other parameters to be used in downcast converters\n// for generating a view attribute.\n//\n// @param {Object} view View configuration.\n\n\nfunction normalizeToAttributeConfig(view) {\n  if (typeof view == 'string') {\n    return modelAttributeValue => ({\n      key: view,\n      value: modelAttributeValue\n    });\n  } else if (typeof view == 'object') {\n    // { key, value, ... }\n    if (view.value) {\n      return () => view;\n    } // { key, ... }\n    else {\n        return modelAttributeValue => ({\n          key: view.key,\n          value: modelAttributeValue\n        });\n      }\n  } else {\n    // function.\n    return view;\n  }\n} // Helper function for `highlight`. Prepares the actual descriptor object using value passed to the converter.\n\n\nfunction prepareDescriptor(highlightDescriptor, data, conversionApi) {\n  // If passed descriptor is a creator function, call it. If not, just use passed value.\n  const descriptor = typeof highlightDescriptor == 'function' ? highlightDescriptor(data, conversionApi) : highlightDescriptor;\n\n  if (!descriptor) {\n    return null;\n  } // Apply default descriptor priority.\n\n\n  if (!descriptor.priority) {\n    descriptor.priority = 10;\n  } // Default descriptor id is marker name.\n\n\n  if (!descriptor.id) {\n    descriptor.id = data.markerName;\n  }\n\n  return descriptor;\n}\n/**\n * An object describing how the marker highlight should be represented in the view.\n *\n * Each text node contained in a highlighted range will be wrapped in a `<span>`\n * {@link module:engine/view/attributeelement~AttributeElement view attribute element} with CSS class(es), attributes and a priority\n * described by this object.\n *\n * Additionally, each {@link module:engine/view/containerelement~ContainerElement container element} can handle displaying the highlight\n * separately by providing the `addHighlight` and `removeHighlight` custom properties. In this case:\n *\n *  * The `HighlightDescriptor` object is passed to the `addHighlight` function upon conversion and should be used to apply the highlight to\n *  the element.\n *  * The descriptor `id` is passed to the `removeHighlight` function upon conversion and should be used to remove the highlight with the\n *  given ID from the element.\n *\n * @typedef {Object} module:engine/conversion/downcasthelpers~HighlightDescriptor\n *\n * @property {String|Array.<String>} classes A CSS class or an array of classes to set. If the descriptor is used to\n * create an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these classes will be set\n * on that attribute element. If the descriptor is applied to an element, usually these classes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n *\n * @property {String} [id] Descriptor identifier. If not provided, it defaults to the converted marker's name.\n *\n * @property {Number} [priority] Descriptor priority. If not provided, it defaults to `10`. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element}, it will be that element's\n * {@link module:engine/view/attributeelement~AttributeElement#priority priority}. If the descriptor is applied to an element,\n * the priority will be used to determine which descriptor is more important.\n *\n * @property {Object} [attributes] Attributes to set. If the descriptor is used to create\n * an {@link module:engine/view/attributeelement~AttributeElement attribute element} over text nodes, these attributes will be set on that\n * attribute element. If the descriptor is applied to an element, usually these attributes will be set on that element, however,\n * this depends on how the element converts the descriptor.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Matcher from '../view/matcher';\nimport ModelRange from '../model/range';\nimport ConversionHelpers from './conversionhelpers';\nimport { cloneDeep } from 'lodash-es';\nimport ModelSelection from '../model/selection';\n/**\n * Contains {@link module:engine/view/view view} to {@link module:engine/model/model model} converters for\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}.\n *\n * @module engine/conversion/upcasthelpers\n */\n\n/**\n * Upcast conversion helper functions.\n *\n * @extends module:engine/conversion/conversionhelpers~ConversionHelpers\n */\n\nexport default class UpcastHelpers extends ConversionHelpers {\n  /**\n   * View element to model element conversion helper.\n   *\n   * This conversion results in creating a model element. For example,\n   * view `<p>Foo</p>` becomes `<paragraph>Foo</paragraph>` in the model.\n   *\n   * Keep in mind that the element will be inserted only if it is allowed\n   * by {@link module:engine/model/schema~Schema schema} configuration.\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n   *\t\t\tview: 'p',\n   *\t\t\tmodel: 'paragraph'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n   *\t\t\tview: 'p',\n   *\t\t\tmodel: 'paragraph',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n   *\t\t\tview: {\n   *\t\t\t\tname: 'p',\n   *\t\t\t\tclasses: 'fancy'\n   *\t\t\t},\n   *\t\t\tmodel: 'fancyParagraph'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToElement( {\n   * \t\t\tview: {\n   *\t\t\t\tname: 'p',\n   *\t\t\t\tclasses: 'heading'\n   * \t\t\t},\n   * \t\t\tmodel: ( viewElement, modelWriter ) => {\n   * \t\t\t\treturn modelWriter.createElement( 'heading', { level: viewElement.getAttribute( 'data-level' ) } );\n   * \t\t\t}\n   * \t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #elementToElement\n   * @param {Object} config Conversion configuration.\n   * @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n   * set, the converter will fire for every view element.\n   * @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n   * instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n   * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n  elementToElement(config) {\n    return this.add(upcastElementToElement(config));\n  }\n  /**\n   * View element to model attribute conversion helper.\n   *\n   * This conversion results in setting an attribute on a model node. For example, view `<strong>Foo</strong>` becomes\n   * `Foo` {@link module:engine/model/text~Text model text node} with `bold` attribute set to `true`.\n   *\n   * This helper is meant to set a model attribute on all the elements that are inside the converted element:\n   *\n   *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n   *\n   * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n   * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text. See\n   * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute} for comparison.\n   *\n   * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n   *\t\t\tview: 'strong',\n   *\t\t\tmodel: 'bold'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n   *\t\t\tview: 'strong',\n   *\t\t\tmodel: 'bold',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tclasses: 'bold'\n   *\t\t\t},\n   *\t\t\tmodel: 'bold'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tclasses: [ 'styled', 'styled-dark' ]\n   *\t\t\t},\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'styled',\n   *\t\t\t\tvalue: 'dark'\n   *\t\t\t}\n   *\t\t} );\n   *\n   * \t\teditor.conversion.for( 'upcast' ).elementToAttribute( {\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tstyles: {\n   *\t\t\t\t\t'font-size': /[\\s\\S]+/\n   *\t\t\t\t}\n   *\t\t\t},\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'fontSize',\n   *\t\t\t\tvalue: viewElement => {\n   *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\t\t\t\t\tconst value = fontSize.substr( 0, fontSize.length - 2 );\n   *\n   *\t\t\t\t\tif ( value <= 10 ) {\n   *\t\t\t\t\t\treturn 'small';\n   *\t\t\t\t\t} else if ( value > 12 ) {\n   *\t\t\t\t\t\treturn 'big';\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #elementToAttribute\n   * @param {Object} config Conversion configuration.\n   * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n   * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n   * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n   * If `String` is given, the model attribute value will be set to `true`.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n   * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n\n\n  elementToAttribute(config) {\n    return this.add(upcastElementToAttribute(config));\n  }\n  /**\n   * View attribute to model attribute conversion helper.\n   *\n   * This conversion results in setting an attribute on a model node. For example, view `<img src=\"foo.jpg\"></img>` becomes\n   * `<image source=\"foo.jpg\"></image>` in the model.\n   *\n   * This helper is meant to convert view attributes from view elements which got converted to the model, so the view attribute\n   * is set only on the corresponding model node:\n   *\n   *\t\t<div class=\"dark\"><div>foo</div></div>    -->    <div dark=\"true\"><div>foo</div></div>\n   *\n   * Above, `class=\"dark\"` attribute is added only to the `<div>` elements that has it. This is in contrary to\n   * {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute} which sets attributes for\n   * all the children in the model:\n   *\n   *\t\t<strong>Foo</strong>   -->   <strong><p>Foo</p></strong>   -->   <paragraph><$text bold=\"true\">Foo</$text></paragraph>\n   *\n   * Above is a sample of HTML code, that goes through autoparagraphing (first step) and then is converted (second step).\n   * Even though `<strong>` is over `<p>` element, `bold=\"true\"` was added to the text.\n   *\n   * Keep in mind that the attribute will be set only if it is allowed by {@link module:engine/model/schema~Schema schema} configuration.\n   *\n   *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n   *\t\t\tview: 'src',\n   *\t\t\tmodel: 'source'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n   *\t\t\tview: { key: 'src' },\n   *\t\t\tmodel: 'source'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n   *\t\t\tview: { key: 'src' },\n   *\t\t\tmodel: 'source',\n   *\t\t\tconverterPriority: 'normal'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n   *\t\t\tview: {\n   *\t\t\t\tkey: 'data-style',\n   *\t\t\t\tvalue: /[\\s\\S]+/\n   *\t\t\t},\n   *\t\t\tmodel: 'styled'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n   *\t\t\tview: {\n   *\t\t\t\tname: 'img',\n   *\t\t\t\tkey: 'class',\n   *\t\t\t\tvalue: 'styled-dark'\n   *\t\t\t},\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'styled',\n   *\t\t\t\tvalue: 'dark'\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).attributeToAttribute( {\n   *\t\t\tview: {\n   *\t\t\t\tkey: 'class',\n   *\t\t\t\tvalue: /styled-[\\S]+/\n   *\t\t\t},\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'styled'\n   *\t\t\t\tvalue: viewElement => {\n   *\t\t\t\t\tconst regexp = /styled-([\\S]+)/;\n   *\t\t\t\t\tconst match = viewElement.getAttribute( 'class' ).match( regexp );\n   *\n   *\t\t\t\t\treturn match[ 1 ];\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #attributeToAttribute\n   * @param {Object} config Conversion configuration.\n   * @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n   * attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n   * specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n   * property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n   * a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n   * @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n   * the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n   * If `String` is given, the model attribute value will be same as view attribute value.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n   * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n\n\n  attributeToAttribute(config) {\n    return this.add(upcastAttributeToAttribute(config));\n  }\n  /**\n   * View element to model marker conversion helper.\n   *\n   * This conversion results in creating a model marker. For example, if the marker was stored in a view as an element:\n   * `<p>Fo<span data-marker=\"comment\" data-comment-id=\"7\"></span>o</p><p>B<span data-marker=\"comment\" data-comment-id=\"7\"></span>ar</p>`,\n   * after the conversion is done, the marker will be available in\n   * {@link module:engine/model/model~Model#markers model document markers}.\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n   *\t\t\tview: 'marker-search',\n   *\t\t\tmodel: 'search'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n   *\t\t\tview: 'marker-search',\n   *\t\t\tmodel: 'search',\n   *\t\t\tconverterPriority: 'high'\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n   *\t\t\tview: 'marker-search',\n   *\t\t\tmodel: viewElement => 'comment:' + viewElement.getAttribute( 'data-comment-id' )\n   *\t\t} );\n   *\n   *\t\teditor.conversion.for( 'upcast' ).elementToMarker( {\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tattributes: {\n   *\t\t\t\t\t'data-marker': 'search'\n   *\t\t\t\t}\n   *\t\t\t},\n   *\t\t\tmodel: 'search'\n   *\t\t} );\n   *\n   * See {@link module:engine/conversion/conversion~Conversion#for `conversion.for()`} to learn how to add a converter\n   * to the conversion process.\n   *\n   * @method #elementToMarker\n   * @param {Object} config Conversion configuration.\n   * @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n   * @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n   * a model marker name.\n   * @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n   * @returns {module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n\n\n  elementToMarker(config) {\n    return this.add(upcastElementToMarker(config));\n  }\n\n}\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * or all children of {@link module:engine/view/element~Element} into\n * {@link module:engine/model/documentfragment~DocumentFragment model document fragment}.\n * This is the \"entry-point\" converter for upcast (view to model conversion). This converter starts the conversion of all children\n * of passed view document fragment. Those children {@link module:engine/view/node~Node view nodes} are then handled by other converters.\n *\n * This also a \"default\", last resort converter for all view elements that has not been converted by other converters.\n * When a view element is being converted to the model but it does not have converter specified, that view element\n * will be converted to {@link module:engine/model/documentfragment~DocumentFragment model document fragment} and returned.\n *\n * @returns {Function} Universal converter for view {@link module:engine/view/documentfragment~DocumentFragment fragments} and\n * {@link module:engine/view/element~Element elements} that returns\n * {@link module:engine/model/documentfragment~DocumentFragment model fragment} with children of converted view item.\n */\n\nexport function convertToModelFragment() {\n  return (evt, data, conversionApi) => {\n    // Second argument in `consumable.consume` is discarded for ViewDocumentFragment but is needed for ViewElement.\n    if (!data.modelRange && conversionApi.consumable.consume(data.viewItem, {\n      name: true\n    })) {\n      const {\n        modelRange,\n        modelCursor\n      } = conversionApi.convertChildren(data.viewItem, data.modelCursor);\n      data.modelRange = modelRange;\n      data.modelCursor = modelCursor;\n    }\n  };\n}\n/**\n * Function factory, creates a converter that converts {@link module:engine/view/text~Text} to {@link module:engine/model/text~Text}.\n *\n * @returns {Function} {@link module:engine/view/text~Text View text} converter.\n */\n\nexport function convertText() {\n  return (evt, data, conversionApi) => {\n    if (conversionApi.schema.checkChild(data.modelCursor, '$text')) {\n      if (conversionApi.consumable.consume(data.viewItem)) {\n        const text = conversionApi.writer.createText(data.viewItem.data);\n        conversionApi.writer.insert(text, data.modelCursor);\n        data.modelRange = ModelRange._createFromPositionAndShift(data.modelCursor, text.offsetSize);\n        data.modelCursor = data.modelRange.end;\n      }\n    }\n  };\n}\n/**\n * Function factory, creates a callback function which converts a {@link module:engine/view/selection~Selection\n * view selection} taken from the {@link module:engine/view/document~Document#event:selectionChange} event\n * and sets in on the {@link module:engine/model/document~Document#selection model}.\n *\n * **Note**: because there is no view selection change dispatcher nor any other advanced view selection to model\n * conversion mechanism, the callback should be set directly on view document.\n *\n *\t\tview.document.on( 'selectionChange', convertSelectionChange( modelDocument, mapper ) );\n *\n * @param {module:engine/model/model~Model} model Data model.\n * @param {module:engine/conversion/mapper~Mapper} mapper Conversion mapper.\n * @returns {Function} {@link module:engine/view/document~Document#event:selectionChange} callback function.\n */\n\nexport function convertSelectionChange(model, mapper) {\n  return (evt, data) => {\n    const viewSelection = data.newSelection;\n    const modelSelection = new ModelSelection();\n    const ranges = [];\n\n    for (const viewRange of viewSelection.getRanges()) {\n      ranges.push(mapper.toModelRange(viewRange));\n    }\n\n    modelSelection.setTo(ranges, {\n      backward: viewSelection.isBackward\n    });\n\n    if (!modelSelection.isEqual(model.document.selection)) {\n      model.change(writer => {\n        writer.setSelection(modelSelection);\n      });\n    }\n  };\n} // View element to model element conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToElement `.elementToElement()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} [config.view] Pattern matching all view elements which should be converted. If not\n// set, the converter will fire for every view element.\n// @param {String|module:engine/model/element~Element|Function} config.model Name of the model element, a model element\n// instance or a function that takes a view element and returns a model element. The model element will be inserted in the model.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\n\nfunction upcastElementToElement(config) {\n  config = cloneDeep(config);\n  const converter = prepareToElementConverter(config);\n  const elementName = getViewElementNameFromConfig(config.view);\n  const eventName = elementName ? 'element:' + elementName : 'element';\n  return dispatcher => {\n    dispatcher.on(eventName, converter, {\n      priority: config.converterPriority || 'normal'\n    });\n  };\n} // View element to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToAttribute `.elementToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be set to `true`.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction upcastElementToAttribute(config) {\n  config = cloneDeep(config);\n  normalizeModelAttributeConfig(config);\n  const converter = prepareToAttributeConverter(config, false);\n  const elementName = getViewElementNameFromConfig(config.view);\n  const eventName = elementName ? 'element:' + elementName : 'element';\n  return dispatcher => {\n    dispatcher.on(eventName, converter, {\n      priority: config.converterPriority || 'low'\n    });\n  };\n} // View attribute to model attribute conversion helper.\n//\n// See {@link ~UpcastHelpers#attributeToAttribute `.attributeToAttribute()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {String|Object} config.view Specifies which view attribute will be converted. If a `String` is passed,\n// attributes with given key will be converted. If an `Object` is passed, it must have a required `key` property,\n// specifying view attribute key, and may have an optional `value` property, specifying view attribute value and optional `name`\n// property specifying a view element name from/on which the attribute should be converted. `value` can be given as a `String`,\n// a `RegExp` or a function callback, that takes view attribute value as the only parameter and returns `Boolean`.\n// @param {String|Object} config.model Model attribute key or an object with `key` and `value` properties, describing\n// the model attribute. `value` property may be set as a function that takes a view element and returns the value.\n// If `String` is given, the model attribute value will be same as view attribute value.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='low'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction upcastAttributeToAttribute(config) {\n  config = cloneDeep(config);\n  let viewKey = null;\n\n  if (typeof config.view == 'string' || config.view.key) {\n    viewKey = normalizeViewAttributeKeyValueConfig(config);\n  }\n\n  normalizeModelAttributeConfig(config, viewKey);\n  const converter = prepareToAttributeConverter(config, true);\n  return dispatcher => {\n    dispatcher.on('element', converter, {\n      priority: config.converterPriority || 'low'\n    });\n  };\n} // View element to model marker conversion helper.\n//\n// See {@link ~UpcastHelpers#elementToMarker `.elementToMarker()` upcast helper} for examples.\n//\n// @param {Object} config Conversion configuration.\n// @param {module:engine/view/matcher~MatcherPattern} config.view Pattern matching all view elements which should be converted.\n// @param {String|Function} config.model Name of the model marker, or a function that takes a view element and returns\n// a model marker name.\n// @param {module:utils/priorities~PriorityString} [config.converterPriority='normal'] Converter priority.\n// @returns {Function} Conversion helper.\n\n\nfunction upcastElementToMarker(config) {\n  config = cloneDeep(config);\n  normalizeToMarkerConfig(config);\n  return upcastElementToElement(config);\n} // Helper function for from-view-element conversion. Checks if `config.view` directly specifies converted view element's name\n// and if so, returns it.\n//\n// @param {Object} config Conversion view config.\n// @returns {String|null} View element name or `null` if name is not directly set.\n\n\nfunction getViewElementNameFromConfig(viewConfig) {\n  if (typeof viewConfig == 'string') {\n    return viewConfig;\n  }\n\n  if (typeof viewConfig == 'object' && typeof viewConfig.name == 'string') {\n    return viewConfig.name;\n  }\n\n  return null;\n} // Helper for to-model-element conversion. Takes a config object and returns a proper converter function.\n//\n// @param {Object} config Conversion configuration.\n// @returns {Function} View to model converter.\n\n\nfunction prepareToElementConverter(config) {\n  const matcher = config.view ? new Matcher(config.view) : null;\n  return (evt, data, conversionApi) => {\n    let match = {}; // If `config.view` has not been passed do not try matching. In this case, the converter should fire for all elements.\n\n    if (matcher) {\n      // This will be usually just one pattern but we support matchers with many patterns too.\n      const matcherResult = matcher.match(data.viewItem); // If there is no match, this callback should not do anything.\n\n      if (!matcherResult) {\n        return;\n      }\n\n      match = matcherResult.match;\n    } // Force consuming element's name.\n\n\n    match.name = true; // Create model element basing on config.\n\n    const modelElement = getModelElement(config.model, data.viewItem, conversionApi.writer); // Do not convert if element building function returned falsy value.\n\n    if (!modelElement) {\n      return;\n    } // When element was already consumed then skip it.\n\n\n    if (!conversionApi.consumable.test(data.viewItem, match)) {\n      return;\n    } // Find allowed parent for element that we are going to insert.\n    // If current parent does not allow to insert element but one of the ancestors does\n    // then split nodes to allowed parent.\n\n\n    const splitResult = conversionApi.splitToAllowedParent(modelElement, data.modelCursor); // When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\n    if (!splitResult) {\n      return;\n    } // Insert element on allowed position.\n\n\n    conversionApi.writer.insert(modelElement, splitResult.position); // Convert children and insert to element.\n\n    conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelElement, 0)); // Consume appropriate value from consumable values list.\n\n    conversionApi.consumable.consume(data.viewItem, match);\n    const parts = conversionApi.getSplitParts(modelElement); // Set conversion result range.\n\n    data.modelRange = new ModelRange(conversionApi.writer.createPositionBefore(modelElement), conversionApi.writer.createPositionAfter(parts[parts.length - 1])); // Now we need to check where the `modelCursor` should be.\n\n    if (splitResult.cursorParent) {\n      // If we split parent to insert our element then we want to continue conversion in the new part of the split parent.\n      //\n      // before: <allowed><notAllowed>foo[]</notAllowed></allowed>\n      // after:  <allowed><notAllowed>foo</notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n      data.modelCursor = conversionApi.writer.createPositionAt(splitResult.cursorParent, 0);\n    } else {\n      // Otherwise just continue after inserted element.\n      data.modelCursor = data.modelRange.end;\n    }\n  };\n} // Helper function for upcasting-to-element converter. Takes the model configuration, the converted view element\n// and a writer instance and returns a model element instance to be inserted in the model.\n//\n// @param {String|Function|module:engine/model/element~Element} model Model conversion configuration.\n// @param {module:engine/view/node~Node} input The converted view node.\n// @param {module:engine/model/writer~Writer} writer A writer instance to use to create the model element.\n\n\nfunction getModelElement(model, input, writer) {\n  if (model instanceof Function) {\n    return model(input, writer);\n  } else {\n    return writer.createElement(model);\n  }\n} // Helper function view-attribute-to-model-attribute helper. Normalizes `config.view` which was set as `String` or\n// as an `Object` with `key`, `value` and `name` properties. Normalized `config.view` has is compatible with\n// {@link module:engine/view/matcher~MatcherPattern}.\n//\n// @param {Object} config Conversion config.\n// @returns {String} Key of the converted view attribute.\n\n\nfunction normalizeViewAttributeKeyValueConfig(config) {\n  if (typeof config.view == 'string') {\n    config.view = {\n      key: config.view\n    };\n  }\n\n  const key = config.view.key;\n  let normalized;\n\n  if (key == 'class' || key == 'style') {\n    const keyName = key == 'class' ? 'classes' : 'styles';\n    normalized = {\n      [keyName]: config.view.value\n    };\n  } else {\n    const value = typeof config.view.value == 'undefined' ? /[\\s\\S]*/ : config.view.value;\n    normalized = {\n      attributes: {\n        [key]: value\n      }\n    };\n  }\n\n  if (config.view.name) {\n    normalized.name = config.view.name;\n  }\n\n  config.view = normalized;\n  return key;\n} // Helper function that normalizes `config.model` in from-model-attribute conversion. `config.model` can be set\n// as a `String`, an `Object` with only `key` property or an `Object` with `key` and `value` properties. Normalized\n// `config.model` is an `Object` with `key` and `value` properties.\n//\n// @param {Object} config Conversion config.\n// @param {String} viewAttributeKeyToCopy Key of the converted view attribute. If it is set, model attribute value\n// will be equal to view attribute value.\n\n\nfunction normalizeModelAttributeConfig(config, viewAttributeKeyToCopy = null) {\n  const defaultModelValue = viewAttributeKeyToCopy === null ? true : viewElement => viewElement.getAttribute(viewAttributeKeyToCopy);\n  const key = typeof config.model != 'object' ? config.model : config.model.key;\n  const value = typeof config.model != 'object' || typeof config.model.value == 'undefined' ? defaultModelValue : config.model.value;\n  config.model = {\n    key,\n    value\n  };\n} // Helper for to-model-attribute conversion. Takes the model attribute name and conversion configuration and returns\n// a proper converter function.\n//\n// @param {String} modelAttributeKey The key of the model attribute to set on a model node.\n// @param {Object|Array.<Object>} config Conversion configuration. It is possible to provide multiple configurations in an array.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\n\n\nfunction prepareToAttributeConverter(config, shallow) {\n  const matcher = new Matcher(config.view);\n  return (evt, data, conversionApi) => {\n    const match = matcher.match(data.viewItem); // If there is no match, this callback should not do anything.\n\n    if (!match) {\n      return;\n    }\n\n    const modelKey = config.model.key;\n    const modelValue = typeof config.model.value == 'function' ? config.model.value(data.viewItem) : config.model.value; // Do not convert if attribute building function returned falsy value.\n\n    if (modelValue === null) {\n      return;\n    }\n\n    if (onlyViewNameIsDefined(config.view, data.viewItem)) {\n      match.match.name = true;\n    } else {\n      // Do not test or consume `name` consumable.\n      delete match.match.name;\n    } // Try to consume appropriate values from consumable values list.\n\n\n    if (!conversionApi.consumable.test(data.viewItem, match.match)) {\n      return;\n    } // Since we are converting to attribute we need an range on which we will set the attribute.\n    // If the range is not created yet, we will create it.\n\n\n    if (!data.modelRange) {\n      // Convert children and set conversion result as a current data.\n      data = Object.assign(data, conversionApi.convertChildren(data.viewItem, data.modelCursor));\n    } // Set attribute on current `output`. `Schema` is checked inside this helper function.\n\n\n    const attributeWasSet = setAttributeOn(data.modelRange, {\n      key: modelKey,\n      value: modelValue\n    }, shallow, conversionApi);\n\n    if (attributeWasSet) {\n      conversionApi.consumable.consume(data.viewItem, match.match);\n    }\n  };\n} // Helper function that checks if element name should be consumed in attribute converters.\n//\n// @param {Object} config Conversion view config.\n// @returns {Boolean}\n\n\nfunction onlyViewNameIsDefined(viewConfig, viewItem) {\n  // https://github.com/ckeditor/ckeditor5-engine/issues/1786\n  const configToTest = typeof viewConfig == 'function' ? viewConfig(viewItem) : viewConfig;\n\n  if (typeof configToTest == 'object' && !getViewElementNameFromConfig(configToTest)) {\n    return false;\n  }\n\n  return !configToTest.classes && !configToTest.attributes && !configToTest.styles;\n} // Helper function for to-model-attribute converter. Sets model attribute on given range. Checks {@link module:engine/model/schema~Schema}\n// to ensure proper model structure.\n//\n// @param {module:engine/model/range~Range} modelRange Model range on which attribute should be set.\n// @param {Object} modelAttribute Model attribute to set.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion API.\n// @param {Boolean} shallow If set to `true` the attribute will be set only on top-level nodes. Otherwise, it will be set\n// on all elements in the range.\n// @returns {Boolean} `true` if attribute was set on at least one node from given `modelRange`.\n\n\nfunction setAttributeOn(modelRange, modelAttribute, shallow, conversionApi) {\n  let result = false; // Set attribute on each item in range according to Schema.\n\n  for (const node of Array.from(modelRange.getItems({\n    shallow\n  }))) {\n    if (conversionApi.schema.checkAttribute(node, modelAttribute.key)) {\n      conversionApi.writer.setAttribute(modelAttribute.key, modelAttribute.value, node);\n      result = true;\n    }\n  }\n\n  return result;\n} // Helper function for upcasting-to-marker conversion. Takes the config in a format requested by `upcastElementToMarker()`\n// function and converts it to a format that is supported by `_upcastElementToElement()` function.\n//\n// @param {Object} config Conversion configuration.\n\n\nfunction normalizeToMarkerConfig(config) {\n  const oldModel = config.model;\n\n  config.model = (viewElement, modelWriter) => {\n    const markerName = typeof oldModel == 'string' ? oldModel : oldModel(viewElement);\n    return modelWriter.createElement('$marker', {\n      'data-name': markerName\n    });\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/editingcontroller\n */\nimport RootEditableElement from '../view/rooteditableelement';\nimport View from '../view/view';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { clearAttributes, convertCollapsedSelection, convertRangeSelection, insertText, remove } from '../conversion/downcasthelpers';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { convertSelectionChange } from '../conversion/upcasthelpers';\n/**\n * Controller for the editing pipeline. The editing pipeline controls {@link ~EditingController#model model} rendering,\n * including selection handling. It also creates the {@link ~EditingController#view view} which builds a\n * browser-independent virtualization over the DOM elements. The editing controller also attaches default converters.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class EditingController {\n  /**\n   * Creates an editing controller instance.\n   *\n   * @param {module:engine/model/model~Model} model Editing model.\n   */\n  constructor(model) {\n    /**\n     * Editor model.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * Editing view controller.\n     *\n     * @readonly\n     * @member {module:engine/view/view~View}\n     */\n\n    this.view = new View();\n    /**\n     * Mapper which describes the model-view binding.\n     *\n     * @readonly\n     * @member {module:engine/conversion/mapper~Mapper}\n     */\n\n    this.mapper = new Mapper();\n    /**\n     * Downcast dispatcher that converts changes from the model to {@link #view the editing view}.\n     *\n     * @readonly\n     * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher} #downcastDispatcher\n     */\n\n    this.downcastDispatcher = new DowncastDispatcher({\n      mapper: this.mapper\n    });\n    const doc = this.model.document;\n    const selection = doc.selection;\n    const markers = this.model.markers; // When plugins listen on model changes (on selection change, post fixers, etc) and change the view as a result of\n    // model's change, they might trigger view rendering before the conversion is completed (e.g. before the selection\n    // is converted). We disable rendering for the length of the outermost model change() block to prevent that.\n    //\n    // See  https://github.com/ckeditor/ckeditor5-engine/issues/1528\n\n    this.listenTo(this.model, '_beforeChanges', () => {\n      this.view._disableRendering(true);\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(this.model, '_afterChanges', () => {\n      this.view._disableRendering(false);\n    }, {\n      priority: 'lowest'\n    }); // Whenever model document is changed, convert those changes to the view (using model.Document#differ).\n    // Do it on 'low' priority, so changes are converted after other listeners did their job.\n    // Also convert model selection.\n\n    this.listenTo(doc, 'change', () => {\n      this.view.change(writer => {\n        this.downcastDispatcher.convertChanges(doc.differ, markers, writer);\n        this.downcastDispatcher.convertSelection(selection, markers, writer);\n      });\n    }, {\n      priority: 'low'\n    }); // Convert selection from the view to the model when it changes in the view.\n\n    this.listenTo(this.view.document, 'selectionChange', convertSelectionChange(this.model, this.mapper)); // Attach default model converters.\n\n    this.downcastDispatcher.on('insert:$text', insertText(), {\n      priority: 'lowest'\n    });\n    this.downcastDispatcher.on('remove', remove(), {\n      priority: 'low'\n    }); // Attach default model selection converters.\n\n    this.downcastDispatcher.on('selection', clearAttributes(), {\n      priority: 'low'\n    });\n    this.downcastDispatcher.on('selection', convertRangeSelection(), {\n      priority: 'low'\n    });\n    this.downcastDispatcher.on('selection', convertCollapsedSelection(), {\n      priority: 'low'\n    }); // Binds {@link module:engine/view/document~Document#roots view roots collection} to\n    // {@link module:engine/model/document~Document#roots model roots collection} so creating\n    // model root automatically creates corresponding view root.\n\n    this.view.document.roots.bindTo(this.model.document.roots).using(root => {\n      // $graveyard is a special root that has no reflection in the view.\n      if (root.rootName == '$graveyard') {\n        return null;\n      }\n\n      const viewRoot = new RootEditableElement(root.name);\n      viewRoot.rootName = root.rootName;\n      viewRoot._document = this.view.document;\n      this.mapper.bindElements(root, viewRoot);\n      return viewRoot;\n    });\n  }\n  /**\n   * Removes all event listeners attached to the `EditingController`. Destroys all objects created\n   * by `EditingController` that need to be destroyed.\n   */\n\n\n  destroy() {\n    this.view.destroy();\n    this.stopListening();\n  }\n\n}\nmix(EditingController, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugincollection\n */\n\n/* globals console */\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Manages a list of CKEditor plugins, including loading, resolving dependencies and initialization.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class PluginCollection {\n  /**\n   * Creates an instance of the PluginCollection class.\n   * Allows loading and initializing plugins and their dependencies.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {Array.<Function>} [availablePlugins] Plugins (constructors) which the collection will be able to use\n   * when {@link module:core/plugincollection~PluginCollection#init} is used with plugin names (strings, instead of constructors).\n   * Usually, the editor will pass its built-in plugins to the collection so they can later be\n   * used in `config.plugins` or `config.removePlugins` by names.\n   */\n  constructor(editor, availablePlugins = []) {\n    /**\n     * @protected\n     * @member {module:core/editor/editor~Editor} module:core/plugin~PluginCollection#_editor\n     */\n    this._editor = editor;\n    /**\n     * Map of plugin constructors which can be retrieved by their names.\n     *\n     * @protected\n     * @member {Map.<String|Function,Function>} module:core/plugin~PluginCollection#_availablePlugins\n     */\n\n    this._availablePlugins = new Map();\n    /**\n     * @protected\n     * @member {Map} module:core/plugin~PluginCollection#_plugins\n     */\n\n    this._plugins = new Map();\n\n    for (const PluginConstructor of availablePlugins) {\n      this._availablePlugins.set(PluginConstructor, PluginConstructor);\n\n      if (PluginConstructor.pluginName) {\n        this._availablePlugins.set(PluginConstructor.pluginName, PluginConstructor);\n      }\n    }\n  }\n  /**\n   * Iterable interface.\n   *\n   * Returns `[ PluginConstructor, pluginInstance ]` pairs.\n   *\n   * @returns {Iterable.<Array>}\n   */\n\n\n  *[Symbol.iterator]() {\n    for (const entry of this._plugins) {\n      if (typeof entry[0] == 'function') {\n        yield entry;\n      }\n    }\n  }\n  /**\n   * Gets the plugin instance by its constructor or name.\n   *\n   *\t\t// Check if 'Clipboard' plugin was loaded.\n   *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n   *\t\t\t// Get clipboard plugin instance\n   *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n   *\n   *\t\t\tthis.listenTo( clipboard, 'inputTransformation', ( evt, data ) => {\n   *\t\t\t\t// Do something on clipboard input.\n   *\t\t\t} );\n   *\t\t}\n   *\n   * **Note**: This method will throw error if plugin is not loaded. Use `{@link #has editor.plugins.has()}`\n   * to check if plugin is available.\n   *\n   * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n   * @returns {module:core/plugin~PluginInterface}\n   */\n\n\n  get(key) {\n    const plugin = this._plugins.get(key);\n\n    if (!plugin) {\n      /**\n       * The plugin is not loaded and could not be obtained.\n       *\n       * Plugin classes (constructors) need to be provided to the editor and must be loaded before they can be obtained from\n       * the plugin collection.\n       * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n       * property.\n       *\n       * **Note**: You can use `{@link module:core/plugincollection~PluginCollection#has editor.plugins.has()}`\n       * to check if plugin was loaded.\n       *\n       * @error plugincollection-plugin-not-loaded\n       * @param {String} plugin The name of the plugin which is not loaded.\n       */\n      const errorMsg = 'plugincollection-plugin-not-loaded: The requested plugin is not loaded.';\n      let pluginName = key;\n\n      if (typeof key == 'function') {\n        pluginName = key.pluginName || key.name;\n      }\n\n      throw new CKEditorError(errorMsg, this._editor, {\n        plugin: pluginName\n      });\n    }\n\n    return plugin;\n  }\n  /**\n   * Checks if plugin is loaded.\n   *\n   *\t\t// Check if 'Clipboard' plugin was loaded.\n   *\t\tif ( editor.plugins.has( 'Clipboard' ) ) {\n   *\t\t\t// Now use clipboard plugin instance:\n   *\t\t\tconst clipboard = editor.plugins.get( 'Clipboard' );\n   *\n   *\t\t\t// ...\n   *\t\t}\n   *\n   * @param {Function|String} key The plugin constructor or {@link module:core/plugin~PluginInterface.pluginName name}.\n   * @returns {Boolean}\n   */\n\n\n  has(key) {\n    return this._plugins.has(key);\n  }\n  /**\n   * Initializes a set of plugins and adds them to the collection.\n   *\n   * @param {Array.<Function|String>} plugins An array of {@link module:core/plugin~PluginInterface plugin constructors}\n   * or {@link module:core/plugin~PluginInterface.pluginName plugin names}. The second option (names) works only if\n   * `availablePlugins` were passed to the {@link #constructor}.\n   * @param {Array.<String|Function>} [removePlugins] Names of plugins or plugin constructors\n   * that should not be loaded (despite being specified in the `plugins` array).\n   * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which gets resolved once all plugins are loaded\n   * and available in the collection.\n   */\n\n\n  init(plugins, removePlugins = []) {\n    const that = this;\n    const editor = this._editor;\n    const loading = new Set();\n    const loaded = [];\n    const pluginConstructors = mapToAvailableConstructors(plugins);\n    const removePluginConstructors = mapToAvailableConstructors(removePlugins);\n    const missingPlugins = getMissingPluginNames(plugins);\n\n    if (missingPlugins) {\n      /**\n       * Some plugins are not available and could not be loaded.\n       *\n       * Plugin classes (constructors) need to be provided to the editor before they can be loaded by name.\n       * This is usually done in CKEditor 5 builds by setting the {@link module:core/editor/editor~Editor.builtinPlugins}\n       * property.\n       *\n       * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**, it means\n       * that you try to enable a plugin which was not included in that build. This may be due to a typo\n       * in the plugin name or simply because that plugin is not a part of this build. In the latter scenario,\n       * read more about {@glink builds/guides/development/custom-builds custom builds}.\n       *\n       * **If you see this warning when using one of the editor creators directly** (not a build), then it means\n       * that you tried loading plugins by name. However, unlike CKEditor 4, CKEditor 5 does not implement a \"plugin loader\".\n       * This means that CKEditor 5 does not know where to load the plugin modules from. Therefore, you need to\n       * provide each plugin through reference (as a constructor function). Check out the examples in\n       * {@glink builds/guides/integration/advanced-setup#scenario-2-building-from-source \"Building from source\"}.\n       *\n       * @error plugincollection-plugin-not-found\n       * @param {Array.<String>} plugins The name of the plugins which could not be loaded.\n       */\n      const errorMsg = 'plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.'; // Log the error so it's more visible on the console. Hopefully, for better DX.\n\n      console.error(attachLinkToDocumentation(errorMsg), {\n        plugins: missingPlugins\n      });\n      return Promise.reject(new CKEditorError(errorMsg, this._editor, {\n        plugins: missingPlugins\n      }));\n    }\n\n    return Promise.all(pluginConstructors.map(loadPlugin)).then(() => initPlugins(loaded, 'init')).then(() => initPlugins(loaded, 'afterInit')).then(() => loaded);\n\n    function loadPlugin(PluginConstructor) {\n      if (removePluginConstructors.includes(PluginConstructor)) {\n        return;\n      } // The plugin is already loaded or being loaded - do nothing.\n\n\n      if (that._plugins.has(PluginConstructor) || loading.has(PluginConstructor)) {\n        return;\n      }\n\n      return instantiatePlugin(PluginConstructor).catch(err => {\n        /**\n         * It was not possible to load the plugin.\n         *\n         * This is a generic error logged to the console when a JavaSript error is thrown during the initialization\n         * of one of the plugins.\n         *\n         * If you correctly handled the promise returned by the editor's `create()` method (like shown below)\n         * you will find the original error logged to the console, too:\n         *\n         *\t\tClassicEditor.create( document.getElementById( 'editor' ) )\n         *\t\t\t.then( editor => {\n         *\t\t\t\t// ...\n         * \t\t\t} )\n         *\t\t\t.catch( error => {\n         *\t\t\t\tconsole.error( error );\n         *\t\t\t} );\n         *\n         * @error plugincollection-load\n         * @param {String} plugin The name of the plugin that could not be loaded.\n         */\n        console.error(attachLinkToDocumentation('plugincollection-load: It was not possible to load the plugin.'), {\n          plugin: PluginConstructor\n        });\n        throw err;\n      });\n    }\n\n    function initPlugins(loadedPlugins, method) {\n      return loadedPlugins.reduce((promise, plugin) => {\n        if (!plugin[method]) {\n          return promise;\n        }\n\n        return promise.then(plugin[method].bind(plugin));\n      }, Promise.resolve());\n    }\n\n    function instantiatePlugin(PluginConstructor) {\n      return new Promise(resolve => {\n        loading.add(PluginConstructor);\n\n        if (PluginConstructor.requires) {\n          PluginConstructor.requires.forEach(RequiredPluginConstructorOrName => {\n            const RequiredPluginConstructor = getPluginConstructor(RequiredPluginConstructorOrName);\n\n            if (removePlugins.includes(RequiredPluginConstructor)) {\n              /**\n               * Cannot load a plugin because one of its dependencies is listed in the `removePlugins` option.\n               *\n               * @error plugincollection-required\n               * @param {Function} plugin The required plugin.\n               * @param {Function} requiredBy The parent plugin.\n               */\n              throw new CKEditorError('plugincollection-required: Cannot load a plugin because one of its dependencies is listed in' + 'the `removePlugins` option.', editor, {\n                plugin: RequiredPluginConstructor,\n                requiredBy: PluginConstructor\n              });\n            }\n\n            loadPlugin(RequiredPluginConstructor);\n          });\n        }\n\n        const plugin = new PluginConstructor(editor);\n\n        that._add(PluginConstructor, plugin);\n\n        loaded.push(plugin);\n        resolve();\n      });\n    }\n\n    function getPluginConstructor(PluginConstructorOrName) {\n      if (typeof PluginConstructorOrName == 'function') {\n        return PluginConstructorOrName;\n      }\n\n      return that._availablePlugins.get(PluginConstructorOrName);\n    }\n\n    function getMissingPluginNames(plugins) {\n      const missingPlugins = [];\n\n      for (const pluginNameOrConstructor of plugins) {\n        if (!getPluginConstructor(pluginNameOrConstructor)) {\n          missingPlugins.push(pluginNameOrConstructor);\n        }\n      }\n\n      return missingPlugins.length ? missingPlugins : null;\n    }\n\n    function mapToAvailableConstructors(plugins) {\n      return plugins.map(pluginNameOrConstructor => getPluginConstructor(pluginNameOrConstructor)).filter(PluginConstructor => !!PluginConstructor);\n    }\n  }\n  /**\n   * Destroys all loaded plugins.\n   *\n   * @returns {Promise}\n   */\n\n\n  destroy() {\n    const promises = Array.from(this).map(([, pluginInstance]) => pluginInstance).filter(pluginInstance => typeof pluginInstance.destroy == 'function').map(pluginInstance => pluginInstance.destroy());\n    return Promise.all(promises);\n  }\n  /**\n   * Adds the plugin to the collection. Exposed mainly for testing purposes.\n   *\n   * @protected\n   * @param {Function} PluginConstructor The plugin constructor.\n   * @param {module:core/plugin~PluginInterface} plugin The instance of the plugin.\n   */\n\n\n  _add(PluginConstructor, plugin) {\n    this._plugins.set(PluginConstructor, plugin);\n\n    const pluginName = PluginConstructor.pluginName;\n\n    if (!pluginName) {\n      return;\n    }\n\n    if (this._plugins.has(pluginName)) {\n      /**\n       * Two plugins with the same {@link module:core/plugin~PluginInterface.pluginName} were loaded.\n       * This will lead to runtime conflicts between these plugins.\n       *\n       * In practice, this warning usually means that new plugins were added to an existing CKEditor 5 build.\n       * Plugins should always be added to a source version of the editor (`@ckeditor/ckeditor5-editor-*`),\n       * not to an editor imported from one of the `@ckeditor/ckeditor5-build-*` packages.\n       *\n       * Check your import paths and the list of plugins passed to\n       * {@link module:core/editor/editor~Editor.create `Editor.create()`}\n       * or specified in {@link module:core/editor/editor~Editor.builtinPlugins `Editor.builtinPlugins`}.\n       *\n       * The second option is that your `node_modules/` directory contains duplicated versions of the same\n       * CKEditor 5 packages. Normally, on clean installations, npm deduplicates packages in `node_modules/`, so\n       * it may be enough to call `rm -rf node_modules && npm i`. However, if you installed conflicting versions\n       * of packages, their dependencies may need to be installed in more than one version which may lead to this\n       * warning.\n       *\n       * Technically speaking, this error occurs because after adding a plugin to an existing editor build\n       * dependencies of this plugin are being duplicated.\n       * They are already built into that editor build and now get added for the second time as dependencies\n       * of the plugin you are installing.\n       *\n       * Read more about {@glink builds/guides/integration/installing-plugins installing plugins}.\n       *\n       * @error plugincollection-plugin-name-conflict\n       * @param {String} pluginName The duplicated plugin name.\n       * @param {Function} plugin1 The first plugin constructor.\n       * @param {Function} plugin2 The second plugin constructor.\n       */\n      throw new CKEditorError('plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.', null, {\n        pluginName,\n        plugin1: this._plugins.get(pluginName).constructor,\n        plugin2: PluginConstructor\n      });\n    }\n\n    this._plugins.set(pluginName, plugin);\n  }\n\n}\nmix(PluginCollection, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/commandcollection\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Collection of commands. Its instance is available in {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n */\n\nexport default class CommandCollection {\n  /**\n   * Creates collection instance.\n   */\n  constructor() {\n    /**\n     * Command map.\n     *\n     * @private\n     * @member {Map}\n     */\n    this._commands = new Map();\n  }\n  /**\n   * Registers a new command.\n   *\n   * @param {String} commandName The name of the command.\n   * @param {module:core/command~Command} command\n   */\n\n\n  add(commandName, command) {\n    this._commands.set(commandName, command);\n  }\n  /**\n   * Retrieves a command from the collection.\n   *\n   * @param {String} commandName The name of the command.\n   * @returns {module:core/command~Command}\n   */\n\n\n  get(commandName) {\n    return this._commands.get(commandName);\n  }\n  /**\n   * Executes a command.\n   *\n   * @param {String} commandName The name of the command.\n   * @param {*} [...commandParams] Command parameters.\n   */\n\n\n  execute(commandName, ...args) {\n    const command = this.get(commandName);\n\n    if (!command) {\n      /**\n       * Command does not exist.\n       *\n       * @error commandcollection-command-not-found\n       * @param {String} commandName Name of the command.\n       */\n      throw new CKEditorError('commandcollection-command-not-found: Command does not exist.', this, {\n        commandName\n      });\n    }\n\n    command.execute(...args);\n  }\n  /**\n   * Returns iterator of command names.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  *names() {\n    yield* this._commands.keys();\n  }\n  /**\n   * Returns iterator of command instances.\n   *\n   * @returns {Iterable.<module:core/command~Command>}\n   */\n\n\n  *commands() {\n    yield* this._commands.values();\n  }\n  /**\n   * Iterable interface.\n   *\n   * Returns `[ commandName, commandInstance ]` pairs.\n   *\n   * @returns {Iterable.<Array>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._commands[Symbol.iterator]();\n  }\n  /**\n   * Destroys all collection commands.\n   */\n\n\n  destroy() {\n    for (const command of this.commands()) {\n      command.destroy();\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window */\n\n/**\n * @module utils/translation-service\n */\n\n/* istanbul ignore else */\nif (!window.CKEDITOR_TRANSLATIONS) {\n  window.CKEDITOR_TRANSLATIONS = {};\n}\n/**\n * Adds translations to existing ones.\n * These translations will later be available for the {@link module:utils/translation-service~translate `translate()`} function.\n *\n *\t\tadd( 'pl', {\n *\t\t\t'OK': 'OK',\n *\t\t\t'Cancel [context: reject]': 'Anuluj'\n *\t\t} );\n *\n * If you cannot import this function from this module (e.g. because you use a CKEditor 5 build), then you can\n * still add translations by extending the global `window.CKEDITOR_TRANSLATIONS` object by using a function like\n * the one below:\n *\n *\t\tfunction addTranslations( language, translations ) {\n *\t\t\tif ( !window.CKEDITOR_TRANSLATIONS ) {\n *\t\t\t\twindow.CKEDITOR_TRANSLATIONS = {};\n *\t\t\t}\n *\n *\t\t\tconst dictionary = window.CKEDITOR_TRANSLATIONS[ language ] || ( window.CKEDITOR_TRANSLATIONS[ language ] = {} );\n *\n *\t\t\t// Extend the dictionary for the given language.\n *\t\t\tObject.assign( dictionary, translations );\n *\t\t}\n *\n * @param {String} language Target language.\n * @param {Object.<String, String>} translations Translations which will be added to the dictionary.\n */\n\n\nexport function add(language, translations) {\n  const dictionary = window.CKEDITOR_TRANSLATIONS[language] || (window.CKEDITOR_TRANSLATIONS[language] = {});\n  Object.assign(dictionary, translations);\n}\n/**\n * Translates string if the translation of the string was previously added to the dictionary.\n * See {@link module:utils/translation-service Translation Service}.\n * This happens in a multi-language mode were translation modules are created by the bundler.\n *\n * When no translation is defined in the dictionary or the dictionary doesn't exist this function returns\n * the original string without the `'[context: ]'` (happens in development and single-language modes).\n *\n * In a single-language mode (when values passed to `t()` were replaced with target language strings) the dictionary\n * is left empty, so this function will return the original strings always.\n *\n *\t\ttranslate( 'pl', 'Cancel [context: reject]' );\n *\n * @param {String} language Target language.\n * @param {String} translationKey String that will be translated.\n * @returns {String} Translated sentence.\n */\n\nexport function translate(language, translationKey) {\n  const numberOfLanguages = getNumberOfLanguages();\n\n  if (numberOfLanguages === 1) {\n    // Override the language to the only supported one.\n    // This can't be done in the `Locale` class, because the translations comes after the `Locale` class initialization.\n    language = Object.keys(window.CKEDITOR_TRANSLATIONS)[0];\n  }\n\n  if (numberOfLanguages === 0 || !hasTranslation(language, translationKey)) {\n    return translationKey.replace(/ \\[context: [^\\]]+\\]$/, '');\n  }\n\n  const dictionary = window.CKEDITOR_TRANSLATIONS[language]; // In case of missing translations we still need to cut off the `[context: ]` parts.\n\n  return dictionary[translationKey].replace(/ \\[context: [^\\]]+\\]$/, '');\n}\n/**\n * Clears dictionaries for test purposes.\n *\n * @protected\n */\n\nexport function _clear() {\n  window.CKEDITOR_TRANSLATIONS = {};\n} // Checks whether the dictionary exists and translation in that dictionary exists.\n\nfunction hasTranslation(language, translationKey) {\n  return language in window.CKEDITOR_TRANSLATIONS && translationKey in window.CKEDITOR_TRANSLATIONS[language];\n}\n\nfunction getNumberOfLanguages() {\n  return Object.keys(window.CKEDITOR_TRANSLATIONS).length;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/locale\n */\n\n/* globals console */\nimport { translate } from './translation-service';\nconst RTL_LANGUAGE_CODES = ['ar', 'fa', 'he', 'ku', 'ug'];\n/**\n * Represents the localization services.\n */\n\nexport default class Locale {\n  /**\n   * Creates a new instance of the Locale class. Learn more about\n   * {@glink features/ui-language configuring language of the editor}.\n   *\n   * @param {Object} [options] Locale configuration.\n   * @param {String} [options.uiLanguage='en'] The editor UI language code in the\n   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. See {@link #uiLanguage}.\n   * @param {String} [options.contentLanguage] The editor content language code in the\n   * [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format. If not specified, the same as `options.language`.\n   * See {@link #contentLanguage}.\n   */\n  constructor(options = {}) {\n    /**\n     * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * If the {@link #contentLanguage content language} was not specified in the `Locale` constructor,\n     * it also defines the language of the content.\n     *\n     * @readonly\n     * @member {String}\n     */\n    this.uiLanguage = options.uiLanguage || 'en';\n    /**\n     * The editor content language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n     *\n     * Usually the same as {@link #uiLanguage editor language}, it can be customized by passing an optional\n     * argument to the `Locale` constructor.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.contentLanguage = options.contentLanguage || this.uiLanguage;\n    /**\n     * Text direction of the {@link #uiLanguage editor UI language}. Either `'ltr'` or `'rtl'`.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.uiLanguageDirection = getLanguageDirection(this.uiLanguage);\n    /**\n     * Text direction of the {@link #contentLanguage editor content language}.\n     *\n     * If the content language was passed directly to the `Locale` constructor, this property represents the\n     * direction of that language.\n     *\n     * If the {@link #contentLanguage editor content language} was derived from the {@link #uiLanguage editor language},\n     * the content language direction is the same as the {@link #uiLanguageDirection UI language direction}.\n     *\n     * The value is either `'ltr'` or `'rtl'`.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.contentLanguageDirection = getLanguageDirection(this.contentLanguage);\n    /**\n     * Translates the given string to the {@link #uiLanguage}. This method is also available in\n     * {@link module:core/editor/editor~Editor#t} and {@link module:ui/view~View#t}.\n     *\n     * The strings may contain placeholders (`%<index>`) for values which are passed as the second argument.\n     * `<index>` is the index in the `values` array.\n     *\n     *\t\teditor.t( 'Created file \"%0\" in %1ms.', [ fileName, timeTaken ] );\n     *\n     * This method's context is statically bound to Locale instance,\n     * so it can be called as a function:\n     *\n     *\t\tconst t = this.t;\n     *\t\tt( 'Label' );\n     *\n     * @method #t\n     * @param {String} str The string to translate.\n     * @param {String[]} [values] Values that should be used to interpolate the string.\n     */\n\n    this.t = (...args) => this._t(...args);\n  }\n  /**\n   * The editor UI language code in the [ISO 639-1](https://en.wikipedia.org/wiki/ISO_639-1) format.\n   *\n   * **Note**: This property has been deprecated. Please use {@link #uiLanguage} and {@link #contentLanguage}\n   * properties instead.\n   *\n   * @deprecated\n   * @member {String}\n   */\n\n\n  get language() {\n    /**\n     * The {@link module:utils/locale~Locale#language `Locale#language`} property has been deprecated and will\n     * be removed in the near future. Please use {@link #uiLanguage} and {@link #contentLanguage} properties instead.\n     *\n     * @error locale-deprecated-language-property\n     */\n    console.warn('locale-deprecated-language-property: ' + 'The Locale#language property has been deprecated and will be removed in the near future. ' + 'Please use #uiLanguage and #contentLanguage properties instead.');\n    return this.uiLanguage;\n  }\n  /**\n   * Base for the {@link #t} method.\n   *\n   * @private\n   */\n\n\n  _t(str, values) {\n    let translatedString = translate(this.uiLanguage, str);\n\n    if (values) {\n      translatedString = translatedString.replace(/%(\\d+)/g, (match, index) => {\n        return index < values.length ? values[index] : match;\n      });\n    }\n\n    return translatedString;\n  }\n\n} // Helps determine whether a language is LTR or RTL.\n//\n// @param {String} language The ISO 639-1 language code.\n// @returns {String} 'ltr' or 'rtl\n\nfunction getLanguageDirection(languageCode) {\n  return RTL_LANGUAGE_CODES.includes(languageCode) ? 'rtl' : 'ltr';\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/viewconsumable\n */\nimport { isArray } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Class used for handling consumption of view {@link module:engine/view/element~Element elements},\n * {@link module:engine/view/text~Text text nodes} and {@link module:engine/view/documentfragment~DocumentFragment document fragments}.\n * Element's name and its parts (attributes, classes and styles) can be consumed separately. Consuming an element's name\n * does not consume its attributes, classes and styles.\n * To add items for consumption use {@link module:engine/conversion/viewconsumable~ViewConsumable#add add method}.\n * To test items use {@link module:engine/conversion/viewconsumable~ViewConsumable#test test method}.\n * To consume items use {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consume method}.\n * To revert already consumed items use {@link module:engine/conversion/viewconsumable~ViewConsumable#revert revert method}.\n *\n *\t\tviewConsumable.add( element, { name: true } ); // Adds element's name as ready to be consumed.\n *\t\tviewConsumable.add( textNode ); // Adds text node for consumption.\n *\t\tviewConsumable.add( docFragment ); // Adds document fragment for consumption.\n *\t\tviewConsumable.test( element, { name: true }  ); // Tests if element's name can be consumed.\n *\t\tviewConsumable.test( textNode ); // Tests if text node can be consumed.\n *\t\tviewConsumable.test( docFragment ); // Tests if document fragment can be consumed.\n *\t\tviewConsumable.consume( element, { name: true }  ); // Consume element's name.\n *\t\tviewConsumable.consume( textNode ); // Consume text node.\n *\t\tviewConsumable.consume( docFragment ); // Consume document fragment.\n *\t\tviewConsumable.revert( element, { name: true }  ); // Revert already consumed element's name.\n *\t\tviewConsumable.revert( textNode ); // Revert already consumed text node.\n *\t\tviewConsumable.revert( docFragment ); // Revert already consumed document fragment.\n */\n\nexport default class ViewConsumable {\n  /**\n   * Creates new ViewConsumable.\n   */\n  constructor() {\n    /**\n     * Map of consumable elements. If {@link module:engine/view/element~Element element} is used as a key,\n     * {@link module:engine/conversion/viewconsumable~ViewElementConsumables ViewElementConsumables} instance is stored as value.\n     * For {@link module:engine/view/text~Text text nodes} and\n     * {@link module:engine/view/documentfragment~DocumentFragment document fragments} boolean value is stored as value.\n     *\n     * @protected\n     * @member {Map.<module:engine/conversion/viewconsumable~ViewElementConsumables|Boolean>}\n    */\n    this._consumables = new Map();\n  }\n  /**\n   * Adds {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n   * {@link module:engine/view/documentfragment~DocumentFragment document fragment} as ready to be consumed.\n   *\n   *\t\tviewConsumable.add( p, { name: true } ); // Adds element's name to consume.\n   *\t\tviewConsumable.add( p, { attributes: 'name' } ); // Adds element's attribute.\n   *\t\tviewConsumable.add( p, { classes: 'foobar' } ); // Adds element's class.\n   *\t\tviewConsumable.add( p, { styles: 'color' } ); // Adds element's style\n   *\t\tviewConsumable.add( p, { attributes: 'name', styles: 'color' } ); // Adds attribute and style.\n   *\t\tviewConsumable.add( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be provided.\n   *\t\tviewConsumable.add( textNode ); // Adds text node to consume.\n   *\t\tviewConsumable.add( docFragment ); // Adds document fragment to consume.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n   * attribute is provided - it should be handled separately by providing actual style/class.\n   *\n   *\t\tviewConsumable.add( p, { attributes: 'style' } ); // This call will throw an exception.\n   *\t\tviewConsumable.add( p, { styles: 'color' } ); // This is properly handled style.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n   * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n   * @param {Boolean} consumables.name If set to true element's name will be included.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n   */\n\n\n  add(element, consumables) {\n    let elementConsumables; // For text nodes and document fragments just mark them as consumable.\n\n    if (element.is('text') || element.is('documentFragment')) {\n      this._consumables.set(element, true);\n\n      return;\n    } // For elements create new ViewElementConsumables or update already existing one.\n\n\n    if (!this._consumables.has(element)) {\n      elementConsumables = new ViewElementConsumables();\n\n      this._consumables.set(element, elementConsumables);\n    } else {\n      elementConsumables = this._consumables.get(element);\n    }\n\n    elementConsumables.add(consumables);\n  }\n  /**\n   * Tests if {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n   * {@link module:engine/view/documentfragment~DocumentFragment document fragment} can be consumed.\n   * It returns `true` when all items included in method's call can be consumed. Returns `false` when\n   * first already consumed item is found and `null` when first non-consumable item is found.\n   *\n   *\t\tviewConsumable.test( p, { name: true } ); // Tests element's name.\n   *\t\tviewConsumable.test( p, { attributes: 'name' } ); // Tests attribute.\n   *\t\tviewConsumable.test( p, { classes: 'foobar' } ); // Tests class.\n   *\t\tviewConsumable.test( p, { styles: 'color' } ); // Tests style.\n   *\t\tviewConsumable.test( p, { attributes: 'name', styles: 'color' } ); // Tests attribute and style.\n   *\t\tviewConsumable.test( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be tested.\n   *\t\tviewConsumable.test( textNode ); // Tests text node.\n   *\t\tviewConsumable.test( docFragment ); // Tests document fragment.\n   *\n   * Testing classes and styles as attribute will test if all added classes/styles can be consumed.\n   *\n   *\t\tviewConsumable.test( p, { attributes: 'class' } ); // Tests if all added classes can be consumed.\n   *\t\tviewConsumable.test( p, { attributes: 'style' } ); // Tests if all added styles can be consumed.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n   * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n   * @param {Boolean} consumables.name If set to true element's name will be included.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n   * @returns {Boolean|null} Returns `true` when all items included in method's call can be consumed. Returns `false`\n   * when first already consumed item is found and `null` when first non-consumable item is found.\n   */\n\n\n  test(element, consumables) {\n    const elementConsumables = this._consumables.get(element);\n\n    if (elementConsumables === undefined) {\n      return null;\n    } // For text nodes and document fragments return stored boolean value.\n\n\n    if (element.is('text') || element.is('documentFragment')) {\n      return elementConsumables;\n    } // For elements test consumables object.\n\n\n    return elementConsumables.test(consumables);\n  }\n  /**\n   * Consumes {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n   * {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n   * It returns `true` when all items included in method's call can be consumed, otherwise returns `false`.\n   *\n   *\t\tviewConsumable.consume( p, { name: true } ); // Consumes element's name.\n   *\t\tviewConsumable.consume( p, { attributes: 'name' } ); // Consumes element's attribute.\n   *\t\tviewConsumable.consume( p, { classes: 'foobar' } ); // Consumes element's class.\n   *\t\tviewConsumable.consume( p, { styles: 'color' } ); // Consumes element's style.\n   *\t\tviewConsumable.consume( p, { attributes: 'name', styles: 'color' } ); // Consumes attribute and style.\n   *\t\tviewConsumable.consume( p, { classes: [ 'baz', 'bar' ] } ); // Multiple consumables can be consumed.\n   *\t\tviewConsumable.consume( textNode ); // Consumes text node.\n   *\t\tviewConsumable.consume( docFragment ); // Consumes document fragment.\n   *\n   * Consuming classes and styles as attribute will test if all added classes/styles can be consumed.\n   *\n   *\t\tviewConsumable.consume( p, { attributes: 'class' } ); // Consume only if all added classes can be consumed.\n   *\t\tviewConsumable.consume( p, { attributes: 'style' } ); // Consume only if all added styles can be consumed.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n   * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n   * @param {Boolean} consumables.name If set to true element's name will be included.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n   * @returns {Boolean} Returns `true` when all items included in method's call can be consumed,\n   * otherwise returns `false`.\n   */\n\n\n  consume(element, consumables) {\n    if (this.test(element, consumables)) {\n      if (element.is('text') || element.is('documentFragment')) {\n        // For text nodes and document fragments set value to false.\n        this._consumables.set(element, false);\n      } else {\n        // For elements - consume consumables object.\n        this._consumables.get(element).consume(consumables);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Reverts {@link module:engine/view/element~Element view element}, {@link module:engine/view/text~Text text node} or\n   * {@link module:engine/view/documentfragment~DocumentFragment document fragment} so they can be consumed once again.\n   * Method does not revert items that were never previously added for consumption, even if they are included in\n   * method's call.\n   *\n   *\t\tviewConsumable.revert( p, { name: true } ); // Reverts element's name.\n   *\t\tviewConsumable.revert( p, { attributes: 'name' } ); // Reverts element's attribute.\n   *\t\tviewConsumable.revert( p, { classes: 'foobar' } ); // Reverts element's class.\n   *\t\tviewConsumable.revert( p, { styles: 'color' } ); // Reverts element's style.\n   *\t\tviewConsumable.revert( p, { attributes: 'name', styles: 'color' } ); // Reverts attribute and style.\n   *\t\tviewConsumable.revert( p, { classes: [ 'baz', 'bar' ] } ); // Multiple names can be reverted.\n   *\t\tviewConsumable.revert( textNode ); // Reverts text node.\n   *\t\tviewConsumable.revert( docFragment ); // Reverts document fragment.\n   *\n   * Reverting classes and styles as attribute will revert all classes/styles that were previously added for\n   * consumption.\n   *\n   *\t\tviewConsumable.revert( p, { attributes: 'class' } ); // Reverts all classes added for consumption.\n   *\t\tviewConsumable.revert( p, { attributes: 'style' } ); // Reverts all styles added for consumption.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/text~Text|module:engine/view/documentfragment~DocumentFragment} element\n   * @param {Object} [consumables] Used only if first parameter is {@link module:engine/view/element~Element view element} instance.\n   * @param {Boolean} consumables.name If set to true element's name will be included.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names.\n   */\n\n\n  revert(element, consumables) {\n    const elementConsumables = this._consumables.get(element);\n\n    if (elementConsumables !== undefined) {\n      if (element.is('text') || element.is('documentFragment')) {\n        // For text nodes and document fragments - set consumable to true.\n        this._consumables.set(element, true);\n      } else {\n        // For elements - revert items from consumables object.\n        elementConsumables.revert(consumables);\n      }\n    }\n  }\n  /**\n   * Creates consumable object from {@link module:engine/view/element~Element view element}. Consumable object will include\n   * element's name and all its attributes, classes and styles.\n   *\n   * @static\n   * @param {module:engine/view/element~Element} element\n   * @returns {Object} consumables\n   */\n\n\n  static consumablesFromElement(element) {\n    const consumables = {\n      name: true,\n      attributes: [],\n      classes: [],\n      styles: []\n    };\n    const attributes = element.getAttributeKeys();\n\n    for (const attribute of attributes) {\n      // Skip classes and styles - will be added separately.\n      if (attribute == 'style' || attribute == 'class') {\n        continue;\n      }\n\n      consumables.attributes.push(attribute);\n    }\n\n    const classes = element.getClassNames();\n\n    for (const className of classes) {\n      consumables.classes.push(className);\n    }\n\n    const styles = element.getStyleNames();\n\n    for (const style of styles) {\n      consumables.styles.push(style);\n    }\n\n    return consumables;\n  }\n  /**\n   * Creates {@link module:engine/conversion/viewconsumable~ViewConsumable ViewConsumable} instance from\n   * {@link module:engine/view/node~Node node} or {@link module:engine/view/documentfragment~DocumentFragment document fragment}.\n   * Instance will contain all elements, child nodes, attributes, styles and classes added for consumption.\n   *\n   * @static\n   * @param {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment} from View node or document fragment\n   * from which `ViewConsumable` will be created.\n   * @param {module:engine/conversion/viewconsumable~ViewConsumable} [instance] If provided, given `ViewConsumable` instance will be used\n   * to add all consumables. It will be returned instead of a new instance.\n   */\n\n\n  static createFrom(from, instance) {\n    if (!instance) {\n      instance = new ViewConsumable();\n    }\n\n    if (from.is('text')) {\n      instance.add(from);\n      return instance;\n    } // Add `from` itself, if it is an element.\n\n\n    if (from.is('element')) {\n      instance.add(from, ViewConsumable.consumablesFromElement(from));\n    }\n\n    if (from.is('documentFragment')) {\n      instance.add(from);\n    }\n\n    for (const child of from.getChildren()) {\n      instance = ViewConsumable.createFrom(child, instance);\n    }\n\n    return instance;\n  }\n\n}\n/**\n * This is a private helper-class for {@link module:engine/conversion/viewconsumable~ViewConsumable}.\n * It represents and manipulates consumable parts of a single {@link module:engine/view/element~Element}.\n *\n * @private\n */\n\nclass ViewElementConsumables {\n  /**\n   * Creates ViewElementConsumables instance.\n   */\n  constructor() {\n    /**\n     * Flag indicating if name of the element can be consumed.\n     *\n     * @private\n     * @member {Boolean}\n     */\n    this._canConsumeName = null;\n    /**\n     * Contains maps of element's consumables: attributes, classes and styles.\n     *\n     * @private\n     * @member {Object}\n     */\n\n    this._consumables = {\n      attributes: new Map(),\n      styles: new Map(),\n      classes: new Map()\n    };\n  }\n  /**\n   * Adds consumable parts of the {@link module:engine/view/element~Element view element}.\n   * Element's name itself can be marked to be consumed (when element's name is consumed its attributes, classes and\n   * styles still could be consumed):\n   *\n   *\t\tconsumables.add( { name: true } );\n   *\n   * Attributes classes and styles:\n   *\n   *\t\tconsumables.add( { attributes: 'title', classes: 'foo', styles: 'color' } );\n   *\t\tconsumables.add( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n   * attribute is provided - it should be handled separately by providing `style` and `class` in consumables object.\n   *\n   * @param {Object} consumables Object describing which parts of the element can be consumed.\n   * @param {Boolean} consumables.name If set to `true` element's name will be added as consumable.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to add as consumable.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names to add as consumable.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names to add as consumable.\n   */\n\n\n  add(consumables) {\n    if (consumables.name) {\n      this._canConsumeName = true;\n    }\n\n    for (const type in this._consumables) {\n      if (type in consumables) {\n        this._add(type, consumables[type]);\n      }\n    }\n  }\n  /**\n   * Tests if parts of the {@link module:engine/view/node~Node view node} can be consumed.\n   *\n   * Element's name can be tested:\n   *\n   *\t\tconsumables.test( { name: true } );\n   *\n   * Attributes classes and styles:\n   *\n   *\t\tconsumables.test( { attributes: 'title', classes: 'foo', styles: 'color' } );\n   *\t\tconsumables.test( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n   *\n   * @param {Object} consumables Object describing which parts of the element should be tested.\n   * @param {Boolean} consumables.name If set to `true` element's name will be tested.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to test.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names to test.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names to test.\n   * @returns {Boolean|null} `true` when all tested items can be consumed, `null` when even one of the items\n   * was never marked for consumption and `false` when even one of the items was already consumed.\n   */\n\n\n  test(consumables) {\n    // Check if name can be consumed.\n    if (consumables.name && !this._canConsumeName) {\n      return this._canConsumeName;\n    }\n\n    for (const type in this._consumables) {\n      if (type in consumables) {\n        const value = this._test(type, consumables[type]);\n\n        if (value !== true) {\n          return value;\n        }\n      }\n    } // Return true only if all can be consumed.\n\n\n    return true;\n  }\n  /**\n   * Consumes parts of {@link module:engine/view/element~Element view element}. This function does not check if consumable item\n   * is already consumed - it consumes all consumable items provided.\n   * Element's name can be consumed:\n   *\n   *\t\tconsumables.consume( { name: true } );\n   *\n   * Attributes classes and styles:\n   *\n   *\t\tconsumables.consume( { attributes: 'title', classes: 'foo', styles: 'color' } );\n   *\t\tconsumables.consume( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n   *\n   * @param {Object} consumables Object describing which parts of the element should be consumed.\n   * @param {Boolean} consumables.name If set to `true` element's name will be consumed.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to consume.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names to consume.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names to consume.\n   */\n\n\n  consume(consumables) {\n    if (consumables.name) {\n      this._canConsumeName = false;\n    }\n\n    for (const type in this._consumables) {\n      if (type in consumables) {\n        this._consume(type, consumables[type]);\n      }\n    }\n  }\n  /**\n   * Revert already consumed parts of {@link module:engine/view/element~Element view Element}, so they can be consumed once again.\n   * Element's name can be reverted:\n   *\n   *\t\tconsumables.revert( { name: true } );\n   *\n   * Attributes classes and styles:\n   *\n   *\t\tconsumables.revert( { attributes: 'title', classes: 'foo', styles: 'color' } );\n   *\t\tconsumables.revert( { attributes: [ 'title', 'name' ], classes: [ 'foo', 'bar' ] );\n   *\n   * @param {Object} consumables Object describing which parts of the element should be reverted.\n   * @param {Boolean} consumables.name If set to `true` element's name will be reverted.\n   * @param {String|Array.<String>} consumables.attributes Attribute name or array of attribute names to revert.\n   * @param {String|Array.<String>} consumables.classes Class name or array of class names to revert.\n   * @param {String|Array.<String>} consumables.styles Style name or array of style names to revert.\n   */\n\n\n  revert(consumables) {\n    if (consumables.name) {\n      this._canConsumeName = true;\n    }\n\n    for (const type in this._consumables) {\n      if (type in consumables) {\n        this._revert(type, consumables[type]);\n      }\n    }\n  }\n  /**\n   * Helper method that adds consumables of a given type: attribute, class or style.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `viewconsumable-invalid-attribute` when `class` or `style`\n   * type is provided - it should be handled separately by providing actual style/class type.\n   *\n   * @private\n   * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n   * @param {String|Array.<String>} item Consumable item or array of items.\n   */\n\n\n  _add(type, item) {\n    const items = isArray(item) ? item : [item];\n    const consumables = this._consumables[type];\n\n    for (const name of items) {\n      if (type === 'attributes' && (name === 'class' || name === 'style')) {\n        /**\n         * Class and style attributes should be handled separately in\n         * {@link module:engine/conversion/viewconsumable~ViewConsumable#add `ViewConsumable#add()`}.\n         *\n         * What you have done is trying to use:\n         *\n         *\t\tconsumables.add( { attributes: [ 'class', 'style' ] } );\n         *\n         * While each class and style should be registered separately:\n         *\n         *\t\tconsumables.add( { classes: 'some-class', styles: 'font-weight' } );\n         *\n         * @error viewconsumable-invalid-attribute\n         */\n        throw new CKEditorError('viewconsumable-invalid-attribute: Classes and styles should be handled separately.', this);\n      }\n\n      consumables.set(name, true);\n    }\n  }\n  /**\n   * Helper method that tests consumables of a given type: attribute, class or style.\n   *\n   * @private\n   * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n   * @param {String|Array.<String>} item Consumable item or array of items.\n   * @returns {Boolean|null} Returns `true` if all items can be consumed, `null` when one of the items cannot be\n   * consumed and `false` when one of the items is already consumed.\n   */\n\n\n  _test(type, item) {\n    const items = isArray(item) ? item : [item];\n    const consumables = this._consumables[type];\n\n    for (const name of items) {\n      if (type === 'attributes' && (name === 'class' || name === 'style')) {\n        const consumableName = name == 'class' ? 'classes' : 'styles'; // Check all classes/styles if class/style attribute is tested.\n\n        const value = this._test(consumableName, [...this._consumables[consumableName].keys()]);\n\n        if (value !== true) {\n          return value;\n        }\n      } else {\n        const value = consumables.get(name); // Return null if attribute is not found.\n\n        if (value === undefined) {\n          return null;\n        }\n\n        if (!value) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Helper method that consumes items of a given type: attribute, class or style.\n   *\n   * @private\n   * @param {String} type Type of the consumable item: `attributes`, `classes` or `styles`.\n   * @param {String|Array.<String>} item Consumable item or array of items.\n   */\n\n\n  _consume(type, item) {\n    const items = isArray(item) ? item : [item];\n    const consumables = this._consumables[type];\n\n    for (const name of items) {\n      if (type === 'attributes' && (name === 'class' || name === 'style')) {\n        const consumableName = name == 'class' ? 'classes' : 'styles'; // If class or style is provided for consumption - consume them all.\n\n        this._consume(consumableName, [...this._consumables[consumableName].keys()]);\n      } else {\n        consumables.set(name, false);\n      }\n    }\n  }\n  /**\n   * Helper method that reverts items of a given type: attribute, class or style.\n   *\n   * @private\n   * @param {String} type Type of the consumable item: `attributes`, `classes` or , `styles`.\n   * @param {String|Array.<String>} item Consumable item or array of items.\n   */\n\n\n  _revert(type, item) {\n    const items = isArray(item) ? item : [item];\n    const consumables = this._consumables[type];\n\n    for (const name of items) {\n      if (type === 'attributes' && (name === 'class' || name === 'style')) {\n        const consumableName = name == 'class' ? 'classes' : 'styles'; // If class or style is provided for reverting - revert them all.\n\n        this._revert(consumableName, [...this._consumables[consumableName].keys()]);\n      } else {\n        const value = consumables.get(name);\n\n        if (value === false) {\n          consumables.set(name, true);\n        }\n      }\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/schema\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport Range from './range';\nimport Position from './position';\nimport Element from './element';\nimport Text from './text';\nimport TreeWalker from './treewalker';\n/**\n * The model's schema. It defines allowed and disallowed structures of nodes as well as nodes' attributes.\n * The schema is usually defined by features and based on them the editing framework and features\n * make decisions how to change and process the model.\n *\n * The instance of schema is available in {@link module:engine/model/model~Model#schema `editor.model.schema`}.\n *\n * Read more about the schema in:\n *\n * * {@glink framework/guides/architecture/editing-engine#schema \"Schema\"} section of the\n * {@glink framework/guides/architecture/editing-engine Introduction to the \"Editing engine architecture\"}.\n * * {@glink framework/guides/deep-dive/schema \"Schema\" deep dive} guide.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Schema {\n  /**\n   * Creates schema instance.\n   */\n  constructor() {\n    this._sourceDefinitions = {};\n    /**\n     * A dictionary containing attribute properties.\n     *\n     * @private\n     * @member {Object.<String,String>}\n     */\n\n    this._attributeProperties = {};\n    this.decorate('checkChild');\n    this.decorate('checkAttribute');\n    this.on('checkAttribute', (evt, args) => {\n      args[0] = new SchemaContext(args[0]);\n    }, {\n      priority: 'highest'\n    });\n    this.on('checkChild', (evt, args) => {\n      args[0] = new SchemaContext(args[0]);\n      args[1] = this.getDefinition(args[1]);\n    }, {\n      priority: 'highest'\n    });\n  }\n  /**\n   * Registers schema item. Can only be called once for every item name.\n   *\n   *\t\tschema.register( 'paragraph', {\n   *\t\t\tinheritAllFrom: '$block'\n   *\t\t} );\n   *\n   * @param {String} itemName\n   * @param {module:engine/model/schema~SchemaItemDefinition} definition\n   */\n\n\n  register(itemName, definition) {\n    if (this._sourceDefinitions[itemName]) {\n      /**\n       * A single item cannot be registered twice in the schema.\n       *\n       * This situation may happen when:\n       *\n       * * Two or more plugins called {@link #register `register()`} with the same name. This will usually mean that\n       * there is a collision between plugins which try to use the same element in the model. Unfortunately,\n       * the only way to solve this is by modifying one of these plugins to use a unique model element name.\n       * * A single plugin was loaded twice. This happens when it is installed by npm/yarn in two versions\n       * and usually means one or more of the following issues:\n       *     * a version mismatch (two of your dependencies require two different versions of this plugin),\n       *     * incorrect imports (this plugin is somehow imported twice in a way which confuses webpack),\n       *     * mess in `node_modules/` (`rm -rf node_modules/` may help).\n       *\n       * **Note:** Check the logged `itemName` to better understand which plugin was duplicated/conflicting.\n       *\n       * @param itemName The name of the model element that is being registered twice.\n       * @error schema-cannot-register-item-twice\n       */\n      throw new CKEditorError('schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.', this, {\n        itemName\n      });\n    }\n\n    this._sourceDefinitions[itemName] = [Object.assign({}, definition)];\n\n    this._clearCache();\n  }\n  /**\n   * Extends a {@link #register registered} item's definition.\n   *\n   * Extending properties such as `allowIn` will add more items to the existing properties,\n   * while redefining properties such as `isBlock` will override the previously defined ones.\n   *\n   *\t\tschema.register( 'foo', {\n   *\t\t\tallowIn: '$root',\n   *\t\t\tisBlock: true;\n   *\t\t} );\n   *\t\tschema.extend( 'foo', {\n   *\t\t\tallowIn: 'blockQuote',\n   *\t\t\tisBlock: false\n   *\t\t} );\n   *\n   *\t\tschema.getDefinition( 'foo' );\n   *\t\t//\t{\n   *\t\t//\t\tallowIn: [ '$root', 'blockQuote' ],\n   *\t\t// \t\tisBlock: false\n   *\t\t//\t}\n   *\n   * @param {String} itemName\n   * @param {module:engine/model/schema~SchemaItemDefinition} definition\n   */\n\n\n  extend(itemName, definition) {\n    if (!this._sourceDefinitions[itemName]) {\n      /**\n       * Cannot extend an item which was not registered yet.\n       *\n       * This error happens when a plugin tries to extend the schema definition of an item which was not\n       * {@link #register registered} yet.\n       *\n       * @param itemName The name of the model element which is being extended.\n       * @error schema-cannot-extend-missing-item\n       */\n      throw new CKEditorError('schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.', this, {\n        itemName\n      });\n    }\n\n    this._sourceDefinitions[itemName].push(Object.assign({}, definition));\n\n    this._clearCache();\n  }\n  /**\n   * Returns all registered items.\n   *\n   * @returns {Object.<String,module:engine/model/schema~SchemaCompiledItemDefinition>}\n   */\n\n\n  getDefinitions() {\n    if (!this._compiledDefinitions) {\n      this._compile();\n    }\n\n    return this._compiledDefinitions;\n  }\n  /**\n   * Returns a definition of the given item or `undefined` if item is not registered.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n   * @returns {module:engine/model/schema~SchemaCompiledItemDefinition}\n   */\n\n\n  getDefinition(item) {\n    let itemName;\n\n    if (typeof item == 'string') {\n      itemName = item;\n    } else if (item.is && (item.is('text') || item.is('textProxy'))) {\n      itemName = '$text';\n    } // Element or module:engine/model/schema~SchemaContextItem.\n    else {\n        itemName = item.name;\n      }\n\n    return this.getDefinitions()[itemName];\n  }\n  /**\n   * Returns `true` if the given item is registered in the schema.\n   *\n   *\t\tschema.isRegistered( 'paragraph' ); // -> true\n   *\t\tschema.isRegistered( editor.model.document.getRoot() ); // -> true\n   *\t\tschema.isRegistered( 'foo' ); // -> false\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n   */\n\n\n  isRegistered(item) {\n    return !!this.getDefinition(item);\n  }\n  /**\n   * Returns `true` if the given item is defined to be\n   * a block by {@link module:engine/model/schema~SchemaItemDefinition}'s `isBlock` property.\n   *\n   *\t\tschema.isBlock( 'paragraph' ); // -> true\n   *\t\tschema.isBlock( '$root' ); // -> false\n   *\n   *\t\tconst paragraphElement = writer.createElement( 'paragraph' );\n   *\t\tschema.isBlock( paragraphElement ); // -> true\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n   */\n\n\n  isBlock(item) {\n    const def = this.getDefinition(item);\n    return !!(def && def.isBlock);\n  }\n  /**\n   * Returns `true` if the given item is defined to be\n   * a limit element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isLimit` or `isObject` property\n   * (all objects are also limits).\n   *\n   *\t\tschema.isLimit( 'paragraph' ); // -> false\n   *\t\tschema.isLimit( '$root' ); // -> true\n   *\t\tschema.isLimit( editor.model.document.getRoot() ); // -> true\n   *\t\tschema.isLimit( 'image' ); // -> true\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n   */\n\n\n  isLimit(item) {\n    const def = this.getDefinition(item);\n\n    if (!def) {\n      return false;\n    }\n\n    return !!(def.isLimit || def.isObject);\n  }\n  /**\n   * Returns `true` if the given item is defined to be\n   * an object element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isObject` property.\n   *\n   *\t\tschema.isObject( 'paragraph' ); // -> false\n   *\t\tschema.isObject( 'image' ); // -> true\n   *\n   *\t\tconst imageElement = writer.createElement( 'image' );\n   *\t\tschema.isObject( imageElement ); // -> true\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n   */\n\n\n  isObject(item) {\n    const def = this.getDefinition(item);\n    return !!(def && def.isObject);\n  }\n  /**\n   * Returns `true` if the given item is defined to be\n   * an inline element by {@link module:engine/model/schema~SchemaItemDefinition}'s `isInline` property.\n   *\n   *\t\tschema.isInline( 'paragraph' ); // -> false\n   *\t\tschema.isInline( 'softBreak' ); // -> true\n   *\n   *\t\tconst text = writer.createText('foo' );\n   *\t\tschema.isInline( text ); // -> true\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/schema~SchemaContextItem|String} item\n   */\n\n\n  isInline(item) {\n    const def = this.getDefinition(item);\n    return !!(def && def.isInline);\n  }\n  /**\n   * Checks whether the given node (`child`) can be a child of the given context.\n   *\n   *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> false\n   *\n   *\t\tschema.register( 'paragraph', {\n   *\t\t\tallowIn: '$root'\n   *\t\t} );\n   *\t\tschema.checkChild( model.document.getRoot(), paragraph ); // -> true\n   *\n   * Note: When verifying whether the given node can be a child of the given context, the\n   * schema also verifies the entire context &mdash; from its root to its last element. Therefore, it is possible\n   * for `checkChild()` to return `false` even though the context's last element can contain the checked child.\n   * It happens if one of the context's elements does not allow its child.\n   *\n   * @fires checkChild\n   * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the child will be checked.\n   * @param {module:engine/model/node~Node|String} def The child to check.\n   */\n\n\n  checkChild(context, def) {\n    // Note: context and child are already normalized here to a SchemaContext and SchemaCompiledItemDefinition.\n    if (!def) {\n      return false;\n    }\n\n    return this._checkContextMatch(def, context);\n  }\n  /**\n   * Checks whether the given attribute can be applied in the given context (on the last\n   * item of the context).\n   *\n   *\t\tschema.checkAttribute( textNode, 'bold' ); // -> false\n   *\n   *\t\tschema.extend( '$text', {\n   *\t\t\tallowAttributes: 'bold'\n   *\t\t} );\n   *\t\tschema.checkAttribute( textNode, 'bold' ); // -> true\n   *\n   * @fires checkAttribute\n   * @param {module:engine/model/schema~SchemaContextDefinition} context The context in which the attribute will be checked.\n   * @param {String} attributeName\n   */\n\n\n  checkAttribute(context, attributeName) {\n    const def = this.getDefinition(context.last);\n\n    if (!def) {\n      return false;\n    }\n\n    return def.allowAttributes.includes(attributeName);\n  }\n  /**\n   * Checks whether the given element (`elementToMerge`) can be merged with the specified base element (`positionOrBaseElement`).\n   *\n   * In other words &mdash; whether `elementToMerge`'s children {@link #checkChild are allowed} in the `positionOrBaseElement`.\n   *\n   * This check ensures that elements merged with {@link module:engine/model/writer~Writer#merge `Writer#merge()`}\n   * will be valid.\n   *\n   * Instead of elements, you can pass the instance of the {@link module:engine/model/position~Position} class as the\n   * `positionOrBaseElement`. It means that the elements before and after the position will be checked whether they can be merged.\n   *\n   * @param {module:engine/model/position~Position|module:engine/model/element~Element} positionOrBaseElement The position or base\n   * element to which the `elementToMerge` will be merged.\n   * @param {module:engine/model/element~Element} elementToMerge The element to merge. Required if `positionOrBaseElement` is an element.\n   * @returns {Boolean}\n   */\n\n\n  checkMerge(positionOrBaseElement, elementToMerge = null) {\n    if (positionOrBaseElement instanceof Position) {\n      const nodeBefore = positionOrBaseElement.nodeBefore;\n      const nodeAfter = positionOrBaseElement.nodeAfter;\n\n      if (!(nodeBefore instanceof Element)) {\n        /**\n         * The node before the merge position must be an element.\n         *\n         * @error schema-check-merge-no-element-before\n         */\n        throw new CKEditorError('schema-check-merge-no-element-before: The node before the merge position must be an element.', this);\n      }\n\n      if (!(nodeAfter instanceof Element)) {\n        /**\n         * The node after the merge position must be an element.\n         *\n         * @error schema-check-merge-no-element-after\n         */\n        throw new CKEditorError('schema-check-merge-no-element-after: The node after the merge position must be an element.', this);\n      }\n\n      return this.checkMerge(nodeBefore, nodeAfter);\n    }\n\n    for (const child of elementToMerge.getChildren()) {\n      if (!this.checkChild(positionOrBaseElement, child)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Allows registering a callback to the {@link #checkChild} method calls.\n   *\n   * Callbacks allow you to implement rules which are not otherwise possible to achieve\n   * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n   * For example, by using this method you can disallow elements in specific contexts.\n   *\n   * This method is a shorthand for using the {@link #event:checkChild} event. For even better control,\n   * you can use that event instead.\n   *\n   * Example:\n   *\n   *\t\t// Disallow heading1 directly inside a blockQuote.\n   *\t\tschema.addChildCheck( ( context, childDefinition ) => {\n   *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition.name == 'heading1' ) {\n   *\t\t\t\treturn false;\n   *\t\t\t}\n   *\t\t} );\n   *\n   * Which translates to:\n   *\n   *\t\tschema.on( 'checkChild', ( evt, args ) => {\n   *\t\t\tconst context = args[ 0 ];\n   *\t\t\tconst childDefinition = args[ 1 ];\n   *\n   *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n   *\t\t\t\t// Prevent next listeners from being called.\n   *\t\t\t\tevt.stop();\n   *\t\t\t\t// Set the checkChild()'s return value.\n   *\t\t\t\tevt.return = false;\n   *\t\t\t}\n   *\t\t}, { priority: 'high' } );\n   *\n   * @param {Function} callback The callback to be called. It is called with two parameters:\n   * {@link module:engine/model/schema~SchemaContext} (context) instance and\n   * {@link module:engine/model/schema~SchemaCompiledItemDefinition} (child-to-check definition).\n   * The callback may return `true/false` to override `checkChild()`'s return value. If it does not return\n   * a boolean value, the default algorithm (or other callbacks) will define `checkChild()`'s return value.\n   */\n\n\n  addChildCheck(callback) {\n    this.on('checkChild', (evt, [ctx, childDef]) => {\n      // checkChild() was called with a non-registered child.\n      // In 99% cases such check should return false, so not to overcomplicate all callbacks\n      // don't even execute them.\n      if (!childDef) {\n        return;\n      }\n\n      const retValue = callback(ctx, childDef);\n\n      if (typeof retValue == 'boolean') {\n        evt.stop();\n        evt.return = retValue;\n      }\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * Allows registering a callback to the {@link #checkAttribute} method calls.\n   *\n   * Callbacks allow you to implement rules which are not otherwise possible to achieve\n   * by using the declarative API of {@link module:engine/model/schema~SchemaItemDefinition}.\n   * For example, by using this method you can disallow attribute if node to which it is applied\n   * is contained within some other element (e.g. you want to disallow `bold` on `$text` within `heading1`).\n   *\n   * This method is a shorthand for using the {@link #event:checkAttribute} event. For even better control,\n   * you can use that event instead.\n   *\n   * Example:\n   *\n   *\t\t// Disallow bold on $text inside heading1.\n   *\t\tschema.addAttributeCheck( ( context, attributeName ) => {\n   *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n   *\t\t\t\treturn false;\n   *\t\t\t}\n   *\t\t} );\n   *\n   * Which translates to:\n   *\n   *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n   *\t\t\tconst context = args[ 0 ];\n   *\t\t\tconst attributeName = args[ 1 ];\n   *\n   *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n   *\t\t\t\t// Prevent next listeners from being called.\n   *\t\t\t\tevt.stop();\n   *\t\t\t\t// Set the checkAttribute()'s return value.\n   *\t\t\t\tevt.return = false;\n   *\t\t\t}\n   *\t\t}, { priority: 'high' } );\n   *\n   * @param {Function} callback The callback to be called. It is called with two parameters:\n   * {@link module:engine/model/schema~SchemaContext} (context) instance and attribute name.\n   * The callback may return `true/false` to override `checkAttribute()`'s return value. If it does not return\n   * a boolean value, the default algorithm (or other callbacks) will define `checkAttribute()`'s return value.\n   */\n\n\n  addAttributeCheck(callback) {\n    this.on('checkAttribute', (evt, [ctx, attributeName]) => {\n      const retValue = callback(ctx, attributeName);\n\n      if (typeof retValue == 'boolean') {\n        evt.stop();\n        evt.return = retValue;\n      }\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * This method allows assigning additional metadata to the model attributes. For example,\n   * {@link module:engine/model/schema~AttributeProperties `AttributeProperties#isFormatting` property} is\n   * used to mark formatting attributes (like `bold` or `italic`).\n   *\n   *\t\t// Mark bold as a formatting attribute.\n   *\t\tschema.setAttributeProperties( 'bold', {\n   *\t\t\tisFormatting: true\n   *\t\t} );\n   *\n   *\t\t// Override code not to be considered a formatting markup.\n   *\t\tschema.setAttributeProperties( 'code', {\n   *\t\t\tisFormatting: false\n   *\t\t} );\n   *\n   * Properties are not limited to members defined in the\n   * {@link module:engine/model/schema~AttributeProperties `AttributeProperties` type} and you can also use custom properties:\n   *\n   *\t\tschema.setAttributeProperties( 'blockQuote', {\n   *\t\t\tcustomProperty: 'value'\n   *\t\t} );\n   *\n   * Subsequent calls with the same attribute will extend its custom properties:\n   *\n   *\t\tschema.setAttributeProperties( 'blockQuote', {\n   *\t\t\tone: 1\n   *\t\t} );\n   *\n   *\t\tschema.setAttributeProperties( 'blockQuote', {\n   *\t\t\ttwo: 2\n   *\t\t} );\n   *\n   *\t\tconsole.log( schema.getAttributeProperties( 'blockQuote' ) );\n   *\t\t// Logs: { one: 1, two: 2 }\n   *\n   * @param {String} attributeName A name of the attribute to receive the properties.\n   * @param {module:engine/model/schema~AttributeProperties} properties A dictionary of properties.\n   */\n\n\n  setAttributeProperties(attributeName, properties) {\n    this._attributeProperties[attributeName] = Object.assign(this.getAttributeProperties(attributeName), properties);\n  }\n  /**\n   * Returns properties associated with a given model attribute. See {@link #setAttributeProperties `setAttributeProperties()`}.\n   *\n   * @param {String} attributeName A name of the attribute.\n   * @returns {module:engine/model/schema~AttributeProperties}\n   */\n\n\n  getAttributeProperties(attributeName) {\n    return this._attributeProperties[attributeName] || {};\n  }\n  /**\n   * Returns the lowest {@link module:engine/model/schema~Schema#isLimit limit element} containing the entire\n   * selection/range/position or the root otherwise.\n   *\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection|\n   * module:engine/model/range~Range|module:engine/model/position~Position} selectionOrRangeOrPosition\n   * The selection/range/position to check.\n   * @returns {module:engine/model/element~Element} The lowest limit element containing\n   * the entire `selectionOrRangeOrPosition`.\n   */\n\n\n  getLimitElement(selectionOrRangeOrPosition) {\n    let element;\n\n    if (selectionOrRangeOrPosition instanceof Position) {\n      element = selectionOrRangeOrPosition.parent;\n    } else {\n      const ranges = selectionOrRangeOrPosition instanceof Range ? [selectionOrRangeOrPosition] : Array.from(selectionOrRangeOrPosition.getRanges()); // Find the common ancestor for all selection's ranges.\n\n      element = ranges.reduce((element, range) => {\n        const rangeCommonAncestor = range.getCommonAncestor();\n\n        if (!element) {\n          return rangeCommonAncestor;\n        }\n\n        return element.getCommonAncestor(rangeCommonAncestor, {\n          includeSelf: true\n        });\n      }, null);\n    }\n\n    while (!this.isLimit(element)) {\n      if (element.parent) {\n        element = element.parent;\n      } else {\n        break;\n      }\n    }\n\n    return element;\n  }\n  /**\n   * Checks whether the attribute is allowed in selection:\n   *\n   * * if the selection is not collapsed, then checks if the attribute is allowed on any of nodes in that range,\n   * * if the selection is collapsed, then checks if on the selection position there's a text with the\n   * specified attribute allowed.\n   *\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n   * Selection which will be checked.\n   * @param {String} attribute The name of the attribute to check.\n   * @returns {Boolean}\n   */\n\n\n  checkAttributeInSelection(selection, attribute) {\n    if (selection.isCollapsed) {\n      const firstPosition = selection.getFirstPosition();\n      const context = [...firstPosition.getAncestors(), new Text('', selection.getAttributes())]; // Check whether schema allows for a text with the attribute in the selection.\n\n      return this.checkAttribute(context, attribute);\n    } else {\n      const ranges = selection.getRanges(); // For all ranges, check nodes in them until you find a node that is allowed to have the attribute.\n\n      for (const range of ranges) {\n        for (const value of range) {\n          if (this.checkAttribute(value.item, attribute)) {\n            // If we found a node that is allowed to have the attribute, return true.\n            return true;\n          }\n        }\n      }\n    } // If we haven't found such node, return false.\n\n\n    return false;\n  }\n  /**\n   * Transforms the given set of ranges into a set of ranges where the given attribute is allowed (and can be applied).\n   *\n   * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be validated.\n   * @param {String} attribute The name of the attribute to check.\n   * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n   */\n\n\n  *getValidRanges(ranges, attribute) {\n    ranges = convertToMinimalFlatRanges(ranges);\n\n    for (const range of ranges) {\n      yield* this._getValidRangesForRange(range, attribute);\n    }\n  }\n  /**\n   * Basing on given `position`, finds and returns a {@link module:engine/model/range~Range range} which is\n   * nearest to that `position` and is a correct range for selection.\n   *\n   * The correct selection range might be collapsed when it is located in a position where the text node can be placed.\n   * Non-collapsed range is returned when selection can be placed around element marked as an \"object\" in\n   * the {@link module:engine/model/schema~Schema schema}.\n   *\n   * Direction of searching for the nearest correct selection range can be specified as:\n   *\n   * * `both` - searching will be performed in both ways,\n   * * `forward` - searching will be performed only forward,\n   * * `backward` - searching will be performed only backward.\n   *\n   * When valid selection range cannot be found, `null` is returned.\n   *\n   * @param {module:engine/model/position~Position} position Reference position where new selection range should be looked for.\n   * @param {'both'|'forward'|'backward'} [direction='both'] Search direction.\n   * @returns {module:engine/model/range~Range|null} Nearest selection range or `null` if one cannot be found.\n   */\n\n\n  getNearestSelectionRange(position, direction = 'both') {\n    // Return collapsed range if provided position is valid.\n    if (this.checkChild(position, '$text')) {\n      return new Range(position);\n    }\n\n    let backwardWalker, forwardWalker;\n\n    if (direction == 'both' || direction == 'backward') {\n      backwardWalker = new TreeWalker({\n        startPosition: position,\n        direction: 'backward'\n      });\n    }\n\n    if (direction == 'both' || direction == 'forward') {\n      forwardWalker = new TreeWalker({\n        startPosition: position\n      });\n    }\n\n    for (const data of combineWalkers(backwardWalker, forwardWalker)) {\n      const type = data.walker == backwardWalker ? 'elementEnd' : 'elementStart';\n      const value = data.value;\n\n      if (value.type == type && this.isObject(value.item)) {\n        return Range._createOn(value.item);\n      }\n\n      if (this.checkChild(value.nextPosition, '$text')) {\n        return new Range(value.nextPosition);\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Tries to find position ancestors that allows to insert given node.\n   * It starts searching from the given position and goes node by node to the top of the model tree\n   * as long as {@link module:engine/model/schema~Schema#isLimit limit element},\n   * {@link module:engine/model/schema~Schema#isObject object element} or top-most ancestor won't be reached.\n   *\n   * @params {module:engine/model/position~Position} position Position from searching will start.\n   * @params {module:engine/model/node~Node|String} node Node for which allowed parent should be found or its name.\n   * @returns {module:engine/model/element~Element|null} element Allowed parent or null if nothing was found.\n   */\n\n\n  findAllowedParent(position, node) {\n    let parent = position.parent;\n\n    while (parent) {\n      if (this.checkChild(parent, node)) {\n        return parent;\n      } // Do not split limit elements.\n\n\n      if (this.isLimit(parent)) {\n        return null;\n      }\n\n      parent = parent.parent;\n    }\n\n    return null;\n  }\n  /**\n   * Removes attributes disallowed by the schema.\n   *\n   * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes that will be filtered.\n   * @param {module:engine/model/writer~Writer} writer\n   */\n\n\n  removeDisallowedAttributes(nodes, writer) {\n    for (const node of nodes) {\n      // When node is a `Text` it has no children, so just filter it out.\n      if (node.is('text')) {\n        removeDisallowedAttributeFromNode(this, node, writer);\n      } // In a case of `Element` iterates through positions between nodes inside this element\n      // and filter out node before the current position, or position parent when position\n      // is at start of an element. Using positions prevent from omitting merged nodes\n      // see https://github.com/ckeditor/ckeditor5-engine/issues/1789.\n      else {\n          const rangeInNode = Range._createIn(node);\n\n          const positionsInRange = rangeInNode.getPositions();\n\n          for (const position of positionsInRange) {\n            const item = position.nodeBefore || position.parent;\n            removeDisallowedAttributeFromNode(this, item, writer);\n          }\n        }\n    }\n  }\n  /**\n   * Creates an instance of the schema context.\n   *\n   * @param {module:engine/model/schema~SchemaContextDefinition} context\n   * @returns {module:engine/model/schema~SchemaContext}\n   */\n\n\n  createContext(context) {\n    return new SchemaContext(context);\n  }\n  /**\n   * @private\n   */\n\n\n  _clearCache() {\n    this._compiledDefinitions = null;\n  }\n  /**\n   * @private\n   */\n\n\n  _compile() {\n    const compiledDefinitions = {};\n    const sourceRules = this._sourceDefinitions;\n    const itemNames = Object.keys(sourceRules);\n\n    for (const itemName of itemNames) {\n      compiledDefinitions[itemName] = compileBaseItemRule(sourceRules[itemName], itemName);\n    }\n\n    for (const itemName of itemNames) {\n      compileAllowContentOf(compiledDefinitions, itemName);\n    }\n\n    for (const itemName of itemNames) {\n      compileAllowWhere(compiledDefinitions, itemName);\n    }\n\n    for (const itemName of itemNames) {\n      compileAllowAttributesOf(compiledDefinitions, itemName);\n      compileInheritPropertiesFrom(compiledDefinitions, itemName);\n    }\n\n    for (const itemName of itemNames) {\n      cleanUpAllowIn(compiledDefinitions, itemName);\n      cleanUpAllowAttributes(compiledDefinitions, itemName);\n    }\n\n    this._compiledDefinitions = compiledDefinitions;\n  }\n  /**\n   * @private\n   * @param {module:engine/model/schema~SchemaCompiledItemDefinition} def\n   * @param {module:engine/model/schema~SchemaContext} context\n   * @param {Number} contextItemIndex\n   */\n\n\n  _checkContextMatch(def, context, contextItemIndex = context.length - 1) {\n    const contextItem = context.getItem(contextItemIndex);\n\n    if (def.allowIn.includes(contextItem.name)) {\n      if (contextItemIndex == 0) {\n        return true;\n      } else {\n        const parentRule = this.getDefinition(contextItem);\n        return this._checkContextMatch(parentRule, context, contextItemIndex - 1);\n      }\n    } else {\n      return false;\n    }\n  }\n  /**\n   * Takes a flat range and an attribute name. Traverses the range recursively and deeply to find and return all ranges\n   * inside the given range on which the attribute can be applied.\n   *\n   * This is a helper function for {@link ~Schema#getValidRanges}.\n   *\n   * @private\n   * @param {module:engine/model/range~Range} range Range to process.\n   * @param {String} attribute The name of the attribute to check.\n   * @returns {Iterable.<module:engine/model/range~Range>} Ranges in which the attribute is allowed.\n   */\n\n\n  *_getValidRangesForRange(range, attribute) {\n    let start = range.start;\n    let end = range.start;\n\n    for (const item of range.getItems({\n      shallow: true\n    })) {\n      if (item.is('element')) {\n        yield* this._getValidRangesForRange(Range._createIn(item), attribute);\n      }\n\n      if (!this.checkAttribute(item, attribute)) {\n        if (!start.isEqual(end)) {\n          yield new Range(start, end);\n        }\n\n        start = Position._createAfter(item);\n      }\n\n      end = Position._createAfter(item);\n    }\n\n    if (!start.isEqual(end)) {\n      yield new Range(start, end);\n    }\n  }\n\n}\nmix(Schema, ObservableMixin);\n/**\n * Event fired when the {@link #checkChild} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addChildCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkChild} method fires an event because it is\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkChild()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkChild( context, child )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance and `child` to a\n * {@link module:engine/model/schema~SchemaCompiledItemDefinition} instance, so you don't have to worry about\n * the various ways how `context` and `child` may be passed to `checkChild()`.\n *\n * **Note:** `childDefinition` may be `undefined` if `checkChild()` was called with a non-registered element.\n *\n * So, in order to implement a rule \"disallow `heading1` in `blockQuote`\" you can add such a listener:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'blockQuote' ) && childDefinition && childDefinition.name == 'heading1' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing elements in specific contexts will be a far less common use case, because it's normally handled by\n * `allowIn` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `listItem` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst childDefinition = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo' ) && childDefinition.name == 'listItem' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkChild()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkChild\n * @param {Array} args The `checkChild()`'s arguments.\n */\n\n/**\n * Event fired when the {@link #checkAttribute} method is called. It allows plugging in\n * additional behavior – e.g. implementing rules which cannot be defined using the declarative\n * {@link module:engine/model/schema~SchemaItemDefinition} interface.\n *\n * **Note:** The {@link #addAttributeCheck} method is a more handy way to register callbacks. Internally,\n * it registers a listener to this event but comes with a simpler API and it is the recommended choice\n * in most of the cases.\n *\n * The {@link #checkAttribute} method fires an event because it's\n * {@link module:utils/observablemixin~ObservableMixin#decorate decorated} with it. Thanks to that you can\n * use this event in a various way, but the most important use case is overriding standard behaviour of the\n * `checkAttribute()` method. Let's see a typical listener template:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst attributeName = args[ 1 ];\n *\t\t}, { priority: 'high' } );\n *\n * The listener is added with a `high` priority to be executed before the default method is really called. The `args` callback\n * parameter contains arguments passed to `checkAttribute( context, attributeName )`. However, the `context` parameter is already\n * normalized to a {@link module:engine/model/schema~SchemaContext} instance, so you don't have to worry about\n * the various ways how `context` may be passed to `checkAttribute()`.\n *\n * So, in order to implement a rule \"disallow `bold` in a text which is in a `heading1` you can add such a listener:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'heading1 $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = false;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * Allowing attributes in specific contexts will be a far less common use case, because it's normally handled by\n * `allowAttributes` rule from {@link module:engine/model/schema~SchemaItemDefinition} but if you have a complex scenario\n * where `bold` should be allowed only in element `foo` which must be in element `bar`, then this would be the way:\n *\n *\t\tschema.on( 'checkAttribute', ( evt, args ) => {\n *\t\t\tconst context = args[ 0 ];\n *\t\t\tconst atributeName = args[ 1 ];\n *\n *\t\t\tif ( context.endsWith( 'bar foo $text' ) && attributeName == 'bold' ) {\n *\t\t\t\t// Prevent next listeners from being called.\n *\t\t\t\tevt.stop();\n *\t\t\t\t// Set the checkAttribute()'s return value.\n *\t\t\t\tevt.return = true;\n *\t\t\t}\n *\t\t}, { priority: 'high' } );\n *\n * @event checkAttribute\n * @param {Array} args The `checkAttribute()`'s arguments.\n */\n\n/**\n * A definition of a {@link module:engine/model/schema~Schema schema} item.\n *\n * You can define the following rules:\n *\n * * `allowIn` &ndash; A string or an array of strings. Defines in which other items this item will be allowed.\n * * `allowAttributes` &ndash; A string or an array of strings. Defines allowed attributes of the given item.\n * * `allowContentOf` &ndash; A string or an array of strings. Inherits \"allowed children\" from other items.\n * * `allowWhere` &ndash; A string or an array of strings. Inherits \"allowed in\" from other items.\n * * `allowAttributesOf` &ndash; A string or an array of strings. Inherits attributes from other items.\n * * `inheritTypesFrom` &ndash; A string or an array of strings. Inherits `is*` properties of other items.\n * * `inheritAllFrom` &ndash; A string. A shorthand for `allowContentOf`, `allowWhere`, `allowAttributesOf`, `inheritTypesFrom`.\n * * Additionally, you can define the following `is*` properties: `isBlock`, `isLimit`, `isObject`, `isInline`. Read about them below.\n *\n * # The is* properties\n *\n * There are 3 commonly used `is*` properties. Their role is to assign additional semantics to schema items.\n * You can define more properties but you will also need to implement support for them in the existing editor features.\n *\n * * `isBlock` &ndash; Whether this item is paragraph-like. Generally speaking, content is usually made out of blocks\n * like paragraphs, list items, images, headings, etc. All these elements are marked as blocks. A block\n * should not allow another block inside. Note: There is also the `$block` generic item which has `isBlock` set to `true`.\n * Most block type items will inherit from `$block` (through `inheritAllFrom`).\n * * `isLimit` &ndash; It can be understood as whether this element should not be split by <kbd>Enter</kbd>.\n * Examples of limit elements: `$root`, table cell, image caption, etc. In other words, all actions that happen inside\n * a limit element are limited to its content. **Note:** All objects (`isObject`) are treated as limit elements, too.\n * * `isObject` &ndash; Whether an item is \"self-contained\" and should be treated as a whole. Examples of object elements:\n * `image`, `table`, `video`, etc. **Note:** An object is also a limit, so\n * {@link module:engine/model/schema~Schema#isLimit `isLimit()`} returns `true` for object elements automatically.\n * * `isInline` &ndash; Whether an item is \"text-like\" and should be treated as an inline node. Examples of inline elements:\n * `$text`, `softBreak` (`<br>`), etc.\n *\n * # Generic items\n *\n * There are three basic generic items: `$root`, `$block` and `$text`.\n * They are defined as follows:\n *\n *\t\tthis.schema.register( '$root', {\n *\t\t\tisLimit: true\n *\t\t} );\n *\t\tthis.schema.register( '$block', {\n *\t\t\tallowIn: '$root',\n *\t\t\tisBlock: true\n *\t\t} );\n *\t\tthis.schema.register( '$text', {\n *\t\t\tallowIn: '$block',\n *\t\t\tisInline: true\n *\t\t} );\n *\n * They reflect typical editor content that is contained within one root, consists of several blocks\n * (paragraphs, lists items, headings, images) which, in turn, may contain text inside.\n *\n * By inheriting from the generic items you can define new items which will get extended by other editor features.\n * Read more about generic types in the {@glink framework/guides/deep-dive/schema Defining schema} guide.\n *\n * # Example definitions\n *\n * Allow `paragraph` in roots and block quotes:\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowIn: [ '$root', 'blockQuote' ],\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Allow `paragraph` everywhere where `$block` is allowed (i.e. in `$root`):\n *\n *\t\tschema.register( 'paragraph', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tisBlock: true\n *\t\t} );\n *\n * Make `image` a block object, which is allowed everywhere where `$block` is.\n * Also, allow `src` and `alt` attributes in it:\n *\n *\t\tschema.register( 'image', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowAttributes: [ 'src', 'alt' ],\n *\t\t\tisBlock: true,\n *\t\t\tisObject: true\n *\t\t} );\n *\n * Make `caption` allowed in `image` and make it allow all the content of `$block`s (usually, `$text`).\n * Also, mark it as a limit element so it cannot be split:\n *\n *\t\tschema.register( 'caption', {\n *\t\t\tallowIn: 'image',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tisLimit: true\n *\t\t} );\n *\n * Make `listItem` inherit all from `$block` but also allow additional attributes:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tinheritAllFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * Which translates to:\n *\n *\t\tschema.register( 'listItem', {\n *\t\t\tallowWhere: '$block',\n *\t\t\tallowContentOf: '$block',\n *\t\t\tallowAttributesOf: '$block',\n *\t\t\tinheritTypesFrom: '$block',\n *\t\t\tallowAttributes: [ 'listType', 'listIndent' ]\n *\t\t} );\n *\n * # Tips\n *\n * * Check schema definitions of existing features to see how they are defined.\n * * If you want to publish your feature so other developers can use it, try to use\n * generic items as much as possible.\n * * Keep your model clean. Limit it to the actual data and store information in a normalized way.\n * * Remember about definining the `is*` properties. They do not affect the allowed structures, but they can\n * affect how the editor features treat your elements.\n *\n * @typedef {Object} module:engine/model/schema~SchemaItemDefinition\n */\n\n/**\n * A simplified version of {@link module:engine/model/schema~SchemaItemDefinition} after\n * compilation by the {@link module:engine/model/schema~Schema schema}.\n * Rules fed to the schema by {@link module:engine/model/schema~Schema#register}\n * and {@link module:engine/model/schema~Schema#extend} methods are defined in the\n * {@link module:engine/model/schema~SchemaItemDefinition} format.\n * Later on, they are compiled to `SchemaCompiledItemDefition` so when you use e.g.\n * the {@link module:engine/model/schema~Schema#getDefinition} method you get the compiled version.\n *\n * The compiled version contains only the following properties:\n *\n * * The `name` property,\n * * The `is*` properties,\n * * The `allowIn` array,\n * * The `allowAttributes` array.\n *\n * @typedef {Object} module:engine/model/schema~SchemaCompiledItemDefinition\n */\n\n/**\n * A schema context &mdash; a list of ancestors of a given position in the document.\n *\n * Considering such position:\n *\n *\t\t<$root>\n *\t\t\t<blockQuote>\n *\t\t\t\t<paragraph>\n *\t\t\t\t\t^\n *\t\t\t\t</paragraph>\n *\t\t\t</blockQuote>\n *\t\t</$root>\n *\n * The context of this position is its {@link module:engine/model/position~Position#getAncestors lists of ancestors}:\n *\n *\t\t[ rootElement, blockQuoteElement, paragraphElement ]\n *\n * Contexts are used in the {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`} and\n * {@link module:engine/model/schema~Schema#event:checkAttribute `Schema#checkAttribute`} events as a definition\n * of a place in the document where the check occurs. The context instances are created based on the first arguments\n * of the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`} and\n * {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} methods so when\n * using these methods you need to use {@link module:engine/model/schema~SchemaContextDefinition}s.\n */\n\nexport class SchemaContext {\n  /**\n   * Creates an instance of the context.\n   *\n   * @param {module:engine/model/schema~SchemaContextDefinition} context\n   */\n  constructor(context) {\n    if (context instanceof SchemaContext) {\n      return context;\n    }\n\n    if (typeof context == 'string') {\n      context = [context];\n    } else if (!Array.isArray(context)) {\n      // `context` is item or position.\n      // Position#getAncestors() doesn't accept any parameters but it works just fine here.\n      context = context.getAncestors({\n        includeSelf: true\n      });\n    }\n\n    if (context[0] && typeof context[0] != 'string' && context[0].is('documentFragment')) {\n      context.shift();\n    }\n\n    this._items = context.map(mapContextItem);\n  }\n  /**\n   * The number of items.\n   *\n   * @type {Number}\n   */\n\n\n  get length() {\n    return this._items.length;\n  }\n  /**\n   * The last item (the lowest node).\n   *\n   * @type {module:engine/model/schema~SchemaContextItem}\n   */\n\n\n  get last() {\n    return this._items[this._items.length - 1];\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all context items.\n   *\n   * @returns {Iterable.<module:engine/model/schema~SchemaContextItem>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._items[Symbol.iterator]();\n  }\n  /**\n   * Returns a new schema context instance with an additional item.\n   *\n   * Item can be added as:\n   *\n   * \t\tconst context = new SchemaContext( [ '$root' ] );\n   *\n   * \t\t// An element.\n   * \t\tconst fooElement = writer.createElement( 'fooElement' );\n   * \t\tconst newContext = context.push( fooElement ); // [ '$root', 'fooElement' ]\n   *\n   * \t\t// A text node.\n   * \t\tconst text = writer.createText( 'foobar' );\n   * \t\tconst newContext = context.push( text ); // [ '$root', '$text' ]\n   *\n   * \t\t// A string (element name).\n   * \t\tconst newContext = context.push( 'barElement' ); // [ '$root', 'barElement' ]\n   *\n   * **Note** {@link module:engine/model/node~Node} that is already in the model tree will be added as the only item\n   * (without ancestors).\n   *\n   * @param {String|module:engine/model/node~Node|Array<String|module:engine/model/node~Node>} item An item that will be added\n   * to the current context.\n   * @returns {module:engine/model/schema~SchemaContext} A new schema context instance with an additional item.\n   */\n\n\n  push(item) {\n    const ctx = new SchemaContext([item]);\n    ctx._items = [...this._items, ...ctx._items];\n    return ctx;\n  }\n  /**\n   * Gets an item on the given index.\n   *\n   * @returns {module:engine/model/schema~SchemaContextItem}\n   */\n\n\n  getItem(index) {\n    return this._items[index];\n  }\n  /**\n   * Returns the names of items.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  *getNames() {\n    yield* this._items.map(item => item.name);\n  }\n  /**\n   * Checks whether the context ends with the given nodes.\n   *\n   *\t\tconst ctx = new SchemaContext( [ rootElement, paragraphElement, textNode ] );\n   *\n   *\t\tctx.endsWith( '$text' ); // -> true\n   *\t\tctx.endsWith( 'paragraph $text' ); // -> true\n   *\t\tctx.endsWith( '$root' ); // -> false\n   *\t\tctx.endsWith( 'paragraph' ); // -> false\n   *\n   * @param {String} query\n   * @returns {Boolean}\n   */\n\n\n  endsWith(query) {\n    return Array.from(this.getNames()).join(' ').endsWith(query);\n  }\n\n}\n/**\n * The definition of a {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * Contexts can be created in multiple ways:\n *\n * * By defining a **node** – in this cases this node and all its ancestors will be used.\n * * By defining a **position** in the document – in this case all its ancestors will be used.\n * * By defining an **array of nodes** – in this case this array defines the entire context.\n * * By defining a **name of node** - in this case node will be \"mocked\". It is not recommended because context\n * will be unrealistic (e.g. attributes of these nodes are not specified). However, at times this may be the only\n * way to define the context (e.g. when checking some hypothetical situation).\n * * By defining an **array of node names** (potentially, mixed with real nodes) – The same as **name of node**\n * but it is possible to create a path.\n * * By defining a {@link module:engine/model/schema~SchemaContext} instance - in this case the same instance as provided\n * will be return.\n *\n * Examples of context definitions passed to the {@link module:engine/model/schema~Schema#checkChild `Schema#checkChild()`}\n * method:\n *\n *\t\t// Assuming that we have a $root > blockQuote > paragraph structure, the following code\n *\t\t// will check node 'foo' in the following context:\n *\t\t// [ rootElement, blockQuoteElement, paragraphElement ]\n *\t\tconst contextDefinition = paragraphElement;\n * \t\tconst childToCheck = 'foo';\n *\t\tschema.checkChild( contextDefinition, childToCheck );\n *\n *\t\t// Also check in [ rootElement, blockQuoteElement, paragraphElement ].\n *\t\tschema.checkChild( model.createPositionAt( paragraphElement, 0 ), 'foo' );\n *\n *\t\t// Check in [ rootElement, paragraphElement ].\n *\t\tschema.checkChild( [ rootElement, paragraphElement ], 'foo' );\n *\n *\t\t// Check only fakeParagraphElement.\n *\t\tschema.checkChild( 'paragraph', 'foo' );\n *\n *\t\t// Check in [ fakeRootElement, fakeBarElement, paragraphElement ].\n *\t\tschema.checkChild( [ '$root', 'bar', paragraphElement ], 'foo' );\n *\n * All these `checkChild()` calls will fire {@link module:engine/model/schema~Schema#event:checkChild `Schema#checkChild`}\n * events in which `args[ 0 ]` is an instance of the context. Therefore, you can write a listener like this:\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\n *\t\t\tconsole.log( Array.from( ctx.getNames() ) );\n *\t\t} );\n *\n * Which will log the following:\n *\n *\t\t[ '$root', 'blockQuote', 'paragraph' ]\n *\t\t[ '$root', 'paragraph' ]\n *\t\t[ '$root', 'bar', 'paragraph' ]\n *\n * Note: When using the {@link module:engine/model/schema~Schema#checkAttribute `Schema#checkAttribute()`} method\n * you may want to check whether a text node may have an attribute. A {@link module:engine/model/text~Text} is a\n * correct way to define a context so you can do this:\n *\n *\t\tschema.checkAttribute( textNode, 'bold' );\n *\n * But sometimes you want to check whether a text at a given position might've had some attribute,\n * in which case you can create a context by mising an array of elements with a `'$text'` string:\n *\n *\t\t// Check in [ rootElement, paragraphElement, textNode ].\n *\t\tschema.checkChild( [ ...positionInParagraph.getAncestors(), '$text' ], 'bold' );\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/position~Position|module:engine/model/schema~SchemaContext|\n * String|Array.<String|module:engine/model/node~Node>} module:engine/model/schema~SchemaContextDefinition\n */\n\n/**\n * An item of the {@link module:engine/model/schema~SchemaContext schema context}.\n *\n * It contains 3 properties:\n *\n * * `name` – the name of this item,\n * * `* getAttributeKeys()` – a generator of keys of item attributes,\n * * `getAttribute( keyName )` – a method to get attribute values.\n *\n * The context item interface is a highly simplified version of {@link module:engine/model/node~Node} and its role\n * is to expose only the information which schema checks are able to provide (which is the name of the node and\n * node's attributes).\n *\n *\t\tschema.on( 'checkChild', ( evt, args ) => {\n *\t\t\tconst ctx = args[ 0 ];\n *\t\t\tconst firstItem = ctx.getItem( 0 );\n *\n *\t\t\tconsole.log( firstItem.name ); // -> '$root'\n *\t\t\tconsole.log( firstItem.getAttribute( 'foo' ) ); // -> 'bar'\n *\t\t\tconsole.log( Array.from( firstItem.getAttributeKeys() ) ); // -> [ 'foo', 'faa' ]\n *\t\t} );\n *\n * @typedef {Object} module:engine/model/schema~SchemaContextItem\n */\n\n/**\n * A structure containing additional metadata describing the attribute.\n *\n * See {@link module:engine/model/schema~Schema#setAttributeProperties `Schema#setAttributeProperties()`} for usage examples.\n *\n * @typedef {Object} module:engine/model/schema~AttributeProperties\n * @property {Boolean} [isFormatting] Indicates that the attribute should be considered as a visual formatting, like `bold`, `italic` or\n * `fontSize` rather than semantic attribute (such as `src`, `listType`, etc.). For example, it is used by the \"Remove format\" feature.\n * @property {Boolean} [copyOnEnter] Indicates that given text attribute should be copied to the next block when enter is pressed.\n */\n\nfunction compileBaseItemRule(sourceItemRules, itemName) {\n  const itemRule = {\n    name: itemName,\n    allowIn: [],\n    allowContentOf: [],\n    allowWhere: [],\n    allowAttributes: [],\n    allowAttributesOf: [],\n    inheritTypesFrom: []\n  };\n  copyTypes(sourceItemRules, itemRule);\n  copyProperty(sourceItemRules, itemRule, 'allowIn');\n  copyProperty(sourceItemRules, itemRule, 'allowContentOf');\n  copyProperty(sourceItemRules, itemRule, 'allowWhere');\n  copyProperty(sourceItemRules, itemRule, 'allowAttributes');\n  copyProperty(sourceItemRules, itemRule, 'allowAttributesOf');\n  copyProperty(sourceItemRules, itemRule, 'inheritTypesFrom');\n  makeInheritAllWork(sourceItemRules, itemRule);\n  return itemRule;\n}\n\nfunction compileAllowContentOf(compiledDefinitions, itemName) {\n  for (const allowContentOfItemName of compiledDefinitions[itemName].allowContentOf) {\n    // The allowContentOf property may point to an unregistered element.\n    if (compiledDefinitions[allowContentOfItemName]) {\n      const allowedChildren = getAllowedChildren(compiledDefinitions, allowContentOfItemName);\n      allowedChildren.forEach(allowedItem => {\n        allowedItem.allowIn.push(itemName);\n      });\n    }\n  }\n\n  delete compiledDefinitions[itemName].allowContentOf;\n}\n\nfunction compileAllowWhere(compiledDefinitions, itemName) {\n  for (const allowWhereItemName of compiledDefinitions[itemName].allowWhere) {\n    const inheritFrom = compiledDefinitions[allowWhereItemName]; // The allowWhere property may point to an unregistered element.\n\n    if (inheritFrom) {\n      const allowedIn = inheritFrom.allowIn;\n      compiledDefinitions[itemName].allowIn.push(...allowedIn);\n    }\n  }\n\n  delete compiledDefinitions[itemName].allowWhere;\n}\n\nfunction compileAllowAttributesOf(compiledDefinitions, itemName) {\n  for (const allowAttributeOfItem of compiledDefinitions[itemName].allowAttributesOf) {\n    const inheritFrom = compiledDefinitions[allowAttributeOfItem];\n\n    if (inheritFrom) {\n      const inheritAttributes = inheritFrom.allowAttributes;\n      compiledDefinitions[itemName].allowAttributes.push(...inheritAttributes);\n    }\n  }\n\n  delete compiledDefinitions[itemName].allowAttributesOf;\n}\n\nfunction compileInheritPropertiesFrom(compiledDefinitions, itemName) {\n  const item = compiledDefinitions[itemName];\n\n  for (const inheritPropertiesOfItem of item.inheritTypesFrom) {\n    const inheritFrom = compiledDefinitions[inheritPropertiesOfItem];\n\n    if (inheritFrom) {\n      const typeNames = Object.keys(inheritFrom).filter(name => name.startsWith('is'));\n\n      for (const name of typeNames) {\n        if (!(name in item)) {\n          item[name] = inheritFrom[name];\n        }\n      }\n    }\n  }\n\n  delete item.inheritTypesFrom;\n} // Remove items which weren't registered (because it may break some checks or we'd need to complicate them).\n// Make sure allowIn doesn't contain repeated values.\n\n\nfunction cleanUpAllowIn(compiledDefinitions, itemName) {\n  const itemRule = compiledDefinitions[itemName];\n  const existingItems = itemRule.allowIn.filter(itemToCheck => compiledDefinitions[itemToCheck]);\n  itemRule.allowIn = Array.from(new Set(existingItems));\n}\n\nfunction cleanUpAllowAttributes(compiledDefinitions, itemName) {\n  const itemRule = compiledDefinitions[itemName];\n  itemRule.allowAttributes = Array.from(new Set(itemRule.allowAttributes));\n}\n\nfunction copyTypes(sourceItemRules, itemRule) {\n  for (const sourceItemRule of sourceItemRules) {\n    const typeNames = Object.keys(sourceItemRule).filter(name => name.startsWith('is'));\n\n    for (const name of typeNames) {\n      itemRule[name] = sourceItemRule[name];\n    }\n  }\n}\n\nfunction copyProperty(sourceItemRules, itemRule, propertyName) {\n  for (const sourceItemRule of sourceItemRules) {\n    if (typeof sourceItemRule[propertyName] == 'string') {\n      itemRule[propertyName].push(sourceItemRule[propertyName]);\n    } else if (Array.isArray(sourceItemRule[propertyName])) {\n      itemRule[propertyName].push(...sourceItemRule[propertyName]);\n    }\n  }\n}\n\nfunction makeInheritAllWork(sourceItemRules, itemRule) {\n  for (const sourceItemRule of sourceItemRules) {\n    const inheritFrom = sourceItemRule.inheritAllFrom;\n\n    if (inheritFrom) {\n      itemRule.allowContentOf.push(inheritFrom);\n      itemRule.allowWhere.push(inheritFrom);\n      itemRule.allowAttributesOf.push(inheritFrom);\n      itemRule.inheritTypesFrom.push(inheritFrom);\n    }\n  }\n}\n\nfunction getAllowedChildren(compiledDefinitions, itemName) {\n  const itemRule = compiledDefinitions[itemName];\n  return getValues(compiledDefinitions).filter(def => def.allowIn.includes(itemRule.name));\n}\n\nfunction getValues(obj) {\n  return Object.keys(obj).map(key => obj[key]);\n}\n\nfunction mapContextItem(ctxItem) {\n  if (typeof ctxItem == 'string') {\n    return {\n      name: ctxItem,\n\n      *getAttributeKeys() {},\n\n      getAttribute() {}\n\n    };\n  } else {\n    return {\n      // '$text' means text nodes and text proxies.\n      name: ctxItem.is('element') ? ctxItem.name : '$text',\n\n      *getAttributeKeys() {\n        yield* ctxItem.getAttributeKeys();\n      },\n\n      getAttribute(key) {\n        return ctxItem.getAttribute(key);\n      }\n\n    };\n  }\n} // Generator function returning values from provided walkers, switching between them at each iteration. If only one walker\n// is provided it will return data only from that walker.\n//\n// @param {module:engine/module/treewalker~TreeWalker} [backward] Walker iterating in backward direction.\n// @param {module:engine/module/treewalker~TreeWalker} [forward] Walker iterating in forward direction.\n// @returns {Iterable.<Object>} Object returned at each iteration contains `value` and `walker` (informing which walker returned\n// given value) fields.\n\n\nfunction* combineWalkers(backward, forward) {\n  let done = false;\n\n  while (!done) {\n    done = true;\n\n    if (backward) {\n      const step = backward.next();\n\n      if (!step.done) {\n        done = false;\n        yield {\n          walker: backward,\n          value: step.value\n        };\n      }\n    }\n\n    if (forward) {\n      const step = forward.next();\n\n      if (!step.done) {\n        done = false;\n        yield {\n          walker: forward,\n          value: step.value\n        };\n      }\n    }\n  }\n} // Takes an array of non-intersecting ranges. For each of them gets minimal flat ranges covering that range and returns\n// all those minimal flat ranges.\n//\n// @param {Array.<module:engine/model/range~Range>} ranges Ranges to process.\n// @returns {Iterable.<module:engine/model/range~Range>} Minimal flat ranges of given `ranges`.\n\n\nfunction* convertToMinimalFlatRanges(ranges) {\n  for (const range of ranges) {\n    yield* range.getMinimalFlatRanges();\n  }\n}\n\nfunction removeDisallowedAttributeFromNode(schema, node, writer) {\n  for (const attribute of node.getAttributeKeys()) {\n    if (!schema.checkAttribute(node, attribute)) {\n      writer.removeAttribute(attribute, node);\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/upcastdispatcher\n */\nimport ViewConsumable from './viewconsumable';\nimport ModelRange from '../model/range';\nimport ModelPosition from '../model/position';\nimport { SchemaContext } from '../model/schema';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * `UpcastDispatcher` is a central point of {@link module:engine/view/view view} conversion, which is a process of\n * converting given {@link module:engine/view/documentfragment~DocumentFragment view document fragment} or\n * {@link module:engine/view/element~Element} into another structure.\n * In default application, {@link module:engine/view/view view} is converted to {@link module:engine/model/model}.\n *\n * During conversion process, for all {@link module:engine/view/node~Node view nodes} from the converted view document fragment,\n * `UpcastDispatcher` fires corresponding events. Special callbacks called \"converters\" should listen to\n * `UpcastDispatcher` for those events.\n *\n * Each callback, as the second argument, is passed a special object `data` that has `viewItem`, `modelCursor` and\n * `modelRange` properties. `viewItem` property contains {@link module:engine/view/node~Node view node} or\n * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}\n * that is converted at the moment and might be handled by the callback. `modelRange` property should be used to save the result\n * of conversion and is always a {@link module:engine/model/range~Range} when conversion result is correct.\n * `modelCursor` property is a {@link module:engine/model/position~Position position} on which conversion result will be inserted\n * and is a context according to {@link module:engine/model/schema~Schema schema} will be checked before the conversion.\n * See also {@link ~UpcastDispatcher#convert}. It is also shared by reference by all callbacks listening to given event.\n *\n * The third parameter passed to a callback is an instance of {@link ~UpcastDispatcher}\n * which provides additional tools for converters.\n *\n * Examples of providing callbacks for `UpcastDispatcher`:\n *\n *\t\t// Converter for links (<a>).\n *\t\teditor.data.upcastDispatcher.on( 'element:a', ( evt, data, conversionApi ) => {\n *\t\t\tif ( conversionApi.consumable.consume( data.viewItem, { name: true, attributes: [ 'href' ] } ) ) {\n *\t\t\t\t// <a> element is inline and is represented by an attribute in the model.\n *\t\t\t\t// This is why we need to convert only children.\n *\t\t\t\tconst { modelRange } = conversionApi.convertChildren( data.viewItem, data.modelCursor );\n *\n *\t\t\t\tfor ( let item of modelRange.getItems() ) {\n *\t\t\t\t\tif ( conversionApi.schema.checkAttribute( item, 'linkHref' ) ) {\n *\t\t\t\t\t\tconversionApi.writer.setAttribute( 'linkHref', data.viewItem.getAttribute( 'href' ), item );\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n *\t\t// Convert <p>'s font-size style.\n *\t\t// Note: You should use a low-priority observer in order to ensure that\n *\t\t// it's executed after the element-to-element converter.\n *\t\teditor.data.upcastDispatcher.on( 'element:p', ( evt, data, conversionApi ) => {\n *\t\t\tconst { consumable, schema, writer } = conversionApi;\n *\n *\t\t\tif ( !consumable.consume( data.viewItem, { style: 'font-size' } ) ) {\n *\t\t\t\treturn;\n *\t\t\t}\n *\n *\t\t\tconst fontSize = data.viewItem.getStyle( 'font-size' );\n *\n *\t\t\t// Don't go for the model element after data.modelCursor because it might happen\n *\t\t\t// that a single view element was converted to multiple model elements. Get all of them.\n *\t\t\tfor ( const item of data.modelRange.getItems( { shallow: true } ) ) {\n *\t\t\t\tif ( schema.checkAttribute( item, 'fontSize' ) ) {\n *\t\t\t\t\twriter.setAttribute( 'fontSize', fontSize, item );\n *\t\t\t\t}\n *\t\t\t}\n *\t\t}, { priority: 'low' } );\n *\n *\t\t// Convert all elements which have no custom converter into paragraph (autoparagraphing).\n *  \teditor.data.upcastDispatcher.on( 'element', ( evt, data, conversionApi ) => {\n *  \t \t// When element is already consumed by higher priority converters then do nothing.\n *  \t \tif ( conversionApi.consumable.test( data.viewItem, { name: data.viewItem.name } ) ) {\n *  \t \t\t\tconst paragraph = conversionApi.writer.createElement( 'paragraph' );\n *\n *  \t \t\t\t// Find allowed parent for paragraph that we are going to insert. If current parent does not allow\n *  \t \t\t\t// to insert paragraph but one of the ancestors does then split nodes to allowed parent.\n *  \t \t\t\tconst splitResult = conversionApi.splitToAllowedParent( paragraph, data.modelCursor );\n *\n *  \t \t\t\t// When there is no split result it means that we can't insert paragraph in this position.\n *  \t \t\t\tif ( splitResult ) {\n *  \t \t\t\t\t// Insert paragraph in allowed position.\n *  \t \t\t\t\tconversionApi.writer.insert( paragraph, splitResult.position );\n *\n *  \t \t\t\t\t// Convert children to paragraph.\n *  \t \t\t\t\tconst { modelRange } = conversionApi.convertChildren(\n *  \t \t\t\t\t\tdata.viewItem,\n *  \t \t\t\t\t\tconversionApi.writer.createPositionAt( paragraph, 0 )\n *  \t \t\t\t\t);\n *\n * \t\t\t\t\t\t// Set as conversion result, attribute converters may use this property.\n *  \t \t\t\t\tdata.modelRange = conversionApi.writer.createRange(\n *  \t \t\t\t\t\tconversionApi.writer.createPositionBefore( paragraph ),\n *  \t \t\t\t\t\tmodelRange.end\n *  \t \t\t\t\t);\n *\n *  \t \t\t\t\t// Continue conversion inside paragraph.\n *  \t \t\t\t\tdata.modelCursor = data.modelRange.end;\n *  \t \t\t\t}\n *  \t \t\t}\n *  \t \t}\n *  \t }, { priority: 'low' } );\n *\n * Before each conversion process, `UpcastDispatcher` fires {@link ~UpcastDispatcher#event:viewCleanup}\n * event which can be used to prepare tree view for conversion.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n * @fires viewCleanup\n * @fires element\n * @fires text\n * @fires documentFragment\n */\n\nexport default class UpcastDispatcher {\n  /**\n   * Creates a `UpcastDispatcher` that operates using passed API.\n   *\n   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi\n   * @param {Object} [conversionApi] Additional properties for interface that will be passed to events fired\n   * by `UpcastDispatcher`.\n   */\n  constructor(conversionApi = {}) {\n    /**\n     * List of the elements that were created during splitting.\n     *\n     * After conversion process the list is cleared.\n     *\n     * @private\n     * @type {Map.<module:engine/model/element~Element,Array.<module:engine/model/element~Element>>}\n     */\n    this._splitParts = new Map();\n    /**\n     * Position in the temporary structure where the converted content is inserted. The structure reflect the context of\n     * the target position where the content will be inserted. This property is build based on the context parameter of the\n     * convert method.\n     *\n     * @private\n     * @type {module:engine/model/position~Position|null}\n     */\n\n    this._modelCursor = null;\n    /**\n     * Interface passed by dispatcher to the events callbacks.\n     *\n     * @member {module:engine/conversion/upcastdispatcher~UpcastConversionApi}\n     */\n\n    this.conversionApi = Object.assign({}, conversionApi); // `convertItem`, `convertChildren` and `splitToAllowedParent` are bound to this `UpcastDispatcher`\n    // instance and set on `conversionApi`. This way only a part of `UpcastDispatcher` API is exposed.\n\n    this.conversionApi.convertItem = this._convertItem.bind(this);\n    this.conversionApi.convertChildren = this._convertChildren.bind(this);\n    this.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind(this);\n    this.conversionApi.getSplitParts = this._getSplitParts.bind(this);\n  }\n  /**\n   * Starts the conversion process. The entry point for the conversion.\n   *\n   * @fires element\n   * @fires text\n   * @fires documentFragment\n   * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element} viewItem\n   * Part of the view to be converted.\n   * @param {module:engine/model/writer~Writer} writer Instance of model writer.\n   * @param {module:engine/model/schema~SchemaContextDefinition} [context=['$root']] Elements will be converted according to this context.\n   * @returns {module:engine/model/documentfragment~DocumentFragment} Model data that is a result of the conversion process\n   * wrapped in `DocumentFragment`. Converted marker elements will be set as that document fragment's\n   * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n   */\n\n\n  convert(viewItem, writer, context = ['$root']) {\n    this.fire('viewCleanup', viewItem); // Create context tree and set position in the top element.\n    // Items will be converted according to this position.\n\n    this._modelCursor = createContextTree(context, writer); // Store writer in conversion as a conversion API\n    // to be sure that conversion process will use the same batch.\n\n    this.conversionApi.writer = writer; // Create consumable values list for conversion process.\n\n    this.conversionApi.consumable = ViewConsumable.createFrom(viewItem); // Custom data stored by converter for conversion process.\n\n    this.conversionApi.store = {}; // Do the conversion.\n\n    const {\n      modelRange\n    } = this._convertItem(viewItem, this._modelCursor); // Conversion result is always a document fragment so let's create it.\n\n\n    const documentFragment = writer.createDocumentFragment(); // When there is a conversion result.\n\n    if (modelRange) {\n      // Remove all empty elements that were create while splitting.\n      this._removeEmptyElements(); // Move all items that were converted in context tree to the document fragment.\n\n\n      for (const item of Array.from(this._modelCursor.parent.getChildren())) {\n        writer.append(item, documentFragment);\n      } // Extract temporary markers elements from model and set as static markers collection.\n\n\n      documentFragment.markers = extractMarkersFromModelFragment(documentFragment, writer);\n    } // Clear context position.\n\n\n    this._modelCursor = null; // Clear split elements lists.\n\n    this._splitParts.clear(); // Clear conversion API.\n\n\n    this.conversionApi.writer = null;\n    this.conversionApi.store = null; // Return fragment as conversion result.\n\n    return documentFragment;\n  }\n  /**\n   * @private\n   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertItem\n   */\n\n\n  _convertItem(viewItem, modelCursor) {\n    const data = Object.assign({\n      viewItem,\n      modelCursor,\n      modelRange: null\n    });\n\n    if (viewItem.is('element')) {\n      this.fire('element:' + viewItem.name, data, this.conversionApi);\n    } else if (viewItem.is('text')) {\n      this.fire('text', data, this.conversionApi);\n    } else {\n      this.fire('documentFragment', data, this.conversionApi);\n    } // Handle incorrect conversion result.\n\n\n    if (data.modelRange && !(data.modelRange instanceof ModelRange)) {\n      /**\n       * Incorrect conversion result was dropped.\n       *\n       * {@link module:engine/model/range~Range Model range} should be a conversion result.\n       *\n       * @error view-conversion-dispatcher-incorrect-result\n       */\n      throw new CKEditorError('view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.', this);\n    }\n\n    return {\n      modelRange: data.modelRange,\n      modelCursor: data.modelCursor\n    };\n  }\n  /**\n   * @private\n   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#convertChildren\n   */\n\n\n  _convertChildren(viewItem, modelCursor) {\n    const modelRange = new ModelRange(modelCursor);\n    let nextModelCursor = modelCursor;\n\n    for (const viewChild of Array.from(viewItem.getChildren())) {\n      const result = this._convertItem(viewChild, nextModelCursor);\n\n      if (result.modelRange instanceof ModelRange) {\n        modelRange.end = result.modelRange.end;\n        nextModelCursor = result.modelCursor;\n      }\n    }\n\n    return {\n      modelRange,\n      modelCursor: nextModelCursor\n    };\n  }\n  /**\n   * @private\n   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#splitToAllowedParent\n   */\n\n\n  _splitToAllowedParent(node, modelCursor) {\n    // Try to find allowed parent.\n    const allowedParent = this.conversionApi.schema.findAllowedParent(modelCursor, node); // When there is no parent that allows to insert node then return `null`.\n\n    if (!allowedParent) {\n      return null;\n    } // When current position parent allows to insert node then return this position.\n\n\n    if (allowedParent === modelCursor.parent) {\n      return {\n        position: modelCursor\n      };\n    } // When allowed parent is in context tree.\n\n\n    if (this._modelCursor.parent.getAncestors().includes(allowedParent)) {\n      return null;\n    } // Split element to allowed parent.\n\n\n    const splitResult = this.conversionApi.writer.split(modelCursor, allowedParent); // Using the range returned by `model.Writer#split`, we will pair original elements with their split parts.\n    //\n    // The range returned from the writer spans \"over the split\" or, precisely saying, from the end of the original element (the one\n    // that got split) to the beginning of the other part of that element:\n    //\n    // <limit><a><b><c>X[]Y</c></b><a></limit> ->\n    // <limit><a><b><c>X[</c></b></a><a><b><c>]Y</c></b></a>\n    //\n    // After the split there cannot be any full node between the positions in `splitRange`. The positions are touching.\n    // Also, because of how splitting works, it is easy to notice, that \"closing tags\" are in the reverse order than \"opening tags\".\n    // Also, since we split all those elements, each of them has to have the other part.\n    //\n    // With those observations in mind, we will pair the original elements with their split parts by saving \"closing tags\" and matching\n    // them with \"opening tags\" in the reverse order. For that we can use a stack.\n\n    const stack = [];\n\n    for (const treeWalkerValue of splitResult.range.getWalker()) {\n      if (treeWalkerValue.type == 'elementEnd') {\n        stack.push(treeWalkerValue.item);\n      } else {\n        // There should not be any text nodes after the element is split, so the only other value is `elementStart`.\n        const originalPart = stack.pop();\n        const splitPart = treeWalkerValue.item;\n\n        this._registerSplitPair(originalPart, splitPart);\n      }\n    }\n\n    return {\n      position: splitResult.position,\n      cursorParent: splitResult.range.end.parent\n    };\n  }\n  /**\n   * Registers that `splitPart` element is a split part of the `originalPart` element.\n   *\n   * Data set by this method is used by {@link #_getSplitParts} and {@link #_removeEmptyElements}.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} originalPart\n   * @param {module:engine/model/element~Element} splitPart\n   */\n\n\n  _registerSplitPair(originalPart, splitPart) {\n    if (!this._splitParts.has(originalPart)) {\n      this._splitParts.set(originalPart, [originalPart]);\n    }\n\n    const list = this._splitParts.get(originalPart);\n\n    this._splitParts.set(splitPart, list);\n\n    list.push(splitPart);\n  }\n  /**\n   * @private\n   * @see module:engine/conversion/upcastdispatcher~UpcastConversionApi#getSplitParts\n   */\n\n\n  _getSplitParts(element) {\n    let parts;\n\n    if (!this._splitParts.has(element)) {\n      parts = [element];\n    } else {\n      parts = this._splitParts.get(element);\n    }\n\n    return parts;\n  }\n  /**\n   * Checks if there are any empty elements created while splitting and removes them.\n   *\n   * This method works recursively to re-check empty elements again after at least one element was removed in the initial call,\n   * as some elements might have become empty after other empty elements were removed from them.\n   *\n   * @private\n   */\n\n\n  _removeEmptyElements() {\n    let anyRemoved = false;\n\n    for (const element of this._splitParts.keys()) {\n      if (element.isEmpty) {\n        this.conversionApi.writer.remove(element);\n\n        this._splitParts.delete(element);\n\n        anyRemoved = true;\n      }\n    }\n\n    if (anyRemoved) {\n      this._removeEmptyElements();\n    }\n  }\n  /**\n   * Fired before the first conversion event, at the beginning of upcast (view to model conversion) process.\n   *\n   * @event viewCleanup\n   * @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/element~Element}\n   * viewItem Part of the view to be converted.\n   */\n\n  /**\n   * Fired when {@link module:engine/view/element~Element} is converted.\n   *\n   * `element` is a namespace event for a class of events. Names of actually called events follow this pattern:\n   * `element:<elementName>` where `elementName` is the name of converted element. This way listeners may listen to\n   * all elements conversion or to conversion of specific elements.\n   *\n   * @event element\n   * @param {Object} data Conversion data. Keep in mind that this object is shared by reference between all\n   * callbacks that will be called. This means that callbacks can override values if needed, and those values will\n   * be available in other callbacks.\n   * @param {module:engine/view/item~Item} data.viewItem Converted item.\n   * @param {module:engine/model/position~Position} data.modelCursor Position where a converter should start changes.\n   * Change this value for the next converter to tell where the conversion should continue.\n   * @param {module:engine/model/range~Range} data.modelRange The current state of conversion result. Every change to\n   * converted element should be reflected by setting or modifying this property.\n   * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion utilities to be used by callback.\n   */\n\n  /**\n   * Fired when {@link module:engine/view/text~Text} is converted.\n   *\n   * @event text\n   * @see #event:element\n   */\n\n  /**\n   * Fired when {@link module:engine/view/documentfragment~DocumentFragment} is converted.\n   *\n   * @event documentFragment\n   * @see #event:element\n   */\n\n\n}\nmix(UpcastDispatcher, EmitterMixin); // Traverses given model item and searches elements which marks marker range. Found element is removed from\n// DocumentFragment but path of this element is stored in a Map which is then returned.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment|module:engine/view/node~Node} modelItem Fragment of model.\n// @returns {Map<String, module:engine/model/range~Range>} List of static markers.\n\nfunction extractMarkersFromModelFragment(modelItem, writer) {\n  const markerElements = new Set();\n  const markers = new Map(); // Create ModelTreeWalker.\n\n  const range = ModelRange._createIn(modelItem).getItems(); // Walk through DocumentFragment and collect marker elements.\n\n\n  for (const item of range) {\n    // Check if current element is a marker.\n    if (item.name == '$marker') {\n      markerElements.add(item);\n    }\n  } // Walk through collected marker elements store its path and remove its from the DocumentFragment.\n\n\n  for (const markerElement of markerElements) {\n    const markerName = markerElement.getAttribute('data-name');\n    const currentPosition = writer.createPositionBefore(markerElement); // When marker of given name is not stored it means that we have found the beginning of the range.\n\n    if (!markers.has(markerName)) {\n      markers.set(markerName, new ModelRange(currentPosition.clone())); // Otherwise is means that we have found end of the marker range.\n    } else {\n      markers.get(markerName).end = currentPosition.clone();\n    } // Remove marker element from DocumentFragment.\n\n\n    writer.remove(markerElement);\n  }\n\n  return markers;\n} // Creates model fragment according to given context and returns position in the bottom (the deepest) element.\n\n\nfunction createContextTree(contextDefinition, writer) {\n  let position;\n\n  for (const item of new SchemaContext(contextDefinition)) {\n    const attributes = {};\n\n    for (const key of item.getAttributeKeys()) {\n      attributes[key] = item.getAttribute(key);\n    }\n\n    const current = writer.createElement(item.name, attributes);\n\n    if (position) {\n      writer.append(current, position);\n    }\n\n    position = ModelPosition._createAt(current, 0);\n  }\n\n  return position;\n}\n/**\n * Conversion interface that is registered for given {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n * and is passed as one of parameters when {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher dispatcher}\n * fires it's events.\n *\n * @interface module:engine/conversion/upcastdispatcher~UpcastConversionApi\n */\n\n/**\n * Starts conversion of given item by firing an appropriate event.\n *\n * Every fired event is passed (as first parameter) an object with `modelRange` property. Every event may set and/or\n * modify that property. When all callbacks are done, the final value of `modelRange` property is returned by this method.\n * The `modelRange` must be {@link module:engine/model/range~Range model range} or `null` (as set by default).\n *\n * @method #convertItem\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Item to convert.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range|null} result.modelRange Model range containing result of item conversion,\n * created and modified by callbacks attached to fired event, or `null` if the conversion result was incorrect.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Starts conversion of all children of given item by firing appropriate events for all those children.\n *\n * @method #convertChildren\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:text\n * @fires module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:documentFragment\n * @param {module:engine/view/item~Item} viewItem Element which children should be converted.\n * @param {module:engine/model/position~Position} modelCursor Position of conversion.\n * @returns {Object} result Conversion result.\n * @returns {module:engine/model/range~Range} result.modelRange Model range containing results of conversion of all children of given item.\n * When no children was converted then range is collapsed.\n * @returns {module:engine/model/position~Position} result.modelCursor Position where conversion should be continued.\n */\n\n/**\n * Checks {@link module:engine/model/schema~Schema schema} to find allowed parent for element that we are going to insert\n * starting from given position. If current parent does not allow to insert element but one of the ancestors does then\n * split nodes to allowed parent.\n *\n * If schema allows to insert node in given position, nothing is split and object with that position is returned.\n *\n * If it was not possible to find allowed parent, `null` is returned, nothing is split.\n *\n * Otherwise, ancestors are split and object with position and the copy of the split element is returned.\n *\n * For instance, if `<image>` is not allowed in `<paragraph>` but is allowed in `$root`:\n *\n *\t\t<paragraph>foo[]bar</paragraph>\n *\n *  \t-> split for `<image>` ->\n *\n *  \t<paragraph>foo</paragraph>[]<paragraph>bar</paragraph>\n *\n * In the sample above position between `<paragraph>` elements will be returned as `position` and the second `paragraph`\n * as `cursorParent`.\n *\n * @method #splitToAllowedParent\n * @param {module:engine/model/position~Position} position Position on which element is going to be inserted.\n * @param {module:engine/model/node~Node} node Node to insert.\n * @returns {Object|null} Split result. If it was not possible to find allowed position `null` is returned.\n * @returns {module:engine/model/position~Position} position between split elements.\n * @returns {module:engine/model/element~Element} [cursorParent] Element inside which cursor should be placed to\n * continue conversion. When element is not defined it means that there was no split.\n */\n\n/**\n * Returns all the split parts of given `element` that were created during upcasting through using {@link #splitToAllowedParent}.\n * It enables you to easily track those elements and continue processing them after they are split during their children conversion.\n *\n *\t\t<paragraph>Foo<image />bar<image />baz</paragraph> ->\n *\t\t<paragraph>Foo</paragraph><image /><paragraph>bar</paragraph><image /><paragraph>baz</paragraph>\n *\n * For a reference to any of above paragraphs, the function will return all three paragraphs (the original element included),\n * sorted in the order of their creation (the original element is the first one).\n *\n * If given `element` was not split, an array with single element is returned.\n *\n * Example of a usage in a converter code:\n *\n *\t\tconst myElement = conversionApi.writer.createElement( 'myElement' );\n *\n *\t\t// Children conversion may split `myElement`.\n *\t\tconversionApi.convertChildren( myElement, modelCursor );\n *\n *\t\tconst splitParts = conversionApi.getSplitParts( myElement );\n *\t\tconst lastSplitPart = splitParts[ splitParts.length - 1 ];\n *\n *\t\t// Setting `data.modelRange` basing on split parts:\n *\t\tdata.modelRange = conversionApi.writer.createRange(\n *\t\t\tconversionApi.writer.createPositionBefore( myElement ),\n *\t\t\tconversionApi.writer.createPositionAfter( lastSplitPart )\n *\t\t);\n *\n *\t\t// Setting `data.modelCursor` to continue after the last split element:\n *\t\tdata.modelCursor = conversionApi.writer.createPositionAfter( lastSplitPart );\n *\n * **Tip:** if you are unable to get a reference to the original element (for example because the code is split into multiple converters\n * or even classes) but it was already converted, you might want to check first element in `data.modelRange`. This is a common situation\n * if an attribute converter is separated from an element converter.\n *\n * @method #getSplitParts\n * @param {module:engine/model/element~Element} element\n * @returns {Array.<module:engine/model/element~Element>}\n */\n\n/**\n * Stores information about what parts of processed view item are still waiting to be handled. After a piece of view item\n * was converted, appropriate consumable value should be {@link module:engine/conversion/viewconsumable~ViewConsumable#consume consumed}.\n *\n * @member {module:engine/conversion/viewconsumable~ViewConsumable} #consumable\n */\n\n/**\n * Custom data stored by converters for conversion process. Custom properties of this object can be defined and use to\n * pass parameters between converters.\n *\n * The difference between this property and `data` parameter of\n * {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element} is that `data` parameters allows you\n * to pass parameters within a single event and `store` within the whole conversion.\n *\n * @member {Object} #store\n */\n\n/**\n * The model's schema instance.\n *\n * @member {module:engine/model/schema~Schema} #schema\n */\n\n/**\n * The {@link module:engine/model/writer~Writer} instance used to manipulate data during conversion.\n *\n * @member {module:engine/model/writer~Writer} #writer\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/controller/datacontroller\n */\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Mapper from '../conversion/mapper';\nimport DowncastDispatcher from '../conversion/downcastdispatcher';\nimport { insertText } from '../conversion/downcasthelpers';\nimport UpcastDispatcher from '../conversion/upcastdispatcher';\nimport { convertText, convertToModelFragment } from '../conversion/upcasthelpers';\nimport ViewDocumentFragment from '../view/documentfragment';\nimport ViewDocument from '../view/document';\nimport ViewDowncastWriter from '../view/downcastwriter';\nimport ModelRange from '../model/range';\n/**\n * Controller for the data pipeline. The data pipeline controls how data is retrieved from the document\n * and set inside it. Hence, the controller features two methods which allow to {@link ~DataController#get get}\n * and {@link ~DataController#set set} data of the {@link ~DataController#model model}\n * using given:\n *\n * * {@link module:engine/dataprocessor/dataprocessor~DataProcessor data processor},\n * * downcast converters,\n * * upcast converters.\n *\n * An instance of the data controller is always available in the {@link module:core/editor/editor~Editor#data `editor.data`}\n * property:\n *\n *\t\teditor.data.get( { rootName: 'customRoot' } ); // -> '<p>Hello!</p>'\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class DataController {\n  /**\n   * Creates a data controller instance.\n   *\n   * @param {module:engine/model/model~Model} model Data model.\n   * @param {module:engine/dataprocessor/dataprocessor~DataProcessor} [dataProcessor] Data processor that should be used\n   * by the controller.\n   */\n  constructor(model, dataProcessor) {\n    /**\n     * Data model.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * Data processor used during the conversion.\n     *\n     * @readonly\n     * @member {module:engine/dataprocessor/dataprocessor~DataProcessor}\n     */\n\n    this.processor = dataProcessor;\n    /**\n     * Mapper used for the conversion. It has no permanent bindings, because they are created when getting data and\n     * cleared directly after the data are converted. However, the mapper is defined as a class property, because\n     * it needs to be passed to the `DowncastDispatcher` as a conversion API.\n     *\n     * @readonly\n     * @member {module:engine/conversion/mapper~Mapper}\n     */\n\n    this.mapper = new Mapper();\n    /**\n     * Downcast dispatcher used by the {@link #get get method}. Downcast converters should be attached to it.\n     *\n     * @readonly\n     * @member {module:engine/conversion/downcastdispatcher~DowncastDispatcher}\n     */\n\n    this.downcastDispatcher = new DowncastDispatcher({\n      mapper: this.mapper\n    });\n    this.downcastDispatcher.on('insert:$text', insertText(), {\n      priority: 'lowest'\n    });\n    /**\n     * Upcast dispatcher used by the {@link #set set method}. Upcast converters should be attached to it.\n     *\n     * @readonly\n     * @member {module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n     */\n\n    this.upcastDispatcher = new UpcastDispatcher({\n      schema: model.schema\n    }); // Define default converters for text and elements.\n    //\n    // Note that if there is no default converter for the element it will be skipped, for instance `<b>foo</b>` will be\n    // converted to nothing. We add `convertToModelFragment` as a last converter so it converts children of that\n    // element to the document fragment so `<b>foo</b>` will be converted to `foo` if there is no converter for `<b>`.\n\n    this.upcastDispatcher.on('text', convertText(), {\n      priority: 'lowest'\n    });\n    this.upcastDispatcher.on('element', convertToModelFragment(), {\n      priority: 'lowest'\n    });\n    this.upcastDispatcher.on('documentFragment', convertToModelFragment(), {\n      priority: 'lowest'\n    });\n    this.decorate('init'); // Fire `ready` event when initialisation has completed. Such low level listener gives possibility\n    // to plug into initialisation pipeline without interrupting the initialisation flow.\n\n    this.on('init', () => {\n      this.fire('ready');\n    }, {\n      priority: 'lowest'\n    });\n  }\n  /**\n   * Returns the model's data converted by downcast dispatchers attached to {@link #downcastDispatcher} and\n   * formatted by the {@link #processor data processor}.\n   *\n   * @param {Object} [options]\n   * @param {String} [options.rootName='main'] Root name.\n   * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `empty` by default,\n   * which means whenever editor content is considered empty, an empty string will be returned. To turn off trimming completely\n   * use `'none'`. In such cases exact content will be returned (for example `<p>&nbsp;</p>` for an empty editor).\n   * @returns {String} Output data.\n   */\n\n\n  get(options) {\n    const {\n      rootName = 'main',\n      trim = 'empty'\n    } = options || {};\n\n    if (!this._checkIfRootsExists([rootName])) {\n      /**\n       * Cannot get data from a non-existing root. This error is thrown when {@link #get DataController#get() method}\n       * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n       * calling {@link #get} like:\n       *\n       *\t\tdata.get( { rootName: 'root2' } );\n       *\n       * will throw this error.\n       *\n       * @error datacontroller-get-non-existent-root\n       */\n      throw new CKEditorError('datacontroller-get-non-existent-root: Attempting to get data from a non-existing root.', this);\n    }\n\n    const root = this.model.document.getRoot(rootName);\n\n    if (trim === 'empty' && !this.model.hasContent(root, {\n      ignoreWhitespaces: true\n    })) {\n      return '';\n    }\n\n    return this.stringify(root);\n  }\n  /**\n   * Returns the content of the given {@link module:engine/model/element~Element model's element} or\n   * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast converters\n   * attached to {@link #downcastDispatcher} and formatted by the {@link #processor data processor}.\n   *\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n   * Element whose content will be stringified.\n   * @returns {String} Output data.\n   */\n\n\n  stringify(modelElementOrFragment) {\n    // Model -> view.\n    const viewDocumentFragment = this.toView(modelElementOrFragment); // View -> data.\n\n    return this.processor.toData(viewDocumentFragment);\n  }\n  /**\n   * Returns the content of the given {@link module:engine/model/element~Element model element} or\n   * {@link module:engine/model/documentfragment~DocumentFragment model document fragment} converted by the downcast\n   * converters attached to {@link #downcastDispatcher} to a\n   * {@link module:engine/view/documentfragment~DocumentFragment view document fragment}.\n   *\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} modelElementOrFragment\n   * Element or document fragment whose content will be converted.\n   * @returns {module:engine/view/documentfragment~DocumentFragment} Output view DocumentFragment.\n   */\n\n\n  toView(modelElementOrFragment) {\n    // Clear bindings so the call to this method gives correct results.\n    this.mapper.clearBindings(); // First, convert elements.\n\n    const modelRange = ModelRange._createIn(modelElementOrFragment);\n\n    const viewDocumentFragment = new ViewDocumentFragment(); // Create separate ViewDowncastWriter just for data conversion purposes.\n    // We have no view controller and rendering do DOM in DataController so view.change() block is not used here.\n\n    const viewWriter = new ViewDowncastWriter(new ViewDocument());\n    this.mapper.bindElements(modelElementOrFragment, viewDocumentFragment);\n    this.downcastDispatcher.convertInsert(modelRange, viewWriter);\n\n    if (!modelElementOrFragment.is('documentFragment')) {\n      // Then, if a document element is converted, convert markers.\n      // From all document markers, get those, which \"intersect\" with the converter element.\n      const markers = _getMarkersRelativeToElement(modelElementOrFragment);\n\n      for (const [name, range] of markers) {\n        this.downcastDispatcher.convertMarkerAdd(name, range, viewWriter);\n      }\n    }\n\n    return viewDocumentFragment;\n  }\n  /**\n   * Sets initial input data parsed by the {@link #processor data processor} and\n   * converted by the {@link #upcastDispatcher view-to-model converters}.\n   * Initial data can be set only to document that {@link module:engine/model/document~Document#version} is equal 0.\n   *\n   * **Note** This method is {@link module:utils/observablemixin~ObservableMixin#decorate decorated} which is\n   * used by e.g. collaborative editing plugin that syncs remote data on init.\n   *\n   * When data is passed as a string it is initialized on a default `main` root:\n   *\n   *\t\tdataController.init( '<p>Foo</p>' ); // Initializes data on the `main` root.\n   *\n   * To initialize data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n   *\n   *\t\tdataController.init( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Initializes data on the `main` and `title` roots.\n   *\n   * @fires init\n   * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n   * pairs to initialize data on multiple roots at once.\n   * @returns {Promise} Promise that is resolved after the data is set on the editor.\n   */\n\n\n  init(data) {\n    if (this.model.document.version) {\n      /**\n       * Cannot set initial data to not empty {@link module:engine/model/document~Document}.\n       * Initial data should be set once, during {@link module:core/editor/editor~Editor} initialization,\n       * when the {@link module:engine/model/document~Document#version} is equal 0.\n       *\n       * @error datacontroller-init-document-not-empty\n       */\n      throw new CKEditorError('datacontroller-init-document-not-empty: Trying to set initial data to not empty document.', this);\n    }\n\n    let initialData = {};\n\n    if (typeof data === 'string') {\n      initialData.main = data; // Default root is 'main'. To initiate data on a different root, object should be passed.\n    } else {\n      initialData = data;\n    }\n\n    if (!this._checkIfRootsExists(Object.keys(initialData))) {\n      /**\n       * Cannot init data on a non-existing root. This error is thrown when {@link #init DataController#init() method}\n       * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n       * calling {@link #init} like:\n       *\n       * \t\tdata.init( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n       *\n       * will throw this error.\n       *\n       * @error datacontroller-init-non-existent-root\n       */\n      throw new CKEditorError('datacontroller-init-non-existent-root: Attempting to init data on a non-existing root.', this);\n    }\n\n    this.model.enqueueChange('transparent', writer => {\n      for (const rootName of Object.keys(initialData)) {\n        const modelRoot = this.model.document.getRoot(rootName);\n        writer.insert(this.parse(initialData[rootName], modelRoot), modelRoot, 0);\n      }\n    });\n    return Promise.resolve();\n  }\n  /**\n   * Sets input data parsed by the {@link #processor data processor} and\n   * converted by the {@link #upcastDispatcher view-to-model converters}.\n   * This method can be used any time to replace existing editor data by the new one without clearing the\n   * {@link module:engine/model/document~Document#history document history}.\n   *\n   * This method also creates a batch with all the changes applied. If all you need is to parse data, use\n   * the {@link #parse} method.\n   *\n   * When data is passed as a string it is set on a default `main` root:\n   *\n   *\t\tdataController.set( '<p>Foo</p>' ); // Sets data on the `main` root.\n   *\n   * To set data on a different root or multiple roots at once, object containing `rootName` - `data` pairs should be passed:\n   *\n   *\t\tdataController.set( { main: '<p>Foo</p>', title: '<h1>Bar</h1>' } ); // Sets data on the `main` and `title` roots.\n   *\n   * @param {String|Object.<String,String>} data Input data as a string or an object containing `rootName` - `data`\n   * pairs to set data on multiple roots at once.\n   */\n\n\n  set(data) {\n    let newData = {};\n\n    if (typeof data === 'string') {\n      newData.main = data; // Default root is 'main'. To set data on a different root, object should be passed.\n    } else {\n      newData = data;\n    }\n\n    if (!this._checkIfRootsExists(Object.keys(newData))) {\n      /**\n       * Cannot set data on a non-existing root. This error is thrown when {@link #set DataController#set() method}\n       * is called with non-existent root name. For example, if there is an editor instance with only `main` root,\n       * calling {@link #set} like:\n       *\n       * \t\tdata.set( { main: '<p>Foo</p>', root2: '<p>Bar</p>' } );\n       *\n       * will throw this error.\n       *\n       * @error datacontroller-set-non-existent-root\n       */\n      throw new CKEditorError('datacontroller-set-non-existent-root: Attempting to set data on a non-existing root.', this);\n    }\n\n    this.model.enqueueChange('transparent', writer => {\n      writer.setSelection(null);\n      writer.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());\n\n      for (const rootName of Object.keys(newData)) {\n        // Save to model.\n        const modelRoot = this.model.document.getRoot(rootName);\n        writer.remove(writer.createRangeIn(modelRoot));\n        writer.insert(this.parse(newData[rootName], modelRoot), modelRoot, 0);\n      }\n    });\n  }\n  /**\n   * Returns the data parsed by the {@link #processor data processor} and then converted by upcast converters\n   * attached to the {@link #upcastDispatcher}.\n   *\n   * @see #set\n   * @param {String} data Data to parse.\n   * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n   * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n   * @returns {module:engine/model/documentfragment~DocumentFragment} Parsed data.\n   */\n\n\n  parse(data, context = '$root') {\n    // data -> view\n    const viewDocumentFragment = this.processor.toView(data); // view -> model\n\n    return this.toModel(viewDocumentFragment, context);\n  }\n  /**\n   * Returns the result of the given {@link module:engine/view/element~Element view element} or\n   * {@link module:engine/view/documentfragment~DocumentFragment view document fragment} converted by the\n   * {@link #upcastDispatcher view-to-model converters}, wrapped by {@link module:engine/model/documentfragment~DocumentFragment}.\n   *\n   * When marker elements were converted during the conversion process, it will be set as a document fragment's\n   * {@link module:engine/model/documentfragment~DocumentFragment#markers static markers map}.\n   *\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} viewElementOrFragment\n   * Element or document fragment whose content will be converted.\n   * @param {module:engine/model/schema~SchemaContextDefinition} [context='$root'] Base context in which the view will\n   * be converted to the model. See: {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#convert}.\n   * @returns {module:engine/model/documentfragment~DocumentFragment} Output document fragment.\n   */\n\n\n  toModel(viewElementOrFragment, context = '$root') {\n    return this.model.change(writer => {\n      return this.upcastDispatcher.convert(viewElementOrFragment, writer, context);\n    });\n  }\n  /**\n   * Removes all event listeners set by the DataController.\n   */\n\n\n  destroy() {\n    this.stopListening();\n  }\n  /**\n   * Checks if all provided root names are existing editor roots.\n   *\n   * @private\n   * @param {Array.<String>} rootNames Root names to check.\n   * @returns {Boolean} Whether all provided root names are existing editor roots.\n   */\n\n\n  _checkIfRootsExists(rootNames) {\n    for (const rootName of rootNames) {\n      if (!this.model.document.getRootNames().includes(rootName)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Event fired once data initialisation has finished.\n   *\n   * @event ready\n   */\n\n  /**\n   * Event fired after {@link #init init() method} has been run. It can be {@link #listenTo listened to} to adjust/modify\n   * the initialisation flow. However, if the `init` event is stopped or prevented, the {@link #event:ready ready event}\n   * should be fired manually.\n   *\n   * The `init` event is fired by decorated {@link #init} method.\n   * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n   *\n   * @event init\n   */\n\n\n}\nmix(DataController, ObservableMixin); // Helper function for downcast conversion.\n//\n// Takes a document element (element that is added to a model document) and checks which markers are inside it\n// and which markers are containing it. If the marker is intersecting with element, the intersection is returned.\n\nfunction _getMarkersRelativeToElement(element) {\n  const result = [];\n  const doc = element.root.document;\n\n  if (!doc) {\n    return [];\n  }\n\n  const elementRange = ModelRange._createIn(element);\n\n  for (const marker of doc.model.markers) {\n    const intersection = elementRange.getIntersection(marker.getRange());\n\n    if (intersection) {\n      result.push([marker.name, intersection]);\n    }\n  }\n\n  return result;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/conversion/conversion\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport UpcastHelpers from './upcasthelpers';\nimport DowncastHelpers from './downcasthelpers';\n/**\n * A utility class that helps add converters to upcast and downcast dispatchers.\n *\n * We recommend reading the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide first to\n * understand the core concepts of the conversion mechanisms.\n *\n * An instance of the conversion manager is available in the\n * {@link module:core/editor/editor~Editor#conversion `editor.conversion`} property\n * and by default has the following groups of dispatchers (i.e. directions of conversion):\n *\n * * `downcast` (editing and data downcasts)\n * * `editingDowncast`\n * * `dataDowncast`\n * * `upcast`\n *\n * # One-way converters\n *\n * To add a converter to a specific group, use the {@link module:engine/conversion/conversion~Conversion#for `for()`}\n * method:\n *\n *\t\t// Add a converter to editing downcast and data downcast.\n *\t\teditor.conversion.for( 'downcast' ).elementToElement( config ) );\n *\n *\t\t// Add a converter to the data pipepline only:\n *\t\teditor.conversion.for( 'dataDowncast' ).elementToElement( dataConversionConfig ) );\n *\n *\t\t// And a slightly different one for the editing pipeline:\n *\t\teditor.conversion.for( 'editingDowncast' ).elementToElement( editingConversionConfig ) );\n *\n * See {@link module:engine/conversion/conversion~Conversion#for `for()`} method documentation to learn more about\n * available conversion helpers and how to use your custom ones.\n *\n * # Two-way converters\n *\n * Besides using one-way converters via the `for()` method, you can also use other methods available in this\n * class to add two-way converters (upcast and downcast):\n *\n * * {@link module:engine/conversion/conversion~Conversion#elementToElement `elementToElement()`} &ndash;\n * Model element to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement()`} &ndash;\n * Model attribute to view element and vice versa.\n * * {@link module:engine/conversion/conversion~Conversion#attributeToAttribute `attributeToAttribute()`} &ndash;\n * Model attribute to view element and vice versa.\n */\n\nexport default class Conversion {\n  /**\n   * Creates a new conversion instance.\n   *\n   * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher>} downcastDispatchers\n   * @param {module:engine/conversion/upcastdispatcher~UpcastDispatcher|\n   * Array.<module:engine/conversion/upcastdispatcher~UpcastDispatcher>} upcastDispatchers\n   */\n  constructor(downcastDispatchers, upcastDispatchers) {\n    /**\n     * Maps dispatchers group name to ConversionHelpers instances.\n     *\n     * @private\n     * @member {Map.<String,module:engine/conversion/conversionhelpers~ConversionHelpers>}\n     */\n    this._helpers = new Map(); // Define default 'downcast' & 'upcast' dispatchers groups. Those groups are always available as two-way converters needs them.\n\n    this._downcast = Array.isArray(downcastDispatchers) ? downcastDispatchers : [downcastDispatchers];\n\n    this._createConversionHelpers({\n      name: 'downcast',\n      dispatchers: this._downcast,\n      isDowncast: true\n    });\n\n    this._upcast = Array.isArray(upcastDispatchers) ? upcastDispatchers : [upcastDispatchers];\n\n    this._createConversionHelpers({\n      name: 'upcast',\n      dispatchers: this._upcast,\n      isDowncast: false\n    });\n  }\n  /**\n   * Define an alias for registered dispatcher.\n   *\n   *\t\tconst conversion = new Conversion(\n   *\t\t\t[ dataDowncastDispatcher, editingDowncastDispatcher ],\n   *\t\t\tupcastDispatcher\n   *\t\t);\n   *\n   *\t\tconversion.addAlias( 'dataDowncast', dataDowncastDispatcher );\n   *\n   * @param {String} alias An alias of a dispatcher.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * module:engine/conversion/upcastdispatcher~UpcastDispatcher} dispatcher Dispatcher which should have an alias.\n   */\n\n\n  addAlias(alias, dispatcher) {\n    const isDowncast = this._downcast.includes(dispatcher);\n\n    const isUpcast = this._upcast.includes(dispatcher);\n\n    if (!isUpcast && !isDowncast) {\n      /**\n       * Trying to register and alias for a dispatcher that nas not been registered.\n       *\n       * @error conversion-add-alias-dispatcher-not-registered\n       */\n      throw new CKEditorError('conversion-add-alias-dispatcher-not-registered: ' + 'Trying to register and alias for a dispatcher that nas not been registered.', this);\n    }\n\n    this._createConversionHelpers({\n      name: alias,\n      dispatchers: [dispatcher],\n      isDowncast\n    });\n  }\n  /**\n   * Provides a chainable API to assign converters to conversion dispatchers group.\n   *\n   * If the given group name has not been registered, the\n   * {@link module:utils/ckeditorerror~CKEditorError `conversion-for-unknown-group` error} is thrown.\n   *\n   * You can use conversion helpers available directly in the `for()` chain or your custom ones via\n   * the {@link module:engine/conversion/conversionhelpers~ConversionHelpers#add `add()`} method.\n   *\n   * # Using bulit-in conversion helpers\n   *\n   * The `for()` chain comes with a set of conversion helpers which you can use like this:\n   *\n   *\t\teditor.conversion.for( 'downcast' )\n   *\t\t\t.elementToElement( config1 )        // Adds an element-to-element downcast converter.\n   *\t\t\t.attributeToElement( config2 );     // Adds an attribute-to-element downcast converter.\n   *\n   *\t\teditor.conversion.for( 'upcast' )\n   *\t\t\t.elementToAttribute( config3 );     // Adds an element-to-attribute upcast converter.\n   *\n   * Refer to the documentation of built-in conversion helpers to learn about their configuration options.\n   *\n   * * downcast (model-to-view) conversion helpers:\n   *\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`},\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement `attributeToElement()`},\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToAttribute `attributeToAttribute()`}.\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToElement `markerToElement()`}.\n   *\t* {@link module:engine/conversion/downcasthelpers~DowncastHelpers#markerToHighlight `markerToHighlight()`}.\n   *\n   * * upcast (view-to-model) conversion helpers:\n   *\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToElement `elementToElement()`},\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToAttribute `elementToAttribute()`},\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#attributeToAttribute `attributeToAttribute()`}.\n   *\t* {@link module:engine/conversion/upcasthelpers~UpcastHelpers#elementToMarker `elementToMarker()`}.\n   *\n   * # Using custom conversion helpers\n   *\n   * If you need to implement a nontypical converter, you can do so by calling:\n   *\n   *\t\teditor.conversion.for( direction ).add( customHelper );\n   *\n   * The `.add()` method takes exactly one parameter, which is a function. This function should accept one parameter that\n   * is a dispatcher instance. The function should add an actual converter to the passed dispatcher instance.\n   *\n   * Example:\n   *\n   *\t\teditor.conversion.for( 'upcast' ).add( dispatcher => {\n   *\t\t\tdispatcher.on( 'element:a',  ( evt, data, conversionApi ) => {\n   *\t\t\t\t// Do something with a view <a> element.\n   *\t\t\t} );\n   *\t\t} );\n   *\n   * Refer to the documentation of {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher}\n   * and {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} to learn how to write\n   * custom converters.\n   *\n   * @param {String} groupName The name of dispatchers group to add the converters to.\n   * @returns {module:engine/conversion/downcasthelpers~DowncastHelpers|module:engine/conversion/upcasthelpers~UpcastHelpers}\n   */\n\n\n  for(groupName) {\n    if (!this._helpers.has(groupName)) {\n      /**\n       * Trying to add a converter to an unknown dispatchers group.\n       *\n       * @error conversion-for-unknown-group\n       */\n      throw new CKEditorError('conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.', this);\n    }\n\n    return this._helpers.get(groupName);\n  }\n  /**\n   * Sets up converters between the model and the view that convert a model element to a view element (and vice versa).\n   * For example, the model `<paragraph>Foo</paragraph>` is `<p>Foo</p>` in the view.\n   *\n   *\t\t// A simple conversion from the `paragraph` model element to the `<p>` view element (and vice versa).\n   *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'p' } );\n   *\n   *\t\t// Override other converters by specifying a converter definition with a higher priority.\n   *\t\teditor.conversion.elementToElement( { model: 'paragraph', view: 'div', converterPriority: 'high' } );\n   *\n   *\t\t// View specified as an object instead of a string.\n   *\t\teditor.conversion.elementToElement( {\n   *\t\t\tmodel: 'fancyParagraph',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'p',\n   *\t\t\t\tclasses: 'fancy'\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Use `upcastAlso` to define other view elements that should also be converted to a `paragraph` element.\n   *\t\teditor.conversion.elementToElement( {\n   *\t\t\tmodel: 'paragraph',\n   *\t\t\tview: 'p',\n   *\t\t\tupcastAlso: [\n   *\t\t\t\t'div',\n   *\t\t\t\t{\n   *\t\t\t\t\t// Any element with the `display: block` style.\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\tdisplay: 'block'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t]\n   *\t\t} );\n   *\n   *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n   *\t\teditor.conversion.elementToElement( {\n   *\t\t\tmodel: 'heading',\n   *\t\t\tview: 'h2',\n   *\t\t\t// Convert \"headling-like\" paragraphs to headings.\n   *\t\t\tupcastAlso: viewElement => {\n   *\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\n   *\t\t\t\tif ( !fontSize ) {\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\n   *\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n   *\n   *\t\t\t\tif ( !match ) {\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\n   *\t\t\t\tconst size = Number( match[ 1 ] );\n   *\n   *\t\t\t\tif ( size > 26 ) {\n   *\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n   *\t\t\t\t}\n   *\n   *\t\t\t\treturn null;\n   *\t\t\t}\n   *\t\t} );\n   *\n   * `definition.model` is a `String` with a model element name to convert from or to.\n   * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n   *\n   * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n   */\n\n\n  elementToElement(definition) {\n    // Set up downcast converter.\n    this.for('downcast').elementToElement(definition); // Set up upcast converter.\n\n    for (const {\n      model,\n      view\n    } of _getAllUpcastDefinitions(definition)) {\n      this.for('upcast').elementToElement({\n        model,\n        view,\n        converterPriority: definition.converterPriority\n      });\n    }\n  }\n  /**\n   * Sets up converters between the model and the view that convert a model attribute to a view element (and vice versa).\n   * For example, a model text node with `\"Foo\"` as data and the `bold` attribute is `<strong>Foo</strong>` in the view.\n   *\n   *\t\t// A simple conversion from the `bold=true` attribute to the `<strong>` view element (and vice versa).\n   *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'strong' } );\n   *\n   *\t\t// Override other converters by specifying a converter definition with a higher priority.\n   *\t\teditor.conversion.attributeToElement( { model: 'bold', view: 'b', converterPriority: 'high' } );\n   *\n   *\t\t// View specified as an object instead of a string.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: {\n   *\t\t\t\tname: 'span',\n   *\t\t\t\tclasses: 'bold'\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Use `config.model.name` to define the conversion only from a given node type, `$text` in this case.\n   *\t\t// The same attribute on different elements may then be handled by a different converter.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'textDecoration',\n   *\t\t\t\tvalues: [ 'underline', 'lineThrough' ],\n   *\t\t\t\tname: '$text'\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tunderline: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-decoration': 'underline'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tlineThrough: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-decoration': 'line-through'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `bold` attribute.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: 'bold',\n   *\t\t\tview: 'strong',\n   *\t\t\tupcastAlso: [\n   *\t\t\t\t'b',\n   *\t\t\t\t{\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tclasses: 'bold'\n   *\t\t\t\t},\n   *\t\t\t\t{\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-weight': 'bold'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tviewElement => {\n   *\t\t\t\t\tconst fontWeight = viewElement.getStyle( 'font-weight' );\n   *\n   *\t\t\t\t\tif ( viewElement.is( 'span' ) && fontWeight && /\\d+/.test() && Number( fontWeight ) > 500 ) {\n   *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\t\treturn {\n   *\t\t\t\t\t\t\tname: true,\n   *\t\t\t\t\t\t\tstyles: [ 'font-weight' ]\n   *\t\t\t\t\t\t};\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t]\n   *\t\t} );\n   *\n   *\t\t// Conversion from and to a model attribute key whose value is an enum (`fontSize=big|small`).\n   *\t\t// `upcastAlso` set as callback enables a conversion of a wide range of different view elements.\n   *\t\teditor.conversion.attributeToElement( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'fontSize',\n   *\t\t\t\tvalues: [ 'big', 'small' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tbig: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-size': '1.2em'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tsmall: {\n   *\t\t\t\t\tname: 'span',\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'font-size': '0.8em'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t},\n   *\t\t\tupcastAlso: {\n   *\t\t\t\tbig: viewElement => {\n   *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\n   *\t\t\t\t\tif ( !fontSize ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n   *\n   *\t\t\t\t\tif ( !match ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst size = Number( match[ 1 ] );\n   *\n   *\t\t\t\t\tif ( viewElement.is( 'span' ) && size > 10 ) {\n   *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t},\n   *\t\t\t\tsmall: viewElement => {\n   *\t\t\t\t\tconst fontSize = viewElement.getStyle( 'font-size' );\n   *\n   *\t\t\t\t\tif ( !fontSize ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst match = fontSize.match( /(\\d+)\\s*px/ );\n   *\n   *\t\t\t\t\tif ( !match ) {\n   *\t\t\t\t\t\treturn null;\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\tconst size = Number( match[ 1 ] );\n   *\n   *\t\t\t\t\tif ( viewElement.is( 'span' ) && size < 10 ) {\n   *\t\t\t\t\t\t// Returned value can be an object with the matched properties.\n   *\t\t\t\t\t\t// These properties will be \"consumed\" during the conversion.\n   *\t\t\t\t\t\t// See `engine.view.Matcher~MatcherPattern` and `engine.view.Matcher#match` for more details.\n   *\n   *\t\t\t\t\t\treturn { name: true, styles: [ 'font-size' ] };\n   *\t\t\t\t\t}\n   *\n   *\t\t\t\t\treturn null;\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * The `definition.model` parameter specifies which model attribute should be converted from or to. It can be a `{ key, value }` object\n   * describing the attribute key and value to convert or a `String` specifying just the attribute key (then `value` is set to `true`).\n   * See {@link module:engine/conversion/conversion~ConverterDefinition} to learn about other parameters.\n   *\n   * @param {module:engine/conversion/conversion~ConverterDefinition} definition The converter definition.\n   */\n\n\n  attributeToElement(definition) {\n    // Set up downcast converter.\n    this.for('downcast').attributeToElement(definition); // Set up upcast converter.\n\n    for (const {\n      model,\n      view\n    } of _getAllUpcastDefinitions(definition)) {\n      this.for('upcast').elementToAttribute({\n        view,\n        model,\n        converterPriority: definition.converterPriority\n      });\n    }\n  }\n  /**\n   * Sets up converters between the model and the view that convert a model attribute to a view attribute (and vice versa).\n   * For example, `<image src='foo.jpg'></image>` is converted to `<img src='foo.jpg'></img>` (the same attribute key and value).\n   * This type of converters is intended to be used with {@link module:engine/model/element~Element model element} nodes.\n   * To convert text attributes {@link module:engine/conversion/conversion~Conversion#attributeToElement `attributeToElement converter`}\n   * should be set up.\n   *\n   *\t\t// A simple conversion from the `source` model attribute to the `src` view attribute (and vice versa).\n   *\t\teditor.conversion.attributeToAttribute( { model: 'source', view: 'src' } );\n   *\n   *\t\t// Attribute values are strictly specified.\n   *\t\teditor.conversion.attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tname: 'image',\n   *\t\t\t\tkey: 'aside',\n   *\t\t\t\tvalues: [ 'aside' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\taside: {\n   *\t\t\t\t\tname: 'img',\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: [ 'aside', 'half-size' ]\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Set the style attribute.\n   *\t\teditor.conversion.attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tname: 'image',\n   *\t\t\t\tkey: 'aside',\n   *\t\t\t\tvalues: [ 'aside' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\taside: {\n   *\t\t\t\t\tname: 'img',\n   *\t\t\t\t\tkey: 'style',\n   *\t\t\t\t\tvalue: {\n   *\t\t\t\t\t\tfloat: 'right',\n   *\t\t\t\t\t\twidth: '50%',\n   *\t\t\t\t\t\tmargin: '5px'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Conversion from and to a model attribute key whose value is an enum (`align=right|center`).\n   *\t\t// Use `upcastAlso` to define other view elements that should also be converted to the `align=right` attribute.\n   *\t\teditor.conversion.attributeToAttribute( {\n   *\t\t\tmodel: {\n   *\t\t\t\tkey: 'align',\n   *\t\t\t\tvalues: [ 'right', 'center' ]\n   *\t\t\t},\n   *\t\t\tview: {\n   *\t\t\t\tright: {\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: 'align-right'\n   *\t\t\t\t},\n   *\t\t\t\tcenter: {\n   *\t\t\t\t\tkey: 'class',\n   *\t\t\t\t\tvalue: 'align-center'\n   *\t\t\t\t}\n   *\t\t\t},\n   *\t\t\tupcastAlso: {\n   *\t\t\t\tright: {\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-align': 'right'\n   *\t\t\t\t\t}\n   *\t\t\t\t},\n   *\t\t\t\tcenter: {\n   *\t\t\t\t\tstyles: {\n   *\t\t\t\t\t\t'text-align': 'center'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * The `definition.model` parameter specifies which model attribute should be converted from and to.\n   * It can be a `{ key, [ values ], [ name ] }` object or a `String`, which will be treated like `{ key: definition.model }`.\n   * The `key` property is the model attribute key to convert from and to.\n   * The `values` are the possible model attribute values. If `values` is not set, the model attribute value will be the same as the\n   * view attribute value.\n   * If `name` is set, the conversion will be set up only for model elements with the given name.\n   *\n   * The `definition.view` parameter specifies which view attribute should be converted from and to.\n   * It can be a `{ key, value, [ name ] }` object or a `String`, which will be treated like `{ key: definition.view }`.\n   * The `key` property is the view attribute key to convert from and to.\n   * The `value` is the view attribute value to convert from and to. If `definition.value` is not set, the view attribute value will be\n   * the same as the model attribute value.\n   * If `key` is `'class'`, `value` can be a `String` or an array of `String`s.\n   * If `key` is `'style'`, `value` is an object with key-value pairs.\n   * In other cases, `value` is a `String`.\n   * If `name` is set, the conversion will be set up only for model elements with the given name.\n   * If `definition.model.values` is set, `definition.view` is an object that assigns values from `definition.model.values`\n   * to `{ key, value, [ name ] }` objects.\n   *\n   * `definition.upcastAlso` specifies which other matching view elements should also be upcast to the given model configuration.\n   * If `definition.model.values` is set, `definition.upcastAlso` should be an object assigning values from `definition.model.values`\n   * to {@link module:engine/view/matcher~MatcherPattern}s or arrays of {@link module:engine/view/matcher~MatcherPattern}s.\n   *\n   * **Note:** `definition.model` and `definition.view` form should be mirrored, so the same types of parameters should\n   * be given in both parameters.\n   *\n   * @param {Object} definition The converter definition.\n   * @param {String|Object} definition.model The model attribute to convert from and to.\n   * @param {String|Object} definition.view The view attribute to convert from and to.\n   * @param {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [definition.upcastAlso]\n   * Any view element matching `definition.upcastAlso` will also be converted to the given model attribute. `definition.upcastAlso`\n   * is used only if `config.model.values` is specified.\n   */\n\n\n  attributeToAttribute(definition) {\n    // Set up downcast converter.\n    this.for('downcast').attributeToAttribute(definition); // Set up upcast converter.\n\n    for (const {\n      model,\n      view\n    } of _getAllUpcastDefinitions(definition)) {\n      this.for('upcast').attributeToAttribute({\n        view,\n        model\n      });\n    }\n  }\n  /**\n   * Creates and caches conversion helpers for given dispatchers group.\n   *\n   * @private\n   * @param {Object} options\n   * @param {String} options.name Group name.\n   * @param {Array.<module:engine/conversion/downcastdispatcher~DowncastDispatcher|\n   * module:engine/conversion/upcastdispatcher~UpcastDispatcher>} options.dispatchers\n   * @param {Boolean} options.isDowncast\n   */\n\n\n  _createConversionHelpers({\n    name,\n    dispatchers,\n    isDowncast\n  }) {\n    if (this._helpers.has(name)) {\n      /**\n       * Trying to register a group name that has already been registered.\n       *\n       * @error conversion-group-exists\n       */\n      throw new CKEditorError('conversion-group-exists: Trying to register a group name that has already been registered.', this);\n    }\n\n    const helpers = isDowncast ? new DowncastHelpers(dispatchers) : new UpcastHelpers(dispatchers);\n\n    this._helpers.set(name, helpers);\n  }\n\n}\n/**\n * Defines how the model should be converted from and to the view.\n *\n * @typedef {Object} module:engine/conversion/conversion~ConverterDefinition\n *\n * @property {*} [model] The model conversion definition. Describes the model element or model attribute to convert. This parameter differs\n * for different functions that accept `ConverterDefinition`. See the description of the function to learn how to set it.\n * @property {module:engine/view/elementdefinition~ElementDefinition|Object} view The definition of the view element to convert from and\n * to. If `model` describes multiple values, `view` is an object that assigns these values (`view` object keys) to view element definitions\n * (`view` object values).\n * @property {module:engine/view/matcher~MatcherPattern|Array.<module:engine/view/matcher~MatcherPattern>} [upcastAlso]\n * Any view element matching `upcastAlso` will also be converted to the model. If `model` describes multiple values, `upcastAlso`\n * is an object that assigns these values (`upcastAlso` object keys) to {@link module:engine/view/matcher~MatcherPattern}s\n * (`upcastAlso` object values).\n * @property {module:utils/priorities~PriorityString} [converterPriority] The converter priority.\n */\n// Helper function that creates a joint array out of an item passed in `definition.view` and items passed in\n// `definition.upcastAlso`.\n//\n// @param {module:engine/conversion/conversion~ConverterDefinition} definition\n// @returns {Array} Array containing view definitions.\n\nfunction* _getAllUpcastDefinitions(definition) {\n  if (definition.model.values) {\n    for (const value of definition.model.values) {\n      const model = {\n        key: definition.model.key,\n        value\n      };\n      const view = definition.view[value];\n      const upcastAlso = definition.upcastAlso ? definition.upcastAlso[value] : undefined;\n      yield* _getUpcastDefinition(model, view, upcastAlso);\n    }\n  } else {\n    yield* _getUpcastDefinition(definition.model, definition.view, definition.upcastAlso);\n  }\n}\n\nfunction* _getUpcastDefinition(model, view, upcastAlso) {\n  yield {\n    model,\n    view\n  };\n\n  if (upcastAlso) {\n    upcastAlso = Array.isArray(upcastAlso) ? upcastAlso : [upcastAlso];\n\n    for (const upcastAlsoItem of upcastAlso) {\n      yield {\n        model,\n        view: upcastAlsoItem\n      };\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/batch\n */\n\n/**\n * A batch instance groups model changes ({@link module:engine/model/operation/operation~Operation operations}). All operations\n * grouped in a single batch can be reverted together, so you can also think about a batch as of a single undo step. If you want\n * to extend a given undo step, you can add more changes to the batch using {@link module:engine/model/model~Model#enqueueChange}:\n *\n *\t\tmodel.enqueueChange( batch, writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * @see module:engine/model/model~Model#enqueueChange\n * @see module:engine/model/model~Model#change\n */\nexport default class Batch {\n  /**\n   * Creates a batch instance.\n   *\n   * @see module:engine/model/model~Model#enqueueChange\n   * @see module:engine/model/model~Model#change\n   * @param {'transparent'|'default'} [type='default'] The type of the batch.\n   */\n  constructor(type = 'default') {\n    /**\n     * An array of operations that compose this batch.\n     *\n     * @readonly\n     * @type {Array.<module:engine/model/operation/operation~Operation>}\n     */\n    this.operations = [];\n    /**\n     * The type of the batch.\n     *\n     * It can be one of the following values:\n     * * `'default'` &ndash; All \"normal\" batches. This is the most commonly used type.\n     * * `'transparent'` &ndash; A batch that should be ignored by other features, i.e. an initial batch or collaborative editing\n     * changes.\n     *\n     * @readonly\n     * @type {'transparent'|'default'}\n     */\n\n    this.type = type;\n  }\n  /**\n   * Returns the base version of this batch, which is equal to the base version of the first operation in the batch.\n   * If there are no operations in the batch or neither operation has the base version set, it returns `null`.\n   *\n   * @readonly\n   * @type {Number|null}\n   */\n\n\n  get baseVersion() {\n    for (const op of this.operations) {\n      if (op.baseVersion !== null) {\n        return op.baseVersion;\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Adds an operation to the batch instance.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation An operation to add.\n   * @returns {module:engine/model/operation/operation~Operation} The added operation.\n   */\n\n\n  addOperation(operation) {\n    operation.batch = this;\n    this.operations.push(operation);\n    return operation;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/operation\n */\n\n/**\n * Abstract base operation class.\n *\n * @abstract\n */\nexport default class Operation {\n  /**\n   * Base operation constructor.\n   *\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(baseVersion) {\n    /**\n     * {@link module:engine/model/document~Document#version} on which operation can be applied. If you try to\n     * {@link module:engine/model/model~Model#applyOperation apply} operation with different base version than the\n     * {@link module:engine/model/document~Document#version document version} the\n     * {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n     *\n     * @member {Number}\n     */\n    this.baseVersion = baseVersion;\n    /**\n     * Defines whether operation is executed on attached or detached {@link module:engine/model/item~Item items}.\n     *\n     * @readonly\n     * @member {Boolean} #isDocumentOperation\n     */\n\n    this.isDocumentOperation = this.baseVersion !== null;\n    /**\n     * {@link module:engine/model/batch~Batch Batch} to which the operation is added or `null` if the operation is not\n     * added to any batch yet.\n     *\n     * @member {module:engine/model/batch~Batch|null} #batch\n     */\n\n    this.batch = null;\n    /**\n     * Operation type.\n     *\n     * @readonly\n     * @member {String} #type\n     */\n\n    /**\n     * Creates and returns an operation that has the same parameters as this operation.\n     *\n     * @method #clone\n     * @returns {module:engine/model/operation/operation~Operation} Clone of this operation.\n     */\n\n    /**\n     * Creates and returns a reverse operation. Reverse operation when executed right after\n     * the original operation will bring back tree model state to the point before the original\n     * operation execution. In other words, it reverses changes done by the original operation.\n     *\n     * Keep in mind that tree model state may change since executing the original operation,\n     * so reverse operation will be \"outdated\". In that case you will need to transform it by\n     * all operations that were executed after the original operation.\n     *\n     * @method #getReversed\n     * @returns {module:engine/model/operation/operation~Operation} Reversed operation.\n     */\n\n    /**\n     * Executes the operation - modifications described by the operation properties will be applied to the model tree.\n     *\n     * @protected\n     * @method #_execute\n     */\n  }\n  /**\n   * Checks whether the operation's parameters are correct and the operation can be correctly executed. Throws\n   * an error if operation is not valid.\n   *\n   * @protected\n   * @method #_validate\n   */\n\n\n  _validate() {}\n  /**\n   * Custom toJSON method to solve child-parent circular dependencies.\n   *\n   * @method #toJSON\n   * @returns {Object} Clone of this object with the operation property replaced with string.\n   */\n\n\n  toJSON() {\n    // This method creates only a shallow copy, all nested objects should be defined separately.\n    // See https://github.com/ckeditor/ckeditor5-engine/issues/1477.\n    const json = Object.assign({}, this);\n    json.__className = this.constructor.className; // Remove reference to the parent `Batch` to avoid circular dependencies.\n\n    delete json.batch; // Only document operations are shared with other clients so it is not necessary to keep this information.\n\n    delete json.isDocumentOperation;\n    return json;\n  }\n  /**\n   * Name of the operation class used for serialization.\n   *\n   * @type {String}\n   */\n\n\n  static get className() {\n    return 'Operation';\n  }\n  /**\n   * Creates Operation object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} doc Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/operation~Operation}\n   */\n\n\n  static fromJSON(json) {\n    return new this(json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/model/documentfragment\n */\nimport NodeList from './nodelist';\nimport Element from './element';\nimport Text from './text';\nimport TextProxy from './textproxy';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\n/**\n * DocumentFragment represents a part of model which does not have a common root but it's top-level nodes\n * can be seen as siblings. In other words, it is a detached part of model tree, without a root.\n *\n * DocumentFragment has own {@link module:engine/model/markercollection~MarkerCollection}. Markers from this collection\n * will be set to the {@link module:engine/model/model~Model#markers model markers} by a\n * {@link module:engine/model/writer~Writer#insert} function.\n */\n\nexport default class DocumentFragment {\n  /**\n   * Creates an empty `DocumentFragment`.\n   *\n   * **Note:** Constructor of this class shouldn't be used directly in the code.\n   * Use the {@link module:engine/model/writer~Writer#createDocumentFragment} method instead.\n   *\n   * @protected\n   * @param {module:engine/model/node~Node|Iterable.<module:engine/model/node~Node>} [children]\n   * Nodes to be contained inside the `DocumentFragment`.\n   */\n  constructor(children) {\n    /**\n     * DocumentFragment static markers map. This is a list of names and {@link module:engine/model/range~Range ranges}\n     * which will be set as Markers to {@link module:engine/model/model~Model#markers model markers collection}\n     * when DocumentFragment will be inserted to the document.\n     *\n     * @readonly\n     * @member {Map<String,module:engine/model/range~Range>} module:engine/model/documentfragment~DocumentFragment#markers\n     */\n    this.markers = new Map();\n    /**\n     * List of nodes contained inside the document fragment.\n     *\n     * @private\n     * @member {module:engine/model/nodelist~NodeList} module:engine/model/documentfragment~DocumentFragment#_children\n     */\n\n    this._children = new NodeList();\n\n    if (children) {\n      this._insertChild(0, children);\n    }\n  }\n  /**\n   * Returns an iterator that iterates over all nodes contained inside this document fragment.\n   *\n   * @returns {Iterable.<module:engine/model/node~Node>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this.getChildren();\n  }\n  /**\n   * Number of this document fragment's children.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get childCount() {\n    return this._children.length;\n  }\n  /**\n   * Sum of {@link module:engine/model/node~Node#offsetSize offset sizes} of all of this document fragment's children.\n   *\n   * @readonly\n   * @type {Number}\n   */\n\n\n  get maxOffset() {\n    return this._children.maxOffset;\n  }\n  /**\n   * Is `true` if there are no nodes inside this document fragment, `false` otherwise.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isEmpty() {\n    return this.childCount === 0;\n  }\n  /**\n   * Artificial root of `DocumentFragment`. Returns itself. Added for compatibility reasons.\n   *\n   * @readonly\n   * @type {module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  get root() {\n    return this;\n  }\n  /**\n   * Artificial parent of `DocumentFragment`. Returns `null`. Added for compatibility reasons.\n   *\n   * @readonly\n   * @type {null}\n   */\n\n\n  get parent() {\n    return null;\n  }\n  /**\n   * Checks whether this object is of the given type.\n   *\n   *\t\tdocFrag.is( 'documentFragment' ); // -> true\n   *\t\tdocFrag.is( 'model:documentFragment' ); // -> true\n   *\n   *\t\tdocFrag.is( 'view:documentFragment' ); // -> false\n   *\t\tdocFrag.is( 'element' ); // -> false\n   *\t\tdocFrag.is( 'node' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'documentFragment' || type == 'model:documentFragment';\n  }\n  /**\n   * Gets the child at the given index. Returns `null` if incorrect index was passed.\n   *\n   * @param {Number} index Index of child.\n   * @returns {module:engine/model/node~Node|null} Child node.\n   */\n\n\n  getChild(index) {\n    return this._children.getNode(index);\n  }\n  /**\n   * Returns an iterator that iterates over all of this document fragment's children.\n   *\n   * @returns {Iterable.<module:engine/model/node~Node>}\n   */\n\n\n  getChildren() {\n    return this._children[Symbol.iterator]();\n  }\n  /**\n   * Returns an index of the given child node. Returns `null` if given node is not a child of this document fragment.\n   *\n   * @param {module:engine/model/node~Node} node Child node to look for.\n   * @returns {Number|null} Child node's index.\n   */\n\n\n  getChildIndex(node) {\n    return this._children.getNodeIndex(node);\n  }\n  /**\n   * Returns the starting offset of given child. Starting offset is equal to the sum of\n   * {@link module:engine/model/node~Node#offsetSize offset sizes} of all node's siblings that are before it. Returns `null` if\n   * given node is not a child of this document fragment.\n   *\n   * @param {module:engine/model/node~Node} node Child node to look for.\n   * @returns {Number|null} Child node's starting offset.\n   */\n\n\n  getChildStartOffset(node) {\n    return this._children.getNodeStartOffset(node);\n  }\n  /**\n   * Returns path to a `DocumentFragment`, which is an empty array. Added for compatibility reasons.\n   *\n   * @returns {Array}\n   */\n\n\n  getPath() {\n    return [];\n  }\n  /**\n   * Returns a descendant node by its path relative to this element.\n   *\n   *\t\t// <this>a<b>c</b></this>\n   *\t\tthis.getNodeByPath( [ 0 ] );     // -> \"a\"\n   *\t\tthis.getNodeByPath( [ 1 ] );     // -> <b>\n   *\t\tthis.getNodeByPath( [ 1, 0 ] );  // -> \"c\"\n   *\n   * @param {Array.<Number>} relativePath Path of the node to find, relative to this element.\n   * @returns {module:engine/model/node~Node|module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  getNodeByPath(relativePath) {\n    let node = this; // eslint-disable-line consistent-this\n\n    for (const index of relativePath) {\n      node = node.getChild(node.offsetToIndex(index));\n    }\n\n    return node;\n  }\n  /**\n   * Converts offset \"position\" to index \"position\".\n   *\n   * Returns index of a node that occupies given offset. If given offset is too low, returns `0`. If given offset is\n   * too high, returns index after last child}.\n   *\n   *\t\tconst textNode = new Text( 'foo' );\n   *\t\tconst pElement = new Element( 'p' );\n   *\t\tconst docFrag = new DocumentFragment( [ textNode, pElement ] );\n   *\t\tdocFrag.offsetToIndex( -1 ); // Returns 0, because offset is too low.\n   *\t\tdocFrag.offsetToIndex( 0 ); // Returns 0, because offset 0 is taken by `textNode` which is at index 0.\n   *\t\tdocFrag.offsetToIndex( 1 ); // Returns 0, because `textNode` has `offsetSize` equal to 3, so it occupies offset 1 too.\n   *\t\tdocFrag.offsetToIndex( 2 ); // Returns 0.\n   *\t\tdocFrag.offsetToIndex( 3 ); // Returns 1.\n   *\t\tdocFrag.offsetToIndex( 4 ); // Returns 2. There are no nodes at offset 4, so last available index is returned.\n   *\n   * @param {Number} offset Offset to look for.\n   * @returns {Number} Index of a node that occupies given offset.\n   */\n\n\n  offsetToIndex(offset) {\n    return this._children.offsetToIndex(offset);\n  }\n  /**\n   * Converts `DocumentFragment` instance to plain object and returns it.\n   * Takes care of converting all of this document fragment's children.\n   *\n   * @returns {Object} `DocumentFragment` instance converted to plain object.\n   */\n\n\n  toJSON() {\n    const json = [];\n\n    for (const node of this._children) {\n      json.push(node.toJSON());\n    }\n\n    return json;\n  }\n  /**\n   * Creates a `DocumentFragment` instance from given plain object (i.e. parsed JSON string).\n   * Converts `DocumentFragment` children to proper nodes.\n   *\n   * @param {Object} json Plain object to be converted to `DocumentFragment`.\n   * @returns {module:engine/model/documentfragment~DocumentFragment} `DocumentFragment` instance created using given plain object.\n   */\n\n\n  static fromJSON(json) {\n    const children = [];\n\n    for (const child of json) {\n      if (child.name) {\n        // If child has name property, it is an Element.\n        children.push(Element.fromJSON(child));\n      } else {\n        // Otherwise, it is a Text node.\n        children.push(Text.fromJSON(child));\n      }\n    }\n\n    return new DocumentFragment(children);\n  }\n  /**\n   * {@link #_insertChild Inserts} one or more nodes at the end of this document fragment.\n   *\n   * @protected\n   * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n   */\n\n\n  _appendChild(items) {\n    this._insertChild(this.childCount, items);\n  }\n  /**\n   * Inserts one or more nodes at the given index and sets {@link module:engine/model/node~Node#parent parent} of these nodes\n   * to this document fragment.\n   *\n   * @protected\n   * @param {Number} index Index at which nodes should be inserted.\n   * @param {module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>} items Items to be inserted.\n   */\n\n\n  _insertChild(index, items) {\n    const nodes = normalize(items);\n\n    for (const node of nodes) {\n      // If node that is being added to this element is already inside another element, first remove it from the old parent.\n      if (node.parent !== null) {\n        node._remove();\n      }\n\n      node.parent = this;\n    }\n\n    this._children._insertNodes(index, nodes);\n  }\n  /**\n   * Removes one or more nodes starting at the given index\n   * and sets {@link module:engine/model/node~Node#parent parent} of these nodes to `null`.\n   *\n   * @protected\n   * @param {Number} index Index of the first node to remove.\n   * @param {Number} [howMany=1] Number of nodes to remove.\n   * @returns {Array.<module:engine/model/node~Node>} Array containing removed nodes.\n   */\n\n\n  _removeChildren(index, howMany = 1) {\n    const nodes = this._children._removeNodes(index, howMany);\n\n    for (const node of nodes) {\n      node.parent = null;\n    }\n\n    return nodes;\n  }\n\n} // Converts strings to Text and non-iterables to arrays.\n//\n// @param {String|module:engine/model/item~Item|Iterable.<module:engine/model/item~Item>}\n// @returns {Iterable.<module:engine/model/node~Node>}\n\nfunction normalize(nodes) {\n  // Separate condition because string is iterable.\n  if (typeof nodes == 'string') {\n    return [new Text(nodes)];\n  }\n\n  if (!isIterable(nodes)) {\n    nodes = [nodes];\n  } // Array.from to enable .map() on non-arrays.\n\n\n  return Array.from(nodes).map(node => {\n    if (typeof node == 'string') {\n      return new Text(node);\n    }\n\n    if (node instanceof TextProxy) {\n      return new Text(node.data, node.getAttributes());\n    }\n\n    return node;\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/utils\n */\nimport Node from '../node';\nimport Text from '../text';\nimport TextProxy from '../textproxy';\nimport Range from '../range';\nimport DocumentFragment from '../documentfragment';\nimport NodeList from '../nodelist';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Contains functions used for composing model tree by {@link module:engine/model/operation/operation~Operation operations}.\n * Those functions are built on top of {@link module:engine/model/node~Node node}, and it's child classes', APIs.\n *\n * @protected\n * @namespace utils\n */\n\n/**\n * Inserts given nodes at given position.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.insert\n * @param {module:engine/model/position~Position} position Position at which nodes should be inserted.\n * @param {module:engine/model/node~NodeSet} nodes Nodes to insert.\n * @returns {module:engine/model/range~Range} Range spanning over inserted elements.\n */\n\nexport function _insert(position, nodes) {\n  nodes = _normalizeNodes(nodes); // We have to count offset before inserting nodes because they can get merged and we would get wrong offsets.\n\n  const offset = nodes.reduce((sum, node) => sum + node.offsetSize, 0);\n  const parent = position.parent; // Insertion might be in a text node, we should split it if that's the case.\n\n  _splitNodeAtPosition(position);\n\n  const index = position.index; // Insert nodes at given index. After splitting we have a proper index and insertion is between nodes,\n  // using basic `Element` API.\n\n  parent._insertChild(index, nodes); // Merge text nodes, if possible. Merging is needed only at points where inserted nodes \"touch\" \"old\" nodes.\n\n\n  _mergeNodesAtIndex(parent, index + nodes.length);\n\n  _mergeNodesAtIndex(parent, index);\n\n  return new Range(position, position.getShiftedBy(offset));\n}\n/**\n * Removed nodes in given range. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._remove\n * @param {module:engine/model/range~Range} range Range containing nodes to remove.\n * @returns {Array.<module:engine/model/node~Node>}\n */\n\nexport function _remove(range) {\n  if (!range.isFlat) {\n    /**\n     * Trying to remove a range which starts and ends in different element.\n     *\n     * @error operation-utils-remove-range-not-flat\n     */\n    throw new CKEditorError('operation-utils-remove-range-not-flat: ' + 'Trying to remove a range which starts and ends in different element.', this);\n  }\n\n  const parent = range.start.parent; // Range may be inside text nodes, we have to split them if that's the case.\n\n  _splitNodeAtPosition(range.start);\n\n  _splitNodeAtPosition(range.end); // Remove the text nodes using basic `Element` API.\n\n\n  const removed = parent._removeChildren(range.start.index, range.end.index - range.start.index); // Merge text nodes, if possible. After some nodes were removed, node before and after removed range will be\n  // touching at the position equal to the removed range beginning. We check merging possibility there.\n\n\n  _mergeNodesAtIndex(parent, range.start.index);\n\n  return removed;\n}\n/**\n * Moves nodes in given range to given target position. Only {@link module:engine/model/range~Range#isFlat flat} ranges are accepted.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.move\n * @param {module:engine/model/range~Range} sourceRange Range containing nodes to move.\n * @param {module:engine/model/position~Position} targetPosition Position to which nodes should be moved.\n * @returns {module:engine/model/range~Range} Range containing moved nodes.\n */\n\nexport function _move(sourceRange, targetPosition) {\n  if (!sourceRange.isFlat) {\n    /**\n     * Trying to move a range which starts and ends in different element.\n     *\n     * @error operation-utils-move-range-not-flat\n     */\n    throw new CKEditorError('operation-utils-move-range-not-flat: ' + 'Trying to move a range which starts and ends in different element.', this);\n  }\n\n  const nodes = _remove(sourceRange); // We have to fix `targetPosition` because model changed after nodes from `sourceRange` got removed and\n  // that change might have an impact on `targetPosition`.\n\n\n  targetPosition = targetPosition._getTransformedByDeletion(sourceRange.start, sourceRange.end.offset - sourceRange.start.offset);\n  return _insert(targetPosition, nodes);\n}\n/**\n * Sets given attribute on nodes in given range. The attributes are only set on top-level nodes of the range, not on its children.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils._setAttribute\n * @param {module:engine/model/range~Range} range Range containing nodes that should have the attribute set. Must be a flat range.\n * @param {String} key Key of attribute to set.\n * @param {*} value Attribute value.\n */\n\nexport function _setAttribute(range, key, value) {\n  // Range might start or end in text nodes, so we have to split them.\n  _splitNodeAtPosition(range.start);\n\n  _splitNodeAtPosition(range.end); // Iterate over all items in the range.\n\n\n  for (const item of range.getItems({\n    shallow: true\n  })) {\n    // Iterator will return `TextProxy` instances but we know that those text proxies will\n    // always represent full text nodes (this is guaranteed thanks to splitting we did before).\n    // So, we can operate on those text proxies' text nodes.\n    const node = item.is('textProxy') ? item.textNode : item;\n\n    if (value !== null) {\n      node._setAttribute(key, value);\n    } else {\n      node._removeAttribute(key);\n    } // After attributes changing it may happen that some text nodes can be merged. Try to merge with previous node.\n\n\n    _mergeNodesAtIndex(node.parent, node.index);\n  } // Try to merge last changed node with it's previous sibling (not covered by the loop above).\n\n\n  _mergeNodesAtIndex(range.end.parent, range.end.index);\n}\n/**\n * Normalizes given object or an array of objects to an array of {@link module:engine/model/node~Node nodes}. See\n * {@link module:engine/model/node~NodeSet NodeSet} for details on how normalization is performed.\n *\n * @protected\n * @function module:engine/model/operation/utils~utils.normalizeNodes\n * @param {module:engine/model/node~NodeSet} nodes Objects to normalize.\n * @returns {Array.<module:engine/model/node~Node>} Normalized nodes.\n */\n\nexport function _normalizeNodes(nodes) {\n  const normalized = [];\n\n  if (!(nodes instanceof Array)) {\n    nodes = [nodes];\n  } // Convert instances of classes other than Node.\n\n\n  for (let i = 0; i < nodes.length; i++) {\n    if (typeof nodes[i] == 'string') {\n      normalized.push(new Text(nodes[i]));\n    } else if (nodes[i] instanceof TextProxy) {\n      normalized.push(new Text(nodes[i].data, nodes[i].getAttributes()));\n    } else if (nodes[i] instanceof DocumentFragment || nodes[i] instanceof NodeList) {\n      for (const child of nodes[i]) {\n        normalized.push(child);\n      }\n    } else if (nodes[i] instanceof Node) {\n      normalized.push(nodes[i]);\n    } // Skip unrecognized type.\n\n  } // Merge text nodes.\n\n\n  for (let i = 1; i < normalized.length; i++) {\n    const node = normalized[i];\n    const prev = normalized[i - 1];\n\n    if (node instanceof Text && prev instanceof Text && _haveSameAttributes(node, prev)) {\n      // Doing this instead changing `prev.data` because `data` is readonly.\n      normalized.splice(i - 1, 2, new Text(prev.data + node.data, prev.getAttributes()));\n      i--;\n    }\n  }\n\n  return normalized;\n} // Checks if nodes before and after given index in given element are {@link module:engine/model/text~Text text nodes} and\n// merges them into one node if they have same attributes.\n//\n// Merging is done by removing two text nodes and inserting a new text node containing data from both merged text nodes.\n//\n// @private\n// @param {module:engine/model/element~Element} element Parent element of nodes to merge.\n// @param {Number} index Index between nodes to merge.\n\nfunction _mergeNodesAtIndex(element, index) {\n  const nodeBefore = element.getChild(index - 1);\n  const nodeAfter = element.getChild(index); // Check if both of those nodes are text objects with same attributes.\n\n  if (nodeBefore && nodeAfter && nodeBefore.is('text') && nodeAfter.is('text') && _haveSameAttributes(nodeBefore, nodeAfter)) {\n    // Append text of text node after index to the before one.\n    const mergedNode = new Text(nodeBefore.data + nodeAfter.data, nodeBefore.getAttributes()); // Remove separate text nodes.\n\n    element._removeChildren(index - 1, 2); // Insert merged text node.\n\n\n    element._insertChild(index - 1, mergedNode);\n  }\n} // Checks if given position is in a text node, and if so, splits the text node in two text nodes, each of them\n// containing a part of original text node.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position at which node should be split.\n\n\nfunction _splitNodeAtPosition(position) {\n  const textNode = position.textNode;\n  const element = position.parent;\n\n  if (textNode) {\n    const offsetDiff = position.offset - textNode.startOffset;\n    const index = textNode.index;\n\n    element._removeChildren(index, 1);\n\n    const firstPart = new Text(textNode.data.substr(0, offsetDiff), textNode.getAttributes());\n    const secondPart = new Text(textNode.data.substr(offsetDiff), textNode.getAttributes());\n\n    element._insertChild(index, [firstPart, secondPart]);\n  }\n} // Checks whether two given nodes have same attributes.\n//\n// @private\n// @param {module:engine/model/node~Node} nodeA Node to check.\n// @param {module:engine/model/node~Node} nodeB Node to check.\n// @returns {Boolean} `true` if nodes have same attributes, `false` otherwise.\n\n\nfunction _haveSameAttributes(nodeA, nodeB) {\n  const iteratorA = nodeA.getAttributes();\n  const iteratorB = nodeB.getAttributes();\n\n  for (const attr of iteratorA) {\n    if (attr[1] !== nodeB.getAttribute(attr[0])) {\n      return false;\n    }\n\n    iteratorB.next();\n  }\n\n  return iteratorB.next().done;\n}\n/**\n * Value that can be normalized to an array of {@link module:engine/model/node~Node nodes}.\n *\n * Non-arrays are normalized as follows:\n * * {@link module:engine/model/node~Node Node} is left as is,\n * * {@link module:engine/model/textproxy~TextProxy TextProxy} and `String` are normalized to {@link module:engine/model/text~Text Text},\n * * {@link module:engine/model/nodelist~NodeList NodeList} is normalized to an array containing all nodes that are in that node list,\n * * {@link module:engine/model/documentfragment~DocumentFragment DocumentFragment} is normalized to an array containing all of it's\n * * children.\n *\n * Arrays are processed item by item like non-array values and flattened to one array. Normalization always results in\n * a flat array of {@link module:engine/model/node~Node nodes}. Consecutive text nodes (or items normalized to text nodes) will be\n * merged if they have same attributes.\n *\n * @typedef {module:engine/model/node~Node|module:engine/model/textproxy~TextProxy|String|\n * module:engine/model/nodelist~NodeList|module:engine/model/documentfragment~DocumentFragment|Iterable}\n * module:engine/model/node~NodeSet\n */","import baseIsEqual from './_baseIsEqual.js';\n\n/**\n * Performs a deep comparison between two values to determine if they are\n * equivalent.\n *\n * **Note:** This method supports comparing arrays, array buffers, booleans,\n * date objects, error objects, maps, numbers, `Object` objects, regexes,\n * sets, strings, symbols, and typed arrays. `Object` objects are compared\n * by their own, not inherited, enumerable properties. Functions and DOM\n * nodes are compared by strict equality, i.e. `===`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.isEqual(object, other);\n * // => true\n *\n * object === other;\n * // => false\n */\nfunction isEqual(value, other) {\n  return baseIsEqual(value, other);\n}\n\nexport default isEqual;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/attributeoperation\n */\nimport Operation from './operation';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport { _setAttribute } from './utils';\nimport { isEqual } from 'lodash-es';\n/**\n * Operation to change nodes' attribute.\n *\n * Using this class you can add, remove or change value of the attribute.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class AttributeOperation extends Operation {\n  /**\n   * Creates an operation that changes, removes or adds attributes.\n   *\n   * If only `newValue` is set, attribute will be added on a node. Note that all nodes in operation's range must not\n   * have an attribute with the same key as the added attribute.\n   *\n   * If only `oldValue` is set, then attribute with given key will be removed. Note that all nodes in operation's range\n   * must have an attribute with that key added.\n   *\n   * If both `newValue` and `oldValue` are set, then the operation will change the attribute value. Note that all nodes in\n   * operation's ranges must already have an attribute with given key and `oldValue` as value\n   *\n   * @param {module:engine/model/range~Range} range Range on which the operation should be applied. Must be a flat range.\n   * @param {String} key Key of an attribute to change or remove.\n   * @param {*} oldValue Old value of the attribute with given key or `null`, if attribute was not set before.\n   * @param {*} newValue New value of the attribute with given key or `null`, if operation should remove attribute.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(range, key, oldValue, newValue, baseVersion) {\n    super(baseVersion);\n    /**\n     * Range on which operation should be applied.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n\n    this.range = range.clone();\n    /**\n     * Key of an attribute to change or remove.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.key = key;\n    /**\n     * Old value of the attribute with given key or `null`, if attribute was not set before.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.oldValue = oldValue === undefined ? null : oldValue;\n    /**\n     * New value of the attribute with given key or `null`, if operation should remove attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.newValue = newValue === undefined ? null : newValue;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    if (this.oldValue === null) {\n      return 'addAttribute';\n    } else if (this.newValue === null) {\n      return 'removeAttribute';\n    } else {\n      return 'changeAttribute';\n    }\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new AttributeOperation(this.range, this.key, this.oldValue, this.newValue, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n\n\n  getReversed() {\n    return new AttributeOperation(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.range = this.range.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    if (!this.range.isFlat) {\n      /**\n       * The range to change is not flat.\n       *\n       * @error attribute-operation-range-not-flat\n       */\n      throw new CKEditorError('attribute-operation-range-not-flat: The range to change is not flat.', this);\n    }\n\n    for (const item of this.range.getItems({\n      shallow: true\n    })) {\n      if (this.oldValue !== null && !isEqual(item.getAttribute(this.key), this.oldValue)) {\n        /**\n         * Changed node has different attribute value than operation's old attribute value.\n         *\n         * @error attribute-operation-wrong-old-value\n         * @param {module:engine/model/item~Item} item\n         * @param {String} key\n         * @param {*} value\n         */\n        throw new CKEditorError('attribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' + 'old attribute value.', this, {\n          item,\n          key: this.key,\n          value: this.oldValue\n        });\n      }\n\n      if (this.oldValue === null && this.newValue !== null && item.hasAttribute(this.key)) {\n        /**\n         * The attribute with given key already exists for the given node.\n         *\n         * @error attribute-operation-attribute-exists\n         * @param {module:engine/model/node~Node} node\n         * @param {String} key\n         */\n        throw new CKEditorError('attribute-operation-attribute-exists: The attribute with given key already exists.', this, {\n          node: item,\n          key: this.key\n        });\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    // If value to set is same as old value, don't do anything.\n    if (!isEqual(this.oldValue, this.newValue)) {\n      // Execution.\n      _setAttribute(this.range, this.key, this.newValue);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'AttributeOperation';\n  }\n  /**\n   * Creates `AttributeOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    return new AttributeOperation(Range.fromJSON(json.range, document), json.key, json.oldValue, json.newValue, json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/detachoperation\n */\nimport Operation from './operation';\nimport Range from '../range';\nimport { _remove } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to permanently remove node from detached root.\n * Note this operation is only a local operation and won't be send to the other clients.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class DetachOperation extends Operation {\n  /**\n   * Creates an insert operation.\n   *\n   * @param {module:engine/model/position~Position} sourcePosition\n   * Position before the first {@link module:engine/model/item~Item model item} to move.\n   * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n   * `sourcePosition` with offset shifted by `howMany`.\n   */\n  constructor(sourcePosition, howMany) {\n    super(null);\n    /**\n     * Position before the first {@link module:engine/model/item~Item model item} to detach.\n     *\n     * @member {module:engine/model/position~Position} #sourcePosition\n     */\n\n    this.sourcePosition = sourcePosition.clone();\n    /**\n     * Offset size of moved range.\n     *\n     * @member {Number} #howMany\n     */\n\n    this.howMany = howMany;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'detach';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.sourcePosition = this.sourcePosition.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    if (this.sourcePosition.root.document) {\n      /**\n       * Cannot detach document node.\n       *\n       * @error detach-operation-on-document-node\n       */\n      throw new CKEditorError('detach-operation-on-document-node: Cannot detach document node.', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    _remove(Range._createFromPositionAndShift(this.sourcePosition, this.howMany));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'DetachOperation';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/moveoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport Range from '../range';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nimport { _move } from './utils';\n/**\n * Operation to move a range of {@link module:engine/model/item~Item model items}\n * to given {@link module:engine/model/position~Position target position}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class MoveOperation extends Operation {\n  /**\n   * Creates a move operation.\n   *\n   * @param {module:engine/model/position~Position} sourcePosition\n   * Position before the first {@link module:engine/model/item~Item model item} to move.\n   * @param {Number} howMany Offset size of moved range. Moved range will start from `sourcePosition` and end at\n   * `sourcePosition` with offset shifted by `howMany`.\n   * @param {module:engine/model/position~Position} targetPosition Position at which moved nodes will be inserted.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(sourcePosition, howMany, targetPosition, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position before the first {@link module:engine/model/item~Item model item} to move.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#sourcePosition\n     */\n\n    this.sourcePosition = sourcePosition.clone(); // `'toNext'` because `sourcePosition` is a bit like a start of the moved range.\n\n    this.sourcePosition.stickiness = 'toNext';\n    /**\n     * Offset size of moved range.\n     *\n     * @member {Number} module:engine/model/operation/moveoperation~MoveOperation#howMany\n     */\n\n    this.howMany = howMany;\n    /**\n     * Position at which moved nodes will be inserted.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/moveoperation~MoveOperation#targetPosition\n     */\n\n    this.targetPosition = targetPosition.clone();\n    this.targetPosition.stickiness = 'toNone';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    if (this.targetPosition.root.rootName == '$graveyard') {\n      return 'remove';\n    } else if (this.sourcePosition.root.rootName == '$graveyard') {\n      return 'reinsert';\n    }\n\n    return 'move';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new this.constructor(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion);\n  }\n  /**\n   * Returns the start position of the moved range after it got moved. This may be different than\n   * {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition} in some cases, i.e. when a range is moved\n   * inside the same parent but {@link module:engine/model/operation/moveoperation~MoveOperation#targetPosition targetPosition}\n   * is after {@link module:engine/model/operation/moveoperation~MoveOperation#sourcePosition sourcePosition}.\n   *\n   *\t\t vv              vv\n   *\t\tabcdefg ===> adefbcg\n   *\t\t     ^          ^\n   *\t\t     targetPos\tmovedRangeStart\n   *\t\t     offset 6\toffset 4\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  getMovedRangeStart() {\n    return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n   */\n\n\n  getReversed() {\n    const newTargetPosition = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);\n\n    return new this.constructor(this.getMovedRangeStart(), this.howMany, newTargetPosition, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const sourceElement = this.sourcePosition.parent;\n    const targetElement = this.targetPosition.parent;\n    const sourceOffset = this.sourcePosition.offset;\n    const targetOffset = this.targetPosition.offset; // Validate whether move operation has correct parameters.\n    // Validation is pretty complex but move operation is one of the core ways to manipulate the document state.\n    // We expect that many errors might be connected with one of scenarios described below.\n\n    if (sourceOffset + this.howMany > sourceElement.maxOffset) {\n      /**\n       * The nodes which should be moved do not exist.\n       *\n       * @error move-operation-nodes-do-not-exist\n       */\n      throw new CKEditorError('move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.', this);\n    } else if (sourceElement === targetElement && sourceOffset < targetOffset && targetOffset < sourceOffset + this.howMany) {\n      /**\n       * Trying to move a range of nodes into the middle of that range.\n       *\n       * @error move-operation-range-into-itself\n       */\n      throw new CKEditorError('move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.', this);\n    } else if (this.sourcePosition.root == this.targetPosition.root) {\n      if (compareArrays(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == 'prefix') {\n        const i = this.sourcePosition.path.length - 1;\n\n        if (this.targetPosition.path[i] >= sourceOffset && this.targetPosition.path[i] < sourceOffset + this.howMany) {\n          /**\n           * Trying to move a range of nodes into one of nodes from that range.\n           *\n           * @error move-operation-node-into-itself\n           */\n          throw new CKEditorError('move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.', this);\n        }\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    _move(Range._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.sourcePosition = this.sourcePosition.toJSON();\n    json.targetPosition = this.targetPosition.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'MoveOperation';\n  }\n  /**\n   * Creates `MoveOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n    const targetPosition = Position.fromJSON(json.targetPosition, document);\n    return new this(sourcePosition, json.howMany, targetPosition, json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/insertoperation\n */\nimport Operation from './operation';\nimport Position from '../position';\nimport NodeList from '../nodelist';\nimport MoveOperation from './moveoperation';\nimport { _insert, _normalizeNodes } from './utils';\nimport Text from '../text';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to insert one or more nodes at given position in the model.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class InsertOperation extends Operation {\n  /**\n   * Creates an insert operation.\n   *\n   * @param {module:engine/model/position~Position} position Position of insertion.\n   * @param {module:engine/model/node~NodeSet} nodes The list of nodes to be inserted.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(position, nodes, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position of insertion.\n     *\n     * @readonly\n     * @member {module:engine/model/position~Position} module:engine/model/operation/insertoperation~InsertOperation#position\n     */\n\n    this.position = position.clone();\n    this.position.stickiness = 'toNone';\n    /**\n     * List of nodes to insert.\n     *\n     * @readonly\n     * @member {module:engine/model/nodelist~NodeList} module:engine/model/operation/insertoperation~InsertOperation#nodeList\n     */\n\n    this.nodes = new NodeList(_normalizeNodes(nodes));\n    /**\n     * Flag deciding how the operation should be transformed. If set to `true`, nodes might get additional attributes\n     * during operational transformation. This happens when the operation insertion position is inside of a range\n     * where attributes have changed.\n     *\n     * @member {Boolean} module:engine/model/operation/insertoperation~InsertOperation#shouldReceiveAttributes\n     */\n\n    this.shouldReceiveAttributes = false;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'insert';\n  }\n  /**\n   * Total offset size of inserted nodes.\n   *\n   * @returns {Number}\n   */\n\n\n  get howMany() {\n    return this.nodes.maxOffset;\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/insertoperation~InsertOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    const nodes = new NodeList([...this.nodes].map(node => node._clone(true)));\n    const insert = new InsertOperation(this.position, nodes, this.baseVersion);\n    insert.shouldReceiveAttributes = this.shouldReceiveAttributes;\n    return insert;\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/moveoperation~MoveOperation}\n   */\n\n\n  getReversed() {\n    const graveyard = this.position.root.document.graveyard;\n    const gyPosition = new Position(graveyard, [0]);\n    return new MoveOperation(this.position, this.nodes.maxOffset, gyPosition, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const targetElement = this.position.parent;\n\n    if (!targetElement || targetElement.maxOffset < this.position.offset) {\n      /**\n       * Insertion position is invalid.\n       *\n       * @error insert-operation-position-invalid\n       */\n      throw new CKEditorError('insert-operation-position-invalid: Insertion position is invalid.', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    // What happens here is that we want original nodes be passed to writer because we want original nodes\n    // to be inserted to the model. But in InsertOperation, we want to keep those nodes as they were added\n    // to the operation, not modified. For example, text nodes can get merged or cropped while Elements can\n    // get children. It is important that InsertOperation has the copy of original nodes in intact state.\n    const originalNodes = this.nodes;\n    this.nodes = new NodeList([...originalNodes].map(node => node._clone(true)));\n\n    _insert(this.position, originalNodes);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.position = this.position.toJSON();\n    json.nodes = this.nodes.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'InsertOperation';\n  }\n  /**\n   * Creates `InsertOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/insertoperation~InsertOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    const children = [];\n\n    for (const child of json.nodes) {\n      if (child.name) {\n        // If child has name property, it is an Element.\n        children.push(Element.fromJSON(child));\n      } else {\n        // Otherwise, it is a Text node.\n        children.push(Text.fromJSON(child));\n      }\n    }\n\n    const insert = new InsertOperation(Position.fromJSON(json.position, document), children, json.baseVersion);\n    insert.shouldReceiveAttributes = json.shouldReceiveAttributes;\n    return insert;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/markeroperation\n */\nimport Operation from './operation';\nimport Range from '../range';\n/**\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class MarkerOperation extends Operation {\n  /**\n   * @param {String} name Marker name.\n   * @param {module:engine/model/range~Range} oldRange Marker range before the change.\n   * @param {module:engine/model/range~Range} newRange Marker range after the change.\n   * @param {module:engine/model/markercollection~MarkerCollection} markers Marker collection on which change should be executed.\n   * @param {Boolean} affectsData Specifies whether the marker operation affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(name, oldRange, newRange, markers, affectsData, baseVersion) {\n    super(baseVersion);\n    /**\n     * Marker name.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.name = name;\n    /**\n     * Marker range before the change.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n\n    this.oldRange = oldRange ? oldRange.clone() : null;\n    /**\n     * Marker range after the change.\n     *\n     * @readonly\n     * @member {module:engine/model/range~Range}\n     */\n\n    this.newRange = newRange ? newRange.clone() : null;\n    /**\n     * Specifies whether the marker operation affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.affectsData = affectsData;\n    /**\n     * Marker collection on which change should be executed.\n     *\n     * @private\n     * @member {module:engine/model/markercollection~MarkerCollection}\n     */\n\n    this._markers = markers;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'marker';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new MarkerOperation(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n   */\n\n\n  getReversed() {\n    return new MarkerOperation(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    const type = this.newRange ? '_set' : '_remove';\n\n    this._markers[type](this.name, this.newRange, true, this.affectsData);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n\n    if (this.oldRange) {\n      json.oldRange = this.oldRange.toJSON();\n    }\n\n    if (this.newRange) {\n      json.newRange = this.newRange.toJSON();\n    }\n\n    delete json._markers;\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'MarkerOperation';\n  }\n  /**\n   * Creates `MarkerOperation` object from deserialized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/markeroperation~MarkerOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    return new MarkerOperation(json.name, json.oldRange ? Range.fromJSON(json.oldRange, document) : null, json.newRange ? Range.fromJSON(json.newRange, document) : null, document.model.markers, json.affectsData, json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/renameoperation\n */\nimport Operation from './operation';\nimport Element from '../element';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Position from '../position';\n/**\n * Operation to change element's name.\n *\n * Using this class you can change element's name.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class RenameOperation extends Operation {\n  /**\n   * Creates an operation that changes element's name.\n   *\n   * @param {module:engine/model/position~Position} position Position before an element to change.\n   * @param {String} oldName Current name of the element.\n   * @param {String} newName New name for the element.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(position, oldName, newName, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position before an element to change.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/renameoperation~RenameOperation#position\n     */\n\n    this.position = position; // This position sticks to the next node because it is a position before the node that we want to change.\n\n    this.position.stickiness = 'toNext';\n    /**\n     * Current name of the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#oldName\n     */\n\n    this.oldName = oldName;\n    /**\n     * New name for the element.\n     *\n     * @member {String} module:engine/model/operation/renameoperation~RenameOperation#newName\n     */\n\n    this.newName = newName;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'rename';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/renameoperation~RenameOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new RenameOperation(this.position.clone(), this.oldName, this.newName, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/renameoperation~RenameOperation}\n   */\n\n\n  getReversed() {\n    return new RenameOperation(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const element = this.position.nodeAfter;\n\n    if (!(element instanceof Element)) {\n      /**\n       * Given position is invalid or node after it is not instance of Element.\n       *\n       * @error rename-operation-wrong-position\n       */\n      throw new CKEditorError('rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.', this);\n    } else if (element.name !== this.oldName) {\n      /**\n       * Element to change has different name than operation's old name.\n       *\n       * @error rename-operation-wrong-name\n       */\n      throw new CKEditorError('rename-operation-wrong-name: Element to change has different name than operation\\'s old name.', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    const element = this.position.nodeAfter;\n    element.name = this.newName;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.position = this.position.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'RenameOperation';\n  }\n  /**\n   * Creates `RenameOperation` object from deserialized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/attributeoperation~AttributeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    return new RenameOperation(Position.fromJSON(json.position, document), json.oldName, json.newName, json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/rootattributeoperation\n */\nimport Operation from './operation';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to change root element's attribute. Using this class you can add, remove or change value of the attribute.\n *\n * This operation is needed, because root elements can't be changed through\n * @link module:engine/model/operation/attributeoperation~AttributeOperation}.\n * It is because {@link module:engine/model/operation/attributeoperation~AttributeOperation}\n * requires a range to change and root element can't\n * be a part of range because every {@link module:engine/model/position~Position} has to be inside a root.\n * {@link module:engine/model/position~Position} can't be created before a root element.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class RootAttributeOperation extends Operation {\n  /**\n   * Creates an operation that changes, removes or adds attributes on root element.\n   *\n   * @see module:engine/model/operation/attributeoperation~AttributeOperation\n   * @param {module:engine/model/rootelement~RootElement} root Root element to change.\n   * @param {String} key Key of an attribute to change or remove.\n   * @param {*} oldValue Old value of the attribute with given key or `null` if adding a new attribute.\n   * @param {*} newValue New value to set for the attribute. If `null`, then the operation just removes the attribute.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(root, key, oldValue, newValue, baseVersion) {\n    super(baseVersion);\n    /**\n     * Root element to change.\n     *\n     * @readonly\n     * @member {module:engine/model/rootelement~RootElement}\n     */\n\n    this.root = root;\n    /**\n     * Key of an attribute to change or remove.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.key = key;\n    /**\n     * Old value of the attribute with given key or `null` if adding a new attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.oldValue = oldValue;\n    /**\n     * New value to set for the attribute. If `null`, then the operation just removes the attribute.\n     *\n     * @readonly\n     * @member {*}\n     */\n\n    this.newValue = newValue;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    if (this.oldValue === null) {\n      return 'addRootAttribute';\n    } else if (this.newValue === null) {\n      return 'removeRootAttribute';\n    } else {\n      return 'changeRootAttribute';\n    }\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new RootAttributeOperation(this.root, this.key, this.oldValue, this.newValue, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n   */\n\n\n  getReversed() {\n    return new RootAttributeOperation(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    if (this.root != this.root.root || this.root.is('documentFragment')) {\n      /**\n       * The element to change is not a root element.\n       *\n       * @error rootattribute-operation-not-a-root\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       * @param {*} value\n       */\n      throw new CKEditorError('rootattribute-operation-not-a-root: The element to change is not a root element.', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n\n    if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {\n      /**\n       * The attribute which should be removed does not exists for the given node.\n       *\n       * @error rootattribute-operation-wrong-old-value\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       * @param {*} value\n       */\n      throw new CKEditorError('rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation\\'s ' + 'old attribute value.', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n\n    if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {\n      /**\n       * The attribute with given key already exists for the given node.\n       *\n       * @error rootattribute-operation-attribute-exists\n       * @param {module:engine/model/rootelement~RootElement} root\n       * @param {String} key\n       */\n      throw new CKEditorError('rootattribute-operation-attribute-exists: The attribute with given key already exists.', this, {\n        root: this.root,\n        key: this.key\n      });\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    if (this.newValue !== null) {\n      this.root._setAttribute(this.key, this.newValue);\n    } else {\n      this.root._removeAttribute(this.key);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.root = this.root.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'RootAttributeOperation';\n  }\n  /**\n   * Creates RootAttributeOperation object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/rootattributeoperation~RootAttributeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    if (!document.getRoot(json.root)) {\n      /**\n       * Cannot create RootAttributeOperation for document. Root with specified name does not exist.\n       *\n       * @error rootattributeoperation-fromjson-no-root\n       * @param {String} rootName\n       */\n      throw new CKEditorError('rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.', this, {\n        rootName: json.root\n      });\n    }\n\n    return new RootAttributeOperation(document.getRoot(json.root), json.key, json.oldValue, json.newValue, json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/mergeoperation\n */\nimport Operation from './operation';\nimport SplitOperation from './splitoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _move } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to merge two {@link module:engine/model/element~Element elements}.\n *\n * The merged element is the parent of {@link ~MergeOperation#sourcePosition} and it is merged into the parent of\n * {@link ~MergeOperation#targetPosition}. All nodes from the merged element are moved to {@link ~MergeOperation#targetPosition}.\n *\n * The merged element is moved to the graveyard at {@link ~MergeOperation#graveyardPosition}.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class MergeOperation extends Operation {\n  /**\n   * Creates a merge operation.\n   *\n   * @param {module:engine/model/position~Position} sourcePosition Position inside the merged element. All nodes from that\n   * element after that position will be moved to {@link ~#targetPosition}.\n   * @param {Number} howMany Summary offset size of nodes which will be moved from the merged element to the new parent.\n   * @param {module:engine/model/position~Position} targetPosition Position which the nodes from the merged elements will be moved to.\n   * @param {module:engine/model/position~Position} graveyardPosition Position in graveyard to which the merged element will be moved.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(sourcePosition, howMany, targetPosition, graveyardPosition, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position inside the merged element. All nodes from that element after that position will be moved to {@link ~#targetPosition}.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#sourcePosition\n     */\n\n    this.sourcePosition = sourcePosition.clone(); // This is, and should always remain, the first position in its parent.\n\n    this.sourcePosition.stickiness = 'toPrevious';\n    /**\n     * Summary offset size of nodes which will be moved from the merged element to the new parent.\n     *\n     * @member {Number} module:engine/model/operation/mergeoperation~MergeOperation#howMany\n     */\n\n    this.howMany = howMany;\n    /**\n     * Position which the nodes from the merged elements will be moved to.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#targetPosition\n     */\n\n    this.targetPosition = targetPosition.clone(); // Except of a rare scenario in `MergeOperation` x `MergeOperation` transformation,\n    // this is, and should always remain, the last position in its parent.\n\n    this.targetPosition.stickiness = 'toNext';\n    /**\n     * Position in graveyard to which the merged element will be moved.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/mergeoperation~MergeOperation#graveyardPosition\n     */\n\n    this.graveyardPosition = graveyardPosition.clone();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'merge';\n  }\n  /**\n   * Position before the merged element (which will be deleted).\n   *\n   * @readonly\n   * @type {module:engine/model/position~Position}\n   */\n\n\n  get deletionPosition() {\n    return new Position(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1));\n  }\n  /**\n   * Artificial range that contains all the nodes from the merged element that will be moved to {@link ~MergeOperation#sourcePosition}.\n   * The range starts at {@link ~MergeOperation#sourcePosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n   *\n   * @readonly\n   * @type {module:engine/model/range~Range}\n   */\n\n\n  get movedRange() {\n    const end = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);\n    return new Range(this.sourcePosition, end);\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/mergeoperation~MergeOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new this.constructor(this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n   */\n\n\n  getReversed() {\n    // Positions in this method are transformed by this merge operation because the split operation bases on\n    // the context after this merge operation happened (because split operation reverses it).\n    // So we need to acknowledge that the merge operation happened and those positions changed a little.\n    const targetPosition = this.targetPosition._getTransformedByMergeOperation(this);\n\n    const path = this.sourcePosition.path.slice(0, -1);\n\n    const insertionPosition = new Position(this.sourcePosition.root, path)._getTransformedByMergeOperation(this);\n\n    const split = new SplitOperation(targetPosition, this.howMany, this.graveyardPosition, this.baseVersion + 1);\n    split.insertionPosition = insertionPosition;\n    return split;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const sourceElement = this.sourcePosition.parent;\n    const targetElement = this.targetPosition.parent; // Validate whether merge operation has correct parameters.\n\n    if (!sourceElement.parent) {\n      /**\n       * Merge source position is invalid. The element to be merged must have a parent node.\n       *\n       * @error merge-operation-source-position-invalid\n       */\n      throw new CKEditorError('merge-operation-source-position-invalid: Merge source position is invalid.', this);\n    } else if (!targetElement.parent) {\n      /**\n       * Merge target position is invalid. The element to be merged must have a parent node.\n       *\n       * @error merge-operation-target-position-invalid\n       */\n      throw new CKEditorError('merge-operation-target-position-invalid: Merge target position is invalid.', this);\n    } else if (this.howMany != sourceElement.maxOffset) {\n      /**\n       * Merge operation specifies wrong number of nodes to move.\n       *\n       * @error merge-operation-how-many-invalid\n       */\n      throw new CKEditorError('merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    const mergedElement = this.sourcePosition.parent;\n\n    const sourceRange = Range._createIn(mergedElement);\n\n    _move(sourceRange, this.targetPosition);\n\n    _move(Range._createOn(mergedElement), this.graveyardPosition);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.sourcePosition = json.sourcePosition.toJSON();\n    json.targetPosition = json.targetPosition.toJSON();\n    json.graveyardPosition = json.graveyardPosition.toJSON();\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'MergeOperation';\n  }\n  /**\n   * Creates `MergeOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    const sourcePosition = Position.fromJSON(json.sourcePosition, document);\n    const targetPosition = Position.fromJSON(json.targetPosition, document);\n    const graveyardPosition = Position.fromJSON(json.graveyardPosition, document);\n    return new this(sourcePosition, json.howMany, targetPosition, graveyardPosition, json.baseVersion);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/splitoperation\n */\nimport Operation from './operation';\nimport MergeOperation from './mergeoperation';\nimport Position from '../position';\nimport Range from '../range';\nimport { _insert, _move } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Operation to split {@link module:engine/model/element~Element an element} at given\n * {@link module:engine/model/operation/splitoperation~SplitOperation#splitPosition split position} into two elements,\n * both containing a part of the element's original content.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class SplitOperation extends Operation {\n  /**\n   * Creates a split operation.\n   *\n   * @param {module:engine/model/position~Position} splitPosition Position at which an element should be split.\n   * @param {Number} howMany Total offset size of elements that are in the split element after `position`.\n   * @param {module:engine/model/position~Position|null} graveyardPosition Position in the graveyard root before the element which\n   * should be used as a parent of the nodes after `position`. If it is not set, a copy of the the `position` parent will be used.\n   * @param {Number|null} baseVersion Document {@link module:engine/model/document~Document#version} on which operation\n   * can be applied or `null` if the operation operates on detached (non-document) tree.\n   */\n  constructor(splitPosition, howMany, graveyardPosition, baseVersion) {\n    super(baseVersion);\n    /**\n     * Position at which an element should be split.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#splitPosition\n     */\n\n    this.splitPosition = splitPosition.clone(); // Keep position sticking to the next node. This way any new content added at the place where the element is split\n    // will be left in the original element.\n\n    this.splitPosition.stickiness = 'toNext';\n    /**\n     * Total offset size of elements that are in the split element after `position`.\n     *\n     * @member {Number} module:engine/model/operation/splitoperation~SplitOperation#howMany\n     */\n\n    this.howMany = howMany;\n    /**\n     * Position at which the clone of split element (or element from graveyard) will be inserted.\n     *\n     * @member {module:engine/model/position~Position} module:engine/model/operation/splitoperation~SplitOperation#insertionPosition\n     */\n\n    this.insertionPosition = SplitOperation.getInsertionPosition(splitPosition);\n    this.insertionPosition.stickiness = 'toNone';\n    /**\n     * Position in the graveyard root before the element which should be used as a parent of the nodes after `position`.\n     * If it is not set, a copy of the the `position` parent will be used.\n     *\n     * The default behavior is to clone the split element. Element from graveyard is used during undo.\n     *\n     * @member {module:engine/model/position~Position|null} #graveyardPosition\n     */\n\n    this.graveyardPosition = graveyardPosition ? graveyardPosition.clone() : null;\n\n    if (this.graveyardPosition) {\n      this.graveyardPosition.stickiness = 'toNext';\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  get type() {\n    return 'split';\n  }\n  /**\n   * Position inside the new clone of a split element.\n   *\n   * This is a position where nodes that are after the split position will be moved to.\n   *\n   * @readonly\n   * @type {module:engine/model/position~Position}\n   */\n\n\n  get moveTargetPosition() {\n    const path = this.insertionPosition.path.slice();\n    path.push(0);\n    return new Position(this.insertionPosition.root, path);\n  }\n  /**\n   * Artificial range that contains all the nodes from the split element that will be moved to the new element.\n   * The range starts at {@link ~#splitPosition} and ends in the same parent, at `POSITIVE_INFINITY` offset.\n   *\n   * @readonly\n   * @type {module:engine/model/range~Range}\n   */\n\n\n  get movedRange() {\n    const end = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);\n    return new Range(this.splitPosition, end);\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/splitoperation~SplitOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    const split = new this.constructor(this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion);\n    split.insertionPosition = this.insertionPosition;\n    return split;\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/mergeoperation~MergeOperation}\n   */\n\n\n  getReversed() {\n    const graveyard = this.splitPosition.root.document.graveyard;\n    const graveyardPosition = new Position(graveyard, [0]);\n    return new MergeOperation(this.moveTargetPosition, this.howMany, this.splitPosition, graveyardPosition, this.baseVersion + 1);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _validate() {\n    const element = this.splitPosition.parent;\n    const offset = this.splitPosition.offset; // Validate whether split operation has correct parameters.\n\n    if (!element || element.maxOffset < offset) {\n      /**\n       * Split position is invalid.\n       *\n       * @error split-operation-position-invalid\n       */\n      throw new CKEditorError('split-operation-position-invalid: Split position is invalid.', this);\n    } else if (!element.parent) {\n      /**\n       * Cannot split root element.\n       *\n       * @error split-operation-split-in-root\n       */\n      throw new CKEditorError('split-operation-split-in-root: Cannot split root element.', this);\n    } else if (this.howMany != element.maxOffset - this.splitPosition.offset) {\n      /**\n       * Split operation specifies wrong number of nodes to move.\n       *\n       * @error split-operation-how-many-invalid\n       */\n      throw new CKEditorError('split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.', this);\n    } else if (this.graveyardPosition && !this.graveyardPosition.nodeAfter) {\n      /**\n       * Graveyard position invalid.\n       *\n       * @error split-operation-graveyard-position-invalid\n       */\n      throw new CKEditorError('split-operation-graveyard-position-invalid: Graveyard position invalid.', this);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  _execute() {\n    const splitElement = this.splitPosition.parent;\n\n    if (this.graveyardPosition) {\n      _move(Range._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition);\n    } else {\n      const newElement = splitElement._clone();\n\n      _insert(this.insertionPosition, newElement);\n    }\n\n    const sourceRange = new Range(Position._createAt(splitElement, this.splitPosition.offset), Position._createAt(splitElement, splitElement.maxOffset));\n\n    _move(sourceRange, this.moveTargetPosition);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  toJSON() {\n    const json = super.toJSON();\n    json.splitPosition = this.splitPosition.toJSON();\n    json.insertionPosition = this.insertionPosition.toJSON();\n\n    if (this.graveyardPosition) {\n      json.graveyardPosition = this.graveyardPosition.toJSON();\n    }\n\n    return json;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'SplitOperation';\n  }\n  /**\n   * Helper function that returns a default insertion position basing on given `splitPosition`. The default insertion\n   * position is after the split element.\n   *\n   * @param {module:engine/model/position~Position} splitPosition\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  static getInsertionPosition(splitPosition) {\n    const path = splitPosition.path.slice(0, -1);\n    path[path.length - 1]++;\n    return new Position(splitPosition.root, path);\n  }\n  /**\n   * Creates `SplitOperation` object from deserilized object, i.e. from parsed JSON string.\n   *\n   * @param {Object} json Deserialized JSON object.\n   * @param {module:engine/model/document~Document} document Document on which this operation will be applied.\n   * @returns {module:engine/model/operation/splitoperation~SplitOperation}\n   */\n\n\n  static fromJSON(json, document) {\n    const splitPosition = Position.fromJSON(json.splitPosition, document);\n    const insertionPosition = Position.fromJSON(json.insertionPosition, document);\n    const graveyardPosition = json.graveyardPosition ? Position.fromJSON(json.graveyardPosition, document) : null;\n    const split = new this(splitPosition, json.howMany, graveyardPosition, json.baseVersion);\n    split.insertionPosition = insertionPosition;\n    return split;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/rootelement\n */\nimport Element from './element';\n/**\n * Type of {@link module:engine/model/element~Element} that is a root of a model tree.\n * @extends module:engine/model/element~Element\n */\n\nexport default class RootElement extends Element {\n  /**\n   * Creates root element.\n   *\n   * @param {module:engine/model/document~Document} doc Document that is an owner of this root.\n   * @param {String} name Node name.\n   * @param {String} [rootName='main'] Unique root name used to identify this root\n   * element by {@link module:engine/model/document~Document}.\n   */\n  constructor(doc, name, rootName = 'main') {\n    super(name);\n    /**\n     * Document that is an owner of this root.\n     *\n     * @private\n     * @member {module:engine/model/document~Document}\n     */\n\n    this._doc = doc;\n    /**\n     * Unique root name used to identify this root element by {@link module:engine/model/document~Document}.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.rootName = rootName;\n  }\n  /**\n   * {@link module:engine/model/document~Document Document} that owns this root element.\n   *\n   * In contrary, to {@link module:engine/model/node~Node node}, root element always have a `document`.\n   *\n   * @readonly\n   * @type {module:engine/model/document~Document|null}\n   */\n\n\n  get document() {\n    return this._doc;\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\trootElement.is( 'rootElement' ); // -> true\n   *\t\trootElement.is( 'element' ); // -> true\n   *\t\trootElement.is( 'node' ); // -> true\n   *\t\trootElement.is( 'model:rootElement' ); // -> true\n   *\t\trootElement.is( 'model:element' ); // -> true\n   *\t\trootElement.is( 'model:node' ); // -> true\n   *\n   *\t\trootElement.is( 'view:element' ); // -> false\n   *\t\trootElement.is( 'documentFragment' ); // -> false\n   *\n   * Assuming that the object being checked is an element, you can also check its\n   * {@link module:engine/model/element~Element#name name}:\n   *\n   *\t\trootElement.is( '$root' ); // -> true if this is a $root element\n   *\t\trootElement.is( 'rootElement', '$root' ); // -> same as above\n   *\t\ttext.is( '$root' ); -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type Type to check when `name` parameter is present.\n   * Otherwise, it acts like the `name` parameter.\n   * @param {String} [name] Element name.\n   * @returns {Boolean}\n   */\n\n\n  is(type, name) {\n    const cutType = type.replace('model:', '');\n\n    if (!name) {\n      return cutType == 'rootElement' || super.is(type);\n    } else {\n      return cutType == 'rootElement' && name == this.name || super.is(type, name);\n    }\n  }\n  /**\n   * Converts `RootElement` instance to `String` containing it's name.\n   *\n   * @returns {String} `RootElement` instance converted to `String`.\n   */\n\n\n  toJSON() {\n    return this.rootName;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/writer\n */\nimport AttributeOperation from './operation/attributeoperation';\nimport DetachOperation from './operation/detachoperation';\nimport InsertOperation from './operation/insertoperation';\nimport MarkerOperation from './operation/markeroperation';\nimport MoveOperation from './operation/moveoperation';\nimport RenameOperation from './operation/renameoperation';\nimport RootAttributeOperation from './operation/rootattributeoperation';\nimport SplitOperation from './operation/splitoperation';\nimport MergeOperation from './operation/mergeoperation';\nimport DocumentFragment from './documentfragment';\nimport Text from './text';\nimport Element from './element';\nimport RootElement from './rootelement';\nimport Position from './position';\nimport Range from './range.js';\nimport DocumentSelection from './documentselection';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The model can only be modified by using the writer. It should be used whenever you want to create a node, modify\n * child nodes, attributes or text, set the selection's position and its attributes.\n *\n * The instance of the writer is only available in the {@link module:engine/model/model~Model#change `change()`} or\n * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`}.\n *\n *\t\tmodel.change( writer => {\n *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n *\t\t} );\n *\n * Note that the writer should never be stored and used outside of the `change()` and\n * `enqueueChange()` blocks.\n *\n * Note that writer's methods do not check the {@link module:engine/model/schema~Schema}. It is possible\n * to create incorrect model structures by using the writer. Read more about in\n * {@glink framework/guides/deep-dive/schema#who-checks-the-schema \"Who checks the schema?\"}.\n *\n * @see module:engine/model/model~Model#change\n * @see module:engine/model/model~Model#enqueueChange\n */\n\nexport default class Writer {\n  /**\n   * Creates a writer instance.\n   *\n   * **Note:** It is not recommended to use it directly. Use {@link module:engine/model/model~Model#change `Model#change()`} or\n   * {@link module:engine/model/model~Model#enqueueChange `Model#enqueueChange()`} instead.\n   *\n   * @protected\n   * @param {module:engine/model/model~Model} model\n   * @param {module:engine/model/batch~Batch} batch\n   */\n  constructor(model, batch) {\n    /**\n     * Instance of the model on which this writer operates.\n     *\n     * @readonly\n     * @type {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * The batch to which this writer will add changes.\n     *\n     * @readonly\n     * @type {module:engine/model/batch~Batch}\n     */\n\n    this.batch = batch;\n  }\n  /**\n   * Creates a new {@link module:engine/model/text~Text text node}.\n   *\n   *\t\twriter.createText( 'foo' );\n   *\t\twriter.createText( 'foo', { bold: true } );\n   *\n   * @param {String} data Text data.\n   * @param {Object} [attributes] Text attributes.\n   * @returns {module:engine/model/text~Text} Created text node.\n   */\n\n\n  createText(data, attributes) {\n    return new Text(data, attributes);\n  }\n  /**\n   * Creates a new {@link module:engine/model/element~Element element}.\n   *\n   *\t\twriter.createElement( 'paragraph' );\n   *\t\twriter.createElement( 'paragraph', { alignment: 'center' } );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @returns {module:engine/model/element~Element} Created element.\n   */\n\n\n  createElement(name, attributes) {\n    return new Element(name, attributes);\n  }\n  /**\n   * Creates a new {@link module:engine/model/documentfragment~DocumentFragment document fragment}.\n   *\n   * @returns {module:engine/model/documentfragment~DocumentFragment} Created document fragment.\n   */\n\n\n  createDocumentFragment() {\n    return new DocumentFragment();\n  }\n  /**\n   * Inserts item on given position.\n   *\n   *\t\tconst paragraph = writer.createElement( 'paragraph' );\n   *\t\twriter.insert( paragraph, position );\n   *\n   * Instead of using position you can use parent and offset:\n   *\n   *\t\tconst text = writer.createText( 'foo' );\n   *\t\twriter.insert( text, paragraph, 5 );\n   *\n   * You can also use `end` instead of the offset to insert at the end:\n   *\n   *\t\tconst text = writer.createText( 'foo' );\n   *\t\twriter.insert( text, paragraph, 'end' );\n   *\n   * Or insert before or after another element:\n   *\n   *\t\tconst paragraph = writer.createElement( 'paragraph' );\n   *\t\twriter.insert( paragraph, anotherParagraph, 'after' );\n   *\n   * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n   *\n   * Note that if the item already has parent it will be removed from the previous parent.\n   *\n   * Note that you cannot re-insert a node from a document to a different document or a document fragment. In this case,\n   * `model-writer-insert-forbidden-move` is thrown.\n   *\n   * If you want to move {@link module:engine/model/range~Range range} instead of an\n   * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n   *\n   * **Note:** For a paste-like content insertion mechanism see\n   * {@link module:engine/model/model~Model#insertContent `model.insertContent()`}.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment} item Item or document\n   * fragment to insert.\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * second parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  insert(item, itemOrPosition, offset = 0) {\n    this._assertWriterUsedCorrectly();\n\n    if (item instanceof Text && item.data == '') {\n      return;\n    }\n\n    const position = Position._createAt(itemOrPosition, offset); // If item has a parent already.\n\n\n    if (item.parent) {\n      // We need to check if item is going to be inserted within the same document.\n      if (isSameTree(item.root, position.root)) {\n        // If it's we just need to move it.\n        this.move(Range._createOn(item), position);\n        return;\n      } // If it isn't the same root.\n      else {\n          if (item.root.document) {\n            /**\n             * Cannot move a node from a document to a different tree.\n             * It is forbidden to move a node that was already in a document outside of it.\n             *\n             * @error model-writer-insert-forbidden-move\n             */\n            throw new CKEditorError('model-writer-insert-forbidden-move: ' + 'Cannot move a node from a document to a different tree. ' + 'It is forbidden to move a node that was already in a document outside of it.', this);\n          } else {\n            // Move between two different document fragments or from document fragment to a document is possible.\n            // In that case, remove the item from it's original parent.\n            this.remove(item);\n          }\n        }\n    }\n\n    const version = position.root.document ? position.root.document.version : null;\n    const insert = new InsertOperation(position, item, version);\n\n    if (item instanceof Text) {\n      insert.shouldReceiveAttributes = true;\n    }\n\n    this.batch.addOperation(insert);\n    this.model.applyOperation(insert); // When element is a DocumentFragment we need to move its markers to Document#markers.\n\n    if (item instanceof DocumentFragment) {\n      for (const [markerName, markerRange] of item.markers) {\n        // We need to migrate marker range from DocumentFragment to Document.\n        const rangeRootPosition = Position._createAt(markerRange.root, 0);\n\n        const range = new Range(markerRange.start._getCombined(rangeRootPosition, position), markerRange.end._getCombined(rangeRootPosition, position));\n        const options = {\n          range,\n          usingOperation: true,\n          affectsData: true\n        };\n\n        if (this.model.markers.has(markerName)) {\n          this.updateMarker(markerName, options);\n        } else {\n          this.addMarker(markerName, options);\n        }\n      }\n    }\n  }\n  /**\n   * Creates and inserts text on given position. You can optionally set text attributes:\n   *\n   *\t\twriter.insertText( 'foo', position );\n   *\t\twriter.insertText( 'foo', { bold: true }, position );\n   *\n   * Instead of using position you can use parent and offset or define that text should be inserted at the end\n   * or before or after other node:\n   *\n   *\t\t// Inserts 'foo' in paragraph, at offset 5:\n   *\t\twriter.insertText( 'foo', paragraph, 5 );\n   *\t\t// Inserts 'foo' at the end of a paragraph:\n   *\t\twriter.insertText( 'foo', paragraph, 'end' );\n   *\t\t// Inserts 'foo' after an image:\n   *\t\twriter.insertText( 'foo', image, 'after' );\n   *\n   * These parameters work in the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n   *\n   * @param {String} data Text data.\n   * @param {Object} [attributes] Text attributes.\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * third parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  insertText(text, attributes, itemOrPosition, offset) {\n    if (attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position) {\n      this.insert(this.createText(text), attributes, itemOrPosition);\n    } else {\n      this.insert(this.createText(text, attributes), itemOrPosition, offset);\n    }\n  }\n  /**\n   * Creates and inserts element on given position. You can optionally set attributes:\n   *\n   *\t\twriter.insertElement( 'paragraph', position );\n   *\t\twriter.insertElement( 'paragraph', { alignment: 'center' }, position );\n   *\n   * Instead of using position you can use parent and offset or define that text should be inserted at the end\n   * or before or after other node:\n   *\n   *\t\t// Inserts paragraph in the root at offset 5:\n   *\t\twriter.insertElement( 'paragraph', root, 5 );\n   *\t\t// Inserts paragraph at the end of a blockquote:\n   *\t\twriter.insertElement( 'paragraph', blockquote, 'end' );\n   *\t\t// Inserts after an image:\n   *\t\twriter.insertElement( 'paragraph', image, 'after' );\n   *\n   * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * third parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  insertElement(name, attributes, itemOrPosition, offset) {\n    if (attributes instanceof DocumentFragment || attributes instanceof Element || attributes instanceof Position) {\n      this.insert(this.createElement(name), attributes, itemOrPosition);\n    } else {\n      this.insert(this.createElement(name, attributes), itemOrPosition, offset);\n    }\n  }\n  /**\n   * Inserts item at the end of the given parent.\n   *\n   *\t\tconst paragraph = writer.createElement( 'paragraph' );\n   *\t\twriter.append( paragraph, root );\n   *\n   * Note that if the item already has parent it will be removed from the previous parent.\n   *\n   * If you want to move {@link module:engine/model/range~Range range} instead of an\n   * {@link module:engine/model/item~Item item} use {@link module:engine/model/writer~Writer#move `Writer#move()`}.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/documentfragment~DocumentFragment}\n   * item Item or document fragment to insert.\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n   */\n\n\n  append(item, parent) {\n    this.insert(item, parent, 'end');\n  }\n  /**\n   * Creates text node and inserts it at the end of the parent. You can optionally set text attributes:\n   *\n   *\t\twriter.appendText( 'foo', paragraph );\n   *\t\twriter.appendText( 'foo', { bold: true }, paragraph );\n   *\n   * @param {String} text Text data.\n   * @param {Object} [attributes] Text attributes.\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n   */\n\n\n  appendText(text, attributes, parent) {\n    if (attributes instanceof DocumentFragment || attributes instanceof Element) {\n      this.insert(this.createText(text), attributes, 'end');\n    } else {\n      this.insert(this.createText(text, attributes), parent, 'end');\n    }\n  }\n  /**\n   * Creates element and inserts it at the end of the parent. You can optionally set attributes:\n   *\n   *\t\twriter.appendElement( 'paragraph', root );\n   *\t\twriter.appendElement( 'paragraph', { alignment: 'center' }, root );\n   *\n   * @param {String} name Name of the element.\n   * @param {Object} [attributes] Elements attributes.\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} parent\n   */\n\n\n  appendElement(name, attributes, parent) {\n    if (attributes instanceof DocumentFragment || attributes instanceof Element) {\n      this.insert(this.createElement(name), attributes, 'end');\n    } else {\n      this.insert(this.createElement(name, attributes), parent, 'end');\n    }\n  }\n  /**\n   * Sets value of the attribute with given key on a {@link module:engine/model/item~Item model item}\n   * or on a {@link module:engine/model/range~Range range}.\n   *\n   * @param {String} key Attribute key.\n   * @param {*} value Attribute new value.\n   * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n   * Model item or range on which the attribute will be set.\n   */\n\n\n  setAttribute(key, value, itemOrRange) {\n    this._assertWriterUsedCorrectly();\n\n    if (itemOrRange instanceof Range) {\n      const ranges = itemOrRange.getMinimalFlatRanges();\n\n      for (const range of ranges) {\n        setAttributeOnRange(this, key, value, range);\n      }\n    } else {\n      setAttributeOnItem(this, key, value, itemOrRange);\n    }\n  }\n  /**\n   * Sets values of attributes on a {@link module:engine/model/item~Item model item}\n   * or on a {@link module:engine/model/range~Range range}.\n   *\n   *\t\twriter.setAttributes( {\n   *\t\t\tbold: true,\n   *\t\t\titalic: true\n   *\t\t}, range );\n   *\n   * @param {Object} attributes Attributes keys and values.\n   * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n   * Model item or range on which the attributes will be set.\n   */\n\n\n  setAttributes(attributes, itemOrRange) {\n    for (const [key, val] of toMap(attributes)) {\n      this.setAttribute(key, val, itemOrRange);\n    }\n  }\n  /**\n   * Removes an attribute with given key from a {@link module:engine/model/item~Item model item}\n   * or from a {@link module:engine/model/range~Range range}.\n   *\n   * @param {String} key Attribute key.\n   * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n   * Model item or range from which the attribute will be removed.\n   */\n\n\n  removeAttribute(key, itemOrRange) {\n    this._assertWriterUsedCorrectly();\n\n    if (itemOrRange instanceof Range) {\n      const ranges = itemOrRange.getMinimalFlatRanges();\n\n      for (const range of ranges) {\n        setAttributeOnRange(this, key, null, range);\n      }\n    } else {\n      setAttributeOnItem(this, key, null, itemOrRange);\n    }\n  }\n  /**\n   * Removes all attributes from all elements in the range or from the given item.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange\n   * Model item or range from which all attributes will be removed.\n   */\n\n\n  clearAttributes(itemOrRange) {\n    this._assertWriterUsedCorrectly();\n\n    const removeAttributesFromItem = item => {\n      for (const attribute of item.getAttributeKeys()) {\n        this.removeAttribute(attribute, item);\n      }\n    };\n\n    if (!(itemOrRange instanceof Range)) {\n      removeAttributesFromItem(itemOrRange);\n    } else {\n      for (const item of itemOrRange.getItems()) {\n        removeAttributesFromItem(item);\n      }\n    }\n  }\n  /**\n   * Moves all items in the source range to the target position.\n   *\n   *\t\twriter.move( sourceRange, targetPosition );\n   *\n   * Instead of the target position you can use parent and offset or define that range should be moved to the end\n   * or before or after chosen item:\n   *\n   *\t\t// Moves all items in the range to the paragraph at offset 5:\n   *\t\twriter.move( sourceRange, paragraph, 5 );\n   *\t\t// Moves all items in the range to the end of a blockquote:\n   *\t\twriter.move( sourceRange, blockquote, 'end' );\n   *\t\t// Moves all items in the range to a position after an image:\n   *\t\twriter.move( sourceRange, image, 'after' );\n   *\n   * These parameters works the same way as {@link #createPositionAt `writer.createPositionAt()`}.\n   *\n   * Note that items can be moved only within the same tree. It means that you can move items within the same root\n   * (element or document fragment) or between {@link module:engine/model/document~Document#roots documents roots},\n   * but you can not move items from document fragment to the document or from one detached element to another. Use\n   * {@link module:engine/model/writer~Writer#insert} in such cases.\n   *\n   * @param {module:engine/model/range~Range} range Source range.\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * second parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  move(range, itemOrPosition, offset) {\n    this._assertWriterUsedCorrectly();\n\n    if (!(range instanceof Range)) {\n      /**\n       * Invalid range to move.\n       *\n       * @error writer-move-invalid-range\n       */\n      throw new CKEditorError('writer-move-invalid-range: Invalid range to move.', this);\n    }\n\n    if (!range.isFlat) {\n      /**\n       * Range to move is not flat.\n       *\n       * @error writer-move-range-not-flat\n       */\n      throw new CKEditorError('writer-move-range-not-flat: Range to move is not flat.', this);\n    }\n\n    const position = Position._createAt(itemOrPosition, offset); // Do not move anything if the move target is same as moved range start.\n\n\n    if (position.isEqual(range.start)) {\n      return;\n    } // If part of the marker is removed, create additional marker operation for undo purposes.\n\n\n    this._addOperationForAffectedMarkers('move', range);\n\n    if (!isSameTree(range.root, position.root)) {\n      /**\n       * Range is going to be moved within not the same document. Please use\n       * {@link module:engine/model/writer~Writer#insert insert} instead.\n       *\n       * @error writer-move-different-document\n       */\n      throw new CKEditorError('writer-move-different-document: Range is going to be moved between different documents.', this);\n    }\n\n    const version = range.root.document ? range.root.document.version : null;\n    const operation = new MoveOperation(range.start, range.end.offset - range.start.offset, position, version);\n    this.batch.addOperation(operation);\n    this.model.applyOperation(operation);\n  }\n  /**\n   * Removes given model {@link module:engine/model/item~Item item} or {@link module:engine/model/range~Range range}.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/range~Range} itemOrRange Model item or range to remove.\n   */\n\n\n  remove(itemOrRange) {\n    this._assertWriterUsedCorrectly();\n\n    const rangeToRemove = itemOrRange instanceof Range ? itemOrRange : Range._createOn(itemOrRange);\n    const ranges = rangeToRemove.getMinimalFlatRanges().reverse();\n\n    for (const flat of ranges) {\n      // If part of the marker is removed, create additional marker operation for undo purposes.\n      this._addOperationForAffectedMarkers('move', flat);\n\n      applyRemoveOperation(flat.start, flat.end.offset - flat.start.offset, this.batch, this.model);\n    }\n  }\n  /**\n   * Merges two siblings at the given position.\n   *\n   * Node before and after the position have to be an element. Otherwise `writer-merge-no-element-before` or\n   * `writer-merge-no-element-after` error will be thrown.\n   *\n   * @param {module:engine/model/position~Position} position Position between merged elements.\n   */\n\n\n  merge(position) {\n    this._assertWriterUsedCorrectly();\n\n    const nodeBefore = position.nodeBefore;\n    const nodeAfter = position.nodeAfter; // If part of the marker is removed, create additional marker operation for undo purposes.\n\n    this._addOperationForAffectedMarkers('merge', position);\n\n    if (!(nodeBefore instanceof Element)) {\n      /**\n       * Node before merge position must be an element.\n       *\n       * @error writer-merge-no-element-before\n       */\n      throw new CKEditorError('writer-merge-no-element-before: Node before merge position must be an element.', this);\n    }\n\n    if (!(nodeAfter instanceof Element)) {\n      /**\n       * Node after merge position must be an element.\n       *\n       * @error writer-merge-no-element-after\n       */\n      throw new CKEditorError('writer-merge-no-element-after: Node after merge position must be an element.', this);\n    }\n\n    if (!position.root.document) {\n      this._mergeDetached(position);\n    } else {\n      this._merge(position);\n    }\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createPositionFromPath `Model#createPositionFromPath()`}.\n   *\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n   * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n   * See {@link module:engine/model/position~PositionStickiness}.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionFromPath(root, path, stickiness) {\n    return this.model.createPositionFromPath(root, path, stickiness);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createPositionAt `Model#createPositionAt()`}.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionAt(itemOrPosition, offset) {\n    return this.model.createPositionAt(itemOrPosition, offset);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createPositionAfter `Model#createPositionAfter()`}.\n   *\n   * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionAfter(item) {\n    return this.model.createPositionAfter(item);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createPositionBefore `Model#createPositionBefore()`}.\n   *\n   * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionBefore(item) {\n    return this.model.createPositionBefore(item);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createRange `Model#createRange()`}.\n   *\n   * @param {module:engine/model/position~Position} start Start position.\n   * @param {module:engine/model/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  createRange(start, end) {\n    return this.model.createRange(start, end);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createRangeIn `Model#createRangeIn()`}.\n   *\n   * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  createRangeIn(element) {\n    return this.model.createRangeIn(element);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createRangeOn `Model#createRangeOn()`}.\n   *\n   * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  createRangeOn(element) {\n    return this.model.createRangeOn(element);\n  }\n  /**\n   * Shortcut for {@link module:engine/model/model~Model#createSelection `Model#createSelection()`}.\n   *\n   * @param {module:engine/model/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @returns {module:engine/model/selection~Selection}\n   */\n\n\n  createSelection(selectable, placeOrOffset, options) {\n    return this.model.createSelection(selectable, placeOrOffset, options);\n  }\n  /**\n   * Performs merge action in a detached tree.\n   *\n   * @private\n   * @param {module:engine/model/position~Position} position Position between merged elements.\n   */\n\n\n  _mergeDetached(position) {\n    const nodeBefore = position.nodeBefore;\n    const nodeAfter = position.nodeAfter;\n    this.move(Range._createIn(nodeAfter), Position._createAt(nodeBefore, 'end'));\n    this.remove(nodeAfter);\n  }\n  /**\n   * Performs merge action in a non-detached tree.\n   *\n   * @private\n   * @param {module:engine/model/position~Position} position Position between merged elements.\n   */\n\n\n  _merge(position) {\n    const targetPosition = Position._createAt(position.nodeBefore, 'end');\n\n    const sourcePosition = Position._createAt(position.nodeAfter, 0);\n\n    const graveyard = position.root.document.graveyard;\n    const graveyardPosition = new Position(graveyard, [0]);\n    const version = position.root.document.version;\n    const merge = new MergeOperation(sourcePosition, position.nodeAfter.maxOffset, targetPosition, graveyardPosition, version);\n    this.batch.addOperation(merge);\n    this.model.applyOperation(merge);\n  }\n  /**\n   * Renames the given element.\n   *\n   * @param {module:engine/model/element~Element} element The element to rename.\n   * @param {String} newName New element name.\n   */\n\n\n  rename(element, newName) {\n    this._assertWriterUsedCorrectly();\n\n    if (!(element instanceof Element)) {\n      /**\n       * Trying to rename an object which is not an instance of Element.\n       *\n       * @error writer-rename-not-element-instance\n       */\n      throw new CKEditorError('writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.', this);\n    }\n\n    const version = element.root.document ? element.root.document.version : null;\n    const renameOperation = new RenameOperation(Position._createBefore(element), element.name, newName, version);\n    this.batch.addOperation(renameOperation);\n    this.model.applyOperation(renameOperation);\n  }\n  /**\n   * Splits elements starting from the given position and going to the top of the model tree as long as given\n   * `limitElement` is reached. When `limitElement` is not defined then only the parent of the given position will be split.\n   *\n   * The element needs to have a parent. It cannot be a root element nor a document fragment.\n   * The `writer-split-element-no-parent` error will be thrown if you try to split an element with no parent.\n   *\n   * @param {module:engine/model/position~Position} position Position of split.\n   * @param {module:engine/model/node~Node} [limitElement] Stop splitting when this element will be reached.\n   * @returns {Object} result Split result.\n   * @returns {module:engine/model/position~Position} result.position Position between split elements.\n   * @returns {module:engine/model/range~Range} result.range Range that stars from the end of the first split element and ends\n   * at the beginning of the first copy element.\n   */\n\n\n  split(position, limitElement) {\n    this._assertWriterUsedCorrectly();\n\n    let splitElement = position.parent;\n\n    if (!splitElement.parent) {\n      /**\n       * Element with no parent can not be split.\n       *\n       * @error writer-split-element-no-parent\n       */\n      throw new CKEditorError('writer-split-element-no-parent: Element with no parent can not be split.', this);\n    } // When limit element is not defined lets set splitElement parent as limit.\n\n\n    if (!limitElement) {\n      limitElement = splitElement.parent;\n    }\n\n    if (!position.parent.getAncestors({\n      includeSelf: true\n    }).includes(limitElement)) {\n      throw new CKEditorError('writer-split-invalid-limit-element: Limit element is not a position ancestor.', this);\n    } // We need to cache elements that will be created as a result of the first split because\n    // we need to create a range from the end of the first split element to the beginning of the\n    // first copy element. This should be handled by LiveRange but it doesn't work on detached nodes.\n\n\n    let firstSplitElement, firstCopyElement;\n\n    do {\n      const version = splitElement.root.document ? splitElement.root.document.version : null;\n      const howMany = splitElement.maxOffset - position.offset;\n      const split = new SplitOperation(position, howMany, null, version);\n      this.batch.addOperation(split);\n      this.model.applyOperation(split); // Cache result of the first split.\n\n      if (!firstSplitElement && !firstCopyElement) {\n        firstSplitElement = splitElement;\n        firstCopyElement = position.parent.nextSibling;\n      }\n\n      position = this.createPositionAfter(position.parent);\n      splitElement = position.parent;\n    } while (splitElement !== limitElement);\n\n    return {\n      position,\n      range: new Range(Position._createAt(firstSplitElement, 'end'), Position._createAt(firstCopyElement, 0))\n    };\n  }\n  /**\n   * Wraps the given range with the given element or with a new element (if a string was passed).\n   *\n   * **Note:** range to wrap should be a \"flat range\" (see {@link module:engine/model/range~Range#isFlat `Range#isFlat`}).\n   * If not, an error will be thrown.\n   *\n   * @param {module:engine/model/range~Range} range Range to wrap.\n   * @param {module:engine/model/element~Element|String} elementOrString Element or name of element to wrap the range with.\n   */\n\n\n  wrap(range, elementOrString) {\n    this._assertWriterUsedCorrectly();\n\n    if (!range.isFlat) {\n      /**\n       * Range to wrap is not flat.\n       *\n       * @error writer-wrap-range-not-flat\n       */\n      throw new CKEditorError('writer-wrap-range-not-flat: Range to wrap is not flat.', this);\n    }\n\n    const element = elementOrString instanceof Element ? elementOrString : new Element(elementOrString);\n\n    if (element.childCount > 0) {\n      /**\n       * Element to wrap with is not empty.\n       *\n       * @error writer-wrap-element-not-empty\n       */\n      throw new CKEditorError('writer-wrap-element-not-empty: Element to wrap with is not empty.', this);\n    }\n\n    if (element.parent !== null) {\n      /**\n       * Element to wrap with is already attached to a tree model.\n       *\n       * @error writer-wrap-element-attached\n       */\n      throw new CKEditorError('writer-wrap-element-attached: Element to wrap with is already attached to tree model.', this);\n    }\n\n    this.insert(element, range.start); // Shift the range-to-wrap because we just inserted an element before that range.\n\n    const shiftedRange = new Range(range.start.getShiftedBy(1), range.end.getShiftedBy(1));\n    this.move(shiftedRange, Position._createAt(element, 0));\n  }\n  /**\n   * Unwraps children of the given element – all its children are moved before it and then the element is removed.\n   * Throws error if you try to unwrap an element which does not have a parent.\n   *\n   * @param {module:engine/model/element~Element} element Element to unwrap.\n   */\n\n\n  unwrap(element) {\n    this._assertWriterUsedCorrectly();\n\n    if (element.parent === null) {\n      /**\n       * Trying to unwrap an element which has no parent.\n       *\n       * @error writer-unwrap-element-no-parent\n       */\n      throw new CKEditorError('writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.', this);\n    }\n\n    this.move(Range._createIn(element), this.createPositionAfter(element));\n    this.remove(element);\n  }\n  /**\n   * Adds a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n   * changes in the document and updates its range automatically, when model tree changes.\n   *\n   * As the first parameter you can set marker name.\n   *\n   * The required `options.usingOperation` parameter lets you decide if the marker should be managed by operations or not. See\n   * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n   * markers managed by operations and not-managed by operations.\n   *\n   * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n   * `true` when the marker change changes the data returned by the\n   * {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n   * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n   * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n   *\n   * Create marker directly base on marker's name:\n   *\n   *\t\taddMarker( markerName, { range, usingOperation: false } );\n   *\n   * Create marker using operation:\n   *\n   *\t\taddMarker( markerName, { range, usingOperation: true } );\n   *\n   * Create marker that affects the editor data:\n   *\n   *\t\taddMarker( markerName, { range, usingOperation: false, affectsData: true } );\n   *\n   * Note: For efficiency reasons, it's best to create and keep as little markers as possible.\n   *\n   * @see module:engine/model/markercollection~Marker\n   * @param {String} name Name of a marker to create - must be unique.\n   * @param {Object} options\n   * @param {Boolean} options.usingOperation Flag indicating that the marker should be added by MarkerOperation.\n   * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n   * @param {module:engine/model/range~Range} options.range Marker range.\n   * @param {Boolean} [options.affectsData=false] Flag indicating that the marker changes the editor data.\n   * @returns {module:engine/model/markercollection~Marker} Marker that was set.\n   */\n\n\n  addMarker(name, options) {\n    this._assertWriterUsedCorrectly();\n\n    if (!options || typeof options.usingOperation != 'boolean') {\n      /**\n       * The `options.usingOperation` parameter is required when adding a new marker.\n       *\n       * @error writer-addMarker-no-usingOperation\n       */\n      throw new CKEditorError('writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.', this);\n    }\n\n    const usingOperation = options.usingOperation;\n    const range = options.range;\n    const affectsData = options.affectsData === undefined ? false : options.affectsData;\n\n    if (this.model.markers.has(name)) {\n      /**\n       * Marker with provided name already exists.\n       *\n       * @error writer-addMarker-marker-exists\n       */\n      throw new CKEditorError('writer-addMarker-marker-exists: Marker with provided name already exists.', this);\n    }\n\n    if (!range) {\n      /**\n       * Range parameter is required when adding a new marker.\n       *\n       * @error writer-addMarker-no-range\n       */\n      throw new CKEditorError('writer-addMarker-no-range: Range parameter is required when adding a new marker.', this);\n    }\n\n    if (!usingOperation) {\n      return this.model.markers._set(name, range, usingOperation, affectsData);\n    }\n\n    applyMarkerOperation(this, name, null, range, affectsData);\n    return this.model.markers.get(name);\n  }\n  /**\n   * Adds, updates or refreshes a {@link module:engine/model/markercollection~Marker marker}. Marker is a named range, which tracks\n   * changes in the document and updates its range automatically, when model tree changes. Still, it is possible to change the\n   * marker's range directly using this method.\n   *\n   * As the first parameter you can set marker name or instance. If none of them is provided, new marker, with a unique\n   * name is created and returned.\n   *\n   * As the second parameter you can set the new marker data or leave this parameter as empty which will just refresh\n   * the marker by triggering downcast conversion for it. Refreshing the marker is useful when you want to change\n   * the marker {@link module:engine/view/element~Element view element} without changing any marker data.\n   *\n   * \t\tlet isCommentActive = false;\n   *\n   * \t\tmodel.conversion.markerToHighlight( {\n   * \t\t\tmodel: 'comment',\n   *\t\t\tview: data => {\n   *\t\t\t\tconst classes = [ 'comment-marker' ];\n   *\n   *\t\t\t\tif ( isCommentActive ) {\n   *\t\t\t\t\tclasses.push( 'comment-marker--active' );\n   *\t\t\t\t}\n   *\n   *\t\t\t\treturn { classes };\n   *\t\t\t}\n   * \t\t} );\n   *\n   * \t\t// Change the property that indicates if marker is displayed as active or not.\n   * \t\tisCommentActive = true;\n   *\n   * \t\t// And refresh the marker to convert it with additional class.\n   * \t\tmodel.change( writer => writer.updateMarker( 'comment' ) );\n   *\n   * The `options.usingOperation` parameter lets you change if the marker should be managed by operations or not. See\n   * {@link module:engine/model/markercollection~Marker marker class description} to learn about the difference between\n   * markers managed by operations and not-managed by operations. It is possible to change this option for an existing marker.\n   *\n   * The `options.affectsData` parameter, which defaults to `false`, allows you to define if a marker affects the data. It should be\n   * `true` when the marker change changes the data returned by\n   * the {@link module:core/editor/utils/dataapimixin~DataApi#getData `editor.getData()`} method.\n   * When set to `true` it fires the {@link module:engine/model/document~Document#event:change:data `change:data`} event.\n   * When set to `false` it fires the {@link module:engine/model/document~Document#event:change `change`} event.\n   *\n   * Update marker directly base on marker's name:\n   *\n   *\t\tupdateMarker( markerName, { range } );\n   *\n   * Update marker using operation:\n   *\n   *\t\tupdateMarker( marker, { range, usingOperation: true } );\n   *\t\tupdateMarker( markerName, { range, usingOperation: true } );\n   *\n   * Change marker's option (start using operations to manage it):\n   *\n   *\t\tupdateMarker( marker, { usingOperation: true } );\n   *\n   * Change marker's option (inform the engine, that the marker does not affect the data anymore):\n   *\n   *\t\tupdateMarker( markerName, { affectsData: false } );\n   *\n   * @see module:engine/model/markercollection~Marker\n   * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of a marker to update, or a marker instance.\n   * @param {Object} [options] If options object is not defined then marker will be refreshed by triggering\n   * downcast conversion for this marker with the same data.\n   * @param {module:engine/model/range~Range} [options.range] Marker range to update.\n   * @param {Boolean} [options.usingOperation] Flag indicated whether the marker should be added by MarkerOperation.\n   * See {@link module:engine/model/markercollection~Marker#managedUsingOperations}.\n   * @param {Boolean} [options.affectsData] Flag indicating that the marker changes the editor data.\n   */\n\n\n  updateMarker(markerOrName, options) {\n    this._assertWriterUsedCorrectly();\n\n    const markerName = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n    const currentMarker = this.model.markers.get(markerName);\n\n    if (!currentMarker) {\n      /**\n       * Marker with provided name does not exists.\n       *\n       * @error writer-updateMarker-marker-not-exists\n       */\n      throw new CKEditorError('writer-updateMarker-marker-not-exists: Marker with provided name does not exists.', this);\n    }\n\n    if (!options) {\n      this.model.markers._refresh(currentMarker);\n\n      return;\n    }\n\n    const hasUsingOperationDefined = typeof options.usingOperation == 'boolean';\n    const affectsDataDefined = typeof options.affectsData == 'boolean'; // Use previously defined marker's affectsData if the property is not provided.\n\n    const affectsData = affectsDataDefined ? options.affectsData : currentMarker.affectsData;\n\n    if (!hasUsingOperationDefined && !options.range && !affectsDataDefined) {\n      /**\n       * One of the options is required - provide range, usingOperations or affectsData.\n       *\n       * @error writer-updateMarker-wrong-options\n       */\n      throw new CKEditorError('writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.', this);\n    }\n\n    const currentRange = currentMarker.getRange();\n    const updatedRange = options.range ? options.range : currentRange;\n\n    if (hasUsingOperationDefined && options.usingOperation !== currentMarker.managedUsingOperations) {\n      // The marker type is changed so it's necessary to create proper operations.\n      if (options.usingOperation) {\n        // If marker changes to a managed one treat this as synchronizing existing marker.\n        // Create `MarkerOperation` with `oldRange` set to `null`, so reverse operation will remove the marker.\n        applyMarkerOperation(this, markerName, null, updatedRange, affectsData);\n      } else {\n        // If marker changes to a marker that do not use operations then we need to create additional operation\n        // that removes that marker first.\n        applyMarkerOperation(this, markerName, currentRange, null, affectsData); // Although not managed the marker itself should stay in model and its range should be preserver or changed to passed range.\n\n        this.model.markers._set(markerName, updatedRange, undefined, affectsData);\n      }\n\n      return;\n    } // Marker's type doesn't change so update it accordingly.\n\n\n    if (currentMarker.managedUsingOperations) {\n      applyMarkerOperation(this, markerName, currentRange, updatedRange, affectsData);\n    } else {\n      this.model.markers._set(markerName, updatedRange, undefined, affectsData);\n    }\n  }\n  /**\n   * Removes given {@link module:engine/model/markercollection~Marker marker} or marker with given name.\n   * The marker is removed accordingly to how it has been created, so if the marker was created using operation,\n   * it will be destroyed using operation.\n   *\n   * @param {module:engine/model/markercollection~Marker|String} markerOrName Marker or marker name to remove.\n   */\n\n\n  removeMarker(markerOrName) {\n    this._assertWriterUsedCorrectly();\n\n    const name = typeof markerOrName == 'string' ? markerOrName : markerOrName.name;\n\n    if (!this.model.markers.has(name)) {\n      /**\n       * Trying to remove marker which does not exist.\n       *\n       * @error writer-removeMarker-no-marker\n       */\n      throw new CKEditorError('writer-removeMarker-no-marker: Trying to remove marker which does not exist.', this);\n    }\n\n    const marker = this.model.markers.get(name);\n\n    if (!marker.managedUsingOperations) {\n      this.model.markers._remove(name);\n\n      return;\n    }\n\n    const oldRange = marker.getRange();\n    applyMarkerOperation(this, name, oldRange, null, marker.affectsData);\n  }\n  /**\n   * Sets the document's selection (ranges and direction) to the specified location based on the given\n   * {@link module:engine/model/selection~Selectable selectable} or creates an empty selection if no arguments were passed.\n   *\n   *\t\t// Sets selection to the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\twriter.setSelection( range );\n   *\n   *\t\t// Sets selection to given ranges.\n   *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\twriter.setSelection( range );\n   *\n   *\t\t// Sets selection to other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\twriter.setSelection( otherSelection );\n   *\n   *\t\t// Sets selection to the given document selection.\n   *\t\tconst documentSelection = model.document.selection;\n   *\t\twriter.setSelection( documentSelection );\n   *\n   *\t\t// Sets collapsed selection at the given position.\n   *\t\tconst position = writer.createPosition( root, path );\n   *\t\twriter.setSelection( position );\n   *\n   *\t\t// Sets collapsed selection at the position of the given node and an offset.\n   *\t\twriter.setSelection( paragraph, offset );\n   *\n   * Creates a range inside an {@link module:engine/model/element~Element element} which starts before the first child of\n  \t * that element and ends after the last child of that element.\n   *\n   *\t\twriter.setSelection( paragraph, 'in' );\n   *\n   * Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends just after the item.\n   *\n   *\t\twriter.setSelection( paragraph, 'on' );\n   *\n   *\t\t// Removes all selection's ranges.\n   *\t\twriter.setSelection( null );\n   *\n   * `Writer#setSelection()` allow passing additional options (`backward`) as the last argument.\n   *\n   *\t\t// Sets selection as backward.\n   *\t\twriter.setSelection( range, { backward: true } );\n   *\n   * Throws `writer-incorrect-use` error when the writer is used outside the `change()` block.\n   *\n   * @param {module:engine/model/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   */\n\n\n  setSelection(selectable, placeOrOffset, options) {\n    this._assertWriterUsedCorrectly();\n\n    this.model.document.selection._setTo(selectable, placeOrOffset, options);\n  }\n  /**\n   * Moves {@link module:engine/model/documentselection~DocumentSelection#focus} to the specified location.\n   *\n   * The location can be specified in the same form as\n   * {@link #createPositionAt `writer.createPositionAt()`} parameters.\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset=0] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  setSelectionFocus(itemOrPosition, offset) {\n    this._assertWriterUsedCorrectly();\n\n    this.model.document.selection._setFocus(itemOrPosition, offset);\n  }\n  /**\n   * Sets attribute(s) on the selection. If attribute with the same key already is set, it's value is overwritten.\n   *\n   * Using key and value pair:\n   *\n   * \twriter.setSelectionAttribute( 'italic', true );\n   *\n   * Using key-value object:\n   *\n   * \twriter.setSelectionAttribute( { italic: true, bold: false } );\n   *\n   * Using iterable object:\n   *\n   * \twriter.setSelectionAttribute( new Map( [ [ 'italic', true ] ] ) );\n   *\n   * @param {String|Object|Iterable.<*>} keyOrObjectOrIterable Key of the attribute to set\n   * or object / iterable of key => value attribute pairs.\n   * @param {*} [value] Attribute value.\n   */\n\n\n  setSelectionAttribute(keyOrObjectOrIterable, value) {\n    this._assertWriterUsedCorrectly();\n\n    if (typeof keyOrObjectOrIterable === 'string') {\n      this._setSelectionAttribute(keyOrObjectOrIterable, value);\n    } else {\n      for (const [key, value] of toMap(keyOrObjectOrIterable)) {\n        this._setSelectionAttribute(key, value);\n      }\n    }\n  }\n  /**\n   * Removes attribute(s) with given key(s) from the selection.\n   *\n   * Remove one attribute:\n   *\n   *\t\twriter.removeSelectionAttribute( 'italic' );\n   *\n   * Remove multiple attributes:\n   *\n   *\t\twriter.removeSelectionAttribute( [ 'italic', 'bold' ] );\n   *\n   * @param {String|Iterable.<String>} keyOrIterableOfKeys Key of the attribute to remove or an iterable of attribute keys to remove.\n   */\n\n\n  removeSelectionAttribute(keyOrIterableOfKeys) {\n    this._assertWriterUsedCorrectly();\n\n    if (typeof keyOrIterableOfKeys === 'string') {\n      this._removeSelectionAttribute(keyOrIterableOfKeys);\n    } else {\n      for (const key of keyOrIterableOfKeys) {\n        this._removeSelectionAttribute(key);\n      }\n    }\n  }\n  /**\n   * Temporarily changes the {@link module:engine/model/documentselection~DocumentSelection#isGravityOverridden gravity}\n   * of the selection from left to right.\n   *\n   * The gravity defines from which direction the selection inherits its attributes. If it's the default left gravity,\n   * then the selection (after being moved by the user) inherits attributes from its left-hand side.\n   * This method allows to temporarily override this behavior by forcing the gravity to the right.\n   *\n   * For the following model fragment:\n   *\n   *\t\t<$text bold=\"true\" linkHref=\"url\">bar[]</$text><$text bold=\"true\">biz</$text>\n   *\n   * * Default gravity: selection will have the `bold` and `linkHref` attributes.\n   * * Overridden gravity: selection will have `bold` attribute.\n   *\n   * **Note**: It returns an unique identifier which is required to restore the gravity. It guarantees the symmetry\n   * of the process.\n   *\n   * @returns {String} The unique id which allows restoring the gravity.\n   */\n\n\n  overrideSelectionGravity() {\n    return this.model.document.selection._overrideGravity();\n  }\n  /**\n   * Restores {@link ~Writer#overrideSelectionGravity} gravity to default.\n   *\n   * Restoring the gravity is only possible using the unique identifier returned by\n   * {@link ~Writer#overrideSelectionGravity}. Note that the gravity remains overridden as long as won't be restored\n   * the same number of times it was overridden.\n   *\n   * @param {String} uid The unique id returned by {@link ~Writer#overrideSelectionGravity}.\n   */\n\n\n  restoreSelectionGravity(uid) {\n    this.model.document.selection._restoreGravity(uid);\n  }\n  /**\n   * @private\n   * @param {String} key Key of the attribute to remove.\n   * @param {*} value Attribute value.\n   */\n\n\n  _setSelectionAttribute(key, value) {\n    const selection = this.model.document.selection; // Store attribute in parent element if the selection is collapsed in an empty node.\n\n    if (selection.isCollapsed && selection.anchor.parent.isEmpty) {\n      const storeKey = DocumentSelection._getStoreAttributeKey(key);\n\n      this.setAttribute(storeKey, value, selection.anchor.parent);\n    }\n\n    selection._setAttribute(key, value);\n  }\n  /**\n   * @private\n   * @param {String} key Key of the attribute to remove.\n   */\n\n\n  _removeSelectionAttribute(key) {\n    const selection = this.model.document.selection; // Remove stored attribute from parent element if the selection is collapsed in an empty node.\n\n    if (selection.isCollapsed && selection.anchor.parent.isEmpty) {\n      const storeKey = DocumentSelection._getStoreAttributeKey(key);\n\n      this.removeAttribute(storeKey, selection.anchor.parent);\n    }\n\n    selection._removeAttribute(key);\n  }\n  /**\n   * Throws `writer-detached-writer-tries-to-modify-model` error when the writer is used outside of the `change()` block.\n   *\n   * @private\n   */\n\n\n  _assertWriterUsedCorrectly() {\n    /**\n     * Trying to use a writer outside a {@link module:engine/model/model~Model#change `change()`} or\n     * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()`} blocks.\n     *\n     * The writer can only be used inside these blocks which ensures that the model\n     * can only be changed during such \"sessions\".\n     *\n     * @error writer-incorrect-use\n     */\n    if (this.model._currentWriter !== this) {\n      throw new CKEditorError('writer-incorrect-use: Trying to use a writer outside the change() block.', this);\n    }\n  }\n  /**\n   * For given action `type` and `positionOrRange` where the action happens, this function finds all affected markers\n   * and applies a marker operation with the new marker range equal to the current range. Thanks to this, the marker range\n   * can be later correctly processed during undo.\n   *\n   * @private\n   * @param {'move'|'merge'} type Writer action type.\n   * @param {module:engine/model/position~Position|module:engine/model/range~Range} positionOrRange Position or range\n   * where the writer action happens.\n   */\n\n\n  _addOperationForAffectedMarkers(type, positionOrRange) {\n    for (const marker of this.model.markers) {\n      if (!marker.managedUsingOperations) {\n        continue;\n      }\n\n      const markerRange = marker.getRange();\n      let isAffected = false;\n\n      if (type == 'move') {\n        isAffected = positionOrRange.containsPosition(markerRange.start) || positionOrRange.start.isEqual(markerRange.start) || positionOrRange.containsPosition(markerRange.end) || positionOrRange.end.isEqual(markerRange.end);\n      } else {\n        // if type == 'merge'.\n        const elementBefore = positionOrRange.nodeBefore;\n        const elementAfter = positionOrRange.nodeAfter; //               Start:  <p>Foo[</p><p>Bar]</p>\n        //         After merge:  <p>Foo[Bar]</p>\n        // After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n        //\n\n        const affectedInLeftElement = markerRange.start.parent == elementBefore && markerRange.start.isAtEnd; //               Start:  <p>[Foo</p><p>]Bar</p>\n        //         After merge:  <p>[Foo]Bar</p>\n        // After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n        //\n\n        const affectedInRightElement = markerRange.end.parent == elementAfter && markerRange.end.offset == 0; //               Start:  <p>[Foo</p>]<p>Bar</p>\n        //         After merge:  <p>[Foo]Bar</p>\n        // After undoing split:  <p>[Foo]</p><p>Bar</p>     <-- incorrect, needs remembering for undo.\n        //\n\n        const affectedAfterLeftElement = markerRange.end.nodeAfter == elementAfter; //               Start:  <p>Foo</p>[<p>Bar]</p>\n        //         After merge:  <p>Foo[Bar]</p>\n        // After undoing split:  <p>Foo</p><p>[Bar]</p>     <-- incorrect, needs remembering for undo.\n        //\n\n        const affectedBeforeRightElement = markerRange.start.nodeAfter == elementAfter;\n        isAffected = affectedInLeftElement || affectedInRightElement || affectedAfterLeftElement || affectedBeforeRightElement;\n      }\n\n      if (isAffected) {\n        this.updateMarker(marker.name, {\n          range: markerRange\n        });\n      }\n    }\n  }\n\n} // Sets given attribute to each node in given range. When attribute value is null then attribute will be removed.\n//\n// Because attribute operation needs to have the same attribute value on the whole range, this function splits\n// the range into smaller parts.\n//\n// Given `range` must be flat.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/range~Range} range Model range on which the attribute will be set.\n\nfunction setAttributeOnRange(writer, key, value, range) {\n  const model = writer.model;\n  const doc = model.document; // Position of the last split, the beginning of the new range.\n\n  let lastSplitPosition = range.start; // Currently position in the scanning range. Because we need value after the position, it is not a current\n  // position of the iterator but the previous one (we need to iterate one more time to get the value after).\n\n  let position; // Value before the currently position.\n\n  let valueBefore; // Value after the currently position.\n\n  let valueAfter;\n\n  for (const val of range.getWalker({\n    shallow: true\n  })) {\n    valueAfter = val.item.getAttribute(key); // At the first run of the iterator the position in undefined. We also do not have a valueBefore, but\n    // because valueAfter may be null, valueBefore may be equal valueAfter ( undefined == null ).\n\n    if (position && valueBefore != valueAfter) {\n      // if valueBefore == value there is nothing to change, so we add operation only if these values are different.\n      if (valueBefore != value) {\n        addOperation();\n      }\n\n      lastSplitPosition = position;\n    }\n\n    position = val.nextPosition;\n    valueBefore = valueAfter;\n  } // Because position in the loop is not the iterator position (see let position comment), the last position in\n  // the while loop will be last but one position in the range. We need to check the last position manually.\n\n\n  if (position instanceof Position && position != lastSplitPosition && valueBefore != value) {\n    addOperation();\n  }\n\n  function addOperation() {\n    const range = new Range(lastSplitPosition, position);\n    const version = range.root.document ? doc.version : null;\n    const operation = new AttributeOperation(range, key, valueBefore, value, version);\n    writer.batch.addOperation(operation);\n    model.applyOperation(operation);\n  }\n} // Sets given attribute to the given node. When attribute value is null then attribute will be removed.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} key Attribute key.\n// @param {*} value Attribute new value.\n// @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n\n\nfunction setAttributeOnItem(writer, key, value, item) {\n  const model = writer.model;\n  const doc = model.document;\n  const previousValue = item.getAttribute(key);\n  let range, operation;\n\n  if (previousValue != value) {\n    const isRootChanged = item.root === item;\n\n    if (isRootChanged) {\n      // If we change attributes of root element, we have to use `RootAttributeOperation`.\n      const version = item.document ? doc.version : null;\n      operation = new RootAttributeOperation(item, key, previousValue, value, version);\n    } else {\n      range = new Range(Position._createBefore(item), writer.createPositionAfter(item));\n      const version = range.root.document ? doc.version : null;\n      operation = new AttributeOperation(range, key, previousValue, value, version);\n    }\n\n    writer.batch.addOperation(operation);\n    model.applyOperation(operation);\n  }\n} // Creates and applies marker operation to {@link module:engine/model/operation/operation~Operation operation}.\n//\n// @private\n// @param {module:engine/model/writer~Writer} writer\n// @param {String} name Marker name.\n// @param {module:engine/model/range~Range} oldRange Marker range before the change.\n// @param {module:engine/model/range~Range} newRange Marker range after the change.\n// @param {Boolean} affectsData\n\n\nfunction applyMarkerOperation(writer, name, oldRange, newRange, affectsData) {\n  const model = writer.model;\n  const doc = model.document;\n  const operation = new MarkerOperation(name, oldRange, newRange, model.markers, affectsData, doc.version);\n  writer.batch.addOperation(operation);\n  model.applyOperation(operation);\n} // Creates `MoveOperation` or `DetachOperation` that removes `howMany` nodes starting from `position`.\n// The operation will be applied on given model instance and added to given operation instance.\n//\n// @private\n// @param {module:engine/model/position~Position} position Position from which nodes are removed.\n// @param {Number} howMany Number of nodes to remove.\n// @param {Batch} batch Batch to which the operation will be added.\n// @param {module:engine/model/model~Model} model Model instance on which operation will be applied.\n\n\nfunction applyRemoveOperation(position, howMany, batch, model) {\n  let operation;\n\n  if (position.root.document) {\n    const doc = model.document;\n    const graveyardPosition = new Position(doc.graveyard, [0]);\n    operation = new MoveOperation(position, howMany, graveyardPosition, doc.version);\n  } else {\n    operation = new DetachOperation(position, howMany);\n  }\n\n  batch.addOperation(operation);\n  model.applyOperation(operation);\n} // Returns `true` if both root elements are the same element or both are documents root elements.\n//\n// Elements in the same tree can be moved (for instance you can move element form one documents root to another, or\n// within the same document fragment), but when element supposed to be moved from document fragment to the document, or\n// to another document it should be removed and inserted to avoid problems with OT. This is because features like undo or\n// collaboration may track changes on the document but ignore changes on detached fragments and should not get\n// unexpected `move` operation.\n\n\nfunction isSameTree(rootA, rootB) {\n  // If it is the same root this is the same tree.\n  if (rootA === rootB) {\n    return true;\n  } // If both roots are documents root it is operation within the document what we still treat as the same tree.\n\n\n  if (rootA instanceof RootElement && rootB instanceof RootElement) {\n    return true;\n  }\n\n  return false;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/differ\n */\nimport Position from './position';\nimport Range from './range';\n/**\n * Calculates the difference between two model states.\n *\n * Receives operations that are to be applied on the model document. Marks parts of the model document tree which\n * are changed and saves the state of these elements before the change. Then, it compares saved elements with the\n * changed elements, after all changes are applied on the model document. Calculates the diff between saved\n * elements and new ones and returns a change set.\n */\n\nexport default class Differ {\n  /**\n   * Creates a `Differ` instance.\n   *\n   * @param {module:engine/model/markercollection~MarkerCollection} markerCollection Model's marker collection.\n   */\n  constructor(markerCollection) {\n    /**\n     * Reference to the model's marker collection.\n     *\n     * @private\n     * @type {module:engine/model/markercollection~MarkerCollection}\n     */\n    this._markerCollection = markerCollection;\n    /**\n     * A map that stores changes that happened in a given element.\n     *\n     * The keys of the map are references to the model elements.\n     * The values of the map are arrays with changes that were done on this element.\n     *\n     * @private\n     * @type {Map}\n     */\n\n    this._changesInElement = new Map();\n    /**\n     * A map that stores \"element's children snapshots\". A snapshot is representing children of a given element before\n     * the first change was applied on that element. Snapshot items are objects with two properties: `name`,\n     * containing the element name (or `'$text'` for a text node) and `attributes` which is a map of the node's attributes.\n     *\n     * @private\n     * @type {Map}\n     */\n\n    this._elementSnapshots = new Map();\n    /**\n     * A map that stores all changed markers.\n     *\n     * The keys of the map are marker names.\n     * The values of the map are objects with the `oldRange` and `newRange` properties. They store the marker range\n     * state before and after the change.\n     *\n     * @private\n     * @type {Map}\n     */\n\n    this._changedMarkers = new Map();\n    /**\n     * Stores the number of changes that were processed. Used to order the changes chronologically. It is important\n     * when changes are sorted.\n     *\n     * @private\n     * @type {Number}\n     */\n\n    this._changeCount = 0;\n    /**\n     * For efficiency purposes, `Differ` stores the change set returned by the differ after {@link #getChanges} call.\n     * Cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n     * return the cached value instead of calculating it again.\n     *\n     * This property stores those changes that did not take place in graveyard root.\n     *\n     * @private\n     * @type {Array.<Object>|null}\n     */\n\n    this._cachedChanges = null;\n    /**\n     * For efficiency purposes, `Differ` stores the change set returned by the differ after the {@link #getChanges} call.\n     * The cache is reset each time a new operation is buffered. If the cache has not been reset, {@link #getChanges} will\n     * return the cached value instead of calculating it again.\n     *\n     * This property stores all changes evaluated by `Differ`, including those that took place in the graveyard.\n     *\n     * @private\n     * @type {Array.<Object>|null}\n     */\n\n    this._cachedChangesWithGraveyard = null;\n  }\n  /**\n   * Informs whether there are any changes buffered in `Differ`.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n\n\n  get isEmpty() {\n    return this._changesInElement.size == 0 && this._changedMarkers.size == 0;\n  }\n  /**\n   * Marks given `item` in differ to be \"refreshed\". It means that the item will be marked as removed and inserted in the differ changes\n   * set, so it will be effectively re-converted when differ changes will be handled by a dispatcher.\n   *\n   * @param {module:engine/model/item~Item} item Item to refresh.\n   */\n\n\n  refreshItem(item) {\n    if (this._isInInsertedElement(item.parent)) {\n      return;\n    }\n\n    this._markRemove(item.parent, item.startOffset, item.offsetSize);\n\n    this._markInsert(item.parent, item.startOffset, item.offsetSize);\n\n    const range = Range._createOn(item);\n\n    for (const marker of this._markerCollection.getMarkersIntersectingRange(range)) {\n      const markerRange = marker.getRange();\n      this.bufferMarkerChange(marker.name, markerRange, markerRange, marker.affectsData);\n    } // Clear cache after each buffered operation as it is no longer valid.\n\n\n    this._cachedChanges = null;\n  }\n  /**\n   * Buffers the given operation. An operation has to be buffered before it is executed.\n   *\n   * Operation type is checked and it is checked which nodes it will affect. These nodes are then stored in `Differ`\n   * in the state before the operation is executed.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation An operation to buffer.\n   */\n\n\n  bufferOperation(operation) {\n    // Below we take an operation, check its type, then use its parameters in marking (private) methods.\n    // The general rule is to not mark elements inside inserted element. All inserted elements are re-rendered.\n    // Marking changes in them would cause a \"double\" changing then.\n    //\n    switch (operation.type) {\n      case 'insert':\n        {\n          if (this._isInInsertedElement(operation.position.parent)) {\n            return;\n          }\n\n          this._markInsert(operation.position.parent, operation.position.offset, operation.nodes.maxOffset);\n\n          break;\n        }\n\n      case 'addAttribute':\n      case 'removeAttribute':\n      case 'changeAttribute':\n        {\n          for (const item of operation.range.getItems({\n            shallow: true\n          })) {\n            if (this._isInInsertedElement(item.parent)) {\n              continue;\n            }\n\n            this._markAttribute(item);\n          }\n\n          break;\n        }\n\n      case 'remove':\n      case 'move':\n      case 'reinsert':\n        {\n          // When range is moved to the same position then not mark it as a change.\n          // See: https://github.com/ckeditor/ckeditor5-engine/issues/1664.\n          if (operation.sourcePosition.isEqual(operation.targetPosition) || operation.sourcePosition.getShiftedBy(operation.howMany).isEqual(operation.targetPosition)) {\n            return;\n          }\n\n          const sourceParentInserted = this._isInInsertedElement(operation.sourcePosition.parent);\n\n          const targetParentInserted = this._isInInsertedElement(operation.targetPosition.parent);\n\n          if (!sourceParentInserted) {\n            this._markRemove(operation.sourcePosition.parent, operation.sourcePosition.offset, operation.howMany);\n          }\n\n          if (!targetParentInserted) {\n            this._markInsert(operation.targetPosition.parent, operation.getMovedRangeStart().offset, operation.howMany);\n          }\n\n          break;\n        }\n\n      case 'rename':\n        {\n          if (this._isInInsertedElement(operation.position.parent)) {\n            return;\n          }\n\n          this._markRemove(operation.position.parent, operation.position.offset, 1);\n\n          this._markInsert(operation.position.parent, operation.position.offset, 1);\n\n          const range = Range._createFromPositionAndShift(operation.position, 1);\n\n          for (const marker of this._markerCollection.getMarkersIntersectingRange(range)) {\n            const markerRange = marker.getRange();\n            this.bufferMarkerChange(marker.name, markerRange, markerRange, marker.affectsData);\n          }\n\n          break;\n        }\n\n      case 'split':\n        {\n          const splitElement = operation.splitPosition.parent; // Mark that children of the split element were removed.\n\n          if (!this._isInInsertedElement(splitElement)) {\n            this._markRemove(splitElement, operation.splitPosition.offset, operation.howMany);\n          } // Mark that the new element (split copy) was inserted.\n\n\n          if (!this._isInInsertedElement(operation.insertionPosition.parent)) {\n            this._markInsert(operation.insertionPosition.parent, operation.insertionPosition.offset, 1);\n          } // If the split took the element from the graveyard, mark that the element from the graveyard was removed.\n\n\n          if (operation.graveyardPosition) {\n            this._markRemove(operation.graveyardPosition.parent, operation.graveyardPosition.offset, 1);\n          }\n\n          break;\n        }\n\n      case 'merge':\n        {\n          // Mark that the merged element was removed.\n          const mergedElement = operation.sourcePosition.parent;\n\n          if (!this._isInInsertedElement(mergedElement.parent)) {\n            this._markRemove(mergedElement.parent, mergedElement.startOffset, 1);\n          } // Mark that the merged element was inserted into graveyard.\n\n\n          const graveyardParent = operation.graveyardPosition.parent;\n\n          this._markInsert(graveyardParent, operation.graveyardPosition.offset, 1); // Mark that children of merged element were inserted at new parent.\n\n\n          const mergedIntoElement = operation.targetPosition.parent;\n\n          if (!this._isInInsertedElement(mergedIntoElement)) {\n            this._markInsert(mergedIntoElement, operation.targetPosition.offset, mergedElement.maxOffset);\n          }\n\n          break;\n        }\n    } // Clear cache after each buffered operation as it is no longer valid.\n\n\n    this._cachedChanges = null;\n  }\n  /**\n   * Buffers a marker change.\n   *\n   * @param {String} markerName The name of the marker that changed.\n   * @param {module:engine/model/range~Range|null} oldRange Marker range before the change or `null` if the marker has just\n   * been created.\n   * @param {module:engine/model/range~Range|null} newRange Marker range after the change or `null` if the marker was removed.\n   * @param {Boolean} affectsData Flag indicating whether marker affects the editor data.\n   */\n\n\n  bufferMarkerChange(markerName, oldRange, newRange, affectsData) {\n    const buffered = this._changedMarkers.get(markerName);\n\n    if (!buffered) {\n      this._changedMarkers.set(markerName, {\n        oldRange,\n        newRange,\n        affectsData\n      });\n    } else {\n      buffered.newRange = newRange;\n      buffered.affectsData = affectsData;\n\n      if (buffered.oldRange == null && buffered.newRange == null) {\n        // The marker is going to be removed (`newRange == null`) but it did not exist before the first buffered change\n        // (`buffered.oldRange == null`). In this case, do not keep the marker in buffer at all.\n        this._changedMarkers.delete(markerName);\n      }\n    }\n  }\n  /**\n   * Returns all markers that should be removed as a result of buffered changes.\n   *\n   * @returns {Array.<Object>} Markers to remove. Each array item is an object containing the `name` and `range` properties.\n   */\n\n\n  getMarkersToRemove() {\n    const result = [];\n\n    for (const [name, change] of this._changedMarkers) {\n      if (change.oldRange != null) {\n        result.push({\n          name,\n          range: change.oldRange\n        });\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Returns all markers which should be added as a result of buffered changes.\n   *\n   * @returns {Array.<Object>} Markers to add. Each array item is an object containing the `name` and `range` properties.\n   */\n\n\n  getMarkersToAdd() {\n    const result = [];\n\n    for (const [name, change] of this._changedMarkers) {\n      if (change.newRange != null) {\n        result.push({\n          name,\n          range: change.newRange\n        });\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Returns all markers which changed.\n   *\n   * @returns {Array.<Object>}\n   */\n\n\n  getChangedMarkers() {\n    return Array.from(this._changedMarkers).map(item => ({\n      name: item[0],\n      data: {\n        oldRange: item[1].oldRange,\n        newRange: item[1].newRange\n      }\n    }));\n  }\n  /**\n   * Checks whether some of the buffered changes affect the editor data.\n   *\n   * Types of changes which affect the editor data:\n   *\n   * * model structure changes,\n   * * attribute changes,\n   * * changes of markers which were defined as `affectingData`.\n   *\n   * @returns {Boolean}\n   */\n\n\n  hasDataChanges() {\n    for (const [, change] of this._changedMarkers) {\n      if (change.affectsData) {\n        return true;\n      }\n    } // If markers do not affect the data, check whether there are some changes in elements.\n\n\n    return this._changesInElement.size > 0;\n  }\n  /**\n   * Calculates the diff between the old model tree state (the state before the first buffered operations since the last {@link #reset}\n   * call) and the new model tree state (actual one). It should be called after all buffered operations are executed.\n   *\n   * The diff set is returned as an array of diff items, each describing a change done on the model. The items are sorted by\n   * the position on which the change happened. If a position {@link module:engine/model/position~Position#isBefore is before}\n   * another one, it will be on an earlier index in the diff set.\n   *\n   * Because calculating the diff is a costly operation, the result is cached. If no new operation was buffered since the\n   * previous {@link #getChanges} call, the next call will return the cached value.\n   *\n   * @param {Object} options Additional options.\n   * @param {Boolean} [options.includeChangesInGraveyard=false] If set to `true`, also changes that happened\n   * in the graveyard root will be returned. By default, changes in the graveyard root are not returned.\n   * @returns {Array.<Object>} Diff between the old and the new model tree state.\n   */\n\n\n  getChanges(options = {\n    includeChangesInGraveyard: false\n  }) {\n    // If there are cached changes, just return them instead of calculating changes again.\n    if (this._cachedChanges) {\n      if (options.includeChangesInGraveyard) {\n        return this._cachedChangesWithGraveyard.slice();\n      } else {\n        return this._cachedChanges.slice();\n      }\n    } // Will contain returned results.\n\n\n    const diffSet = []; // Check all changed elements.\n\n    for (const element of this._changesInElement.keys()) {\n      // Get changes for this element and sort them.\n      const changes = this._changesInElement.get(element).sort((a, b) => {\n        if (a.offset === b.offset) {\n          if (a.type != b.type) {\n            // If there are multiple changes at the same position, \"remove\" change should be first.\n            // If the order is different, for example, we would first add some nodes and then removed them\n            // (instead of the nodes that we should remove).\n            return a.type == 'remove' ? -1 : 1;\n          }\n\n          return 0;\n        }\n\n        return a.offset < b.offset ? -1 : 1;\n      }); // Get children of this element before any change was applied on it.\n\n\n      const snapshotChildren = this._elementSnapshots.get(element); // Get snapshot of current element's children.\n\n\n      const elementChildren = _getChildrenSnapshot(element.getChildren()); // Generate actions basing on changes done on element.\n\n\n      const actions = _generateActionsFromChanges(snapshotChildren.length, changes);\n\n      let i = 0; // Iterator in `elementChildren` array -- iterates through current children of element.\n\n      let j = 0; // Iterator in `snapshotChildren` array -- iterates through old children of element.\n      // Process every action.\n\n      for (const action of actions) {\n        if (action === 'i') {\n          // Generate diff item for this element and insert it into the diff set.\n          diffSet.push(this._getInsertDiff(element, i, elementChildren[i].name));\n          i++;\n        } else if (action === 'r') {\n          // Generate diff item for this element and insert it into the diff set.\n          diffSet.push(this._getRemoveDiff(element, i, snapshotChildren[j].name));\n          j++;\n        } else if (action === 'a') {\n          // Take attributes from saved and current children.\n          const elementAttributes = elementChildren[i].attributes;\n          const snapshotAttributes = snapshotChildren[j].attributes;\n          let range;\n\n          if (elementChildren[i].name == '$text') {\n            range = new Range(Position._createAt(element, i), Position._createAt(element, i + 1));\n          } else {\n            const index = element.offsetToIndex(i);\n            range = new Range(Position._createAt(element, i), Position._createAt(element.getChild(index), 0));\n          } // Generate diff items for this change (there might be multiple attributes changed and\n          // there is a single diff for each of them) and insert them into the diff set.\n\n\n          diffSet.push(...this._getAttributesDiff(range, snapshotAttributes, elementAttributes));\n          i++;\n          j++;\n        } else {\n          // `action` is 'equal'. Child not changed.\n          i++;\n          j++;\n        }\n      }\n    } // Then, sort the changes by the position (change at position before other changes is first).\n\n\n    diffSet.sort((a, b) => {\n      // If the change is in different root, we don't care much, but we'd like to have all changes in given\n      // root \"together\" in the array. So let's just sort them by the root name. It does not matter which root\n      // will be processed first.\n      if (a.position.root != b.position.root) {\n        return a.position.root.rootName < b.position.root.rootName ? -1 : 1;\n      } // If change happens at the same position...\n\n\n      if (a.position.isEqual(b.position)) {\n        // Keep chronological order of operations.\n        return a.changeCount - b.changeCount;\n      } // If positions differ, position \"on the left\" should be earlier in the result.\n\n\n      return a.position.isBefore(b.position) ? -1 : 1;\n    }); // Glue together multiple changes (mostly on text nodes).\n\n    for (let i = 1; i < diffSet.length; i++) {\n      const prevDiff = diffSet[i - 1];\n      const thisDiff = diffSet[i]; // Glue remove changes if they happen on text on same position.\n\n      const isConsecutiveTextRemove = prevDiff.type == 'remove' && thisDiff.type == 'remove' && prevDiff.name == '$text' && thisDiff.name == '$text' && prevDiff.position.isEqual(thisDiff.position); // Glue insert changes if they happen on text on consecutive fragments.\n\n      const isConsecutiveTextAdd = prevDiff.type == 'insert' && thisDiff.type == 'insert' && prevDiff.name == '$text' && thisDiff.name == '$text' && prevDiff.position.parent == thisDiff.position.parent && prevDiff.position.offset + prevDiff.length == thisDiff.position.offset; // Glue attribute changes if they happen on consecutive fragments and have same key, old value and new value.\n\n      const isConsecutiveAttributeChange = prevDiff.type == 'attribute' && thisDiff.type == 'attribute' && prevDiff.position.parent == thisDiff.position.parent && prevDiff.range.isFlat && thisDiff.range.isFlat && prevDiff.position.offset + prevDiff.length == thisDiff.position.offset && prevDiff.attributeKey == thisDiff.attributeKey && prevDiff.attributeOldValue == thisDiff.attributeOldValue && prevDiff.attributeNewValue == thisDiff.attributeNewValue;\n\n      if (isConsecutiveTextRemove || isConsecutiveTextAdd || isConsecutiveAttributeChange) {\n        diffSet[i - 1].length++;\n\n        if (isConsecutiveAttributeChange) {\n          diffSet[i - 1].range.end = diffSet[i - 1].range.end.getShiftedBy(1);\n        }\n\n        diffSet.splice(i, 1);\n        i--;\n      }\n    } // Remove `changeCount` property from diff items. It is used only for sorting and is internal thing.\n\n\n    for (const item of diffSet) {\n      delete item.changeCount;\n\n      if (item.type == 'attribute') {\n        delete item.position;\n        delete item.length;\n      }\n    }\n\n    this._changeCount = 0; // Cache changes.\n\n    this._cachedChangesWithGraveyard = diffSet.slice();\n    this._cachedChanges = diffSet.slice().filter(_changesInGraveyardFilter);\n\n    if (options.includeChangesInGraveyard) {\n      return this._cachedChangesWithGraveyard;\n    } else {\n      return this._cachedChanges;\n    }\n  }\n  /**\n   * Resets `Differ`. Removes all buffered changes.\n   */\n\n\n  reset() {\n    this._changesInElement.clear();\n\n    this._elementSnapshots.clear();\n\n    this._changedMarkers.clear();\n\n    this._cachedChanges = null;\n  }\n  /**\n   * Saves and handles an insert change.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} parent\n   * @param {Number} offset\n   * @param {Number} howMany\n   */\n\n\n  _markInsert(parent, offset, howMany) {\n    const changeItem = {\n      type: 'insert',\n      offset,\n      howMany,\n      count: this._changeCount++\n    };\n\n    this._markChange(parent, changeItem);\n  }\n  /**\n   * Saves and handles a remove change.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} parent\n   * @param {Number} offset\n   * @param {Number} howMany\n   */\n\n\n  _markRemove(parent, offset, howMany) {\n    const changeItem = {\n      type: 'remove',\n      offset,\n      howMany,\n      count: this._changeCount++\n    };\n\n    this._markChange(parent, changeItem);\n\n    this._removeAllNestedChanges(parent, offset, howMany);\n  }\n  /**\n   * Saves and handles an attribute change.\n   *\n   * @private\n   * @param {module:engine/model/item~Item} item\n   */\n\n\n  _markAttribute(item) {\n    const changeItem = {\n      type: 'attribute',\n      offset: item.startOffset,\n      howMany: item.offsetSize,\n      count: this._changeCount++\n    };\n\n    this._markChange(item.parent, changeItem);\n  }\n  /**\n   * Saves and handles a model change.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} parent\n   * @param {Object} changeItem\n   */\n\n\n  _markChange(parent, changeItem) {\n    // First, make a snapshot of this parent's children (it will be made only if it was not made before).\n    this._makeSnapshot(parent); // Then, get all changes that already were done on the element (empty array if this is the first change).\n\n\n    const changes = this._getChangesForElement(parent); // Then, look through all the changes, and transform them or the new change.\n\n\n    this._handleChange(changeItem, changes); // Add the new change.\n\n\n    changes.push(changeItem); // Remove incorrect changes. During transformation some change might be, for example, included in another.\n    // In that case, the change will have `howMany` property set to `0` or less. We need to remove those changes.\n\n    for (let i = 0; i < changes.length; i++) {\n      if (changes[i].howMany < 1) {\n        changes.splice(i, 1);\n        i--;\n      }\n    }\n  }\n  /**\n   * Gets an array of changes that have already been saved for a given element.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} element\n   * @returns {Array.<Object>}\n   */\n\n\n  _getChangesForElement(element) {\n    let changes;\n\n    if (this._changesInElement.has(element)) {\n      changes = this._changesInElement.get(element);\n    } else {\n      changes = [];\n\n      this._changesInElement.set(element, changes);\n    }\n\n    return changes;\n  }\n  /**\n   * Saves a children snapshot for a given element.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} element\n   */\n\n\n  _makeSnapshot(element) {\n    if (!this._elementSnapshots.has(element)) {\n      this._elementSnapshots.set(element, _getChildrenSnapshot(element.getChildren()));\n    }\n  }\n  /**\n   * For a given newly saved change, compares it with a change already done on the element and modifies the incoming\n   * change and/or the old change.\n   *\n   * @private\n   * @param {Object} inc Incoming (new) change.\n   * @param {Array.<Object>} changes An array containing all the changes done on that element.\n   */\n\n\n  _handleChange(inc, changes) {\n    // We need a helper variable that will store how many nodes are to be still handled for this change item.\n    // `nodesToHandle` (how many nodes still need to be handled) and `howMany` (how many nodes were affected)\n    // needs to be differentiated.\n    //\n    // This comes up when there are multiple changes that are affected by `inc` change item.\n    //\n    // For example: assume two insert changes: `{ offset: 2, howMany: 1 }` and `{ offset: 5, howMany: 1 }`.\n    // Assume that `inc` change is remove `{ offset: 2, howMany: 2, nodesToHandle: 2 }`.\n    //\n    // Then, we:\n    // - \"forget\" about first insert change (it is \"eaten\" by remove),\n    // - because of that, at the end we will want to remove only one node (`nodesToHandle = 1`),\n    // - but still we have to change offset of the second insert change from `5` to `3`!\n    //\n    // So, `howMany` does not change throughout items transformation and keeps information about how many nodes were affected,\n    // while `nodesToHandle` means how many nodes need to be handled after the change item is transformed by other changes.\n    inc.nodesToHandle = inc.howMany;\n\n    for (const old of changes) {\n      const incEnd = inc.offset + inc.howMany;\n      const oldEnd = old.offset + old.howMany;\n\n      if (inc.type == 'insert') {\n        if (old.type == 'insert') {\n          if (inc.offset <= old.offset) {\n            old.offset += inc.howMany;\n          } else if (inc.offset < oldEnd) {\n            old.howMany += inc.nodesToHandle;\n            inc.nodesToHandle = 0;\n          }\n        }\n\n        if (old.type == 'remove') {\n          if (inc.offset < old.offset) {\n            old.offset += inc.howMany;\n          }\n        }\n\n        if (old.type == 'attribute') {\n          if (inc.offset <= old.offset) {\n            old.offset += inc.howMany;\n          } else if (inc.offset < oldEnd) {\n            // This case is more complicated, because attribute change has to be split into two.\n            // Example (assume that uppercase and lowercase letters mean different attributes):\n            //\n            // initial state:\t\tabcxyz\n            // attribute change:\taBCXYz\n            // incoming insert:\t\taBCfooXYz\n            //\n            // Change ranges cannot intersect because each item has to be described exactly (it was either\n            // not changed, inserted, removed, or its attribute was changed). That's why old attribute\n            // change has to be split and both parts has to be handled separately from now on.\n            const howMany = old.howMany;\n            old.howMany = inc.offset - old.offset; // Add the second part of attribute change to the beginning of processed array so it won't\n            // be processed again in this loop.\n\n            changes.unshift({\n              type: 'attribute',\n              offset: incEnd,\n              howMany: howMany - old.howMany,\n              count: this._changeCount++\n            });\n          }\n        }\n      }\n\n      if (inc.type == 'remove') {\n        if (old.type == 'insert') {\n          if (incEnd <= old.offset) {\n            old.offset -= inc.howMany;\n          } else if (incEnd <= oldEnd) {\n            if (inc.offset < old.offset) {\n              const intersectionLength = incEnd - old.offset;\n              old.offset = inc.offset;\n              old.howMany -= intersectionLength;\n              inc.nodesToHandle -= intersectionLength;\n            } else {\n              old.howMany -= inc.nodesToHandle;\n              inc.nodesToHandle = 0;\n            }\n          } else {\n            if (inc.offset <= old.offset) {\n              inc.nodesToHandle -= old.howMany;\n              old.howMany = 0;\n            } else if (inc.offset < oldEnd) {\n              const intersectionLength = oldEnd - inc.offset;\n              old.howMany -= intersectionLength;\n              inc.nodesToHandle -= intersectionLength;\n            }\n          }\n        }\n\n        if (old.type == 'remove') {\n          if (incEnd <= old.offset) {\n            old.offset -= inc.howMany;\n          } else if (inc.offset < old.offset) {\n            inc.nodesToHandle += old.howMany;\n            old.howMany = 0;\n          }\n        }\n\n        if (old.type == 'attribute') {\n          if (incEnd <= old.offset) {\n            old.offset -= inc.howMany;\n          } else if (inc.offset < old.offset) {\n            const intersectionLength = incEnd - old.offset;\n            old.offset = inc.offset;\n            old.howMany -= intersectionLength;\n          } else if (inc.offset < oldEnd) {\n            if (incEnd <= oldEnd) {\n              // On first sight in this case we don't need to split attribute operation into two.\n              // However the changes set is later converted to actions (see `_generateActionsFromChanges`).\n              // For that reason, no two changes may intersect.\n              // So we cannot have an attribute change that \"contains\" remove change.\n              // Attribute change needs to be split.\n              const howMany = old.howMany;\n              old.howMany = inc.offset - old.offset;\n              const howManyAfter = howMany - old.howMany - inc.nodesToHandle; // Add the second part of attribute change to the beginning of processed array so it won't\n              // be processed again in this loop.\n\n              changes.unshift({\n                type: 'attribute',\n                offset: inc.offset,\n                howMany: howManyAfter,\n                count: this._changeCount++\n              });\n            } else {\n              old.howMany -= oldEnd - inc.offset;\n            }\n          }\n        }\n      }\n\n      if (inc.type == 'attribute') {\n        // In case of attribute change, `howMany` should be kept same as `nodesToHandle`. It's not an error.\n        if (old.type == 'insert') {\n          if (inc.offset < old.offset && incEnd > old.offset) {\n            if (incEnd > oldEnd) {\n              // This case is similar to a case described when incoming change was insert and old change was attribute.\n              // See comment above.\n              //\n              // This time incoming change is attribute. We need to split incoming change in this case too.\n              // However this time, the second part of the attribute change needs to be processed further\n              // because there might be other changes that it collides with.\n              const attributePart = {\n                type: 'attribute',\n                offset: oldEnd,\n                howMany: incEnd - oldEnd,\n                count: this._changeCount++\n              };\n\n              this._handleChange(attributePart, changes);\n\n              changes.push(attributePart);\n            }\n\n            inc.nodesToHandle = old.offset - inc.offset;\n            inc.howMany = inc.nodesToHandle;\n          } else if (inc.offset >= old.offset && inc.offset < oldEnd) {\n            if (incEnd > oldEnd) {\n              inc.nodesToHandle = incEnd - oldEnd;\n              inc.offset = oldEnd;\n            } else {\n              inc.nodesToHandle = 0;\n            }\n          }\n        }\n\n        if (old.type == 'remove') {\n          // This is a case when attribute change \"contains\" remove change.\n          // The attribute change needs to be split into two because changes cannot intersect.\n          if (inc.offset < old.offset && incEnd > old.offset) {\n            const attributePart = {\n              type: 'attribute',\n              offset: old.offset,\n              howMany: incEnd - old.offset,\n              count: this._changeCount++\n            };\n\n            this._handleChange(attributePart, changes);\n\n            changes.push(attributePart);\n            inc.nodesToHandle = old.offset - inc.offset;\n            inc.howMany = inc.nodesToHandle;\n          }\n        }\n\n        if (old.type == 'attribute') {\n          // There are only two conflicting scenarios possible here:\n          if (inc.offset >= old.offset && incEnd <= oldEnd) {\n            // `old` change includes `inc` change, or they are the same.\n            inc.nodesToHandle = 0;\n            inc.howMany = 0;\n            inc.offset = 0;\n          } else if (inc.offset <= old.offset && incEnd >= oldEnd) {\n            // `inc` change includes `old` change.\n            old.howMany = 0;\n          }\n        }\n      }\n    }\n\n    inc.howMany = inc.nodesToHandle;\n    delete inc.nodesToHandle;\n  }\n  /**\n   * Returns an object with a single insert change description.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} parent The element in which the change happened.\n   * @param {Number} offset The offset at which change happened.\n   * @param {String} name The name of the removed element or `'$text'` for a character.\n   * @returns {Object} The diff item.\n   */\n\n\n  _getInsertDiff(parent, offset, name) {\n    return {\n      type: 'insert',\n      position: Position._createAt(parent, offset),\n      name,\n      length: 1,\n      changeCount: this._changeCount++\n    };\n  }\n  /**\n   * Returns an object with a single remove change description.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} parent The element in which change happened.\n   * @param {Number} offset The offset at which change happened.\n   * @param {String} name The name of the removed element or `'$text'` for a character.\n   * @returns {Object} The diff item.\n   */\n\n\n  _getRemoveDiff(parent, offset, name) {\n    return {\n      type: 'remove',\n      position: Position._createAt(parent, offset),\n      name,\n      length: 1,\n      changeCount: this._changeCount++\n    };\n  }\n  /**\n   * Returns an array of objects where each one is a single attribute change description.\n   *\n   * @private\n   * @param {module:engine/model/range~Range} range The range where the change happened.\n   * @param {Map} oldAttributes A map, map iterator or compatible object that contains attributes before the change.\n   * @param {Map} newAttributes A map, map iterator or compatible object that contains attributes after the change.\n   * @returns {Array.<Object>} An array containing one or more diff items.\n   */\n\n\n  _getAttributesDiff(range, oldAttributes, newAttributes) {\n    // Results holder.\n    const diffs = []; // Clone new attributes as we will be performing changes on this object.\n\n    newAttributes = new Map(newAttributes); // Look through old attributes.\n\n    for (const [key, oldValue] of oldAttributes) {\n      // Check what is the new value of the attribute (or if it was removed).\n      const newValue = newAttributes.has(key) ? newAttributes.get(key) : null; // If values are different (or attribute was removed)...\n\n      if (newValue !== oldValue) {\n        // Add diff item.\n        diffs.push({\n          type: 'attribute',\n          position: range.start,\n          range: range.clone(),\n          length: 1,\n          attributeKey: key,\n          attributeOldValue: oldValue,\n          attributeNewValue: newValue,\n          changeCount: this._changeCount++\n        });\n      } // Prevent returning two diff items for the same change.\n\n\n      newAttributes.delete(key);\n    } // Look through new attributes that weren't handled above.\n\n\n    for (const [key, newValue] of newAttributes) {\n      // Each of them is a new attribute. Add diff item.\n      diffs.push({\n        type: 'attribute',\n        position: range.start,\n        range: range.clone(),\n        length: 1,\n        attributeKey: key,\n        attributeOldValue: null,\n        attributeNewValue: newValue,\n        changeCount: this._changeCount++\n      });\n    }\n\n    return diffs;\n  }\n  /**\n   * Checks whether given element or any of its parents is an element that is buffered as an inserted element.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} element Element to check.\n   * @returns {Boolean}\n   */\n\n\n  _isInInsertedElement(element) {\n    const parent = element.parent;\n\n    if (!parent) {\n      return false;\n    }\n\n    const changes = this._changesInElement.get(parent);\n\n    const offset = element.startOffset;\n\n    if (changes) {\n      for (const change of changes) {\n        if (change.type == 'insert' && offset >= change.offset && offset < change.offset + change.howMany) {\n          return true;\n        }\n      }\n    }\n\n    return this._isInInsertedElement(parent);\n  }\n  /**\n   * Removes deeply all buffered changes that are registered in elements from range specified by `parent`, `offset`\n   * and `howMany`.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} parent\n   * @param {Number} offset\n   * @param {Number} howMany\n   */\n\n\n  _removeAllNestedChanges(parent, offset, howMany) {\n    const range = new Range(Position._createAt(parent, offset), Position._createAt(parent, offset + howMany));\n\n    for (const item of range.getItems({\n      shallow: true\n    })) {\n      if (item.is('element')) {\n        this._elementSnapshots.delete(item);\n\n        this._changesInElement.delete(item);\n\n        this._removeAllNestedChanges(item, 0, item.maxOffset);\n      }\n    }\n  }\n\n} // Returns an array that is a copy of passed child list with the exception that text nodes are split to one or more\n// objects, each representing one character and attributes set on that character.\n\nfunction _getChildrenSnapshot(children) {\n  const snapshot = [];\n\n  for (const child of children) {\n    if (child.is('text')) {\n      for (let i = 0; i < child.data.length; i++) {\n        snapshot.push({\n          name: '$text',\n          attributes: new Map(child.getAttributes())\n        });\n      }\n    } else {\n      snapshot.push({\n        name: child.name,\n        attributes: new Map(child.getAttributes())\n      });\n    }\n  }\n\n  return snapshot;\n} // Generates array of actions for given changes set.\n// It simulates what `diff` function does.\n// Generated actions are:\n// - 'e' for 'equal' - when item at that position did not change,\n// - 'i' for 'insert' - when item at that position was inserted,\n// - 'r' for 'remove' - when item at that position was removed,\n// - 'a' for 'attribute' - when item at that position has it attributes changed.\n//\n// Example (assume that uppercase letters have bold attribute, compare with function code):\n//\n// children before:\tfooBAR\n// children after:\tfoxybAR\n//\n// changes: type: remove, offset: 1, howMany: 1\n//\t\t\ttype: insert, offset: 2, howMany: 2\n//\t\t\ttype: attribute, offset: 4, howMany: 1\n//\n// expected actions: equal (f), remove (o), equal (o), insert (x), insert (y), attribute (b), equal (A), equal (R)\n//\n// steps taken by th script:\n//\n// 1. change = \"type: remove, offset: 1, howMany: 1\"; offset = 0; oldChildrenHandled = 0\n//    1.1 between this change and the beginning is one not-changed node, fill with one equal action, one old child has been handled\n//    1.2 this change removes one node, add one remove action\n//    1.3 change last visited `offset` to 1\n//    1.4 since an old child has been removed, one more old child has been handled\n//    1.5 actions at this point are: equal, remove\n//\n// 2. change = \"type: insert, offset: 2, howMany: 2\"; offset = 1; oldChildrenHandled = 2\n//    2.1 between this change and previous change is one not-changed node, add equal action, another one old children has been handled\n//    2.2 this change inserts two nodes, add two insert actions\n//    2.3 change last visited offset to the end of the inserted range, that is 4\n//    2.4 actions at this point are: equal, remove, equal, insert, insert\n//\n// 3. change = \"type: attribute, offset: 4, howMany: 1\"; offset = 4, oldChildrenHandled = 3\n//    3.1 between this change and previous change are no not-changed nodes\n//    3.2 this change changes one node, add one attribute action\n//    3.3 change last visited `offset` to the end of change range, that is 5\n//    3.4 since an old child has been changed, one more old child has been handled\n//    3.5 actions at this point are: equal, remove, equal, insert, insert, attribute\n//\n// 4. after loop oldChildrenHandled = 4, oldChildrenLength = 6 (fooBAR is 6 characters)\n//    4.1 fill up with two equal actions\n//\n// The result actions are: equal, remove, equal, insert, insert, attribute, equal, equal.\n\n\nfunction _generateActionsFromChanges(oldChildrenLength, changes) {\n  const actions = [];\n  let offset = 0;\n  let oldChildrenHandled = 0; // Go through all buffered changes.\n\n  for (const change of changes) {\n    // First, fill \"holes\" between changes with \"equal\" actions.\n    if (change.offset > offset) {\n      for (let i = 0; i < change.offset - offset; i++) {\n        actions.push('e');\n      }\n\n      oldChildrenHandled += change.offset - offset;\n    } // Then, fill up actions accordingly to change type.\n\n\n    if (change.type == 'insert') {\n      for (let i = 0; i < change.howMany; i++) {\n        actions.push('i');\n      } // The last handled offset is after inserted range.\n\n\n      offset = change.offset + change.howMany;\n    } else if (change.type == 'remove') {\n      for (let i = 0; i < change.howMany; i++) {\n        actions.push('r');\n      } // The last handled offset is at the position where the nodes were removed.\n\n\n      offset = change.offset; // We removed `howMany` old nodes, update `oldChildrenHandled`.\n\n      oldChildrenHandled += change.howMany;\n    } else {\n      actions.push(...'a'.repeat(change.howMany).split('')); // The last handled offset is at the position after the changed range.\n\n      offset = change.offset + change.howMany; // We changed `howMany` old nodes, update `oldChildrenHandled`.\n\n      oldChildrenHandled += change.howMany;\n    }\n  } // Fill \"equal\" actions at the end of actions set. Use `oldChildrenHandled` to see how many children\n  // has not been changed / removed at the end of their parent.\n\n\n  if (oldChildrenHandled < oldChildrenLength) {\n    for (let i = 0; i < oldChildrenLength - oldChildrenHandled - offset; i++) {\n      actions.push('e');\n    }\n  }\n\n  return actions;\n} // Filter callback for Array.filter that filters out change entries that are in graveyard.\n\n\nfunction _changesInGraveyardFilter(entry) {\n  const posInGy = entry.position && entry.position.root.rootName == '$graveyard';\n  const rangeInGy = entry.range && entry.range.root.rootName == '$graveyard';\n  return !posInGy && !rangeInGy;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/history\n */\n\n/**\n * `History` keeps the track of all the operations applied to the {@link module:engine/model/document~Document document}.\n */\nexport default class History {\n  /**\n   * Creates an empty History instance.\n   */\n  constructor() {\n    /**\n     * Operations added to the history.\n     *\n     * @protected\n     * @member {Array.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_operations\n     */\n    this._operations = [];\n    /**\n     * Holds an information which {@link module:engine/model/operation/operation~Operation operation} undoes which\n     * {@link module:engine/model/operation/operation~Operation operation}.\n     *\n     * Keys of the map are \"undoing operations\", that is operations that undone some other operations. For each key, the\n     * value is an operation that has been undone by the \"undoing operation\".\n     *\n     * @private\n     * @member {Map} module:engine/model/history~History#_undoPairs\n     */\n\n    this._undoPairs = new Map();\n    /**\n     * Holds all undone operations.\n     *\n     * @private\n     * @member {Set.<module:engine/model/operation/operation~Operation>} module:engine/model/history~History#_undoneOperations\n     */\n\n    this._undoneOperations = new Set();\n  }\n  /**\n   * Adds an operation to the history.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation Operation to add.\n   */\n\n\n  addOperation(operation) {\n    if (this._operations.includes(operation)) {\n      return;\n    }\n\n    this._operations.push(operation);\n  }\n  /**\n   * Returns operations added to the history.\n   *\n   * @param {Number} [from=0] Base version from which operations should be returned (inclusive). Defaults to `0`, which means\n   * that operations from the first one will be returned.\n   * @param {Number} [to=Number.POSITIVE_INFINITY] Base version up to which operations should be returned (exclusive).\n   * Defaults to `Number.POSITIVE_INFINITY` which means that operations up to the last one will be returned.\n   * @returns {Iterable.<module:engine/model/operation/operation~Operation>} Operations added to the history.\n   */\n\n\n  getOperations(from = 0, to = Number.POSITIVE_INFINITY) {\n    if (from < 0) {\n      return [];\n    }\n\n    return this._operations.slice(from, to);\n  }\n  /**\n   * Returns operation from the history that bases on given `baseVersion`.\n   *\n   * @param {Number} baseVersion Base version of the operation to get.\n   * @returns {module:engine/model/operation/operation~Operation|null} Operation with given base version or `null` if\n   * there is no such operation in history.\n   */\n\n\n  getOperation(baseVersion) {\n    return this._operations[baseVersion];\n  }\n  /**\n   * Marks in history that one operation is an operation that is undoing the other operation. By marking operation this way,\n   * history is keeping more context information about operations, which helps in operational transformation.\n   *\n   * @param {module:engine/model/operation/operation~Operation} undoneOperation Operation which is undone by `undoingOperation`.\n   * @param {module:engine/model/operation/operation~Operation} undoingOperation Operation which undoes `undoneOperation`.\n   */\n\n\n  setOperationAsUndone(undoneOperation, undoingOperation) {\n    this._undoPairs.set(undoingOperation, undoneOperation);\n\n    this._undoneOperations.add(undoneOperation);\n  }\n  /**\n   * Checks whether given `operation` is undoing any other operation.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n   * @returns {Boolean} `true` if given `operation` is undoing any other operation, `false` otherwise.\n   */\n\n\n  isUndoingOperation(operation) {\n    return this._undoPairs.has(operation);\n  }\n  /**\n   * Checks whether given `operation` has been undone by any other operation.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation Operation to check.\n   * @returns {Boolean} `true` if given `operation` has been undone any other operation, `false` otherwise.\n   */\n\n\n  isUndoneOperation(operation) {\n    return this._undoneOperations.has(operation);\n  }\n  /**\n   * For given `undoingOperation`, returns the operation which has been undone by it.\n   *\n   * @param {module:engine/model/operation/operation~Operation} undoingOperation\n   * @returns {module:engine/model/operation/operation~Operation|undefined} Operation that has been undone by given\n   * `undoingOperation` or `undefined` if given `undoingOperation` is not undoing any other operation.\n   */\n\n\n  getUndoneOperation(undoingOperation) {\n    return this._undoPairs.get(undoingOperation);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * Set of utils to handle unicode characters.\n *\n * @module utils/unicode\n */\n\n/**\n * Checks whether given `character` is a combining mark.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\nexport function isCombiningMark(character) {\n  return !!character && character.length == 1 && /[\\u0300-\\u036f\\u1ab0-\\u1aff\\u1dc0-\\u1dff\\u20d0-\\u20ff\\ufe20-\\ufe2f]/.test(character);\n}\n/**\n * Checks whether given `character` is a high half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\n\nexport function isHighSurrogateHalf(character) {\n  return !!character && character.length == 1 && /[\\ud800-\\udbff]/.test(character);\n}\n/**\n * Checks whether given `character` is a low half of surrogate pair.\n *\n * Using UTF-16 terminology, a surrogate pair denotes UTF-16 character using two UTF-8 characters. The surrogate pair\n * consist of high surrogate pair character followed by low surrogate pair character.\n *\n * @param {String} character Character to check.\n * @returns {Boolean}\n */\n\nexport function isLowSurrogateHalf(character) {\n  return !!character && character.length == 1 && /[\\udc00-\\udfff]/.test(character);\n}\n/**\n * Checks whether given offset in a string is inside a surrogate pair (between two surrogate halves).\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\n\nexport function isInsideSurrogatePair(string, offset) {\n  return isHighSurrogateHalf(string.charAt(offset - 1)) && isLowSurrogateHalf(string.charAt(offset));\n}\n/**\n * Checks whether given offset in a string is between base character and combining mark or between two combining marks.\n *\n * @param {String} string String to check.\n * @param {Number} offset Offset to check.\n * @returns {Boolean}\n */\n\nexport function isInsideCombinedSymbol(string, offset) {\n  return isCombiningMark(string.charAt(offset));\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/document\n */\nimport Differ from './differ';\nimport RootElement from './rootelement';\nimport History from './history';\nimport DocumentSelection from './documentselection';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport { clone } from 'lodash-es';\nconst graveyardName = '$graveyard';\n/**\n * Data model's document. It contains the model's structure, its selection and the history of changes.\n *\n * Read more about working with the model in\n * {@glink framework/guides/architecture/editing-engine#model introduction to the the editing engine's architecture}.\n *\n * Usually, the document contains just one {@link module:engine/model/document~Document#roots root element}, so\n * you can retrieve it by just calling {@link module:engine/model/document~Document#getRoot} without specifying its name:\n *\n *\t\tmodel.document.getRoot(); // -> returns the main root\n *\n * However, the document may contain multiple roots – e.g. when the editor has multiple editable areas\n * (e.g. a title and a body of a message).\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class Document {\n  /**\n   * Creates an empty document instance with no {@link #roots} (other than\n   * the {@link #graveyard graveyard root}).\n   */\n  constructor(model) {\n    /**\n     * The {@link module:engine/model/model~Model model} that the document is a part of.\n     *\n     * @readonly\n     * @type {module:engine/model/model~Model}\n     */\n    this.model = model;\n    /**\n     * The document version. It starts from `0` and every operation increases the version number. It is used to ensure that\n     * operations are applied on a proper document version.\n     *\n     * If the {@link module:engine/model/operation/operation~Operation#baseVersion base version} does not match the document version,\n     * a {@link module:utils/ckeditorerror~CKEditorError model-document-applyOperation-wrong-version} error is thrown.\n     *\n     * @readonly\n     * @type {Number}\n     */\n\n    this.version = 0;\n    /**\n     * The document's history.\n     *\n     * @readonly\n     * @type {module:engine/model/history~History}\n     */\n\n    this.history = new History(this);\n    /**\n     * The selection in this document.\n     *\n     * @readonly\n     * @type {module:engine/model/documentselection~DocumentSelection}\n     */\n\n    this.selection = new DocumentSelection(this);\n    /**\n     * A list of roots that are owned and managed by this document. Use {@link #createRoot} and\n     * {@link #getRoot} to manipulate it.\n     *\n     * @readonly\n     * @type {module:utils/collection~Collection}\n     */\n\n    this.roots = new Collection({\n      idProperty: 'rootName'\n    });\n    /**\n     * The model differ object. Its role is to buffer changes done on the model document and then calculate a diff of those changes.\n     *\n     * @readonly\n     * @type {module:engine/model/differ~Differ}\n     */\n\n    this.differ = new Differ(model.markers);\n    /**\n     * Post-fixer callbacks registered to the model document.\n     *\n     * @private\n     * @type {Set.<Function>}\n     */\n\n    this._postFixers = new Set();\n    /**\n     * A boolean indicates whether the selection has changed until\n     *\n     * @private\n     * @type {Boolean}\n     */\n\n    this._hasSelectionChangedFromTheLastChangeBlock = false; // Graveyard tree root. Document always have a graveyard root, which stores removed nodes.\n\n    this.createRoot('$root', graveyardName); // First, if the operation is a document operation check if it's base version is correct.\n\n    this.listenTo(model, 'applyOperation', (evt, args) => {\n      const operation = args[0];\n\n      if (operation.isDocumentOperation && operation.baseVersion !== this.version) {\n        /**\n         * Only operations with matching versions can be applied.\n         *\n         * @error document-applyOperation-wrong-version\n         * @param {module:engine/model/operation/operation~Operation} operation\n         */\n        throw new CKEditorError('model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.', this, {\n          operation\n        });\n      }\n    }, {\n      priority: 'highest'\n    }); // Then, still before an operation is applied on model, buffer the change in differ.\n\n    this.listenTo(model, 'applyOperation', (evt, args) => {\n      const operation = args[0];\n\n      if (operation.isDocumentOperation) {\n        this.differ.bufferOperation(operation);\n      }\n    }, {\n      priority: 'high'\n    }); // After the operation is applied, bump document's version and add the operation to the history.\n\n    this.listenTo(model, 'applyOperation', (evt, args) => {\n      const operation = args[0];\n\n      if (operation.isDocumentOperation) {\n        this.version++;\n        this.history.addOperation(operation);\n      }\n    }, {\n      priority: 'low'\n    }); // Listen to selection changes. If selection changed, mark it.\n\n    this.listenTo(this.selection, 'change', () => {\n      this._hasSelectionChangedFromTheLastChangeBlock = true;\n    }); // Buffer marker changes.\n    // This is not covered in buffering operations because markers may change outside of them (when they\n    // are modified using `model.markers` collection, not through `MarkerOperation`).\n\n    this.listenTo(model.markers, 'update', (evt, marker, oldRange, newRange) => {\n      // Whenever marker is updated, buffer that change.\n      this.differ.bufferMarkerChange(marker.name, oldRange, newRange, marker.affectsData);\n\n      if (oldRange === null) {\n        // If this is a new marker, add a listener that will buffer change whenever marker changes.\n        marker.on('change', (evt, oldRange) => {\n          this.differ.bufferMarkerChange(marker.name, oldRange, marker.getRange(), marker.affectsData);\n        });\n      }\n    });\n  }\n  /**\n   * The graveyard tree root. A document always has a graveyard root that stores removed nodes.\n   *\n   * @readonly\n   * @member {module:engine/model/rootelement~RootElement}\n   */\n\n\n  get graveyard() {\n    return this.getRoot(graveyardName);\n  }\n  /**\n   * Creates a new root.\n   *\n   * @param {String} [elementName='$root'] The element name. Defaults to `'$root'` which also has some basic schema defined\n   * (`$block`s are allowed inside the `$root`). Make sure to define a proper schema if you use a different name.\n   * @param {String} [rootName='main'] A unique root name.\n   * @returns {module:engine/model/rootelement~RootElement} The created root.\n   */\n\n\n  createRoot(elementName = '$root', rootName = 'main') {\n    if (this.roots.get(rootName)) {\n      /**\n       * A root with the specified name already exists.\n       *\n       * @error model-document-createRoot-name-exists\n       * @param {module:engine/model/document~Document} doc\n       * @param {String} name\n       */\n      throw new CKEditorError('model-document-createRoot-name-exists: Root with specified name already exists.', this, {\n        name: rootName\n      });\n    }\n\n    const root = new RootElement(this, elementName, rootName);\n    this.roots.add(root);\n    return root;\n  }\n  /**\n   * Removes all event listeners set by the document instance.\n   */\n\n\n  destroy() {\n    this.selection.destroy();\n    this.stopListening();\n  }\n  /**\n   * Returns a root by its name.\n   *\n   * @param {String} [name='main'] A unique root name.\n   * @returns {module:engine/model/rootelement~RootElement|null} The root registered under a given name or `null` when\n   * there is no root with the given name.\n   */\n\n\n  getRoot(name = 'main') {\n    return this.roots.get(name);\n  }\n  /**\n   * Returns an array with names of all roots (without the {@link #graveyard}) added to the document.\n   *\n   * @returns {Array.<String>} Roots names.\n   */\n\n\n  getRootNames() {\n    return Array.from(this.roots, root => root.rootName).filter(name => name != graveyardName);\n  }\n  /**\n   * Used to register a post-fixer callback. A post-fixer mechanism guarantees that the features\n   * will operate on a correct model state.\n   *\n   * An execution of a feature may lead to an incorrect document tree state. The callbacks are used to fix the document tree after\n   * it has changed. Post-fixers are fired just after all changes from the outermost change block were applied but\n   * before the {@link module:engine/model/document~Document#event:change change event} is fired. If a post-fixer callback made\n   * a change, it should return `true`. When this happens, all post-fixers are fired again to check if something else should\n   * not be fixed in the new document tree state.\n   *\n   * As a parameter, a post-fixer callback receives a {@link module:engine/model/writer~Writer writer} instance connected with the\n   * executed changes block. Thanks to that, all changes done by the callback will be added to the same\n   * {@link module:engine/model/batch~Batch batch} (and undo step) as the original changes. This makes post-fixer changes transparent\n   * for the user.\n   *\n   * An example of a post-fixer is a callback that checks if all the data were removed from the editor. If so, the\n   * callback should add an empty paragraph so that the editor is never empty:\n   *\n   *\t\tdocument.registerPostFixer( writer => {\n   *\t\t\tconst changes = document.differ.getChanges();\n   *\n   *\t\t\t// Check if the changes lead to an empty root in the editor.\n   *\t\t\tfor ( const entry of changes ) {\n   *\t\t\t\tif ( entry.type == 'remove' && entry.position.root.isEmpty ) {\n   *\t\t\t\t\twriter.insertElement( 'paragraph', entry.position.root, 0 );\n   *\n   *\t\t\t\t\t// It is fine to return early, even if multiple roots would need to be fixed.\n   *\t\t\t\t\t// All post-fixers will be fired again, so if there are more empty roots, those will be fixed, too.\n   *\t\t\t\t\treturn true;\n   *\t\t\t\t}\n   *\t\t\t}\n   *\t\t} );\n   *\n   * @param {Function} postFixer\n   */\n\n\n  registerPostFixer(postFixer) {\n    this._postFixers.add(postFixer);\n  }\n  /**\n   * A custom `toJSON()` method to solve child-parent circular dependencies.\n   *\n   * @returns {Object} A clone of this object with the document property changed to a string.\n   */\n\n\n  toJSON() {\n    const json = clone(this); // Due to circular references we need to remove parent reference.\n\n    json.selection = '[engine.model.DocumentSelection]';\n    json.model = '[engine.model.Model]';\n    return json;\n  }\n  /**\n   * Check if there were any changes done on document, and if so, call post-fixers,\n   * fire `change` event for features and conversion and then reset the differ.\n   * Fire `change:data` event when at least one operation or buffered marker changes the data.\n   *\n   * @protected\n   * @fires change\n   * @fires change:data\n   * @param {module:engine/model/writer~Writer} writer The writer on which post-fixers will be called.\n   */\n\n\n  _handleChangeBlock(writer) {\n    if (this._hasDocumentChangedFromTheLastChangeBlock()) {\n      this._callPostFixers(writer); // Refresh selection attributes according to the final position in the model after the change.\n\n\n      this.selection.refresh();\n\n      if (this.differ.hasDataChanges()) {\n        this.fire('change:data', writer.batch);\n      } else {\n        this.fire('change', writer.batch);\n      } // Theoretically, it is not necessary to refresh selection after change event because\n      // post-fixers are the last who should change the model, but just in case...\n\n\n      this.selection.refresh();\n      this.differ.reset();\n    }\n\n    this._hasSelectionChangedFromTheLastChangeBlock = false;\n  }\n  /**\n   * Returns whether there is a buffered change or if the selection has changed from the last\n   * {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block}\n   * or {@link module:engine/model/model~Model#change `change()` block}.\n   *\n   * @protected\n   * @returns {Boolean} Returns `true` if document has changed from the last `change()` or `enqueueChange()` block.\n   */\n\n\n  _hasDocumentChangedFromTheLastChangeBlock() {\n    return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock;\n  }\n  /**\n   * Returns the default root for this document which is either the first root that was added to the document using\n   * {@link #createRoot} or the {@link #graveyard graveyard root} if no other roots were created.\n   *\n   * @protected\n   * @returns {module:engine/model/rootelement~RootElement} The default root for this document.\n   */\n\n\n  _getDefaultRoot() {\n    for (const root of this.roots) {\n      if (root !== this.graveyard) {\n        return root;\n      }\n    }\n\n    return this.graveyard;\n  }\n  /**\n   * Returns the default range for this selection. The default range is a collapsed range that starts and ends\n   * at the beginning of this selection's document {@link #_getDefaultRoot default root}.\n   *\n   * @protected\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  _getDefaultRange() {\n    const defaultRoot = this._getDefaultRoot();\n\n    const model = this.model;\n    const schema = model.schema; // Find the first position where the selection can be put.\n\n    const position = model.createPositionFromPath(defaultRoot, [0]);\n    const nearestRange = schema.getNearestSelectionRange(position); // If valid selection range is not found - return range collapsed at the beginning of the root.\n\n    return nearestRange || model.createRange(position);\n  }\n  /**\n   * Checks whether a given {@link module:engine/model/range~Range range} is a valid range for\n   * the {@link #selection document's selection}.\n   *\n   * @private\n   * @param {module:engine/model/range~Range} range A range to check.\n   * @returns {Boolean} `true` if `range` is valid, `false` otherwise.\n   */\n\n\n  _validateSelectionRange(range) {\n    return validateTextNodePosition(range.start) && validateTextNodePosition(range.end);\n  }\n  /**\n   * Performs post-fixer loops. Executes post-fixer callbacks as long as none of them has done any changes to the model.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer The writer on which post-fixer callbacks will be called.\n   */\n\n\n  _callPostFixers(writer) {\n    let wasFixed = false;\n\n    do {\n      for (const callback of this._postFixers) {\n        // Ensure selection attributes are up to date before each post-fixer.\n        // https://github.com/ckeditor/ckeditor5-engine/issues/1673.\n        //\n        // It might be good to refresh the selection after each operation but at the moment it leads\n        // to losing attributes for composition or and spell checking\n        // https://github.com/ckeditor/ckeditor5-typing/issues/188\n        this.selection.refresh();\n        wasFixed = callback(writer);\n\n        if (wasFixed) {\n          break;\n        }\n      }\n    } while (wasFixed);\n  }\n  /**\n   * Fired after each {@link module:engine/model/model~Model#enqueueChange `enqueueChange()` block} or the outermost\n   * {@link module:engine/model/model~Model#change `change()` block} was executed and the document was changed\n   * during that block's execution.\n   *\n   * The changes which this event will cover include:\n   *\n   * * document structure changes,\n   * * selection changes,\n   * * marker changes.\n   *\n   * If you want to be notified about all these changes, then simply listen to this event like this:\n   *\n   *\t\tmodel.document.on( 'change', () => {\n   *\t\t\tconsole.log( 'The document has changed!' );\n   *\t\t} );\n   *\n   * If, however, you only want to be notified about the data changes, then use the\n   * {@link module:engine/model/document~Document#event:change:data change:data} event,\n   * which is fired for document structure changes and marker changes (which affects the data).\n   *\n   *\t\tmodel.document.on( 'change:data', () => {\n   *\t\t\tconsole.log( 'The data has changed!' );\n   *\t\t} );\n   *\n   * @event change\n   * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n   */\n\n  /**\n   * It is a narrower version of the {@link #event:change} event. It is fired for changes which\n   * affect the editor data. This is:\n   *\n   * * document structure changes,\n   * * marker changes (which affects the data).\n   *\n   * If you want to be notified about the data changes, then listen to this event:\n   *\n   *\t\tmodel.document.on( 'change:data', () => {\n   *\t\t\tconsole.log( 'The data has changed!' );\n   *\t\t} );\n   *\n   * If you would like to listen to all document changes, then check out the\n   * {@link module:engine/model/document~Document#event:change change} event.\n   *\n   * @event change:data\n   * @param {module:engine/model/batch~Batch} batch The batch that was used in the executed changes block.\n   */\n\n\n}\nmix(Document, EmitterMixin); // Checks whether given range boundary position is valid for document selection, meaning that is not between\n// unicode surrogate pairs or base character and combining marks.\n\nfunction validateTextNodePosition(rangeBoundary) {\n  const textNode = rangeBoundary.textNode;\n\n  if (textNode) {\n    const data = textNode.data;\n    const offset = rangeBoundary.offset - textNode.startOffset;\n    return !isInsideSurrogatePair(data, offset) && !isInsideCombinedSymbol(data, offset);\n  }\n\n  return true;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/markercollection\n */\nimport LiveRange from './liverange';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The collection of all {@link module:engine/model/markercollection~Marker markers} attached to the document.\n * It lets you {@link module:engine/model/markercollection~MarkerCollection#get get} markers or track them using\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} event.\n *\n * To create, change or remove makers use {@link module:engine/model/writer~Writer model writers'} methods:\n * {@link module:engine/model/writer~Writer#addMarker} or {@link module:engine/model/writer~Writer#removeMarker}. Since\n * the writer is the only proper way to change the data model it is not possible to change markers directly using this\n * collection. All markers created by the writer will be automatically added to this collection.\n *\n * By default there is one marker collection available as {@link module:engine/model/model~Model#markers model property}.\n *\n * @see module:engine/model/markercollection~Marker\n */\n\nexport default class MarkerCollection {\n  /**\n   * Creates a markers collection.\n   */\n  constructor() {\n    /**\n     * Stores {@link ~Marker markers} added to the collection.\n     *\n     * @private\n     * @member {Map} #_markers\n     */\n    this._markers = new Map();\n  }\n  /**\n   * Iterable interface.\n   *\n   * Iterates over all {@link ~Marker markers} added to the collection.\n   *\n   * @returns {Iterable}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._markers.values();\n  }\n  /**\n   * Checks if marker with given `markerName` is in the collection.\n   *\n   * @param {String} markerName Marker name.\n   * @returns {Boolean} `true` if marker with given `markerName` is in the collection, `false` otherwise.\n   */\n\n\n  has(markerName) {\n    return this._markers.has(markerName);\n  }\n  /**\n   * Returns {@link ~Marker marker} with given `markerName`.\n   *\n   * @param {String} markerName Name of marker to get.\n   * @returns {module:engine/model/markercollection~Marker|null} Marker with given name or `null` if such marker was\n   * not added to the collection.\n   */\n\n\n  get(markerName) {\n    return this._markers.get(markerName) || null;\n  }\n  /**\n   * Creates and adds a {@link ~Marker marker} to the `MarkerCollection` with given name on given\n   * {@link module:engine/model/range~Range range}.\n   *\n   * If `MarkerCollection` already had a marker with given name (or {@link ~Marker marker} was passed), the marker in\n   * collection is updated and {@link module:engine/model/markercollection~MarkerCollection#event:update} event is fired\n   * but only if there was a change (marker range or {@link module:engine/model/markercollection~Marker#managedUsingOperations}\n   * flag has changed.\n   *\n   * @protected\n   * @fires module:engine/model/markercollection~MarkerCollection#event:update\n   * @param {String|module:engine/model/markercollection~Marker} markerOrName Name of marker to set or marker instance to update.\n   * @param {module:engine/model/range~Range} range Marker range.\n   * @param {Boolean} [managedUsingOperations=false] Specifies whether the marker is managed using operations.\n   * @param {Boolean} [affectsData=false] Specifies whether the marker affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   * @returns {module:engine/model/markercollection~Marker} `Marker` instance which was added or updated.\n   */\n\n\n  _set(markerOrName, range, managedUsingOperations = false, affectsData = false) {\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n    const oldMarker = this._markers.get(markerName);\n\n    if (oldMarker) {\n      const oldRange = oldMarker.getRange();\n      let hasChanged = false;\n\n      if (!oldRange.isEqual(range)) {\n        oldMarker._attachLiveRange(LiveRange.fromRange(range));\n\n        hasChanged = true;\n      }\n\n      if (managedUsingOperations != oldMarker.managedUsingOperations) {\n        oldMarker._managedUsingOperations = managedUsingOperations;\n        hasChanged = true;\n      }\n\n      if (typeof affectsData === 'boolean' && affectsData != oldMarker.affectsData) {\n        oldMarker._affectsData = affectsData;\n        hasChanged = true;\n      }\n\n      if (hasChanged) {\n        this.fire('update:' + markerName, oldMarker, oldRange, range);\n      }\n\n      return oldMarker;\n    }\n\n    const liveRange = LiveRange.fromRange(range);\n    const marker = new Marker(markerName, liveRange, managedUsingOperations, affectsData);\n\n    this._markers.set(markerName, marker);\n\n    this.fire('update:' + markerName, marker, null, range);\n    return marker;\n  }\n  /**\n   * Removes given {@link ~Marker marker} or a marker with given name from the `MarkerCollection`.\n   *\n   * @protected\n   * @fires module:engine/model/markercollection~MarkerCollection#event:update\n   * @param {String} markerOrName Marker or name of a marker to remove.\n   * @returns {Boolean} `true` if marker was found and removed, `false` otherwise.\n   */\n\n\n  _remove(markerOrName) {\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n    const oldMarker = this._markers.get(markerName);\n\n    if (oldMarker) {\n      this._markers.delete(markerName);\n\n      this.fire('update:' + markerName, oldMarker, oldMarker.getRange(), null);\n\n      this._destroyMarker(oldMarker);\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Fires an {@link module:engine/model/markercollection~MarkerCollection#event:update} event for the given {@link ~Marker marker}\n   * but does not change the marker. Useful to force {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast\n   * conversion} for the marker.\n   *\n   * @protected\n   * @fires module:engine/model/markercollection~MarkerCollection#event:update\n   * @param {String} markerOrName Marker or name of a marker to refresh.\n   */\n\n\n  _refresh(markerOrName) {\n    const markerName = markerOrName instanceof Marker ? markerOrName.name : markerOrName;\n\n    const marker = this._markers.get(markerName);\n\n    if (!marker) {\n      throw new CKEditorError('markercollection-refresh-marker-not-exists: Marker with provided name does not exists.', this);\n    }\n\n    const range = marker.getRange();\n    this.fire('update:' + markerName, marker, range, range, marker.managedUsingOperations, marker.affectsData);\n  }\n  /**\n   * Returns iterator that iterates over all markers, which ranges contain given {@link module:engine/model/position~Position position}.\n   *\n   * @param {module:engine/model/position~Position} position\n   * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  *getMarkersAtPosition(position) {\n    for (const marker of this) {\n      if (marker.getRange().containsPosition(position)) {\n        yield marker;\n      }\n    }\n  }\n  /**\n   * Returns iterator that iterates over all markers, which intersects with given {@link module:engine/model/range~Range range}.\n   *\n   * @param {module:engine/model/range~Range} range\n   * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  *getMarkersIntersectingRange(range) {\n    for (const marker of this) {\n      if (marker.getRange().getIntersection(range) !== null) {\n        yield marker;\n      }\n    }\n  }\n  /**\n   * Destroys marker collection and all markers inside it.\n   */\n\n\n  destroy() {\n    for (const marker of this._markers.values()) {\n      this._destroyMarker(marker);\n    }\n\n    this._markers = null;\n    this.stopListening();\n  }\n  /**\n   * Iterates over all markers that starts with given `prefix`.\n   *\n   *\t\tconst markerFooA = markersCollection.set( 'foo:a', rangeFooA );\n   *\t\tconst markerFooB = markersCollection.set( 'foo:b', rangeFooB );\n   *\t\tconst markerBarA = markersCollection.set( 'bar:a', rangeBarA );\n   *\t\tconst markerFooBarA = markersCollection.set( 'foobar:a', rangeFooBarA );\n   *\t\tArray.from( markersCollection.getMarkersGroup( 'foo' ) ); // [ markerFooA, markerFooB ]\n   *\t\tArray.from( markersCollection.getMarkersGroup( 'a' ) ); // []\n   *\n   * @param prefix\n   * @returns {Iterable.<module:engine/model/markercollection~Marker>}\n   */\n\n\n  *getMarkersGroup(prefix) {\n    for (const marker of this._markers.values()) {\n      if (marker.name.startsWith(prefix + ':')) {\n        yield marker;\n      }\n    }\n  }\n  /**\n   * Destroys the marker.\n   *\n   * @private\n   * @param {module:engine/model/markercollection~Marker} marker Marker to destroy.\n   */\n\n\n  _destroyMarker(marker) {\n    marker.stopListening();\n\n    marker._detachLiveRange();\n  }\n  /**\n   * Fired whenever marker is added, updated or removed from `MarkerCollection`.\n   *\n   * @event update\n   * @param {module:engine/model/markercollection~Marker} marker Updated Marker.\n   * @param {module:engine/model/range~Range|null} oldRange Marker range before the update. When is not defined it\n   * means that marker is just added.\n   * @param {module:engine/model/range~Range|null} newRange Marker range after update. When is not defined it\n   * means that marker is just removed.\n   */\n\n\n}\nmix(MarkerCollection, EmitterMixin);\n/**\n * `Marker` is a continuous parts of model (like a range), is named and represent some kind of information about marked\n * part of model document. In contrary to {@link module:engine/model/node~Node nodes}, which are building blocks of\n * model document tree, markers are not stored directly in document tree but in\n * {@link module:engine/model/model~Model#markers model markers' collection}. Still, they are document data, by giving\n * additional meaning to the part of a model document between marker start and marker end.\n *\n * In this sense, markers are similar to adding and converting attributes on nodes. The difference is that attribute is\n * connected with a given node (e.g. a character is bold no matter if it gets moved or content around it changes).\n * Markers on the other hand are continuous ranges and are characterized by their start and end position. This means that\n * any character in the marker is marked by the marker. For example, if a character is moved outside of marker it stops being\n * \"special\" and the marker is shrunk. Similarly, when a character is moved into the marker from other place in document\n * model, it starts being \"special\" and the marker is enlarged.\n *\n * Another upside of markers is that finding marked part of document is fast and easy. Using attributes to mark some nodes\n * and then trying to find that part of document would require traversing whole document tree. Marker gives instant access\n * to the range which it is marking at the moment.\n *\n * Markers are built from a name and a range.\n *\n * Range of the marker is updated automatically when document changes, using\n * {@link module:engine/model/liverange~LiveRange live range} mechanism.\n *\n * Name is used to group and identify markers. Names have to be unique, but markers can be grouped by\n * using common prefixes, separated with `:`, for example: `user:john` or `search:3`. That's useful in term of creating\n * namespaces for custom elements (e.g. comments, highlights). You can use this prefixes in\n * {@link module:engine/model/markercollection~MarkerCollection#event:update} listeners to listen on changes in a group of markers.\n * For instance: `model.markers.on( 'set:user', callback );` will be called whenever any `user:*` markers changes.\n *\n * There are two types of markers.\n *\n * 1. Markers managed directly, without using operations. They are added directly by {@link module:engine/model/writer~Writer}\n * to the {@link module:engine/model/markercollection~MarkerCollection} without any additional mechanism. They can be used\n * as bookmarks or visual markers. They are great for showing results of the find, or select link when the focus is in the input.\n *\n * 1. Markers managed using operations. These markers are also stored in {@link module:engine/model/markercollection~MarkerCollection}\n * but changes in these markers is managed the same way all other changes in the model structure - using operations.\n * Therefore, they are handled in the undo stack and synchronized between clients if the collaboration plugin is enabled.\n * This type of markers is useful for solutions like spell checking or comments.\n *\n * Both type of them should be added / updated by {@link module:engine/model/writer~Writer#addMarker}\n * and removed by {@link module:engine/model/writer~Writer#removeMarker} methods.\n *\n *\t\tmodel.change( ( writer ) => {\n * \t\t\tconst marker = writer.addMarker( name, { range, usingOperation: true } );\n *\n * \t\t\t// ...\n *\n * \t\t\twriter.removeMarker( marker );\n *\t\t} );\n *\n * See {@link module:engine/model/writer~Writer} to find more examples.\n *\n * Since markers need to track change in the document, for efficiency reasons, it is best to create and keep as little\n * markers as possible and remove them as soon as they are not needed anymore.\n *\n * Markers can be downcasted and upcasted.\n *\n * Markers downcast happens on {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:addMarker} and\n * {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:removeMarker} events.\n * Use {@link module:engine/conversion/downcasthelpers downcast converters} or attach a custom converter to mentioned events.\n * For {@link module:engine/controller/datacontroller~DataController data pipeline}, marker should be downcasted to an element.\n * Then, it can be upcasted back to a marker. Again, use {@link module:engine/conversion/upcasthelpers upcast converters} or\n * attach a custom converter to {@link module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element}.\n *\n * `Marker` instances are created and destroyed only by {@link ~MarkerCollection MarkerCollection}.\n */\n\nclass Marker {\n  /**\n   * Creates a marker instance.\n   *\n   * @param {String} name Marker name.\n   * @param {module:engine/model/liverange~LiveRange} liveRange Range marked by the marker.\n   * @param {Boolean} managedUsingOperations Specifies whether the marker is managed using operations.\n   * @param {Boolean} affectsData Specifies whether the marker affects the data produced by the data pipeline\n   * (is persisted in the editor's data).\n   */\n  constructor(name, liveRange, managedUsingOperations, affectsData) {\n    /**\n     * Marker's name.\n     *\n     * @readonly\n     * @type {String}\n     */\n    this.name = name;\n    /**\n     * Range marked by the marker.\n     *\n     * @protected\n     * @member {module:engine/model/liverange~LiveRange}\n     */\n\n    this._liveRange = this._attachLiveRange(liveRange);\n    /**\n     * Flag indicates if the marker is managed using operations or not.\n     *\n     * @private\n     * @member {Boolean}\n     */\n\n    this._managedUsingOperations = managedUsingOperations;\n    /**\n     * Specifies whether the marker affects the data produced by the data pipeline\n     * (is persisted in the editor's data).\n     *\n     * @private\n     * @member {Boolean}\n     */\n\n    this._affectsData = affectsData;\n  }\n  /**\n   * A value indicating if the marker is managed using operations.\n   * See {@link ~Marker marker class description} to learn more about marker types.\n   * See {@link module:engine/model/writer~Writer#addMarker}.\n   *\n   * @returns {Boolean}\n   */\n\n\n  get managedUsingOperations() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed: Cannot use a destroyed marker instance.', this);\n    }\n\n    return this._managedUsingOperations;\n  }\n  /**\n   * A value indicating if the marker changes the data.\n   *\n   * @returns {Boolean}\n   */\n\n\n  get affectsData() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed: Cannot use a destroyed marker instance.', this);\n    }\n\n    return this._affectsData;\n  }\n  /**\n   * Returns current marker start position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  getStart() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed: Cannot use a destroyed marker instance.', this);\n    }\n\n    return this._liveRange.start.clone();\n  }\n  /**\n   * Returns current marker end position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  getEnd() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed: Cannot use a destroyed marker instance.', this);\n    }\n\n    return this._liveRange.end.clone();\n  }\n  /**\n   * Returns a range that represents the current state of the marker.\n   *\n   * Keep in mind that returned value is a {@link module:engine/model/range~Range Range}, not a\n   * {@link module:engine/model/liverange~LiveRange LiveRange}. This means that it is up-to-date and relevant only\n   * until next model document change. Do not store values returned by this method. Instead, store {@link ~Marker#name}\n   * and get `Marker` instance from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection} every\n   * time there is a need to read marker properties. This will guarantee that the marker has not been removed and\n   * that it's data is up-to-date.\n   *\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  getRange() {\n    if (!this._liveRange) {\n      throw new CKEditorError('marker-destroyed: Cannot use a destroyed marker instance.', this);\n    }\n\n    return this._liveRange.toRange();\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tmarker.is( 'marker' ); // -> true\n   *\t\tmarker.is( 'model:marker' ); // -> true\n   *\n   *\t\tmarker.is( 'view:element' ); // -> false\n   *\t\tmarker.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'marker' || type == 'model:marker';\n  }\n  /**\n   * Binds new live range to the marker and detach the old one if is attached.\n   *\n   * @protected\n   * @param {module:engine/model/liverange~LiveRange} liveRange Live range to attach\n   * @returns {module:engine/model/liverange~LiveRange} Attached live range.\n   */\n\n\n  _attachLiveRange(liveRange) {\n    if (this._liveRange) {\n      this._detachLiveRange();\n    } // Delegating does not work with namespaces. Alternatively, we could delegate all events (using `*`).\n\n\n    liveRange.delegate('change:range').to(this);\n    liveRange.delegate('change:content').to(this);\n    this._liveRange = liveRange;\n    return liveRange;\n  }\n  /**\n   * Unbinds and destroys currently attached live range.\n   *\n   * @protected\n   */\n\n\n  _detachLiveRange() {\n    this._liveRange.stopDelegating('change:range', this);\n\n    this._liveRange.stopDelegating('change:content', this);\n\n    this._liveRange.detach();\n\n    this._liveRange = null;\n  }\n  /**\n   * Fired whenever {@link ~Marker#_liveRange marker range} is changed due to changes on {@link module:engine/model/document~Document}.\n   * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:range LiveRange change:range event}.\n   *\n   * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n   * all event listeners listening to it should be removed. It is best to do it on\n   * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n   *\n   * @see module:engine/model/liverange~LiveRange#event:change:range\n   * @event change:range\n   * @param {module:engine/model/range~Range} oldRange\n   * @param {Object} data\n   */\n\n  /**\n   * Fired whenever change on {@link module:engine/model/document~Document} is done inside {@link ~Marker#_liveRange marker range}.\n   * This is a delegated {@link module:engine/model/liverange~LiveRange#event:change:content LiveRange change:content event}.\n   *\n   * When marker is removed from {@link module:engine/model/markercollection~MarkerCollection MarkerCollection},\n   * all event listeners listening to it should be removed. It is best to do it on\n   * {@link module:engine/model/markercollection~MarkerCollection#event:update MarkerCollection update event}.\n   *\n   * @see module:engine/model/liverange~LiveRange#event:change:content\n   * @event change:content\n   * @param {module:engine/model/range~Range} oldRange\n   * @param {Object} data\n   */\n\n\n}\n\nmix(Marker, EmitterMixin);\n/**\n * Cannot use a {@link module:engine/model/markercollection~MarkerCollection#destroy destroyed marker} instance.\n *\n * @error marker-destroyed\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/liveposition\n */\nimport Position from './position';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * `LivePosition` is a type of {@link module:engine/model/position~Position Position}\n * that updates itself as {@link module:engine/model/document~Document document}\n * is changed through operations. It may be used as a bookmark.\n *\n * **Note:** Contrary to {@link module:engine/model/position~Position}, `LivePosition` works only in roots that are\n * {@link module:engine/model/rootelement~RootElement}.\n * If {@link module:engine/model/documentfragment~DocumentFragment} is passed, error will be thrown.\n *\n * **Note:** Be very careful when dealing with `LivePosition`. Each `LivePosition` instance bind events that might\n * have to be unbound.\n * Use {@link module:engine/model/liveposition~LivePosition#detach} whenever you don't need `LivePosition` anymore.\n *\n * @extends module:engine/model/position~Position\n */\n\nexport default class LivePosition extends Position {\n  /**\n   * Creates a live position.\n   *\n   * @see module:engine/model/position~Position\n   * @param {module:engine/model/rootelement~RootElement} root\n   * @param {Array.<Number>} path\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   */\n  constructor(root, path, stickiness = 'toNone') {\n    super(root, path, stickiness);\n\n    if (!this.root.is('rootElement')) {\n      /**\n       * LivePosition's root has to be an instance of RootElement.\n       *\n       * @error liveposition-root-not-rootelement\n       */\n      throw new CKEditorError('model-liveposition-root-not-rootelement: LivePosition\\'s root has to be an instance of RootElement.', root);\n    }\n\n    bindWithDocument.call(this);\n  }\n  /**\n   * Unbinds all events previously bound by `LivePosition`. Use it whenever you don't need `LivePosition` instance\n   * anymore (i.e. when leaving scope in which it was declared or before re-assigning variable that was\n   * referring to it).\n   */\n\n\n  detach() {\n    this.stopListening();\n  }\n  /**\n   * Checks whether this object is of the given.\n   *\n   *\t\tlivePosition.is( 'position' ); // -> true\n   *\t\tlivePosition.is( 'model:position' ); // -> true\n   *\t\tlivePosition.is( 'liveposition' ); // -> true\n   *\t\tlivePosition.is( 'model:livePosition' ); // -> true\n   *\n   *\t\tlivePosition.is( 'view:position' ); // -> false\n   *\t\tlivePosition.is( 'documentSelection' ); // -> false\n   *\n   * {@link module:engine/model/node~Node#is Check the entire list of model objects} which implement the `is()` method.\n   *\n   * @param {String} type\n   * @returns {Boolean}\n   */\n\n\n  is(type) {\n    return type == 'livePosition' || type == 'model:livePosition' || super.is(type);\n  }\n  /**\n   * Creates a {@link module:engine/model/position~Position position instance}, which is equal to this live position.\n   *\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  toPosition() {\n    return new Position(this.root, this.path.slice(), this.stickiness);\n  }\n  /**\n   * Creates a `LivePosition` instance that is equal to position.\n   *\n   * @param {module:engine/model/position~Position} position\n   * @param {module:engine/model/position~PositionStickiness} [stickiness]\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  static fromPosition(position, stickiness) {\n    return new this(position.root, position.path.slice(), stickiness ? stickiness : position.stickiness);\n  }\n  /**\n   * @static\n   * @protected\n   * @method module:engine/model/liveposition~LivePosition._createAfter\n   * @see module:engine/model/position~Position._createAfter\n   * @param {module:engine/model/node~Node} node\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n  /**\n   * @static\n   * @protected\n   * @method module:engine/model/liveposition~LivePosition._createBefore\n   * @see module:engine/model/position~Position._createBefore\n   * @param {module:engine/model/node~Node} node\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n  /**\n   * @static\n   * @protected\n   * @method module:engine/model/liveposition~LivePosition._createAt\n   * @see module:engine/model/position~Position._createAt\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset]\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone']\n   * @returns {module:engine/model/liveposition~LivePosition}\n   */\n\n  /**\n   * Fired when `LivePosition` instance is changed due to changes on {@link module:engine/model/document~Document}.\n   *\n   * @event module:engine/model/liveposition~LivePosition#change\n   * @param {module:engine/model/position~Position} oldPosition Position equal to this live position before it got changed.\n   */\n\n\n} // Binds this `LivePosition` to the {@link module:engine/model/document~Document document} that owns\n// this position's {@link module:engine/model/position~Position#root root}.\n//\n// @private\n\nfunction bindWithDocument() {\n  this.listenTo(this.root.document.model, 'applyOperation', (event, args) => {\n    const operation = args[0];\n\n    if (!operation.isDocumentOperation) {\n      return;\n    }\n\n    transform.call(this, operation);\n  }, {\n    priority: 'low'\n  });\n} // Updates this position accordingly to the updates applied to the model. Bases on change events.\n//\n// @private\n// @param {module:engine/model/operation/operation~Operation} operation Executed operation.\n\n\nfunction transform(operation) {\n  const result = this.getTransformedByOperation(operation);\n\n  if (!this.isEqual(result)) {\n    const oldPosition = this.toPosition();\n    this.path = result.path;\n    this.root = result.root;\n    this.fire('change', oldPosition);\n  }\n}\n\nmix(LivePosition, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/insertcontent\n */\nimport Position from '../position';\nimport LivePosition from '../liveposition';\nimport Element from '../element';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\nimport Selection from '../selection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Inserts content into the editor (specified selection) as one would expect the paste\n * functionality to work.\n *\n * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable` it will be modified\n * to the insertion selection (equal to a range to be selected after insertion).\n *\n * If `selectable` is not passed, the content will be inserted using the current selection of the model document.\n *\n * **Note:** Use {@link module:engine/model/model~Model#insertContent} instead of this function.\n * This function is only exposed to be reusable in algorithms which change the {@link module:engine/model/model~Model#insertContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n * Selection into which the content should be inserted.\n * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n * at the insertion position.\n */\n\nexport default function insertContent(model, content, selectable, placeOrOffset) {\n  return model.change(writer => {\n    let selection;\n\n    if (!selectable) {\n      selection = model.document.selection;\n    } else if (selectable instanceof Selection || selectable instanceof DocumentSelection) {\n      selection = selectable;\n    } else {\n      selection = writer.createSelection(selectable, placeOrOffset);\n    }\n\n    const insertionPosition = selection.getFirstPosition();\n\n    if (!selection.isCollapsed) {\n      model.deleteContent(selection, {\n        doNotAutoparagraph: true\n      });\n    }\n\n    const insertion = new Insertion(model, writer, insertionPosition);\n    let nodesToInsert;\n\n    if (content.is('documentFragment')) {\n      nodesToInsert = content.getChildren();\n    } else {\n      nodesToInsert = [content];\n    }\n\n    insertion.handleNodes(nodesToInsert, {\n      // The set of children being inserted is the only set in this context\n      // so it's the first and last (it's a hack ;)).\n      isFirst: true,\n      isLast: true\n    });\n    const newRange = insertion.getSelectionRange();\n    /* istanbul ignore else */\n\n    if (newRange) {\n      if (selection instanceof DocumentSelection) {\n        writer.setSelection(newRange);\n      } else {\n        selection.setTo(newRange);\n      }\n    } else {// We are not testing else because it's a safe check for unpredictable edge cases:\n      // an insertion without proper range to select.\n      //\n      // @if CK_DEBUG // console.warn( 'Cannot determine a proper selection range after insertion.' );\n    }\n\n    const affectedRange = insertion.getAffectedRange() || model.createRange(insertionPosition);\n    insertion.destroy();\n    return affectedRange;\n  });\n}\n/**\n * Utility class for performing content insertion.\n *\n * @private\n */\n\nclass Insertion {\n  constructor(model, writer, position) {\n    /**\n     * The model in context of which the insertion should be performed.\n     *\n     * @member {module:engine/model~Model} #model\n     */\n    this.model = model;\n    /**\n     * Batch to which operations will be added.\n     *\n     * @member {module:engine/controller/writer~Batch} #writer\n     */\n\n    this.writer = writer;\n    /**\n     * The position at which (or near which) the next node will be inserted.\n     *\n     * @member {module:engine/model/position~Position} #position\n     */\n\n    this.position = position;\n    /**\n     * Elements with which the inserted elements can be merged.\n     *\n     *\t\t<p>x^</p><p>y</p> + <p>z</p> (can merge to <p>x</p>)\n     *\t\t<p>x</p><p>^y</p> + <p>z</p> (can merge to <p>y</p>)\n     *\t\t<p>x^y</p> + <p>z</p> (can merge to <p>xy</p> which will be split during the action,\n     *\t\t\t\t\t\t\t\tso both its pieces will be added to this set)\n     *\n     *\n     * @member {Set} #canMergeWith\n     */\n\n    this.canMergeWith = new Set([this.position.parent]);\n    /**\n     * Schema of the model.\n     *\n     * @member {module:engine/model/schema~Schema} #schema\n     */\n\n    this.schema = model.schema;\n    this._filterAttributesOf = [];\n    /**\n     * Beginning of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n     *\n     * @private\n     * @member {module:engine/model/liveposition~LivePosition|null} #_affectedStart\n     */\n\n    this._affectedStart = null;\n    /**\n     * End of the affected range. See {@link module:engine/model/utils/insertcontent~Insertion#getAffectedRange}.\n     *\n     * @private\n     * @member {module:engine/model/liveposition~LivePosition|null} #_affectedEnd\n     */\n\n    this._affectedEnd = null;\n  }\n  /**\n   * Handles insertion of a set of nodes.\n   *\n   * @param {Iterable.<module:engine/model/node~Node>} nodes Nodes to insert.\n   * @param {Object} parentContext Context in which parent of these nodes was supposed to be inserted.\n   * If the parent context is passed it means that the parent element was stripped (was not allowed).\n   */\n\n\n  handleNodes(nodes, parentContext) {\n    nodes = Array.from(nodes);\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n\n      this._handleNode(node, {\n        isFirst: i === 0 && parentContext.isFirst,\n        isLast: i === nodes.length - 1 && parentContext.isLast\n      });\n    } // TMP this will become a post-fixer.\n\n\n    this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer);\n    this._filterAttributesOf = [];\n  }\n  /**\n   * Returns range to be selected after insertion.\n   * Returns `null` if there is no valid range to select after insertion.\n   *\n   * @returns {module:engine/model/range~Range|null}\n   */\n\n\n  getSelectionRange() {\n    if (this.nodeToSelect) {\n      return Range._createOn(this.nodeToSelect);\n    }\n\n    return this.model.schema.getNearestSelectionRange(this.position);\n  }\n  /**\n   * Returns a range which contains all the performed changes. This is a range that, if removed, would return the model to the state\n   * before the insertion. Returns `null` if no changes were done.\n   *\n   * @returns {module:engine/model/range~Range|null}\n   */\n\n\n  getAffectedRange() {\n    if (!this._affectedStart) {\n      return null;\n    }\n\n    return new Range(this._affectedStart, this._affectedEnd);\n  }\n  /**\n   * Destroys `Insertion` instance.\n   */\n\n\n  destroy() {\n    if (this._affectedStart) {\n      this._affectedStart.detach();\n    }\n\n    if (this._affectedEnd) {\n      this._affectedEnd.detach();\n    }\n  }\n  /**\n   * Handles insertion of a single node.\n   *\n   * @private\n   * @param {module:engine/model/node~Node} node\n   * @param {Object} context\n   * @param {Boolean} context.isFirst Whether the given node is the first one in the content to be inserted.\n   * @param {Boolean} context.isLast Whether the given node is the last one in the content to be inserted.\n   */\n\n\n  _handleNode(node, context) {\n    // Let's handle object in a special way.\n    // * They should never be merged with other elements.\n    // * If they are not allowed in any of the selection ancestors, they could be either autoparagraphed or totally removed.\n    if (this.schema.isObject(node)) {\n      this._handleObject(node, context);\n\n      return;\n    } // Try to find a place for the given node.\n    // Split the position.parent's branch up to a point where the node can be inserted.\n    // If it isn't allowed in the whole branch, then of course don't split anything.\n\n\n    const isAllowed = this._checkAndSplitToAllowedPosition(node, context);\n\n    if (!isAllowed) {\n      this._handleDisallowedNode(node, context);\n\n      return;\n    }\n\n    this._insert(node); // After the node was inserted we may try to merge it with its siblings.\n    // This should happen only if it was the first and/or last of the nodes (so only with boundary nodes)\n    // and only if the selection was in those elements initially.\n    //\n    // E.g.:\n    // <p>x^</p> + <p>y</p> => <p>x</p><p>y</p> => <p>xy[]</p>\n    // and:\n    // <p>x^y</p> + <p>z</p> => <p>x</p>^<p>y</p> + <p>z</p> => <p>x</p><p>z</p><p>y</p> => <p>xz[]y</p>\n    // but:\n    // <p>x</p><p>^</p><p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging)\n    // <p>x</p>[<img>]<p>z</p> + <p>y</p> => <p>x</p><p>y</p><p>z</p> (no merging, note: after running deleteContents\n    //\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t it's exactly the same case as above)\n\n\n    this._mergeSiblingsOf(node, context);\n  }\n  /**\n   * @private\n   * @param {module:engine/model/element~Element} node The object element.\n   * @param {Object} context\n   */\n\n\n  _handleObject(node, context) {\n    // Try finding it a place in the tree.\n    if (this._checkAndSplitToAllowedPosition(node)) {\n      this._insert(node);\n    } // Try autoparagraphing.\n    else {\n        this._tryAutoparagraphing(node, context);\n      }\n  }\n  /**\n   * @private\n   * @param {module:engine/model/node~Node} node The disallowed node which needs to be handled.\n   * @param {Object} context\n   */\n\n\n  _handleDisallowedNode(node, context) {\n    // If the node is an element, try inserting its children (strip the parent).\n    if (node.is('element')) {\n      this.handleNodes(node.getChildren(), context);\n    } // If text is not allowed, try autoparagraphing it.\n    else {\n        this._tryAutoparagraphing(node, context);\n      }\n  }\n  /**\n   * @private\n   * @param {module:engine/model/node~Node} node The node to insert.\n   */\n\n\n  _insert(node) {\n    /* istanbul ignore if */\n    if (!this.schema.checkChild(this.position, node)) {\n      // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n      // Note that it would often be a silent issue if we insert node in a place where it's not allowed.\n\n      /**\n       * Given node cannot be inserted on the given position.\n       *\n       * @error insertcontent-wrong-position\n       * @param {module:engine/model/node~Node} node Node to insert.\n       * @param {module:engine/model/position~Position} position Position to insert the node at.\n       */\n      throw new CKEditorError('insertcontent-wrong-position: Given node cannot be inserted on the given position.', this, {\n        node,\n        position: this.position\n      });\n    }\n\n    const livePos = LivePosition.fromPosition(this.position, 'toNext');\n\n    this._setAffectedBoundaries(this.position);\n\n    this.writer.insert(node, this.position);\n    this.position = livePos.toPosition();\n    livePos.detach(); // The last inserted object should be selected because we can't put a collapsed selection after it.\n\n    if (this.schema.isObject(node) && !this.schema.checkChild(this.position, '$text')) {\n      this.nodeToSelect = node;\n    } else {\n      this.nodeToSelect = null;\n    }\n\n    this._filterAttributesOf.push(node);\n  }\n  /**\n   * Sets `_affectedStart` and `_affectedEnd` to the given `position`. Should be used before a change is done during insertion process to\n   * mark the affected range.\n   *\n   * This method is used before inserting a node or splitting a parent node. `_affectedStart` and `_affectedEnd` are also changed\n   * during merging, but the logic there is more complicated so it is left out of this function.\n   *\n   * @private\n   * @param {module:engine/model/position~Position} position\n   */\n\n\n  _setAffectedBoundaries(position) {\n    // Set affected boundaries stickiness so that those position will \"expand\" when something is inserted in between them:\n    // <paragraph>Foo][bar</paragraph> -> <paragraph>Foo]xx[bar</paragraph>\n    // This is why it cannot be a range but two separate positions.\n    if (!this._affectedStart) {\n      this._affectedStart = LivePosition.fromPosition(position, 'toPrevious');\n    } // If `_affectedEnd` is before the new boundary position, expand `_affectedEnd`. This can happen if first inserted node was\n    // inserted into the parent but the next node is moved-out of that parent:\n    // (1) <paragraph>Foo][</paragraph> -> <paragraph>Foo]xx[</paragraph>\n    // (2) <paragraph>Foo]xx[</paragraph> -> <paragraph>Foo]xx</paragraph><widget></widget>[\n\n\n    if (!this._affectedEnd || this._affectedEnd.isBefore(position)) {\n      if (this._affectedEnd) {\n        this._affectedEnd.detach();\n      }\n\n      this._affectedEnd = LivePosition.fromPosition(position, 'toNext');\n    }\n  }\n  /**\n   * @private\n   * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n   * @param {Object} context\n   */\n\n\n  _mergeSiblingsOf(node, context) {\n    if (!(node instanceof Element)) {\n      return;\n    }\n\n    const mergeLeft = this._canMergeLeft(node, context);\n\n    const mergeRight = this._canMergeRight(node, context);\n\n    const mergePosLeft = LivePosition._createBefore(node);\n\n    mergePosLeft.stickiness = 'toNext';\n\n    const mergePosRight = LivePosition._createAfter(node);\n\n    mergePosRight.stickiness = 'toNext';\n\n    if (mergeLeft) {\n      const livePosition = LivePosition.fromPosition(this.position);\n      livePosition.stickiness = 'toNext'; // If `_affectedStart` is sames as merge position, it means that the element \"marked\" by `_affectedStart` is going to be\n      // removed and its contents will be moved. This won't transform `LivePosition` so `_affectedStart` needs to be moved\n      // by hand to properly reflect affected range. (Due to `_affectedStart` and `_affectedEnd` stickiness, the \"range\" is\n      // shown as `][`).\n      //\n      // Example - insert `<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>` at the end of `<paragraph>Foo^</paragraph>`:\n      //\n      // <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n      // <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>   -->\n      // <paragraph>Foo]Abc</paragraph><paragraph>Xyz</paragraph>[<paragraph>Bar</paragraph>\n      //\n      // Note, that if we are here then something must have been inserted, so `_affectedStart` and `_affectedEnd` have to be set.\n\n      if (this._affectedStart.isEqual(mergePosLeft)) {\n        this._affectedStart.detach();\n\n        this._affectedStart = LivePosition._createAt(mergePosLeft.nodeBefore, 'end', 'toPrevious');\n      }\n\n      this.writer.merge(mergePosLeft); // If only one element (the merged one) is in the \"affected range\", also move the affected range end appropriately.\n      //\n      // Example - insert `<paragraph>Abc</paragraph>` at the of `<paragraph>Foo^</paragraph>`:\n      //\n      // <paragraph>Foo</paragraph><paragraph>Bar</paragraph>   -->\n      // <paragraph>Foo</paragraph>]<paragraph>Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n      // <paragraph>Foo]Abc</paragraph>[<paragraph>Bar</paragraph>   -->\n      // <paragraph>Foo]Abc[</paragraph><paragraph>Bar</paragraph>\n\n      if (mergePosLeft.isEqual(this._affectedEnd) && context.isLast) {\n        this._affectedEnd.detach();\n\n        this._affectedEnd = LivePosition._createAt(mergePosLeft.nodeBefore, 'end', 'toNext');\n      }\n\n      this.position = livePosition.toPosition();\n      livePosition.detach();\n    }\n\n    if (mergeRight) {\n      /* istanbul ignore if */\n      if (!this.position.isEqual(mergePosRight)) {\n        // Algorithm's correctness check. We should never end up here but it's good to know that we did.\n        // At this point the insertion position should be after the node we'll merge. If it isn't,\n        // it should need to be secured as in the left merge case.\n\n        /**\n         * An internal error occured during merging insertion content with siblings.\n         * The insertion position should equal to the merge position.\n         *\n         * @error insertcontent-invalid-insertion-position\n         */\n        throw new CKEditorError('insertcontent-invalid-insertion-position', this);\n      } // Move the position to the previous node, so it isn't moved to the graveyard on merge.\n      // <p>x</p>[]<p>y</p> => <p>x[]</p><p>y</p>\n\n\n      this.position = Position._createAt(mergePosRight.nodeBefore, 'end'); // OK:  <p>xx[]</p> + <p>yy</p> => <p>xx[]yy</p> (when sticks to previous)\n      // NOK: <p>xx[]</p> + <p>yy</p> => <p>xxyy[]</p> (when sticks to next)\n\n      const livePosition = LivePosition.fromPosition(this.position, 'toPrevious'); // See comment above on moving `_affectedStart`.\n\n      if (this._affectedEnd.isEqual(mergePosRight)) {\n        this._affectedEnd.detach();\n\n        this._affectedEnd = LivePosition._createAt(mergePosRight.nodeBefore, 'end', 'toNext');\n      }\n\n      this.writer.merge(mergePosRight); // See comment above on moving `_affectedStart`.\n\n      if (mergePosRight.getShiftedBy(-1).isEqual(this._affectedStart) && context.isFirst) {\n        this._affectedStart.detach();\n\n        this._affectedStart = LivePosition._createAt(mergePosRight.nodeBefore, 0, 'toPrevious');\n      }\n\n      this.position = livePosition.toPosition();\n      livePosition.detach();\n    }\n\n    if (mergeLeft || mergeRight) {\n      // After merge elements that were marked by _insert() to be filtered might be gone so\n      // we need to mark the new container.\n      this._filterAttributesOf.push(this.position.parent);\n    }\n\n    mergePosLeft.detach();\n    mergePosRight.detach();\n  }\n  /**\n   * Checks whether specified node can be merged with previous sibling element.\n   *\n   * @private\n   * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n   * @param {Object} context\n   * @returns {Boolean}\n   */\n\n\n  _canMergeLeft(node, context) {\n    const previousSibling = node.previousSibling;\n    return context.isFirst && previousSibling instanceof Element && this.canMergeWith.has(previousSibling) && this.model.schema.checkMerge(previousSibling, node);\n  }\n  /**\n   * Checks whether specified node can be merged with next sibling element.\n   *\n   * @private\n   * @param {module:engine/model/node~Node} node The node which could potentially be merged.\n   * @param {Object} context\n   * @returns {Boolean}\n   */\n\n\n  _canMergeRight(node, context) {\n    const nextSibling = node.nextSibling;\n    return context.isLast && nextSibling instanceof Element && this.canMergeWith.has(nextSibling) && this.model.schema.checkMerge(node, nextSibling);\n  }\n  /**\n   * Tries wrapping the node in a new paragraph and inserting it this way.\n   *\n   * @private\n   * @param {module:engine/model/node~Node} node The node which needs to be autoparagraphed.\n   * @param {Object} context\n   */\n\n\n  _tryAutoparagraphing(node, context) {\n    const paragraph = this.writer.createElement('paragraph'); // Do not autoparagraph if the paragraph won't be allowed there,\n    // cause that would lead to an infinite loop. The paragraph would be rejected in\n    // the next _handleNode() call and we'd be here again.\n\n    if (this._getAllowedIn(paragraph, this.position.parent) && this.schema.checkChild(paragraph, node)) {\n      paragraph._appendChild(node);\n\n      this._handleNode(paragraph, context);\n    }\n  }\n  /**\n   * @private\n   * @param {module:engine/model/node~Node} node\n   * @returns {Boolean} Whether an allowed position was found.\n   * `false` is returned if the node isn't allowed at any position up in the tree, `true` if was.\n   */\n\n\n  _checkAndSplitToAllowedPosition(node) {\n    const allowedIn = this._getAllowedIn(node, this.position.parent);\n\n    if (!allowedIn) {\n      return false;\n    }\n\n    while (allowedIn != this.position.parent) {\n      // If a parent which we'd need to leave is a limit element, break.\n      if (this.schema.isLimit(this.position.parent)) {\n        return false;\n      }\n\n      if (this.position.isAtStart) {\n        // If insertion position is at the beginning of the parent, move it out instead of splitting.\n        // <p>^Foo</p> -> ^<p>Foo</p>\n        const parent = this.position.parent;\n        this.position = this.writer.createPositionBefore(parent); // Special case – parent is empty (<p>^</p>).\n        //\n        // 1. parent.isEmpty\n        // We can remove the element after moving insertion position out of it.\n        //\n        // 2. parent.parent === allowedIn\n        // However parent should remain in place when allowed element is above limit element in document tree.\n        // For example there shouldn't be allowed to remove empty paragraph from tableCell, when is pasted\n        // content allowed in $root.\n\n        if (parent.isEmpty && parent.parent === allowedIn) {\n          this.writer.remove(parent);\n        }\n      } else if (this.position.isAtEnd) {\n        // If insertion position is at the end of the parent, move it out instead of splitting.\n        // <p>Foo^</p> -> <p>Foo</p>^\n        this.position = this.writer.createPositionAfter(this.position.parent);\n      } else {\n        const tempPos = this.writer.createPositionAfter(this.position.parent);\n\n        this._setAffectedBoundaries(this.position);\n\n        this.writer.split(this.position);\n        this.position = tempPos;\n        this.canMergeWith.add(this.position.nodeAfter);\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Gets the element in which the given node is allowed. It checks the passed element and all its ancestors.\n   *\n   * @private\n   * @param {module:engine/model/node~Node} node The node to check.\n   * @param {module:engine/model/element~Element} element The element in which the node's correctness should be checked.\n   * @returns {module:engine/model/element~Element|null}\n   */\n\n\n  _getAllowedIn(node, element) {\n    if (this.schema.checkChild(element, node)) {\n      return element;\n    }\n\n    if (element.parent) {\n      return this._getAllowedIn(node, element.parent);\n    }\n\n    return null;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/deletecontent\n */\nimport LivePosition from '../liveposition';\nimport Range from '../range';\nimport DocumentSelection from '../documentselection';\n/**\n * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n *\n * **Note:** Use {@link module:engine/model/model~Model#deleteContent} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#deleteContent}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which the insertion\n * should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * Selection of which the content should be deleted.\n * @param {module:engine/model/batch~Batch} batch Batch to which the operations will be added.\n * @param {Object} [options]\n * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n *\n * For example `<heading>x[x</heading><paragraph>y]y</paragraph>` will become:\n *\n * * `<heading>x^y</heading>` with the option disabled (`leaveUnmerged == false`)\n * * `<heading>x^</heading><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n *\n * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n * elements will not be merged.\n *\n * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n * paragraph when the entire content was selected.\n *\n * For example `<heading>[x</heading><paragraph>y]</paragraph>` will become:\n *\n * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n * * `<heading>^</heading>` with enabled (`doNotResetEntireContent == true`).\n *\n * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n * to a place where text cannot be inserted.\n *\n * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n *\n * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n *\n * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n *\n * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n */\n\nexport default function deleteContent(model, selection, options = {}) {\n  if (selection.isCollapsed) {\n    return;\n  }\n\n  const selRange = selection.getFirstRange(); // If the selection is already removed, don't do anything.\n\n  if (selRange.root.rootName == '$graveyard') {\n    return;\n  }\n\n  const schema = model.schema;\n  model.change(writer => {\n    // 1. Replace the entire content with paragraph.\n    // See: https://github.com/ckeditor/ckeditor5-engine/issues/1012#issuecomment-315017594.\n    if (!options.doNotResetEntireContent && shouldEntireContentBeReplacedWithParagraph(schema, selection)) {\n      replaceEntireContentWithParagraph(writer, selection, schema);\n      return;\n    }\n\n    const startPos = selRange.start;\n    const endPos = LivePosition.fromPosition(selRange.end, 'toNext'); // 2. Remove the content if there is any.\n\n    if (!selRange.start.isTouching(selRange.end)) {\n      writer.remove(selRange);\n    } // 3. Merge elements in the right branch to the elements in the left branch.\n    // The only reasonable (in terms of data and selection correctness) case in which we need to do that is:\n    //\n    // <heading type=1>Fo[</heading><paragraph>]ar</paragraph> => <heading type=1>Fo^ar</heading>\n    //\n    // However, the algorithm supports also merging deeper structures (up to the depth of the shallower branch),\n    // as it's hard to imagine what should actually be the default behavior. Usually, specific features will\n    // want to override that behavior anyway.\n\n\n    if (!options.leaveUnmerged) {\n      mergeBranches(writer, startPos, endPos); // TMP this will be replaced with a postfixer.\n      // We need to check and strip disallowed attributes in all nested nodes because after merge\n      // some attributes could end up in a path where are disallowed.\n      //\n      // e.g. bold is disallowed for <H1>\n      // <h1>Fo{o</h1><p>b}a<b>r</b><p> -> <h1>Fo{}a<b>r</b><h1> -> <h1>Fo{}ar<h1>.\n\n      schema.removeDisallowedAttributes(startPos.parent.getChildren(), writer);\n    }\n\n    collapseSelectionAt(writer, selection, startPos); // 4. Add a paragraph to set selection in it.\n    // Check if a text is allowed in the new container. If not, try to create a new paragraph (if it's allowed here).\n\n    if (shouldAutoparagraph(schema, startPos)) {\n      // If auto-paragraphing is off, find the closest valid selection range and collapse the selection there.\n      // If there is no valid selection range, create paragraph anyway and set selection there.\n      const validSelectionRange = schema.getNearestSelectionRange(startPos);\n\n      if (options.doNotAutoparagraph && validSelectionRange) {\n        collapseSelectionAt(writer, selection, validSelectionRange);\n      } else {\n        insertParagraph(writer, startPos, selection);\n      }\n    }\n\n    endPos.detach();\n  });\n} // This function is a result of reaching the Ballmer's peak for just the right amount of time.\n// Even I had troubles documenting it after a while and after reading it again I couldn't believe that it really works.\n\nfunction mergeBranches(writer, startPos, endPos) {\n  const startParent = startPos.parent;\n  const endParent = endPos.parent; // If both positions ended up in the same parent, then there's nothing more to merge:\n  // <$root><p>x[]</p><p>{}y</p></$root> => <$root><p>xy</p>[]{}</$root>\n\n  if (startParent == endParent) {\n    return;\n  } // If one of the positions is a limit element, then there's nothing to merge because we don't want to cross the limit boundaries.\n\n\n  if (writer.model.schema.isLimit(startParent) || writer.model.schema.isLimit(endParent)) {\n    return;\n  } // Check if operations we'll need to do won't need to cross object or limit boundaries.\n  // E.g., we can't merge endParent into startParent in this case:\n  // <limit><startParent>x[]</startParent></limit><endParent>{}</endParent>\n\n\n  if (!checkCanBeMerged(startPos, endPos, writer.model.schema)) {\n    return;\n  } // Remember next positions to merge. For example:\n  // <a><b>x[]</b></a><c><d>{}y</d></c>\n  // will become:\n  // <a><b>xy</b>[]</a><c>{}</c>\n\n\n  startPos = writer.createPositionAfter(startParent);\n  endPos = writer.createPositionBefore(endParent);\n\n  if (!endPos.isEqual(startPos)) {\n    // In this case, before we merge, we need to move `endParent` to the `startPos`:\n    // <a><b>x[]</b></a><c><d>{}y</d></c>\n    // becomes:\n    // <a><b>x</b>[]<d>y</d></a><c>{}</c>\n    writer.insert(endParent, startPos);\n  } // Merge two siblings:\n  // <a>x</a>[]<b>y</b> -> <a>xy</a> (the usual case)\n  // <a><b>x</b>[]<d>y</d></a><c></c> -> <a><b>xy</b>[]</a><c></c> (this is the \"move parent\" case shown above)\n\n\n  writer.merge(startPos); // Remove empty end ancestors:\n  // <a>fo[o</a><b><a><c>bar]</c></a></b>\n  // becomes:\n  // <a>fo[]</a><b><a>{}</a></b>\n  // So we can remove <a> and <b>.\n\n  while (endPos.parent.isEmpty) {\n    const parentToRemove = endPos.parent;\n    endPos = writer.createPositionBefore(parentToRemove);\n    writer.remove(parentToRemove);\n  } // Continue merging next level.\n\n\n  mergeBranches(writer, startPos, endPos);\n}\n\nfunction shouldAutoparagraph(schema, position) {\n  const isTextAllowed = schema.checkChild(position, '$text');\n  const isParagraphAllowed = schema.checkChild(position, 'paragraph');\n  return !isTextAllowed && isParagraphAllowed;\n} // Check if parents of two positions can be merged by checking if there are no limit/object\n// boundaries between those two positions.\n//\n// E.g. in <bQ><p>x[]</p></bQ><widget><caption>{}</caption></widget>\n// we'll check <p>, <bQ>, <widget> and <caption>.\n// Usually, widget and caption are marked as objects/limits in the schema, so in this case merging will be blocked.\n\n\nfunction checkCanBeMerged(leftPos, rightPos, schema) {\n  const rangeToCheck = new Range(leftPos, rightPos);\n\n  for (const value of rangeToCheck.getWalker()) {\n    if (schema.isLimit(value.item)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction insertParagraph(writer, position, selection) {\n  const paragraph = writer.createElement('paragraph');\n  writer.insert(paragraph, position);\n  collapseSelectionAt(writer, selection, writer.createPositionAt(paragraph, 0));\n}\n\nfunction replaceEntireContentWithParagraph(writer, selection) {\n  const limitElement = writer.model.schema.getLimitElement(selection);\n  writer.remove(writer.createRangeIn(limitElement));\n  insertParagraph(writer, writer.createPositionAt(limitElement, 0), selection);\n} // We want to replace the entire content with a paragraph when:\n// * the entire content is selected,\n// * selection contains at least two elements,\n// * whether the paragraph is allowed in schema in the common ancestor.\n\n\nfunction shouldEntireContentBeReplacedWithParagraph(schema, selection) {\n  const limitElement = schema.getLimitElement(selection);\n\n  if (!selection.containsEntireContent(limitElement)) {\n    return false;\n  }\n\n  const range = selection.getFirstRange();\n\n  if (range.start.parent == range.end.parent) {\n    return false;\n  }\n\n  return schema.checkChild(limitElement, 'paragraph');\n} // Helper function that sets the selection. Depending whether given `selection` is a document selection or not,\n// uses a different method to set it.\n\n\nfunction collapseSelectionAt(writer, selection, positionOrRange) {\n  if (selection instanceof DocumentSelection) {\n    writer.setSelection(positionOrRange);\n  } else {\n    selection.setTo(positionOrRange);\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/modifyselection\n */\nimport Position from '../position';\nimport TreeWalker from '../treewalker';\nimport Range from '../range';\nimport { isInsideSurrogatePair, isInsideCombinedSymbol } from '@ckeditor/ckeditor5-utils/src/unicode';\nimport DocumentSelection from '../documentselection';\nconst wordBoundaryCharacters = ' ,.?!:;\"-()';\n/**\n * Modifies the selection. Currently, the supported modifications are:\n *\n * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n * Possible values for `unit` are:\n *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n *  why `'character'` value is most natural and common method of modifying selection.\n *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n *  extension will include whole \"surrogate pair\".\n *  * `'word'` - moves selection by a whole word.\n *\n * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n *\n * **Note:** Use {@link module:engine/model/model~Model#modifySelection} instead of this function.\n * This function is only exposed to be reusable in algorithms\n * which change the {@link module:engine/model/model~Model#modifySelection}\n * method's behavior.\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection to modify.\n * @param {Object} [options]\n * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n */\n\nexport default function modifySelection(model, selection, options = {}) {\n  const schema = model.schema;\n  const isForward = options.direction != 'backward';\n  const unit = options.unit ? options.unit : 'character';\n  const focus = selection.focus;\n  const walker = new TreeWalker({\n    boundaries: getSearchRange(focus, isForward),\n    singleCharacters: true,\n    direction: isForward ? 'forward' : 'backward'\n  });\n  const data = {\n    walker,\n    schema,\n    isForward,\n    unit\n  };\n  let next;\n\n  while (next = walker.next()) {\n    if (next.done) {\n      return;\n    }\n\n    const position = tryExtendingTo(data, next.value);\n\n    if (position) {\n      if (selection instanceof DocumentSelection) {\n        model.change(writer => {\n          writer.setSelectionFocus(position);\n        });\n      } else {\n        selection.setFocus(position);\n      }\n\n      return;\n    }\n  }\n} // Checks whether the selection can be extended to the the walker's next value (next position).\n// @param {{ walker, unit, isForward, schema }} data\n// @param {module:engine/view/treewalker~TreeWalkerValue} value\n\nfunction tryExtendingTo(data, value) {\n  // If found text, we can certainly put the focus in it. Let's just find a correct position\n  // based on the unit.\n  if (value.type == 'text') {\n    if (data.unit === 'word') {\n      return getCorrectWordBreakPosition(data.walker, data.isForward);\n    }\n\n    return getCorrectPosition(data.walker, data.unit, data.isForward);\n  } // Entering an element.\n\n\n  if (value.type == (data.isForward ? 'elementStart' : 'elementEnd')) {\n    // If it's an object, we can select it now.\n    if (data.schema.isObject(value.item)) {\n      return Position._createAt(value.item, data.isForward ? 'after' : 'before');\n    } // If text allowed on this position, extend to this place.\n\n\n    if (data.schema.checkChild(value.nextPosition, '$text')) {\n      return value.nextPosition;\n    }\n  } // Leaving an element.\n  else {\n      // If leaving a limit element, stop.\n      if (data.schema.isLimit(value.item)) {\n        // NOTE: Fast-forward the walker until the end.\n        data.walker.skip(() => true);\n        return;\n      } // If text allowed on this position, extend to this place.\n\n\n      if (data.schema.checkChild(value.nextPosition, '$text')) {\n        return value.nextPosition;\n      }\n    }\n} // Finds a correct position by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {String} unit The unit by which selection should be modified.\n\n\nfunction getCorrectPosition(walker, unit) {\n  const textNode = walker.position.textNode;\n\n  if (textNode) {\n    const data = textNode.data;\n    let offset = walker.position.offset - textNode.startOffset;\n\n    while (isInsideSurrogatePair(data, offset) || unit == 'character' && isInsideCombinedSymbol(data, offset)) {\n      walker.next();\n      offset = walker.position.offset - textNode.startOffset;\n    }\n  }\n\n  return walker.position;\n} // Finds a correct position of a word break by walking in a text node and checking whether selection can be extended to given position\n// or should be extended further.\n//\n// @param {module:engine/model/treewalker~TreeWalker} walker\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\n\n\nfunction getCorrectWordBreakPosition(walker, isForward) {\n  let textNode = walker.position.textNode;\n\n  if (textNode) {\n    let offset = walker.position.offset - textNode.startOffset;\n\n    while (!isAtWordBoundary(textNode.data, offset, isForward) && !isAtNodeBoundary(textNode, offset, isForward)) {\n      walker.next(); // Check of adjacent text nodes with different attributes (like BOLD).\n      // Example          : 'foofoo []bar<$text bold=\"true\">bar</$text> bazbaz'\n      // should expand to : 'foofoo [bar<$text bold=\"true\">bar</$text>] bazbaz'.\n\n      const nextNode = isForward ? walker.position.nodeAfter : walker.position.nodeBefore; // Scan only text nodes. Ignore inline elements (like `<softBreak>`).\n\n      if (nextNode && nextNode.is('text')) {\n        // Check boundary char of an adjacent text node.\n        const boundaryChar = nextNode.data.charAt(isForward ? 0 : nextNode.data.length - 1); // Go to the next node if the character at the boundary of that node belongs to the same word.\n\n        if (!wordBoundaryCharacters.includes(boundaryChar)) {\n          // If adjacent text node belongs to the same word go to it & reset values.\n          walker.next();\n          textNode = walker.position.textNode;\n        }\n      }\n\n      offset = walker.position.offset - textNode.startOffset;\n    }\n  }\n\n  return walker.position;\n}\n\nfunction getSearchRange(start, isForward) {\n  const root = start.root;\n\n  const searchEnd = Position._createAt(root, isForward ? 'end' : 0);\n\n  if (isForward) {\n    return new Range(start, searchEnd);\n  } else {\n    return new Range(searchEnd, start);\n  }\n} // Checks if selection is on word boundary.\n//\n// @param {String} data The text node value to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\n\n\nfunction isAtWordBoundary(data, offset, isForward) {\n  // The offset to check depends on direction.\n  const offsetToCheck = offset + (isForward ? 0 : -1);\n  return wordBoundaryCharacters.includes(data.charAt(offsetToCheck));\n} // Checks if selection is on node boundary.\n//\n// @param {module:engine/model/text~Text} textNode The text node to investigate.\n// @param {Number} offset Position offset.\n// @param {Boolean} isForward Is the direction in which the selection should be modified is forward.\n\n\nfunction isAtNodeBoundary(textNode, offset, isForward) {\n  return offset === (isForward ? textNode.endOffset : 0);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/getselectedcontent\n */\n\n/**\n * Gets a clone of the selected content.\n *\n * For example, for the following selection:\n *\n * ```html\n * <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n * ```\n *\n * It will return a document fragment with such a content:\n *\n * ```html\n * <quote><h>st</h></quote><p>se</p>\n * ```\n *\n * @param {module:engine/model/model~Model} model The model in context of which\n * the selection modification should be performed.\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection of which content will be returned.\n * @returns {module:engine/model/documentfragment~DocumentFragment}\n */\nexport default function getSelectedContent(model, selection) {\n  return model.change(writer => {\n    const frag = writer.createDocumentFragment();\n    const range = selection.getFirstRange();\n\n    if (!range || range.isCollapsed) {\n      return frag;\n    }\n\n    const root = range.start.root;\n    const commonPath = range.start.getCommonPath(range.end);\n    const commonParent = root.getNodeByPath(commonPath); // ## 1st step\n    //\n    // First, we'll clone a fragment represented by a minimal flat range\n    // containing the original range to be cloned.\n    // E.g. let's consider such a range:\n    //\n    // <p>x</p><quote><p>y</p><h>fir[st</h></quote><p>se]cond</p><p>z</p>\n    //\n    // A minimal flat range containing this one is:\n    //\n    // <p>x</p>[<quote><p>y</p><h>first</h></quote><p>second</p>]<p>z</p>\n    //\n    // We can easily clone this structure, preserving e.g. the <quote> element.\n\n    let flatSubtreeRange;\n\n    if (range.start.parent == range.end.parent) {\n      // The original range is flat, so take it.\n      flatSubtreeRange = range;\n    } else {\n      flatSubtreeRange = writer.createRange(writer.createPositionAt(commonParent, range.start.path[commonPath.length]), writer.createPositionAt(commonParent, range.end.path[commonPath.length] + 1));\n    }\n\n    const howMany = flatSubtreeRange.end.offset - flatSubtreeRange.start.offset; // Clone the whole contents.\n\n    for (const item of flatSubtreeRange.getItems({\n      shallow: true\n    })) {\n      if (item.is('textProxy')) {\n        writer.appendText(item.data, item.getAttributes(), frag);\n      } else {\n        writer.append(item._clone(true), frag);\n      }\n    } // ## 2nd step\n    //\n    // If the original range wasn't flat, then we need to remove the excess nodes from the both ends of the cloned fragment.\n    //\n    // For example, for the range shown in the 1st step comment, we need to remove these pieces:\n    //\n    // <quote>[<p>y</p>]<h>[fir]st</h></quote><p>se[cond]</p>\n    //\n    // So this will be the final copied content:\n    //\n    // <quote><h>st</h></quote><p>se</p>\n    //\n    // In order to do that, we remove content from these two ranges:\n    //\n    // [<quote><p>y</p><h>fir]st</h></quote><p>se[cond</p>]\n\n\n    if (flatSubtreeRange != range) {\n      // Find the position of the original range in the cloned fragment.\n      const newRange = range._getTransformedByMove(flatSubtreeRange.start, writer.createPositionAt(frag, 0), howMany)[0];\n\n      const leftExcessRange = writer.createRange(writer.createPositionAt(frag, 0), newRange.start);\n      const rightExcessRange = writer.createRange(newRange.end, writer.createPositionAt(frag, 'end'));\n      removeRangeContent(rightExcessRange, writer);\n      removeRangeContent(leftExcessRange, writer);\n    }\n\n    return frag;\n  });\n} // After https://github.com/ckeditor/ckeditor5-engine/issues/690 is fixed,\n// this function will, most likely, be able to rewritten using getMinimalFlatRanges().\n\nfunction removeRangeContent(range, writer) {\n  const parentsToCheck = [];\n  Array.from(range.getItems({\n    direction: 'backward'\n  })) // We should better store ranges because text proxies will lose integrity\n  // with the text nodes when we'll start removing content.\n  .map(item => writer.createRangeOn(item)) // Filter only these items which are fully contained in the passed range.\n  //\n  // E.g. for the following range: [<quote><p>y</p><h>fir]st</h>\n  // the walker will return the entire <h> element, when only the \"fir\" item inside it is fully contained.\n  .filter(itemRange => {\n    // We should be able to use Range.containsRange, but https://github.com/ckeditor/ckeditor5-engine/issues/691.\n    const contained = (itemRange.start.isAfter(range.start) || itemRange.start.isEqual(range.start)) && (itemRange.end.isBefore(range.end) || itemRange.end.isEqual(range.end));\n    return contained;\n  }).forEach(itemRange => {\n    parentsToCheck.push(itemRange.start.parent);\n    writer.remove(itemRange);\n  }); // Remove ancestors of the removed items if they turned to be empty now\n  // (their whole content was contained in the range).\n\n  parentsToCheck.forEach(parentToCheck => {\n    let parent = parentToCheck;\n\n    while (parent.parent && parent.isEmpty) {\n      const removeRange = writer.createRangeOn(parent);\n      parent = parent.parent;\n      writer.remove(removeRange);\n    }\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/utils/selection-post-fixer\n */\nimport Range from '../range';\nimport Position from '../position';\n/**\n * Injects selection post-fixer to the model.\n *\n * The role of the selection post-fixer is to ensure that the selection is in a correct place\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct position means that:\n *\n * * All collapsed selection ranges are in a place where the {@link module:engine/model/schema~Schema}\n * allows a `$text`.\n * * None of the selection's non-collapsed ranges crosses a {@link module:engine/model/schema~Schema#isLimit limit element}\n * boundary (a range must be rooted within one limit element).\n * * Only {@link module:engine/model/schema~Schema#isObject object elements} can be selected from the outside\n * (e.g. `[<paragraph>foo</paragraph>]` is invalid). This rule applies independently to both selection ends, so this\n * selection is correct: `<paragraph>f[oo</paragraph><image></image>]`.\n *\n * If the position is not correct, the post-fixer will automatically correct it.\n *\n * ## Fixing a non-collapsed selection\n *\n * See as an example a selection that starts in a P1 element and ends inside the text of a TD element\n * (`[` and `]` are range boundaries and `(l)` denotes an element defined as `isLimit=true`):\n *\n *\t\troot\n *\t\t |- element P1\n *\t\t |   |- \"foo\"                                      root\n *\t\t |- element TABLE (l)                   P1         TABLE             P2\n *\t\t |   |- element TR (l)                 f o[o     TR      TR         b a r\n *\t\t |   |   |- element TD (l)                       TD      TD\n *\t\t |   |       |- \"aaa\"                          a]a a    b b b\n *\t\t |   |- element TR (l)\n *\t\t |   |   |- element TD (l)                           ||\n *\t\t |   |       |- \"bbb\"                                ||\n *\t\t |- element P2                                       VV\n *\t\t |   |- \"bar\"\n *\t\t                                                   root\n *\t\t                                        P1         TABLE]            P2\n *\t\t                                       f o[o     TR      TR         b a r\n *\t\t                                                 TD      TD\n *\t\t                                               a a a    b b b\n *\n * In the example above, the TABLE, TR and TD are defined as `isLimit=true` in the schema. The range which is not contained within\n * a single limit element must be expanded to select the outermost limit element. The range end is inside the text node of the TD element.\n * As the TD element is a child of the TR and TABLE elements, where both are defined as `isLimit=true` in the schema, the range must be\n * expanded to select the whole TABLE element.\n *\n * **Note** If the selection contains multiple ranges, the method returns a minimal set of ranges that are not intersecting after expanding\n * them to select `isLimit=true` elements.\n *\n * @param {module:engine/model/model~Model} model\n */\n\nexport function injectSelectionPostFixer(model) {\n  model.document.registerPostFixer(writer => selectionPostFixer(writer, model));\n} // The selection post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\n\nfunction selectionPostFixer(writer, model) {\n  const selection = model.document.selection;\n  const schema = model.schema;\n  const ranges = [];\n  let wasFixed = false;\n\n  for (const modelRange of selection.getRanges()) {\n    // Go through all ranges in selection and try fixing each of them.\n    // Those ranges might overlap but will be corrected later.\n    const correctedRange = tryFixingRange(modelRange, schema);\n\n    if (correctedRange) {\n      ranges.push(correctedRange);\n      wasFixed = true;\n    } else {\n      ranges.push(modelRange);\n    }\n  } // If any of ranges were corrected update the selection.\n\n\n  if (wasFixed) {\n    // The above algorithm might create ranges that intersects each other when selection contains more then one range.\n    // This is case happens mostly on Firefox which creates multiple ranges for selected table.\n    let fixedRanges = ranges; // Fixing selection with many ranges usually breaks the selection in Firefox. As only Firefox supports multiple selection ranges\n    // we simply create one continuous range from fixed selection ranges (even if they are not adjacent).\n\n    if (ranges.length > 1) {\n      const selectionStart = ranges[0].start;\n      const selectionEnd = ranges[ranges.length - 1].end;\n      fixedRanges = [new Range(selectionStart, selectionEnd)];\n    }\n\n    writer.setSelection(fixedRanges, {\n      backward: selection.isBackward\n    });\n  }\n} // Tries fixing a range if it's incorrect.\n//\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\n\n\nfunction tryFixingRange(range, schema) {\n  if (range.isCollapsed) {\n    return tryFixingCollapsedRange(range, schema);\n  }\n\n  return tryFixingNonCollapsedRage(range, schema);\n} // Tries to fix collapsed ranges.\n//\n// * Fixes situation when a range is in a place where $text is not allowed\n//\n// @param {module:engine/model/range~Range} range Collapsed range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\n\n\nfunction tryFixingCollapsedRange(range, schema) {\n  const originalPosition = range.start;\n  const nearestSelectionRange = schema.getNearestSelectionRange(originalPosition); // This might be null ie when editor data is empty.\n  // In such cases there is no need to fix the selection range.\n\n  if (!nearestSelectionRange) {\n    return null;\n  }\n\n  const fixedPosition = nearestSelectionRange.start; // Fixed position is the same as original - no need to return corrected range.\n\n  if (originalPosition.isEqual(fixedPosition)) {\n    return null;\n  } // Check single node selection (happens in tables).\n\n\n  if (fixedPosition.nodeAfter && schema.isLimit(fixedPosition.nodeAfter)) {\n    return new Range(fixedPosition, Position._createAfter(fixedPosition.nodeAfter));\n  }\n\n  return new Range(fixedPosition);\n} // Tries to fix an expanded range.\n//\n// @param {module:engine/model/range~Range} range Expanded range to fix.\n// @param {module:engine/model/schema~Schema} schema\n// @returns {module:engine/model/range~Range|null} Returns fixed range or null if range is valid.\n\n\nfunction tryFixingNonCollapsedRage(range, schema) {\n  const start = range.start;\n  const end = range.end;\n  const isTextAllowedOnStart = schema.checkChild(start, '$text');\n  const isTextAllowedOnEnd = schema.checkChild(end, '$text');\n  const startLimitElement = schema.getLimitElement(start);\n  const endLimitElement = schema.getLimitElement(end); // Ranges which both end are inside the same limit element (or root) might needs only minor fix.\n\n  if (startLimitElement === endLimitElement) {\n    // Range is valid when both position allows to place a text:\n    // - <block>f[oobarba]z</block>\n    // This would be \"fixed\" by a next check but as it will be the same it's better to return null so the selection stays the same.\n    if (isTextAllowedOnStart && isTextAllowedOnEnd) {\n      return null;\n    } // Range that is on non-limit element (or is partially) must be fixed so it is placed inside the block around $text:\n    // - [<block>foo</block>]    ->    <block>[foo]</block>\n    // - [<block>foo]</block>    ->    <block>[foo]</block>\n    // - <block>f[oo</block>]    ->    <block>f[oo]</block>\n    // - [<block>foo</block><object></object>]    ->    <block>[foo</block><object></object>]\n\n\n    if (checkSelectionOnNonLimitElements(start, end, schema)) {\n      const isStartObject = start.nodeAfter && schema.isObject(start.nodeAfter);\n      const fixedStart = isStartObject ? null : schema.getNearestSelectionRange(start, 'forward');\n      const isEndObject = end.nodeBefore && schema.isObject(end.nodeBefore);\n      const fixedEnd = isEndObject ? null : schema.getNearestSelectionRange(end, 'backward'); // The schema.getNearestSelectionRange might return null - if that happens use original position.\n\n      const rangeStart = fixedStart ? fixedStart.start : start;\n      const rangeEnd = fixedEnd ? fixedEnd.start : end;\n      return new Range(rangeStart, rangeEnd);\n    }\n  }\n\n  const isStartInLimit = startLimitElement && !startLimitElement.is('rootElement');\n  const isEndInLimit = endLimitElement && !endLimitElement.is('rootElement'); // At this point we eliminated valid positions on text nodes so if one of range positions is placed inside a limit element\n  // then the range crossed limit element boundaries and needs to be fixed.\n\n  if (isStartInLimit || isEndInLimit) {\n    const bothInSameParent = start.nodeAfter && end.nodeBefore && start.nodeAfter.parent === end.nodeBefore.parent;\n    const expandStart = isStartInLimit && (!bothInSameParent || !isInObject(start.nodeAfter, schema));\n    const expandEnd = isEndInLimit && (!bothInSameParent || !isInObject(end.nodeBefore, schema)); // Although we've already found limit element on start/end positions we must find the outer-most limit element.\n    // as limit elements might be nested directly inside (ie table > tableRow > tableCell).\n\n    let fixedStart = start;\n    let fixedEnd = end;\n\n    if (expandStart) {\n      fixedStart = Position._createBefore(findOutermostLimitAncestor(startLimitElement, schema));\n    }\n\n    if (expandEnd) {\n      fixedEnd = Position._createAfter(findOutermostLimitAncestor(endLimitElement, schema));\n    }\n\n    return new Range(fixedStart, fixedEnd);\n  } // Range was not fixed at this point so it is valid - ie it was placed around limit element already.\n\n\n  return null;\n} // Finds the outer-most ancestor.\n//\n// @param {module:engine/model/node~Node} startingNode\n// @param {module:engine/model/schema~Schema} schema\n// @param {String} expandToDirection Direction of expansion - either 'start' or 'end' of the range.\n// @returns {module:engine/model/node~Node}\n\n\nfunction findOutermostLimitAncestor(startingNode, schema) {\n  let isLimitNode = startingNode;\n  let parent = isLimitNode; // Find outer most isLimit block as such blocks might be nested (ie. in tables).\n\n  while (schema.isLimit(parent) && parent.parent) {\n    isLimitNode = parent;\n    parent = parent.parent;\n  }\n\n  return isLimitNode;\n} // Checks whether any of range boundaries is placed around non-limit elements.\n//\n// @param {module:engine/model/position~Position} start\n// @param {module:engine/model/position~Position} end\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction checkSelectionOnNonLimitElements(start, end, schema) {\n  const startIsOnBlock = start.nodeAfter && !schema.isLimit(start.nodeAfter) || schema.checkChild(start, '$text');\n  const endIsOnBlock = end.nodeBefore && !schema.isLimit(end.nodeBefore) || schema.checkChild(end, '$text'); // We should fix such selection when one of those nodes needs fixing.\n\n  return startIsOnBlock || endIsOnBlock;\n} // Checks if node exists and if it's an object.\n//\n// @param {module:engine/model/node~Node} node\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction isInObject(node, schema) {\n  return node && schema.isObject(node);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/model\n */\nimport Batch from './batch';\nimport Writer from './writer';\nimport Schema from './schema';\nimport Document from './document';\nimport MarkerCollection from './markercollection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ModelElement from './element';\nimport ModelRange from './range';\nimport ModelPosition from './position';\nimport ModelSelection from './selection';\nimport insertContent from './utils/insertcontent';\nimport deleteContent from './utils/deletecontent';\nimport modifySelection from './utils/modifyselection';\nimport getSelectedContent from './utils/getselectedcontent';\nimport { injectSelectionPostFixer } from './utils/selection-post-fixer';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Editor's data model. Read about the model in the\n * {@glink framework/guides/architecture/editing-engine engine architecture guide}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Model {\n  constructor() {\n    /**\n     * Model's marker collection.\n     *\n     * @readonly\n     * @member {module:engine/model/markercollection~MarkerCollection}\n     */\n    this.markers = new MarkerCollection();\n    /**\n     * Model's document.\n     *\n     * @readonly\n     * @member {module:engine/model/document~Document}\n     */\n\n    this.document = new Document(this);\n    /**\n     * Model's schema.\n     *\n     * @readonly\n     * @member {module:engine/model/schema~Schema}\n     */\n\n    this.schema = new Schema();\n    /**\n     * All callbacks added by {@link module:engine/model/model~Model#change} or\n     * {@link module:engine/model/model~Model#enqueueChange} methods waiting to be executed.\n     *\n     * @private\n     * @type {Array.<Function>}\n     */\n\n    this._pendingChanges = [];\n    /**\n     * The last created and currently used writer instance.\n     *\n     * @private\n     * @member {module:engine/model/writer~Writer}\n     */\n\n    this._currentWriter = null;\n    ['insertContent', 'deleteContent', 'modifySelection', 'getSelectedContent', 'applyOperation'].forEach(methodName => this.decorate(methodName)); // Adding operation validation with `highest` priority, so it is called before any other feature would like\n    // to do anything with the operation. If the operation has incorrect parameters it should throw on the earliest occasion.\n\n    this.on('applyOperation', (evt, args) => {\n      const operation = args[0];\n\n      operation._validate();\n    }, {\n      priority: 'highest'\n    }); // Register some default abstract entities.\n\n    this.schema.register('$root', {\n      isLimit: true\n    });\n    this.schema.register('$block', {\n      allowIn: '$root',\n      isBlock: true\n    });\n    this.schema.register('$text', {\n      allowIn: '$block',\n      isInline: true\n    });\n    this.schema.register('$clipboardHolder', {\n      allowContentOf: '$root',\n      isLimit: true\n    });\n    this.schema.extend('$text', {\n      allowIn: '$clipboardHolder'\n    }); // An element needed by the `upcastElementToMarker` converter.\n    // This element temporarily represents a marker boundary during the conversion process and is removed\n    // at the end of the conversion. `UpcastDispatcher` or at least `Conversion` class looks like a\n    // better place for this registration but both know nothing about `Schema`.\n\n    this.schema.register('$marker');\n    this.schema.addChildCheck((context, childDefinition) => {\n      if (childDefinition.name === '$marker') {\n        return true;\n      }\n    });\n    injectSelectionPostFixer(this);\n  }\n  /**\n   * The `change()` method is the primary way of changing the model. You should use it to modify all document nodes\n   * (including detached nodes – i.e. nodes not added to the {@link module:engine/model/model~Model#document model document}),\n   * the {@link module:engine/model/document~Document#selection document's selection}, and\n   * {@link module:engine/model/model~Model#markers model markers}.\n   *\n   *\t\tmodel.change( writer => {\n   *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n   *\t\t} );\n   *\n   * All changes inside the change block use the same {@link module:engine/model/batch~Batch} so they are combined\n   * into a single undo step.\n   *\n   *\t\tmodel.change( writer => {\n   *\t\t\twriter.insertText( 'foo', paragraph, 'end' ); // foo.\n   *\n   *\t\t\tmodel.change( writer => {\n   *\t\t\t\twriter.insertText( 'bar', paragraph, 'end' ); // foobar.\n   *\t\t\t} );\n   *\n   * \t\t\twriter.insertText( 'bom', paragraph, 'end' ); // foobarbom.\n   *\t\t} );\n   *\n   * The callback of the `change()` block is executed synchronously.\n   *\n   * You can also return a value from the change block.\n   *\n   *\t\tconst img = model.change( writer => {\n   *\t\t\treturn writer.createElement( 'img' );\n   *\t\t} );\n   *\n   * @see #enqueueChange\n   * @param {Function} callback Callback function which may modify the model.\n   * @returns {*} Value returned by the callback.\n   */\n\n\n  change(callback) {\n    try {\n      if (this._pendingChanges.length === 0) {\n        // If this is the outermost block, create a new batch and start `_runPendingChanges` execution flow.\n        this._pendingChanges.push({\n          batch: new Batch(),\n          callback\n        });\n\n        return this._runPendingChanges()[0];\n      } else {\n        // If this is not the outermost block, just execute the callback.\n        return callback(this._currentWriter);\n      }\n    } catch (err) {\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  }\n  /**\n   * The `enqueueChange()` method performs similar task as the {@link #change `change()` method}, with two major differences.\n   *\n   * First, the callback of `enqueueChange()` is executed when all other enqueued changes are done. It might be executed\n   * immediately if it is not nested in any other change block, but if it is nested in another (enqueue)change block,\n   * it will be delayed and executed after the outermost block.\n   *\n   *\t\tmodel.change( writer => {\n   *\t\t\tconsole.log( 1 );\n   *\n   *\t\t\tmodel.enqueueChange( writer => {\n   *\t\t\t\tconsole.log( 2 );\n   *\t\t\t} );\n   *\n   * \t\t\tconsole.log( 3 );\n   *\t\t} ); // Will log: 1, 3, 2.\n   *\n   * Second, it lets you define the {@link module:engine/model/batch~Batch} into which you want to add your changes.\n   * By default, a new batch is created. In the sample above, `change` and `enqueueChange` blocks use a different\n   * batch (and different {@link module:engine/model/writer~Writer} since each of them operates on the separate batch).\n   *\n   * When using the `enqueueChange()` block you can also add some changes to the batch you used before.\n   *\n   *\t\tmodel.enqueueChange( batch, writer => {\n   *\t\t\twriter.insertText( 'foo', paragraph, 'end' );\n   *\t\t} );\n   *\n   * The batch instance can be obtained from {@link module:engine/model/writer~Writer#batch the writer}.\n   *\n   * @param {module:engine/model/batch~Batch|'transparent'|'default'} batchOrType Batch or batch type should be used in the callback.\n   * If not defined, a new batch will be created.\n   * @param {Function} callback Callback function which may modify the model.\n   */\n\n\n  enqueueChange(batchOrType, callback) {\n    try {\n      if (typeof batchOrType === 'string') {\n        batchOrType = new Batch(batchOrType);\n      } else if (typeof batchOrType == 'function') {\n        callback = batchOrType;\n        batchOrType = new Batch();\n      }\n\n      this._pendingChanges.push({\n        batch: batchOrType,\n        callback\n      });\n\n      if (this._pendingChanges.length == 1) {\n        this._runPendingChanges();\n      }\n    } catch (err) {\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  }\n  /**\n   * {@link module:utils/observablemixin~ObservableMixin#decorate Decorated} function for applying\n   * {@link module:engine/model/operation/operation~Operation operations} to the model.\n   *\n   * This is a low-level way of changing the model. It is exposed for very specific use cases (like the undo feature).\n   * Normally, to modify the model, you will want to use {@link module:engine/model/writer~Writer `Writer`}.\n   * See also {@glink framework/guides/architecture/editing-engine#changing-the-model Changing the model} section\n   * of the {@glink framework/guides/architecture/editing-engine Editing architecture} guide.\n   *\n   * @param {module:engine/model/operation/operation~Operation} operation The operation to apply.\n   */\n\n\n  applyOperation(operation) {\n    operation._execute();\n  }\n  /**\n   * Inserts content at the position in the editor specified by the selection, as one would expect the paste\n   * functionality to work.\n   *\n   * This is a high-level method. It takes the {@link #schema schema} into consideration when inserting\n   * the content, clears the given selection's content before inserting nodes and moves the selection\n   * to its target position at the end of the process.\n   * It can split elements, merge them, wrap bare text nodes with paragraphs, etc. &mdash; just like the\n   * pasting feature should do.\n   *\n   * For lower-level methods see {@link module:engine/model/writer~Writer `Writer`}.\n   *\n   * This method, unlike {@link module:engine/model/writer~Writer `Writer`}'s methods, does not have to be used\n   * inside a {@link #change `change()` block}.\n   *\n   * # Conversion and schema\n   *\n   * Inserting elements and text nodes into the model is not enough to make CKEditor 5 render that content\n   * to the user. CKEditor 5 implements a model-view-controller architecture and what `model.insertContent()` does\n   * is only adding nodes to the model. Additionally, you need to define\n   * {@glink framework/guides/architecture/editing-engine#conversion converters} between the model and view\n   * and define those nodes in the {@glink framework/guides/architecture/editing-engine#schema schema}.\n   *\n   * So, while this method may seem similar to CKEditor 4 `editor.insertHtml()` (in fact, both methods\n   * are used for paste-like content insertion), the CKEditor 5 method cannot be use to insert arbitrary HTML\n   * unless converters are defined for all elements and attributes in that HTML.\n   *\n   * # Examples\n   *\n   * Using `insertContent()` with a manually created model structure:\n   *\n   *\t\t// Let's create a document fragment containing such content as:\n   *\t\t//\n   *\t\t// <paragrap>foo</paragraph>\n   *\t\t// <blockQuote>\n   *\t\t//    <paragraph>bar</paragraph>\n   *\t\t// </blockQuote>\n   *\t\tconst docFrag = editor.model.change( writer => {\n   *\t\t\tconst p1 = writer.createElement( 'paragraph' );\n   *\t\t\tconst p2 = writer.createElement( 'paragraph' );\n   *\t\t\tconst blockQuote = writer.createElement( 'blockQuote' );\n   *\t\t\tconst docFrag = writer.createDocumentFragment();\n   *\n   *\t\t\twriter.append( p1, docFrag );\n   *\t\t\twriter.append( blockQuote, docFrag );\n   *\t\t\twriter.append( p2, blockQuote );\n   *\t\t\twriter.insertText( 'foo', p1 );\n   *\t\t\twriter.insertText( 'bar', p2 );\n   *\n   *\t\t\treturn docFrag;\n   *\t\t} );\n   *\n   *\t\t// insertContent() does not have to be used in a change() block. It can, though,\n   *\t\t// so this code could be moved to the callback defined above.\n   *\t\teditor.model.insertContent( docFrag );\n   *\n   * Using `insertContent()` with an HTML string converted to a model document fragment (similar to the pasting mechanism):\n   *\n   *\t\t// You can create your own HtmlDataProcessor instance or use editor.data.processor\n   *\t\t// if you have not overridden the default one (which is the HtmlDataProcessor instance).\n   *\t\tconst htmlDP = new HtmlDataProcessor();\n   *\n   *\t\t// Convert an HTML string to a view document fragment:\n   *\t\tconst viewFragment = htmlDP.toView( htmlString );\n   *\n   *\t\t// Convert the view document fragment to a model document fragment\n   *\t\t// in the context of $root. This conversion takes the schema into\n   *\t\t// account so if, for example, the view document fragment contained a bare text node,\n   *\t\t// this text node cannot be a child of $root, so it will be automatically\n   *\t\t// wrapped with a <paragraph>. You can define the context yourself (in the second parameter),\n   *\t\t// and e.g. convert the content like it would happen in a <paragraph>.\n   *\t\t// Note: The clipboard feature uses a custom context called $clipboardHolder\n   *\t\t// which has a loosened schema.\n   *\t\tconst modelFragment = editor.data.toModel( viewFragment );\n   *\n   *\t\teditor.model.insertContent( modelFragment );\n   *\n   * By default this method will use the document selection but it can also be used with a position, range or selection instance.\n   *\n   *\t\t// Insert text at the current document selection position.\n   *\t\teditor.model.change( writer => {\n   *\t\t\teditor.model.insertContent( writer.createText( 'x' ) );\n   *\t\t} );\n   *\n   *\t\t// Insert text at a given position - the document selection will not be modified.\n   *\t\teditor.model.change( writer => {\n   *\t\t\teditor.model.insertContent( writer.createText( 'x' ), doc.getRoot(), 2 );\n   *\n   *\t\t\t// Which is a shorthand for:\n   *\t\t\teditor.model.insertContent( writer.createText( 'x' ), writer.createPositionAt( doc.getRoot(), 2 ) );\n   *\t\t} );\n   *\n   * If an instance of {@link module:engine/model/selection~Selection} is passed as `selectable`\n   * it will be moved to the target position (where the document selection should be moved after the insertion).\n   *\n   *\t\teditor.model.change( writer => {\n   *\t\t\t// Insert text replacing the given selection instance.\n   *\t\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t\teditor.model.insertContent( writer.createText( 'x' ), selection );\n   *\n   *\t\t\t// insertContent() modifies the passed selection instance so it can be used to set the document selection.\n   *\t\t\t// Note: This is not necessary when you passed the document selection to insertContent().\n   *\t\t\twriter.setSelection( selection );\n   *\t\t} );\n   *\n   * @fires insertContent\n   * @param {module:engine/model/documentfragment~DocumentFragment|module:engine/model/item~Item} content The content to insert.\n   * @param {module:engine/model/selection~Selectable} [selectable=model.document.selection]\n   * The selection into which the content should be inserted. If not provided the current model document selection will be used.\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] To be used when a model item was passed as `selectable`.\n   * This param defines a position in relation to that item.\n   * @returns {module:engine/model/range~Range} Range which contains all the performed changes. This is a range that, if removed,\n   * would return the model to the state before the insertion. If no changes were preformed by `insertContent`, returns a range collapsed\n   * at the insertion position.\n   */\n\n\n  insertContent(content, selectable, placeOrOffset) {\n    return insertContent(this, content, selectable, placeOrOffset);\n  }\n  /**\n   * Deletes content of the selection and merge siblings. The resulting selection is always collapsed.\n   *\n   * **Note:** For the sake of predictability, the resulting selection should always be collapsed.\n   * In cases where a feature wants to modify deleting behavior so selection isn't collapsed\n   * (e.g. a table feature may want to keep row selection after pressing <kbd>Backspace</kbd>),\n   * then that behavior should be implemented in the view's listener. At the same time, the table feature\n   * will need to modify this method's behavior too, e.g. to \"delete contents and then collapse\n   * the selection inside the last selected cell\" or \"delete the row and collapse selection somewhere near\".\n   * That needs to be done in order to ensure that other features which use `deleteContent()` will work well with tables.\n   *\n   * @fires deleteContent\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n   * Selection of which the content should be deleted.\n   * @param {Object} [options]\n   * @param {Boolean} [options.leaveUnmerged=false] Whether to merge elements after removing the content of the selection.\n   *\n   * For example `<heading1>x[x</heading1><paragraph>y]y</paragraph>` will become:\n   *\n   * * `<heading1>x^y</heading1>` with the option disabled (`leaveUnmerged == false`)\n   * * `<heading1>x^</heading1><paragraph>y</paragraph>` with enabled (`leaveUnmerged == true`).\n   *\n   * Note: {@link module:engine/model/schema~Schema#isObject object} and {@link module:engine/model/schema~Schema#isLimit limit}\n   * elements will not be merged.\n   *\n   * @param {Boolean} [options.doNotResetEntireContent=false] Whether to skip replacing the entire content with a\n   * paragraph when the entire content was selected.\n   *\n   * For example `<heading1>[x</heading1><paragraph>y]</paragraph>` will become:\n   *\n   * * `<paragraph>^</paragraph>` with the option disabled (`doNotResetEntireContent == false`)\n   * * `<heading1>^</heading1>` with enabled (`doNotResetEntireContent == true`)\n   *\n   * @param {Boolean} [options.doNotAutoparagraph=false] Whether to create a paragraph if after content deletion selection is moved\n   * to a place where text cannot be inserted.\n   *\n   * For example `<paragraph>x</paragraph>[<image src=\"foo.jpg\"></image>]` will become:\n   *\n   * * `<paragraph>x</paragraph><paragraph>[]</paragraph>` with the option disabled (`doNotAutoparagraph == false`)\n   * * `<paragraph>x[]</paragraph>` with the option enabled (`doNotAutoparagraph == true`).\n   *\n   * **Note:** if there is no valid position for the selection, the paragraph will always be created:\n   *\n   * `[<image src=\"foo.jpg\"></image>]` -> `<paragraph>[]</paragraph>`.\n   */\n\n\n  deleteContent(selection, options) {\n    deleteContent(this, selection, options);\n  }\n  /**\n   * Modifies the selection. Currently, the supported modifications are:\n   *\n   * * Extending. The selection focus is moved in the specified `options.direction` with a step specified in `options.unit`.\n   * Possible values for `unit` are:\n   *  * `'character'` (default) - moves selection by one user-perceived character. In most cases this means moving by one\n   *  character in `String` sense. However, unicode also defines \"combing marks\". These are special symbols, that combines\n   *  with a symbol before it (\"base character\") to create one user-perceived character. For example, `q̣̇` is a normal\n   *  letter `q` with two \"combining marks\": upper dot (`Ux0307`) and lower dot (`Ux0323`). For most actions, i.e. extending\n   *  selection by one position, it is correct to include both \"base character\" and all of it's \"combining marks\". That is\n   *  why `'character'` value is most natural and common method of modifying selection.\n   *  * `'codePoint'` - moves selection by one unicode code point. In contrary to, `'character'` unit, this will insert\n   *  selection between \"base character\" and \"combining mark\", because \"combining marks\" have their own unicode code points.\n   *  However, for technical reasons, unicode code points with values above `UxFFFF` are represented in native `String` by\n   *  two characters, called \"surrogate pairs\". Halves of \"surrogate pairs\" have a meaning only when placed next to each other.\n   *  For example `𨭎` is represented in `String` by `\\uD862\\uDF4E`. Both `\\uD862` and `\\uDF4E` do not have any meaning\n   *  outside the pair (are rendered as ? when alone). Position between them would be incorrect. In this case, selection\n   *  extension will include whole \"surrogate pair\".\n   *  * `'word'` - moves selection by a whole word.\n   *\n   * **Note:** if you extend a forward selection in a backward direction you will in fact shrink it.\n   *\n   * @fires modifySelection\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n   * The selection to modify.\n   * @param {Object} [options]\n   * @param {'forward'|'backward'} [options.direction='forward'] The direction in which the selection should be modified.\n   * @param {'character'|'codePoint'|'word'} [options.unit='character'] The unit by which selection should be modified.\n   */\n\n\n  modifySelection(selection, options) {\n    modifySelection(this, selection, options);\n  }\n  /**\n   * Gets a clone of the selected content.\n   *\n   * For example, for the following selection:\n   *\n   * ```html\n   * <paragraph>x</paragraph>\n   * <blockQuote>\n   *\t<paragraph>y</paragraph>\n   *\t<heading1>fir[st</heading1>\n   * </blockQuote>\n   * <paragraph>se]cond</paragraph>\n   * <paragraph>z</paragraph>\n   * ```\n   *\n   * It will return a document fragment with such a content:\n   *\n   * ```html\n   * <blockQuote>\n   *\t<heading1>st</heading1>\n   * </blockQuote>\n   * <paragraph>se</paragraph>\n   * ```\n   *\n   * @fires getSelectedContent\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n   * The selection of which content will be returned.\n   * @returns {module:engine/model/documentfragment~DocumentFragment}\n   */\n\n\n  getSelectedContent(selection) {\n    return getSelectedContent(this, selection);\n  }\n  /**\n   * Checks whether the given {@link module:engine/model/range~Range range} or\n   * {@link module:engine/model/element~Element element} has any meaningful content.\n   *\n   * Meaningful content is:\n   *\n   * * any text node (`options.ignoreWhitespaces` allows controlling whether this text node must also contain\n   * any non-whitespace characters),\n   * * or any {@link module:engine/model/schema~Schema#isObject object element},\n   * * or any {@link module:engine/model/markercollection~Marker marker} which\n   * {@link module:engine/model/markercollection~Marker#_affectsData affects data}.\n   *\n   * This means that a range containing an empty `<paragraph></paragraph>` is not considered to have a meaningful content.\n   * However, a range containing an `<image></image>` (which would normally be marked in the schema as an object element)\n   * is considered non-empty.\n   *\n   * @param {module:engine/model/range~Range|module:engine/model/element~Element} rangeOrElement Range or element to check.\n   * @param {Object} [options]\n   * @param {Boolean} [options.ignoreWhitespaces] Whether text node with whitespaces only should be considered empty.\n   * @returns {Boolean}\n   */\n\n\n  hasContent(rangeOrElement, options) {\n    const range = rangeOrElement instanceof ModelElement ? ModelRange._createIn(rangeOrElement) : rangeOrElement;\n\n    if (range.isCollapsed) {\n      return false;\n    } // Check if there are any markers which affects data in this given range.\n\n\n    for (const intersectingMarker of this.markers.getMarkersIntersectingRange(range)) {\n      if (intersectingMarker.affectsData) {\n        return true;\n      }\n    }\n\n    const {\n      ignoreWhitespaces = false\n    } = options || {};\n\n    for (const item of range.getItems()) {\n      if (item.is('textProxy')) {\n        if (!ignoreWhitespaces) {\n          return true;\n        } else if (item.data.search(/\\S/) !== -1) {\n          return true;\n        }\n      } else if (this.schema.isObject(item)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n   * Creates a position from the given root and path in that root.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createPositionFromPath `Writer#createPositionFromPath()`}.\n   *\n   * @param {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment} root Root of the position.\n   * @param {Array.<Number>} path Position path. See {@link module:engine/model/position~Position#path}.\n   * @param {module:engine/model/position~PositionStickiness} [stickiness='toNone'] Position stickiness.\n   * See {@link module:engine/model/position~PositionStickiness}.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionFromPath(root, path, stickiness) {\n    return new ModelPosition(root, path, stickiness);\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/model/position~Position position},\n   * * a parent element and offset in that element,\n   * * a parent element and `'end'` (the position will be set at the end of that element),\n   * * a {@link module:engine/model/item~Item model item} and `'before'` or `'after'`\n   * (the position will be set before or after the given model item).\n   *\n   * This method is a shortcut to other factory methods such as:\n   *\n   * * {@link module:engine/model/model~Model#createPositionBefore `createPositionBefore()`},\n   * * {@link module:engine/model/model~Model#createPositionAfter `createPositionAfter()`}.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createPositionAt `Writer#createPositionAt()`},\n   *\n   * @param {module:engine/model/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/model/item~Item model item}.\n   */\n\n\n  createPositionAt(itemOrPosition, offset) {\n    return ModelPosition._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after the given {@link module:engine/model/item~Item model item}.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createPositionAfter `Writer#createPositionAfter()`}.\n   *\n   * @param {module:engine/model/item~Item} item Item after which the position should be placed.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionAfter(item) {\n    return ModelPosition._createAfter(item);\n  }\n  /**\n   * Creates a new position before the given {@link module:engine/model/item~Item model item}.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createPositionBefore `Writer#createPositionBefore()`}.\n   *\n   * @param {module:engine/model/item~Item} item Item before which the position should be placed.\n   * @returns {module:engine/model/position~Position}\n   */\n\n\n  createPositionBefore(item) {\n    return ModelPosition._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from the `start` position to the `end` position.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createRange `Writer#createRange()`}:\n   *\n   *\t\tmodel.change( writer => {\n   *\t\t\tconst range = writer.createRange( start, end );\n   *\t\t} );\n   *\n   * @param {module:engine/model/position~Position} start Start position.\n   * @param {module:engine/model/position~Position} [end] End position. If not set, the range will be collapsed\n   * to the `start` position.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  createRange(start, end) {\n    return new ModelRange(start, end);\n  }\n  /**\n   * Creates a range inside the given element which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createRangeIn `Writer#createRangeIn()`}:\n   *\n   *\t\tmodel.change( writer => {\n   *\t\t\tconst range = writer.createRangeIn( paragraph );\n   *\t\t} );\n   *\n   * @param {module:engine/model/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  createRangeIn(element) {\n    return ModelRange._createIn(element);\n  }\n  /**\n   * Creates a range that starts before the given {@link module:engine/model/item~Item model item} and ends after it.\n   *\n   * Note: This method is also available on `writer` instance as\n   * {@link module:engine/model/writer~Writer#createRangeOn `Writer.createRangeOn()`}:\n   *\n   *\t\tmodel.change( writer => {\n   *\t\t\tconst range = writer.createRangeOn( paragraph );\n   *\t\t} );\n   *\n   * @param {module:engine/model/item~Item} item\n   * @returns {module:engine/model/range~Range}\n   */\n\n\n  createRangeOn(item) {\n    return ModelRange._createOn(item);\n  }\n  /**\n   * Creates a new selection instance based on the given {@link module:engine/model/selection~Selectable selectable}\n   * or creates an empty selection if no arguments were passed.\n   *\n   * Note: This method is also available as\n   * {@link module:engine/model/writer~Writer#createSelection `Writer#createSelection()`}.\n   *\n   *\t\t// Creates empty selection without ranges.\n   *\t\tconst selection = writer.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = writer.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   *\t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tconst selection = writer.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\t// Note: It doesn't copies selection attributes.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = writer.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the given document selection.\n   *\t\t// Note: It doesn't copies selection attributes.\n   *\t\tconst documentSelection = model.document.selection;\n   *\t\tconst selection = writer.createSelection( documentSelection );\n   *\n   *\t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tconst selection = writer.createSelection( position );\n   *\n   *\t\t// Creates selection at the given offset in the given element.\n   *\t\tconst paragraph = writer.createElement( 'paragraph' );\n   *\t\tconst selection = writer.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/model/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/model/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n   *\n   *\t\t// Additional options (`'backward'`) can be specified as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * @param {module:engine/model/selection~Selectable} selectable\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Sets place or offset of the selection.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @returns {module:engine/model/selection~Selection}\n   */\n\n\n  createSelection(selectable, placeOrOffset, options) {\n    return new ModelSelection(selectable, placeOrOffset, options);\n  }\n  /**\n   * Creates a {@link module:engine/model/batch~Batch} instance.\n   *\n   * **Note:** In most cases creating a batch instance is not necessary as they are created when using:\n   *\n   * * {@link #change `change()`},\n   * * {@link #enqueueChange `enqueueChange()`}.\n   *\n   * @param {'transparent'|'default'} [type='default'] The type of the batch.\n   * @returns {module:engine/model/batch~Batch}\n   */\n\n\n  createBatch(type) {\n    return new Batch(type);\n  }\n  /**\n   * Removes all events listeners set by model instance and destroys {@link module:engine/model/document~Document}.\n   */\n\n\n  destroy() {\n    this.document.destroy();\n    this.stopListening();\n  }\n  /**\n   * Common part of {@link module:engine/model/model~Model#change} and {@link module:engine/model/model~Model#enqueueChange}\n   * which calls callbacks and returns array of values returned by these callbacks.\n   *\n   * @private\n   * @returns {Array.<*>} Array of values returned by callbacks.\n   */\n\n\n  _runPendingChanges() {\n    const ret = [];\n    this.fire('_beforeChanges');\n\n    while (this._pendingChanges.length) {\n      // Create a new writer using batch instance created for this chain of changes.\n      const currentBatch = this._pendingChanges[0].batch;\n      this._currentWriter = new Writer(this, currentBatch); // Execute changes callback and gather the returned value.\n\n      const callbackReturnValue = this._pendingChanges[0].callback(this._currentWriter);\n\n      ret.push(callbackReturnValue);\n\n      this.document._handleChangeBlock(this._currentWriter);\n\n      this._pendingChanges.shift();\n\n      this._currentWriter = null;\n    }\n\n    this.fire('_afterChanges');\n    return ret;\n  }\n  /**\n   * Fired when entering the outermost {@link module:engine/model/model~Model#enqueueChange} or\n   * {@link module:engine/model/model~Model#change} block.\n   *\n   * @protected\n   * @event _beforeChanges\n   */\n\n  /**\n   * Fired when leaving the outermost {@link module:engine/model/model~Model#enqueueChange} or\n   * {@link module:engine/model/model~Model#change} block.\n   *\n   * @protected\n   * @event _afterChanges\n   */\n\n  /**\n   * Fired every time any {@link module:engine/model/operation/operation~Operation operation} is applied on the model\n   * using {@link #applyOperation}.\n   *\n   * Note that this event is suitable only for very specific use-cases. Use it if you need to listen to every single operation\n   * applied on the document. However, in most cases {@link module:engine/model/document~Document#event:change} should\n   * be used.\n   *\n   * A few callbacks are already added to this event by engine internal classes:\n   *\n   * * with `highest` priority operation is validated,\n   * * with `normal` priority operation is executed,\n   * * with `low` priority the {@link module:engine/model/document~Document} updates its version,\n   * * with `low` priority {@link module:engine/model/liveposition~LivePosition} and {@link module:engine/model/liverange~LiveRange}\n   * update themselves.\n   *\n   * @event applyOperation\n   * @param {Array} args Arguments of the `applyOperation` which is an array with a single element - applied\n   * {@link module:engine/model/operation/operation~Operation operation}.\n   */\n\n  /**\n   * Event fired when {@link #insertContent} method is called.\n   *\n   * The {@link #insertContent default action of that method} is implemented as a\n   * listener to this event so it can be fully customized by the features.\n   *\n   * **Note** The `selectable` parameter for the {@link #insertContent} is optional. When `undefined` value is passed the method uses\n   * `model.document.selection`.\n   *\n   * @event insertContent\n   * @param {Array} args The arguments passed to the original method.\n   */\n\n  /**\n   * Event fired when {@link #deleteContent} method is called.\n   *\n   * The {@link #deleteContent default action of that method} is implemented as a\n   * listener to this event so it can be fully customized by the features.\n   *\n   * @event deleteContent\n   * @param {Array} args The arguments passed to the original method.\n   */\n\n  /**\n   * Event fired when {@link #modifySelection} method is called.\n   *\n   * The {@link #modifySelection default action of that method} is implemented as a\n   * listener to this event so it can be fully customized by the features.\n   *\n   * @event modifySelection\n   * @param {Array} args The arguments passed to the original method.\n   */\n\n  /**\n   * Event fired when {@link #getSelectedContent} method is called.\n   *\n   * The {@link #getSelectedContent default action of that method} is implemented as a\n   * listener to this event so it can be fully customized by the features.\n   *\n   * @event getSelectedContent\n   * @param {Array} args The arguments passed to the original method.\n   */\n\n\n}\nmix(Model, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/keystrokehandler\n */\nimport DomEmitterMixin from './dom/emittermixin';\nimport { getCode, parseKeystroke } from './keyboard';\n/**\n * Keystroke handler allows registering callbacks for given keystrokes.\n *\n * The most frequent use of this class is through the {@link module:core/editor/editor~Editor#keystrokes `editor.keystrokes`}\n * property. It allows listening to keystrokes executed in the editing view:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+A', ( keyEvtData, cancel ) => {\n *\t\t\tconsole.log( 'Ctrl+A has been pressed' );\n *\t\t\tcancel();\n *\t\t} );\n *\n * However, this utility class can be used in various part of the UI. For instance, a certain {@link module:ui/view~View}\n * can use it like this:\n *\n *\t\tclass MyView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tthis.keystrokes = new KeystrokeHandler();\n *\n * \t\t\t\tthis.keystrokes.set( 'tab', handleTabKey );\n *\t\t\t}\n *\n *\t\t\trender() {\n *\t\t\t\tsuper.render();\n *\n *\t\t\t\tthis.keystrokes.listenTo( this.element );\n *\t\t\t}\n *\t\t}\n *\n * That keystroke handler will listen to `keydown` events fired in this view's main element.\n *\n */\n\nexport default class KeystrokeHandler {\n  /**\n   * Creates an instance of the keystroke handler.\n   */\n  constructor() {\n    /**\n     * Listener used to listen to events for easier keystroke handler destruction.\n     *\n     * @protected\n     * @member {module:utils/dom/emittermixin~Emitter}\n     */\n    this._listener = Object.create(DomEmitterMixin);\n  }\n  /**\n   * Starts listening for `keydown` events from a given emitter.\n   *\n   * @param {module:utils/emittermixin~Emitter} emitter\n   */\n\n\n  listenTo(emitter) {\n    // The #_listener works here as a kind of dispatcher. It groups the events coming from the same\n    // keystroke so the listeners can be attached to them with different priorities.\n    //\n    // E.g. all the keystrokes with the `keyCode` of 42 coming from the `emitter` are propagated\n    // as a `_keydown:42` event by the `_listener`. If there's a callback created by the `set`\n    // method for this 42 keystroke, it listens to the `_listener#_keydown:42` event only and interacts\n    // only with other listeners of this particular event, thus making it possible to prioritize\n    // the listeners and safely cancel execution, when needed. Instead of duplicating the Emitter logic,\n    // the KeystrokeHandler re–uses it to do its job.\n    this._listener.listenTo(emitter, 'keydown', (evt, keyEvtData) => {\n      this._listener.fire('_keydown:' + getCode(keyEvtData), keyEvtData);\n    });\n  }\n  /**\n   * Registers a handler for the specified keystroke.\n   *\n   * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n   * the {@link module:utils/keyboard~parseKeystroke} function.\n   * @param {Function} callback A function called with the\n   * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n   * a helper funcion to call both `preventDefault()` and `stopPropagation()` on the underlying event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n   * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n   * are called in the order they were added.\n   */\n\n\n  set(keystroke, callback, options = {}) {\n    const keyCode = parseKeystroke(keystroke);\n    const priority = options.priority; // Execute the passed callback on KeystrokeHandler#_keydown.\n    // TODO: https://github.com/ckeditor/ckeditor5-utils/issues/144\n\n    this._listener.listenTo(this._listener, '_keydown:' + keyCode, (evt, keyEvtData) => {\n      callback(keyEvtData, () => {\n        // Stop the event in the DOM: no listener in the web page\n        // will be triggered by this event.\n        keyEvtData.preventDefault();\n        keyEvtData.stopPropagation(); // Stop the event in the KeystrokeHandler: no more callbacks\n        // will be executed for this keystroke.\n\n        evt.stop();\n      }); // Mark this keystroke as handled by the callback. See: #press.\n\n      evt.return = true;\n    }, {\n      priority\n    });\n  }\n  /**\n   * Triggers a keystroke handler for a specified key combination, if such a keystroke was {@link #set defined}.\n   *\n   * @param {module:engine/view/observer/keyobserver~KeyEventData} keyEvtData Key event data.\n   * @returns {Boolean} Whether the keystroke was handled.\n   */\n\n\n  press(keyEvtData) {\n    return !!this._listener.fire('_keydown:' + getCode(keyEvtData), keyEvtData);\n  }\n  /**\n   * Destroys the keystroke handler.\n   */\n\n\n  destroy() {\n    this._listener.stopListening();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editingkeystrokehandler\n */\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\n/**\n * A keystroke handler for editor editing. Its instance is available\n * in {@link module:core/editor/editor~Editor#keystrokes} so plugins\n * can register their keystrokes.\n *\n * E.g. an undo plugin would do this:\n *\n *\t\teditor.keystrokes.set( 'Ctrl+Z', 'undo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Shift+Z', 'redo' );\n *\t\teditor.keystrokes.set( 'Ctrl+Y', 'redo' );\n *\n * @extends module:utils/keystrokehandler~KeystrokeHandler\n */\n\nexport default class EditingKeystrokeHandler extends KeystrokeHandler {\n  /**\n   * Creates an instance of the keystroke handler.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   */\n  constructor(editor) {\n    super();\n    /**\n     * The editor instance.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor}\n     */\n\n    this.editor = editor;\n  }\n  /**\n   * Registers a handler for the specified keystroke.\n   *\n   * The handler can be specified as a command name or a callback.\n   *\n   * @param {String|Array.<String|Number>} keystroke Keystroke defined in a format accepted by\n   * the {@link module:utils/keyboard~parseKeystroke} function.\n   * @param {Function|String} callback If a string is passed, then the keystroke will\n   * {@link module:core/editor/editor~Editor#execute execute a command}.\n   * If a function, then it will be called with the\n   * {@link module:engine/view/observer/keyobserver~KeyEventData key event data} object and\n   * a `cancel()` helper to both `preventDefault()` and `stopPropagation()` of the event.\n   * @param {Object} [options={}] Additional options.\n   * @param {module:utils/priorities~PriorityString|Number} [options.priority='normal'] The priority of the keystroke\n   * callback. The higher the priority value the sooner the callback will be executed. Keystrokes having the same priority\n   * are called in the order they were added.\n   */\n\n\n  set(keystroke, callback, options = {}) {\n    if (typeof callback == 'string') {\n      const commandName = callback;\n\n      callback = (evtData, cancel) => {\n        this.editor.execute(commandName);\n        cancel();\n      };\n    }\n\n    super.set(keystroke, callback, options);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editor\n */\nimport Config from '@ckeditor/ckeditor5-utils/src/config';\nimport EditingController from '@ckeditor/ckeditor5-engine/src/controller/editingcontroller';\nimport PluginCollection from '../plugincollection';\nimport CommandCollection from '../commandcollection';\nimport Locale from '@ckeditor/ckeditor5-utils/src/locale';\nimport DataController from '@ckeditor/ckeditor5-engine/src/controller/datacontroller';\nimport Conversion from '@ckeditor/ckeditor5-engine/src/conversion/conversion';\nimport Model from '@ckeditor/ckeditor5-engine/src/model/model';\nimport EditingKeystrokeHandler from '../editingkeystrokehandler';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Class representing a basic, generic editor.\n *\n * Check out the list of its subclasses to learn about specific editor implementations.\n *\n * All editor implementations (like {@link module:editor-classic/classiceditor~ClassicEditor} or\n * {@link module:editor-inline/inlineeditor~InlineEditor}) should extend this class. They can add their\n * own methods and properties.\n *\n * When you are implementing a plugin, then this editor represents the API\n * which your plugin can expect to get when using its {@link module:core/plugin~Plugin#editor} property.\n *\n * This API should be sufficient in order to implement the \"editing\" part of your feature\n * (schema definition, conversion, commands, keystrokes, etc.).\n * It does not define the editor UI, which is available only if the\n * the specific editor implements also the {@link module:core/editor/editorwithui~EditorWithUI} interface\n * (as most editor implementations do).\n *\n * @abstract\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Editor {\n  /**\n   * Creates a new instance of the Editor class.\n   *\n   * Usually, not to be used directly. See the static {@link module:core/editor/editor~Editor.create `create()`} method.\n   *\n   * @param {Object} [config] The editor config.\n   */\n  constructor(config) {\n    const availablePlugins = this.constructor.builtinPlugins;\n    /**\n     * Holds all configurations specific to this editor instance.\n     *\n     *\t\teditor.config.get( 'image.toolbar' );\n     *\t\t// -> [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n     *\n     * @readonly\n     * @member {module:utils/config~Config}\n     */\n\n    this.config = new Config(config, this.constructor.defaultConfig);\n    this.config.define('plugins', availablePlugins);\n    /**\n     * The plugins loaded and in use by this editor instance.\n     *\n     *\t\teditor.plugins.get( 'Clipboard' ); // -> instance of the Clipboard plugin.\n     *\n     * @readonly\n     * @member {module:core/plugincollection~PluginCollection}\n     */\n\n    this.plugins = new PluginCollection(this, availablePlugins);\n    /**\n     * Commands registered to the editor.\n     *\n     * Use the shorthand {@link #execute `editor.execute()`} method to execute commands:\n     *\n     *\t\t// Execute the bold command:\n     *\t\teditor.execute( 'bold' );\n     *\n     *\t\t// Check the state of the bold command:\n     *\t\teditor.commands.get( 'bold' ).value;\n     *\n     * @readonly\n     * @member {module:core/commandcollection~CommandCollection}\n     */\n\n    this.commands = new CommandCollection();\n    const languageConfig = this.config.get('language') || {};\n    /**\n     * @readonly\n     * @member {module:utils/locale~Locale}\n     */\n\n    this.locale = new Locale({\n      uiLanguage: typeof languageConfig === 'string' ? languageConfig : languageConfig.ui,\n      contentLanguage: this.config.get('language.content')\n    });\n    /**\n     * Shorthand for {@link module:utils/locale~Locale#t}.\n     *\n     * @see module:utils/locale~Locale#t\n     * @method #t\n     */\n\n    this.t = this.locale.t;\n    /**\n     * Indicates the editor life-cycle state.\n     *\n     * The editor is in one of the following states:\n     *\n     * * `initializing` - during the editor initialization (before {@link module:core/editor/editor~Editor.create `Editor.create()`})\n     * finished its job,\n     * * `ready` - after the promise returned by the {@link module:core/editor/editor~Editor.create `Editor.create()`}\n     * method is resolved,\n     * * `destroyed` - once the {@link #destroy `editor.destroy()`} method was called.\n     *\n     * @observable\n     * @member {'initializing'|'ready'|'destroyed'} #state\n     */\n\n    this.set('state', 'initializing');\n    this.once('ready', () => this.state = 'ready', {\n      priority: 'high'\n    });\n    this.once('destroy', () => this.state = 'destroyed', {\n      priority: 'high'\n    });\n    /**\n     * Defines whether this editor is in read-only mode.\n     *\n     * In read-only mode the editor {@link #commands commands} are disabled so it is not possible\n     * to modify the document by using them. Also, the editable element(s) become non-editable.\n     *\n     * In order to make the editor read-only, you can set this value directly:\n     *\n     *\t\teditor.isReadOnly = true;\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * The editor's model.\n     *\n     * The central point of the editor's abstract data model.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model}\n     */\n\n    this.model = new Model();\n    /**\n     * The {@link module:engine/controller/datacontroller~DataController data controller}.\n     * Used e.g. for setting and retrieving editor data.\n     *\n     * @readonly\n     * @member {module:engine/controller/datacontroller~DataController}\n     */\n\n    this.data = new DataController(this.model);\n    /**\n     * The {@link module:engine/controller/editingcontroller~EditingController editing controller}.\n     * Controls user input and rendering the content for editing.\n     *\n     * @readonly\n     * @member {module:engine/controller/editingcontroller~EditingController}\n     */\n\n    this.editing = new EditingController(this.model);\n    this.editing.view.document.bind('isReadOnly').to(this);\n    /**\n     * Conversion manager through which you can register model to view and view to model converters.\n     *\n     * See {@link module:engine/conversion/conversion~Conversion}'s documentation to learn how to add converters.\n     *\n     * @readonly\n     * @member {module:engine/conversion/conversion~Conversion}\n     */\n\n    this.conversion = new Conversion([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher);\n    this.conversion.addAlias('dataDowncast', this.data.downcastDispatcher);\n    this.conversion.addAlias('editingDowncast', this.editing.downcastDispatcher);\n    /**\n     * Instance of the {@link module:core/editingkeystrokehandler~EditingKeystrokeHandler}.\n     *\n     * It allows setting simple keystrokes:\n     *\n     *\t\t// Execute the bold command on Ctrl+E:\n     *\t\teditor.keystrokes.set( 'Ctrl+E', 'bold' );\n     *\n     *\t\t// Execute your own callback:\n     *\t\teditor.keystrokes.set( 'Ctrl+E', ( data, cancel ) => {\n     *\t\t\tconsole.log( data.keyCode );\n     *\n     *\t\t\t// Prevent default (native) action and stop the underlying keydown event\n     *\t\t\t// so no other editor feature will interfere.\n     *\t\t\tcancel();\n     *\t\t} );\n     *\n     * Note: Certain, typing oriented keystrokes (like <kbd>Backspace</kbd> or <kbd>Enter</kbd>) are handled\n     * by low level mechanism and trying to listen to them via the keystroke handler will not work reliably.\n     * To handle those specific keystrokes see the events fired by the\n     * {@link module:engine/view/document~Document editing view document} (`editor.editing.view.document`).\n     *\n     * @readonly\n     * @member {module:core/editingkeystrokehandler~EditingKeystrokeHandler}\n     */\n\n    this.keystrokes = new EditingKeystrokeHandler(this);\n    this.keystrokes.listenTo(this.editing.view.document);\n  }\n  /**\n   * Loads and initializes plugins specified in the config.\n   *\n   * @returns {Promise.<module:core/plugin~LoadedPlugins>} A promise which resolves\n   * once the initialization is completed providing an array of loaded plugins.\n   */\n\n\n  initPlugins() {\n    const config = this.config;\n    const plugins = config.get('plugins') || [];\n    const removePlugins = config.get('removePlugins') || [];\n    const extraPlugins = config.get('extraPlugins') || [];\n    return this.plugins.init(plugins.concat(extraPlugins), removePlugins);\n  }\n  /**\n   * Destroys the editor instance, releasing all resources used by it.\n   *\n   * **Note** The editor cannot be destroyed during the initialization phase so if it is called\n   * while the editor {@link #state is being initialized}, it will wait for the editor initialization before destroying it.\n   *\n   * @fires destroy\n   * @returns {Promise} A promise that resolves once the editor instance is fully destroyed.\n   */\n\n\n  destroy() {\n    let readyPromise = Promise.resolve();\n\n    if (this.state == 'initializing') {\n      readyPromise = new Promise(resolve => this.once('ready', resolve));\n    }\n\n    return readyPromise.then(() => {\n      this.fire('destroy');\n      this.stopListening();\n      this.commands.destroy();\n    }).then(() => this.plugins.destroy()).then(() => {\n      this.model.destroy();\n      this.data.destroy();\n      this.editing.destroy();\n      this.keystrokes.destroy();\n    });\n  }\n  /**\n   * Executes specified command with given parameters.\n   *\n   * Shorthand for:\n   *\n   *\t\teditor.commands.get( commandName ).execute( ... );\n   *\n   * @param {String} commandName Name of command to execute.\n   * @param {*} [...commandParams] Command parameters.\n   */\n\n\n  execute(...args) {\n    try {\n      this.commands.execute(...args);\n    } catch (err) {\n      CKEditorError.rethrowUnexpectedError(err, this);\n    }\n  }\n  /**\n   * Creates and initializes a new editor instance.\n   *\n   * This is an abstract method. Every editor type needs to implement its own initialization logic.\n   *\n   * See the `create()` methods of the existing editor types to learn how to use them:\n   *\n   * * {@link module:editor-classic/classiceditor~ClassicEditor.create `ClassicEditor.create()`}\n   * * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}\n   * * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n   * * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`}\n   *\n   * @abstract\n   * @method module:core/editor/editor~Editor.create\n   */\n\n\n}\nmix(Editor, ObservableMixin);\n/**\n * Fired when {@link module:engine/controller/datacontroller~DataController#event:ready data} and all additional\n * editor components are ready.\n *\n * Note: This event is most useful for plugin developers. When integrating the editor with your website or\n * application you do not have to listen to `editor#ready` because when the promise returned by the static\n * {@link module:core/editor/editor~Editor.create `Editor.create()`} event is resolved, the editor is already ready.\n * In fact, since the first moment when the editor instance is available to you is inside `then()`'s callback,\n * you cannot even add a listener to the `editor#ready` event.\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event ready\n */\n\n/**\n * Fired when this editor instance is destroyed. The editor at this point is not usable and this event should be used to\n * perform the clean-up in any plugin.\n *\n *\n * See also the {@link #state `editor.state`} property.\n *\n * @event destroy\n */\n\n/**\n * This error is thrown when a user tries to use a `<textarea>` element to create a non-classic editor in it.\n *\n * Textarea element represents a plain-text and cannot be used as a editable root element with included CKEditor5.\n * Content of an editor should be nicely present to the user and show him how it's going to looks like. Textarea element\n * doesn't support such behavior.\n *\n * Only {@glink builds/guides/overview#classic-editor Classic Editor} has implemented a special system, which\n * **replace** DOM element and load data from it\n * ({@link module:editor-classic/classiceditor~ClassicEditor.create more information}). All other editors\n * use an existing element, load data from it and make this element editable. Details about behaviour of each editor\n * might be found in an associated description of a `create` method of each editor.\n *\n * @error editor-wrong-element\n */\n\n/**\n * An array of plugins built into this editor class.\n * It is used in CKEditor 5 builds to provide a list of plugins which are later automatically initialized\n * during the editor initialization.\n *\n * They will be automatically initialized by the editor, unless listed in `config.removePlugins` and\n * unless `config.plugins` is passed.\n *\n *\t\t// Build some plugins into the editor class first.\n *\t\tClassicEditor.builtinPlugins = [ FooPlugin, BarPlugin ];\n *\n *\t\t// Normally, you need to define config.plugins, but since ClassicEditor.builtinPlugins was\n *\t\t// defined, now you can call create() without any configuration.\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.plugins.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Don't initialize this plugins (note: it's defined by a string):\n *\t\t\t\tremovePlugins: [ 'Foo' ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> undefined\n *\t\t\t\teditor.config.get( BarPlugin ); // -> instance of the Bar plugin\n *\t\t\t} );\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, {\n *\t\t\t\t// Load only this plugin. Can also be define by a string if\n *\t\t\t\t// this plugin was built into the editor class.\n *\t\t\t\tplugins: [ FooPlugin ]\n *\t\t\t} )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.plugins.get( FooPlugin ); // -> instance of the Foo plugin\n *\t\t\t\teditor.config.get( BarPlugin ); // -> undefined\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.defaultConfig}.\n *\n * @static\n * @member {Array.<Function>} module:core/editor/editor~Editor.builtinPlugins\n */\n\n/**\n * The default config which is built into the editor class.\n * It is used in CKEditor 5 builds to provide the default config options which are later used during editor initialization.\n *\n *\t\tClassicEditor.defaultConfig = {\n *\t\t\tfoo: 1,\n *\t\t\tbar: 2\n *\t\t};\n *\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 2\n *\t\t\t} );\n *\n *\t\t// The default options can be overridden by the config passed to create().\n *\t\tClassicEditor\n *\t\t\t.create( sourceElement, { bar: 3 } )\n *\t\t\t.then( editor => {\n *\t\t\t\teditor.config.get( 'foo' ); // -> 1\n *\t\t\t\teditor.config.get( 'bar' ); // -> 3\n *\t\t\t} );\n *\n * See also {@link module:core/editor/editor~Editor.builtinPlugins}.\n *\n * @static\n * @member {Object} module:core/editor/editor~Editor.defaultConfig\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/utils/dataapimixin\n */\n\n/**\n * Implementation of the {@link module:core/editor/utils/dataapimixin~DataApi}.\n *\n * @mixin DataApiMixin\n * @implements module:core/editor/utils/dataapimixin~DataApi\n */\nconst DataApiMixin = {\n  /**\n   * @inheritDoc\n   */\n  setData(data) {\n    this.data.set(data);\n  },\n\n  /**\n   * @inheritDoc\n   */\n  getData(options) {\n    return this.data.get(options);\n  }\n\n};\nexport default DataApiMixin;\n/**\n * Interface defining editor methods for setting and getting data to and from the editor's main root element\n * using the {@link module:core/editor/editor~Editor#data data pipeline}.\n *\n * This interface is not a part of the {@link module:core/editor/editor~Editor} class because one may want to implement\n * an editor with multiple root elements, in which case the methods for setting and getting data will need to be implemented\n * differently.\n *\n * @interface DataApi\n */\n\n/**\n * Sets the data in the editor.\n *\n *\t\teditor.setData( '<p>This is editor!</p>' );\n *\n * By default the editor accepts HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `setData()`'s parameter does not\n * have to be a string either. You can e.g. accept an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #setData\n * @param {String} data Input data.\n */\n\n/**\n * Gets the data from the editor.\n *\n *\t\teditor.getData(); // -> '<p>This is editor!</p>'\n *\n * By default the editor outputs HTML. This can be controlled by injecting a different data processor.\n * See the {@glink features/markdown Markdown output} guide for more details.\n *\n * Note: Not only is the format of the data configurable, but the type of the `getData()`'s return value does not\n * have to be a string either. You can e.g. return an object or a DOM `DocumentFragment` if you consider this\n * the right format for you.\n *\n * @method #getData\n * @param {Object} [options]\n * @param {String} [options.rootName='main'] Root name.\n * @param {String} [options.trim='empty'] Whether returned data should be trimmed. This option is set to `'empty'` by default,\n * which means that whenever editor content is considered empty, an empty string is returned. To turn off trimming\n * use `'none'`. In such cases exact content will be returned (for example `'<p>&nbsp;</p>'` for an empty editor).\n * @returns {String} Output data.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/basichtmlwriter\n */\n\n/* globals document */\n\n/**\n * Basic HTML writer. It uses the native `innerHTML` property for basic conversion\n * from a document fragment to an HTML string.\n *\n * @implements module:engine/dataprocessor/htmlwriter~HtmlWriter\n */\nexport default class BasicHtmlWriter {\n  /**\n   * Returns an HTML string created from the document fragment.\n   *\n   * @param {DocumentFragment} fragment\n   * @returns {String}\n   */\n  getHtml(fragment) {\n    const doc = document.implementation.createHTMLDocument('');\n    const container = doc.createElement('div');\n    container.appendChild(fragment);\n    return container.innerHTML;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/dataprocessor/htmldataprocessor\n */\n\n/* globals document, DOMParser */\nimport BasicHtmlWriter from './basichtmlwriter';\nimport DomConverter from '../view/domconverter';\n/**\n * The HTML data processor class.\n * This data processor implementation uses HTML as input and output data.\n *\n * @implements module:engine/dataprocessor/dataprocessor~DataProcessor\n */\n\nexport default class HtmlDataProcessor {\n  /**\n   * Creates a new instance of the HTML data processor class.\n   */\n  constructor() {\n    /**\n     * A DOM parser instance used to parse an HTML string to an HTML document.\n     *\n     * @private\n     * @member {DOMParser}\n     */\n    this._domParser = new DOMParser();\n    /**\n     * A DOM converter used to convert DOM elements to view elements.\n     *\n     * @private\n     * @member {module:engine/view/domconverter~DomConverter}\n     */\n\n    this._domConverter = new DomConverter({\n      blockFillerMode: 'nbsp'\n    });\n    /**\n     * A basic HTML writer instance used to convert DOM elements to an HTML string.\n     *\n     * @private\n     * @member {module:engine/dataprocessor/basichtmlwriter~BasicHtmlWriter}\n     */\n\n    this._htmlWriter = new BasicHtmlWriter();\n  }\n  /**\n   * Converts a provided {@link module:engine/view/documentfragment~DocumentFragment document fragment}\n   * to data format &mdash; in this case to an HTML string.\n   *\n   * @param {module:engine/view/documentfragment~DocumentFragment} viewFragment\n   * @returns {String} HTML string.\n   */\n\n\n  toData(viewFragment) {\n    // Convert view DocumentFragment to DOM DocumentFragment.\n    const domFragment = this._domConverter.viewToDom(viewFragment, document); // Convert DOM DocumentFragment to HTML output.\n\n\n    return this._htmlWriter.getHtml(domFragment);\n  }\n  /**\n   * Converts the provided HTML string to a view tree.\n   *\n   * @param {String} data An HTML string.\n   * @returns {module:engine/view/node~Node|module:engine/view/documentfragment~DocumentFragment|null} A converted view element.\n   */\n\n\n  toView(data) {\n    // Convert input HTML data to DOM DocumentFragment.\n    const domFragment = this._toDom(data); // Convert DOM DocumentFragment to view DocumentFragment.\n\n\n    return this._domConverter.domToView(domFragment);\n  }\n  /**\n   * Converts an HTML string to its DOM representation. Returns a document fragment containing nodes parsed from\n   * the provided data.\n   *\n   * @private\n   * @param {String} data\n   * @returns {DocumentFragment}\n   */\n\n\n  _toDom(data) {\n    const document = this._domParser.parseFromString(data, 'text/html');\n\n    const fragment = document.createDocumentFragment();\n    const nodes = document.body.childNodes;\n\n    while (nodes.length > 0) {\n      fragment.appendChild(nodes[0]);\n    }\n\n    return fragment;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/componentfactory\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * A helper class implementing the UI component ({@link module:ui/view~View view}) factory.\n *\n * It allows functions producing specific UI components to be registered under their unique names\n * in the factory. A registered component can be then instantiated by providing its name.\n * Note that names are case insensitive.\n *\n *\t\t// The editor provides localization tools for the factory.\n *\t\tconst factory = new ComponentFactory( editor );\n *\n *\t\tfactory.add( 'foo', locale => new FooView( locale ) );\n *\t\tfactory.add( 'bar', locale => new BarView( locale ) );\n *\n *\t\t// An instance of FooView.\n *\t\tconst fooInstance = factory.create( 'foo' );\n *\n *\t\t// Names are case insensitive so this is also allowed:\n *\t\tconst barInstance = factory.create( 'Bar' );\n *\n * The {@link module:core/editor/editor~Editor#locale editor locale} is passed to the factory\n * function when {@link module:ui/componentfactory~ComponentFactory#create} is called.\n */\n\nexport default class ComponentFactory {\n  /**\n   * Creates an instance of the factory.\n   *\n   * @constructor\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   */\n  constructor(editor) {\n    /**\n     * The editor instance that the factory belongs to.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor}\n     */\n    this.editor = editor;\n    /**\n     * Registered component factories.\n     *\n     * @private\n     * @member {Map}\n     */\n\n    this._components = new Map();\n  }\n  /**\n   * Returns an iterator of registered component names. Names are returned in lower case.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  *names() {\n    for (const value of this._components.values()) {\n      yield value.originalName;\n    }\n  }\n  /**\n   * Registers a component factory function that will be used by the\n   * {@link #create create} method and called with the\n   * {@link module:core/editor/editor~Editor#locale editor locale} as an argument,\n   * allowing localization of the {@link module:ui/view~View view}.\n   *\n   * @param {String} name The name of the component.\n   * @param {Function} callback The callback that returns the component.\n   */\n\n\n  add(name, callback) {\n    if (this.has(name)) {\n      /**\n       * The item already exists in the component factory.\n       *\n       * @error componentfactory-item-exists\n       * @param {String} name The name of the component.\n       */\n      throw new CKEditorError('componentfactory-item-exists: The item already exists in the component factory.', this, {\n        name\n      });\n    }\n\n    this._components.set(getNormalized(name), {\n      callback,\n      originalName: name\n    });\n  }\n  /**\n   * Creates an instance of a component registered in the factory under a specific name.\n   *\n   * When called, the {@link module:core/editor/editor~Editor#locale editor locale} is passed to\n   * the previously {@link #add added} factory function, allowing localization of the\n   * {@link module:ui/view~View view}.\n   *\n   * @param {String} name The name of the component.\n   * @returns {module:ui/view~View} The instantiated component view.\n   */\n\n\n  create(name) {\n    if (!this.has(name)) {\n      /**\n       * The required component is not registered in the component factory. Please make sure\n       * the provided name is correct and the component has been correctly\n       * {@link #add added} to the factory.\n       *\n       * @error componentfactory-item-missing\n       * @param {String} name The name of the missing component.\n       */\n      throw new CKEditorError('componentfactory-item-missing: The required component is not registered in the factory.', this, {\n        name\n      });\n    }\n\n    return this._components.get(getNormalized(name)).callback(this.editor.locale);\n  }\n  /**\n   * Checks if a component of a given name is registered in the factory.\n   *\n   * @param {String} name The name of the component.\n   * @returns {Boolean}\n   */\n\n\n  has(name) {\n    return this._components.has(getNormalized(name));\n  }\n\n} //\n// Ensures that the component name used as the key in the internal map is in lower case.\n//\n// @private\n// @param {String} name\n// @returns {String}\n\nfunction getNormalized(name) {\n  return String(name).toLowerCase();\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global setTimeout, clearTimeout */\n\n/**\n * @module utils/focustracker\n */\nimport DomEmitterMixin from './dom/emittermixin';\nimport ObservableMixin from './observablemixin';\nimport CKEditorError from './ckeditorerror';\nimport mix from './mix';\n/**\n * Allows observing a group of `HTMLElement`s whether at least one of them is focused.\n *\n * Used by the {@link module:core/editor/editor~Editor} in order to track whether the focus is still within the application,\n * or were used outside of its UI.\n *\n * **Note** `focus` and `blur` listeners use event capturing, so it is only needed to register wrapper `HTMLElement`\n * which contain other `focusable` elements. But note that this wrapper element has to be focusable too\n * (have e.g. `tabindex=\"-1\"`).\n *\n * @mixes module:utils/dom/emittermixin~EmitterMixin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class FocusTracker {\n  constructor() {\n    /**\n     * True when one of the registered elements is focused.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #isFocused\n     */\n    this.set('isFocused', false);\n    /**\n     * The currently focused element.\n     *\n     * While {@link #isFocused `isFocused`} remains `true`, the focus can\n     * move between different UI elements. This property tracks those\n     * elements and tells which one is currently focused.\n     *\n     * @readonly\n     * @observable\n     * @member {HTMLElement|null}\n     */\n\n    this.set('focusedElement', null);\n    /**\n     * List of registered elements.\n     *\n     * @private\n     * @member {Set.<HTMLElement>}\n     */\n\n    this._elements = new Set();\n    /**\n     * Event loop timeout.\n     *\n     * @private\n     * @member {Number}\n     */\n\n    this._nextEventLoopTimeout = null;\n  }\n  /**\n   * Starts tracking the specified element.\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  add(element) {\n    if (this._elements.has(element)) {\n      throw new CKEditorError('focusTracker-add-element-already-exist', this);\n    }\n\n    this.listenTo(element, 'focus', () => this._focus(element), {\n      useCapture: true\n    });\n    this.listenTo(element, 'blur', () => this._blur(), {\n      useCapture: true\n    });\n\n    this._elements.add(element);\n  }\n  /**\n   * Stops tracking the specified element and stops listening on this element.\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  remove(element) {\n    if (element === this.focusedElement) {\n      this._blur(element);\n    }\n\n    if (this._elements.has(element)) {\n      this.stopListening(element);\n\n      this._elements.delete(element);\n    }\n  }\n  /**\n   * Destroys the focus tracker by:\n   * - Disabling all event listeners attached to tracked elements.\n   * - Removing all tracked elements that were previously added.\n   */\n\n\n  destroy() {\n    this.stopListening();\n  }\n  /**\n   * Stores currently focused element and set {#isFocused} as `true`.\n   *\n   * @private\n   * @param {HTMLElement} element Element which has been focused.\n   */\n\n\n  _focus(element) {\n    clearTimeout(this._nextEventLoopTimeout);\n    this.focusedElement = element;\n    this.isFocused = true;\n  }\n  /**\n   * Clears currently focused element and set {@link #isFocused} as `false`.\n   * This method uses `setTimeout` to change order of fires `blur` and `focus` events.\n   *\n   * @private\n   * @fires blur\n   */\n\n\n  _blur() {\n    clearTimeout(this._nextEventLoopTimeout);\n    this._nextEventLoopTimeout = setTimeout(() => {\n      this.focusedElement = null;\n      this.isFocused = false;\n    }, 0);\n  }\n  /**\n   * @event focus\n   */\n\n  /**\n   * @event blur\n   */\n\n\n}\nmix(FocusTracker, DomEmitterMixin);\nmix(FocusTracker, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/editor/editorui\n */\n\n/* globals console */\nimport ComponentFactory from '@ckeditor/ckeditor5-ui/src/componentfactory';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * A class providing the minimal interface that is required to successfully bootstrap any editor UI.\n *\n * @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class EditorUI {\n  /**\n   * Creates an instance of the editor UI class.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   */\n  constructor(editor) {\n    /**\n     * The editor that the UI belongs to.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor} #editor\n     */\n    this.editor = editor;\n    /**\n     * An instance of the {@link module:ui/componentfactory~ComponentFactory}, a registry used by plugins\n     * to register factories of specific UI components.\n     *\n     * @readonly\n     * @member {module:ui/componentfactory~ComponentFactory} #componentFactory\n     */\n\n    this.componentFactory = new ComponentFactory(editor);\n    /**\n     * Stores the information about the editor UI focus and propagates it so various plugins and components\n     * are unified as a focus group.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker} #focusTracker\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Stores all editable elements used by the editor instance.\n     *\n     * @private\n     * @member {Map.<String,HTMLElement>}\n     */\n\n    this._editableElementsMap = new Map(); // Informs UI components that should be refreshed after layout change.\n\n    this.listenTo(editor.editing.view.document, 'layoutChanged', () => this.update());\n  }\n  /**\n   * The main (outermost) DOM element of the editor UI.\n   *\n   * For example, in {@link module:editor-classic/classiceditor~ClassicEditor} it is a `<div>` which\n   * wraps the editable element and the toolbar. In {@link module:editor-inline/inlineeditor~InlineEditor}\n   * it is the editable element itself (as there is no other wrapper). However, in\n   * {@link module:editor-decoupled/decouplededitor~DecoupledEditor} it is set to `null` because this editor does not\n   * come with a single \"main\" HTML element (its editable element and toolbar are separate).\n   *\n   * This property can be understood as a shorthand for retrieving the element that a specific editor integration\n   * considers to be its main DOM element.\n   *\n   * @readonly\n   * @member {HTMLElement|null} #element\n   */\n\n\n  get element() {\n    return null;\n  }\n  /**\n   * Fires the {@link module:core/editor/editorui~EditorUI#event:update `update`} event.\n   *\n   * This method should be called when the editor UI (e.g. positions of its balloons) needs to be updated due to\n   * some environmental change which CKEditor 5 is not aware of (e.g. resize of a container in which it is used).\n   */\n\n\n  update() {\n    this.fire('update');\n  }\n  /**\n   * Destroys the UI.\n   */\n\n\n  destroy() {\n    this.stopListening();\n    this.focusTracker.destroy(); // Clean–up the references to the CKEditor instance stored in the native editable DOM elements.\n\n    for (const domElement of this._editableElementsMap.values()) {\n      domElement.ckeditorInstance = null;\n    }\n\n    this._editableElementsMap = new Map();\n  }\n  /**\n   * Store the native DOM editable element used by the editor under\n   * a unique name.\n   *\n   * @param {String} rootName The unique name of the editable element.\n   * @param {HTMLElement} domElement The native DOM editable element.\n   */\n\n\n  setEditableElement(rootName, domElement) {\n    this._editableElementsMap.set(rootName, domElement); // Put a reference to the CKEditor instance in the editable native DOM element.\n    // It helps 3rd–party software (browser extensions, other libraries) access and recognize\n    // CKEditor 5 instances (editing roots) and use their API (there is no global editor\n    // instance registry).\n\n\n    if (!domElement.ckeditorInstance) {\n      domElement.ckeditorInstance = this.editor;\n    }\n  }\n  /**\n   * Returns the editable editor element with the given name or null if editable does not exist.\n   *\n   * @param {String} [rootName=main] The editable name.\n   * @returns {HTMLElement|undefined}\n   */\n\n\n  getEditableElement(rootName = 'main') {\n    return this._editableElementsMap.get(rootName);\n  }\n  /**\n   * Returns array of names of all editor editable elements.\n   *\n   * @returns {Iterable.<String>}\n   */\n\n\n  getEditableElementsNames() {\n    return this._editableElementsMap.keys();\n  }\n  /**\n   * Stores all editable elements used by the editor instance.\n   *\n   * @protected\n   * @deprecated\n   * @member {Map.<String,HTMLElement>}\n   */\n\n\n  get _editableElements() {\n    /**\n     * The {@link module:core/editor/editorui~EditorUI#_editableElements `EditorUI#_editableElements`} property has been\n     * deprecated and will be removed in the near future. Please use {@link #setEditableElement `setEditableElement()`} and\n     * {@link #getEditableElement `getEditableElement()`} methods instead.\n     *\n     * @error editor-ui-deprecated-editable-elements\n     * @param {module:core/editor/editorui~EditorUI} editorUI Editor UI instance the deprecated property belongs to.\n     */\n    console.warn('editor-ui-deprecated-editable-elements: ' + 'The EditorUI#_editableElements property has been deprecated and will be removed in the near future.', {\n      editorUI: this\n    });\n    return this._editableElementsMap;\n  }\n  /**\n   * Fired when the editor UI is ready.\n   *\n   * Fired before {@link module:engine/controller/datacontroller~DataController#event:ready}.\n   *\n   * @event ready\n   */\n\n  /**\n   * Fired whenever the UI (all related components) should be refreshed.\n   *\n   * **Note:**: The event is fired after each {@link module:engine/view/document~Document#event:layoutChanged}.\n   * It can also be fired manually via the {@link module:core/editor/editorui~EditorUI#update} method.\n   *\n   * @event update\n   */\n\n\n}\nmix(EditorUI, EmitterMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/placeholder\n */\nimport '../../theme/placeholder.css'; // Each document stores information about its placeholder elements and check functions.\n\nconst documentPlaceholders = new WeakMap();\n/**\n * A helper that enables a placeholder on the provided view element (also updates its visibility).\n * The placeholder is a CSS pseudo–element (with a text content) attached to the element.\n *\n * To change the placeholder text, simply call this method again with new options.\n *\n * To disable the placeholder, use {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} helper.\n *\n * @param {Object} [options] Configuration options of the placeholder.\n * @param {module:engine/view/view~View} options.view Editing view instance.\n * @param {module:engine/view/element~Element} options.element Element that will gain a placeholder.\n * See `options.isDirectHost` to learn more.\n * @param {String} options.text Placeholder text.\n * @param {Boolean} [options.isDirectHost=true] If set `false`, the placeholder will not be enabled directly\n * in the passed `element` but in one of its children (selected automatically, i.e. a first empty child element).\n * Useful when attaching placeholders to elements that can host other elements (not just text), for instance,\n * editable root elements.\n */\n\nexport function enablePlaceholder(options) {\n  const {\n    view,\n    element,\n    text,\n    isDirectHost = true\n  } = options;\n  const doc = view.document; // Use a single a single post fixer per—document to update all placeholders.\n\n  if (!documentPlaceholders.has(doc)) {\n    documentPlaceholders.set(doc, new Map()); // If a post-fixer callback makes a change, it should return `true` so other post–fixers\n    // can re–evaluate the document again.\n\n    doc.registerPostFixer(writer => updateDocumentPlaceholders(doc, writer));\n  } // Store information about the element placeholder under its document.\n\n\n  documentPlaceholders.get(doc).set(element, {\n    text,\n    isDirectHost\n  }); // Update the placeholders right away.\n\n  view.change(writer => updateDocumentPlaceholders(doc, writer));\n}\n/**\n * Disables the placeholder functionality from a given element.\n *\n * See {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} to learn more.\n *\n * @param {module:engine/view/view~View} view\n * @param {module:engine/view/element~Element} element\n */\n\nexport function disablePlaceholder(view, element) {\n  const doc = element.document;\n  view.change(writer => {\n    if (!documentPlaceholders.has(doc)) {\n      return;\n    }\n\n    const placeholders = documentPlaceholders.get(doc);\n    const config = placeholders.get(element);\n    writer.removeAttribute('data-placeholder', config.hostElement);\n    hidePlaceholder(writer, config.hostElement);\n    placeholders.delete(element);\n  });\n}\n/**\n * Shows a placeholder in the provided element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * **Note**: This helper will blindly show the placeholder directly in the root editable element if\n * one is passed, which could result in a visual clash if the editable element has some children\n * (for instance, an empty paragraph). Use {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`}\n * in that case or make sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\n\nexport function showPlaceholder(writer, element) {\n  if (!element.hasClass('ck-placeholder')) {\n    writer.addClass('ck-placeholder', element);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Hides a placeholder in the element by changing related attributes and CSS classes.\n *\n * **Note**: This helper will not update the placeholder visibility nor manage the\n * it in any way in the future. What it does is a one–time state change of an element. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} and\n * {@link module:engine/view/placeholder~disablePlaceholder `disablePlaceholder()`} for full\n * placeholder functionality.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean} `true`, if any changes were made to the `element`.\n */\n\nexport function hidePlaceholder(writer, element) {\n  if (element.hasClass('ck-placeholder')) {\n    writer.removeClass('ck-placeholder', element);\n    return true;\n  }\n\n  return false;\n}\n/**\n * Checks if a placeholder should be displayed in the element.\n *\n * **Note**: This helper will blindly check the possibility of showing a placeholder directly in the\n * root editable element if one is passed, which may not be the expected result. If an element can\n * host other elements (not just text), most likely one of its children should be checked instead\n * because it will be the final host for the placeholder. Use\n * {@link module:engine/view/placeholder~enablePlaceholder `enablePlaceholder()`} in that case or make\n * sure the correct element is passed to the helper.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Boolean}\n */\n\nexport function needsPlaceholder(element) {\n  const doc = element.document; // The element was removed from document.\n\n  if (!doc) {\n    return false;\n  } // The element is empty only as long as it contains nothing but uiElements.\n\n\n  const isEmptyish = !Array.from(element.getChildren()).some(element => !element.is('uiElement')); // If the element is empty and the document is blurred.\n\n  if (!doc.isFocused && isEmptyish) {\n    return true;\n  }\n\n  const viewSelection = doc.selection;\n  const selectionAnchor = viewSelection.anchor; // If document is focused and the element is empty but the selection is not anchored inside it.\n\n  if (isEmptyish && selectionAnchor && selectionAnchor.parent !== element) {\n    return true;\n  }\n\n  return false;\n} // Updates all placeholders associated with a document in a post–fixer callback.\n//\n// @private\n// @param { module:engine/view/document~Document} doc\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {Boolean} True if any changes were made to the view document.\n\nfunction updateDocumentPlaceholders(doc, writer) {\n  const placeholders = documentPlaceholders.get(doc);\n  let wasViewModified = false;\n\n  for (const [element, config] of placeholders) {\n    if (updatePlaceholder(writer, element, config)) {\n      wasViewModified = true;\n    }\n  }\n\n  return wasViewModified;\n} // Updates a single placeholder in a post–fixer callback.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/element~Element} element\n// @param {Object} config Configuration of the placeholder\n// @param {String} config.text\n// @param {Boolean} config.isDirectHost\n// @returns {Boolean} True if any changes were made to the view document.\n\n\nfunction updatePlaceholder(writer, element, config) {\n  const {\n    text,\n    isDirectHost\n  } = config;\n  const hostElement = isDirectHost ? element : getChildPlaceholderHostSubstitute(element);\n  let wasViewModified = false; // When not a direct host, it could happen that there is no child element\n  // capable of displaying a placeholder.\n\n  if (!hostElement) {\n    return false;\n  } // Cache the host element. It will be necessary for disablePlaceholder() to know\n  // which element should have class and attribute removed because, depending on\n  // the config.isDirectHost value, it could be the element or one of its descendants.\n\n\n  config.hostElement = hostElement; // This may be necessary when updating the placeholder text to something else.\n\n  if (hostElement.getAttribute('data-placeholder') !== text) {\n    writer.setAttribute('data-placeholder', text, hostElement);\n    wasViewModified = true;\n  }\n\n  if (needsPlaceholder(hostElement)) {\n    if (showPlaceholder(writer, hostElement)) {\n      wasViewModified = true;\n    }\n  } else if (hidePlaceholder(writer, hostElement)) {\n    wasViewModified = true;\n  }\n\n  return wasViewModified;\n} // Gets a child element capable of displaying a placeholder if a parent element can host more\n// than just text (for instance, when it is a root editable element). The child element\n// can then be used in other placeholder helpers as a substitute of its parent.\n//\n// @private\n// @param {module:engine/view/element~Element} parent\n// @returns {module:engine/view/element~Element|null}\n\n\nfunction getChildPlaceholderHostSubstitute(parent) {\n  if (parent.childCount === 1) {\n    const firstChild = parent.getChild(0);\n\n    if (firstChild.is('element') && !firstChild.is('uiElement')) {\n      return firstChild;\n    }\n  }\n\n  return null;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitorui\n */\nimport EditorUI from '@ckeditor/ckeditor5-core/src/editor/editorui';\nimport enableToolbarKeyboardFocus from '@ckeditor/ckeditor5-ui/src/toolbar/enabletoolbarkeyboardfocus';\nimport normalizeToolbarConfig from '@ckeditor/ckeditor5-ui/src/toolbar/normalizetoolbarconfig';\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\n/**\n * The decoupled editor UI class.\n *\n * @extends module:core/editor/editorui~EditorUI\n */\n\nexport default class DecoupledEditorUI extends EditorUI {\n  /**\n   * Creates an instance of the decoupled editor UI class.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {module:ui/editorui/editoruiview~EditorUIView} view The view of the UI.\n   */\n  constructor(editor, view) {\n    super(editor);\n    /**\n     * The main (top–most) view of the editor UI.\n     *\n     * @readonly\n     * @member {module:ui/editorui/editoruiview~EditorUIView} #view\n     */\n\n    this.view = view;\n    /**\n     * A normalized `config.toolbar` object.\n     *\n     * @type {Object}\n     * @private\n     */\n\n    this._toolbarConfig = normalizeToolbarConfig(editor.config.get('toolbar'));\n  }\n  /**\n   * Initializes the UI.\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const view = this.view;\n    const editingView = editor.editing.view;\n    const editable = view.editable;\n    const editingRoot = editingView.document.getRoot(); // The editable UI and editing root should share the same name. Then name is used\n    // to recognize the particular editable, for instance in ARIA attributes.\n\n    view.editable.name = editingRoot.rootName;\n    view.render(); // The editable UI element in DOM is available for sure only after the editor UI view has been rendered.\n    // But it can be available earlier if a DOM element has been passed to DecoupledEditor.create().\n\n    const editableElement = editable.element; // Register the editable UI view in the editor. A single editor instance can aggregate multiple\n    // editable areas (roots) but the decoupled editor has only one.\n\n    this.setEditableElement(editable.name, editableElement); // Let the global focus tracker know that the editable UI element is focusable and\n    // belongs to the editor. From now on, the focus tracker will sustain the editor focus\n    // as long as the editable is focused (e.g. the user is typing).\n\n    this.focusTracker.add(editableElement); // Let the editable UI element respond to the changes in the global editor focus\n    // tracker. It has been added to the same tracker a few lines above but, in reality, there are\n    // many focusable areas in the editor, like balloons, toolbars or dropdowns and as long\n    // as they have focus, the editable should act like it is focused too (although technically\n    // it isn't), e.g. by setting the proper CSS class, visually announcing focus to the user.\n    // Doing otherwise will result in editable focus styles disappearing, once e.g. the\n    // toolbar gets focused.\n\n    view.editable.bind('isFocused').to(this.focusTracker); // Bind the editable UI element to the editing view, making it an end– and entry–point\n    // of the editor's engine. This is where the engine meets the UI.\n\n    editingView.attachDomRoot(editableElement);\n\n    this._initPlaceholder();\n\n    this._initToolbar();\n\n    this.fire('ready');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    const view = this.view;\n    const editingView = this.editor.editing.view;\n    editingView.detachDomRoot(view.editable.name);\n    view.destroy();\n    super.destroy();\n  }\n  /**\n   * Initializes the inline editor toolbar and its panel.\n   *\n   * @private\n   */\n\n\n  _initToolbar() {\n    const editor = this.editor;\n    const view = this.view;\n    const toolbar = view.toolbar;\n    toolbar.fillFromConfig(this._toolbarConfig.items, this.componentFactory);\n    enableToolbarKeyboardFocus({\n      origin: editor.editing.view,\n      originFocusTracker: this.focusTracker,\n      originKeystrokeHandler: editor.keystrokes,\n      toolbar\n    });\n  }\n  /**\n   * Enable the placeholder text on the editing root, if any was configured.\n   *\n   * @private\n   */\n\n\n  _initPlaceholder() {\n    const editor = this.editor;\n    const editingView = editor.editing.view;\n    const editingRoot = editingView.document.getRoot();\n    const sourceElement = editor.sourceElement;\n    const placeholderText = editor.config.get('placeholder') || sourceElement && sourceElement.tagName.toLowerCase() === 'textarea' && sourceElement.getAttribute('placeholder');\n\n    if (placeholderText) {\n      enablePlaceholder({\n        view: editingView,\n        element: editingRoot,\n        text: placeholderText,\n        isDirectHost: false\n      });\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/normalizetoolbarconfig\n */\n\n/**\n * Normalizes the toolbar configuration (`config.toolbar`), which:\n *\n * * may be defined as an `Array`:\n *\n * \t\ttoolbar: [ 'heading', 'bold', 'italic', 'link', ... ]\n *\n * * or an `Object`:\n *\n *\t\ttoolbar: {\n *\t\t\titems: [ 'heading', 'bold', 'italic', 'link', ... ],\n *\t\t\t...\n *\t\t}\n *\n * * or may not be defined at all (`undefined`)\n *\n * and returns it in the object form.\n *\n * @param {Array|Object|undefined} config The value of `config.toolbar`.\n * @returns {Object} A normalized toolbar config object.\n */\nexport default function normalizeToolbarConfig(config) {\n  if (Array.isArray(config)) {\n    return {\n      items: config\n    };\n  }\n\n  if (!config) {\n    return {\n      items: []\n    };\n  }\n\n  return Object.assign({\n    items: []\n  }, config);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/enabletoolbarkeyboardfocus\n */\n\n/**\n * Enables focus/blur toolbar navigation using `Alt+F10` and `Esc` keystrokes.\n *\n * @param {Object} options Options of the utility.\n * @param {*} options.origin A view to which the focus will return when `Esc` is pressed and\n * `options.toolbar` is focused.\n * @param {module:utils/keystrokehandler~KeystrokeHandler} options.originKeystrokeHandler A keystroke\n * handler to register `Alt+F10` keystroke.\n * @param {module:utils/focustracker~FocusTracker} options.originFocusTracker A focus tracker\n * for `options.origin`.\n * @param {module:ui/toolbar/toolbarview~ToolbarView} options.toolbar A toolbar which is to gain\n * focus when `Alt+F10` is pressed.\n * @param {Function} [options.beforeFocus] A callback executed before the `options.toolbar` gains focus\n * upon the `Alt+F10` keystroke.\n * @param {Function} [options.afterBlur] A callback executed after `options.toolbar` loses focus upon\n * `Esc` keystroke but before the focus goes back to `options.origin`.\n */\nexport default function enableToolbarKeyboardFocus({\n  origin,\n  originKeystrokeHandler,\n  originFocusTracker,\n  toolbar,\n  beforeFocus,\n  afterBlur\n}) {\n  // Because toolbar items can get focus, the overall state of the toolbar must\n  // also be tracked.\n  originFocusTracker.add(toolbar.element); // Focus the toolbar on the keystroke, if not already focused.\n\n  originKeystrokeHandler.set('Alt+F10', (data, cancel) => {\n    if (originFocusTracker.isFocused && !toolbar.focusTracker.isFocused) {\n      if (beforeFocus) {\n        beforeFocus();\n      }\n\n      toolbar.focus();\n      cancel();\n    }\n  }); // Blur the toolbar and bring the focus back to origin.\n\n  toolbar.keystrokes.set('Esc', (data, cancel) => {\n    if (toolbar.focusTracker.isFocused) {\n      origin.focus();\n\n      if (afterBlur) {\n        afterBlur();\n      }\n\n      cancel();\n    }\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/viewcollection\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n/**\n * Collects {@link module:ui/view~View} instances.\n *\n *\t\tconst parentView = new ParentView( locale );\n *\t\tconst collection = new ViewCollection( locale );\n *\n *\t\tcollection.setParent( parentView.element );\n *\n *\t\tconst viewA = new ChildView( locale );\n *\t\tconst viewB = new ChildView( locale );\n *\n * View collection renders and manages view {@link module:ui/view~View#element elements}:\n *\n *\t\tcollection.add( viewA );\n *\t\tcollection.add( viewB );\n *\n *\t\tconsole.log( parentView.element.firsChild ); // -> viewA.element\n *\t\tconsole.log( parentView.element.lastChild ); // -> viewB.element\n *\n * It {@link module:ui/viewcollection~ViewCollection#delegate propagates} DOM events too:\n *\n *\t\t// Delegate #click and #keydown events from viewA and viewB to the parentView.\n *\t\tcollection.delegate( 'click' ).to( parentView );\n *\n *\t\tparentView.on( 'click', ( evt ) => {\n *\t\t\tconsole.log( `${ evt.source } has been clicked.` );\n *\t\t} );\n *\n *\t\t// This event will be delegated to the parentView.\n *\t\tviewB.fire( 'click' );\n *\n * **Note**: A view collection can be used directly in the {@link module:ui/template~TemplateDefinition definition}\n * of a {@link module:ui/template~Template template}.\n *\n * @extends module:utils/collection~Collection\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class ViewCollection extends Collection {\n  /**\n   * Creates a new instance of the {@link module:ui/viewcollection~ViewCollection}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The {@link module:core/editor/editor~Editor editor's locale} instance.\n   */\n  constructor(locale) {\n    super({\n      // An #id Number attribute should be legal and not break the `ViewCollection` instance.\n      // https://github.com/ckeditor/ckeditor5-ui/issues/93\n      idProperty: 'viewUid'\n    }); // Handle {@link module:ui/view~View#element} in DOM when a new view is added to the collection.\n\n    this.on('add', (evt, view, index) => {\n      if (!view.isRendered) {\n        view.render();\n      }\n\n      if (view.element && this._parentElement) {\n        this._parentElement.insertBefore(view.element, this._parentElement.children[index]);\n      }\n    }); // Handle {@link module:ui/view~View#element} in DOM when a view is removed from the collection.\n\n    this.on('remove', (evt, view) => {\n      if (view.element && this._parentElement) {\n        view.element.remove();\n      }\n    });\n    /**\n     * The {@link module:core/editor/editor~Editor#locale editor's locale} instance.\n     * See the view {@link module:ui/view~View#locale locale} property.\n     *\n     * @member {module:utils/locale~Locale}\n     */\n\n    this.locale = locale;\n    /**\n     * A parent element within which child views are rendered and managed in DOM.\n     *\n     * @protected\n     * @member {HTMLElement}\n     */\n\n    this._parentElement = null;\n  }\n  /**\n   * Destroys the view collection along with child views.\n   * See the view {@link module:ui/view~View#destroy} method.\n   */\n\n\n  destroy() {\n    this.map(view => view.destroy());\n  }\n  /**\n   * Sets the parent HTML element of this collection. When parent is set, {@link #add adding} and\n   * {@link #remove removing} views in the collection synchronizes their\n   * {@link module:ui/view~View#element elements} in the parent element.\n   *\n   * @param {HTMLElement} element A new parent element.\n   */\n\n\n  setParent(elementOrDocFragment) {\n    this._parentElement = elementOrDocFragment;\n  }\n  /**\n   * Delegates selected events coming from within views in the collection to any\n   * {@link module:utils/emittermixin~Emitter}.\n   *\n   * For the following views and collection:\n   *\n   *\t\tconst viewA = new View();\n   *\t\tconst viewB = new View();\n   *\t\tconst viewC = new View();\n   *\n   *\t\tconst views = parentView.createCollection();\n   *\n   *\t\tviews.delegate( 'eventX' ).to( viewB );\n   *\t\tviews.delegate( 'eventX', 'eventY' ).to( viewC );\n   *\n   *\t\tviews.add( viewA );\n   *\n   * the `eventX` is delegated (fired by) `viewB` and `viewC` along with `customData`:\n   *\n   *\t\tviewA.fire( 'eventX', customData );\n   *\n   * and `eventY` is delegated (fired by) `viewC` along with `customData`:\n   *\n   *\t\tviewA.fire( 'eventY', customData );\n   *\n   * See {@link module:utils/emittermixin~Emitter#delegate}.\n   *\n   * @param {...String} events {@link module:ui/view~View} event names to be delegated to another\n   * {@link module:utils/emittermixin~Emitter}.\n   * @returns {Object}\n   * @returns {Function} return.to A function which accepts the destination of\n   * {@link module:utils/emittermixin~Emitter#delegate delegated} events.\n   */\n\n\n  delegate(...events) {\n    if (!events.length || !isStringArray(events)) {\n      /**\n       * All event names must be strings.\n       *\n       * @error ui-viewcollection-delegate-wrong-events\n       */\n      throw new CKEditorError('ui-viewcollection-delegate-wrong-events: All event names must be strings.', this);\n    }\n\n    return {\n      /**\n       * Selects destination for {@link module:utils/emittermixin~Emitter#delegate} events.\n       *\n       * @memberOf module:ui/viewcollection~ViewCollection#delegate\n       * @function module:ui/viewcollection~ViewCollection#delegate.to\n       * @param {module:utils/emittermixin~Emitter} dest An `Emitter` instance which is\n       * the destination for delegated events.\n       */\n      to: dest => {\n        // Activate delegating on existing views in this collection.\n        for (const view of this) {\n          for (const evtName of events) {\n            view.delegate(evtName).to(dest);\n          }\n        } // Activate delegating on future views in this collection.\n\n\n        this.on('add', (evt, view) => {\n          for (const evtName of events) {\n            view.delegate(evtName).to(dest);\n          }\n        }); // Deactivate delegating when view is removed from this collection.\n\n        this.on('remove', (evt, view) => {\n          for (const evtName of events) {\n            view.stopDelegating(evtName, dest);\n          }\n        });\n      }\n    };\n  }\n  /**\n   * Removes a child view from the collection. If the {@link #setParent parent element} of the\n   * collection has been set, the {@link module:ui/view~View#element element} of the view is also removed\n   * in DOM, reflecting the order of the collection.\n   *\n   * See the {@link #add} method.\n   *\n   * @method #remove\n   * @param {module:ui/view~View|Number|String} subject The view to remove, its id or index in the collection.\n   * @returns {Object} The removed view.\n   */\n\n\n} // Check if all entries of the array are of `String` type.\n//\n// @private\n// @param {Array} arr An array to be checked.\n// @returns {Boolean}\n\nfunction isStringArray(arr) {\n  return arr.every(a => typeof a == 'string');\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/template\n */\n\n/* global document */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport View from './view';\nimport ViewCollection from './viewcollection';\nimport isNode from '@ckeditor/ckeditor5-utils/src/dom/isnode';\nimport { isObject, cloneDeepWith } from 'lodash-es';\nconst xhtmlNs = 'http://www.w3.org/1999/xhtml';\n/**\n * A basic Template class. It renders a DOM HTML element or text from a\n * {@link module:ui/template~TemplateDefinition definition} and supports element attributes, children,\n * bindings to {@link module:utils/observablemixin~Observable observables} and DOM event propagation.\n *\n * A simple template can look like this:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\tclass: 'foo',\n *\t\t\t\tstyle: {\n *\t\t\t\t\tbackgroundColor: 'yellow'\n *\t\t\t\t}\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t'A paragraph.'\n *\t\t\t]\n *\t\t} ).render();\n *\n * and it will render the following HTML element:\n *\n *\t\t<p class=\"foo\" style=\"background-color: yellow;\">A paragraph.</p>\n *\n * Additionally, the `observable` will always fire `clicked` upon clicking `<p>` in the DOM.\n *\n * See {@link module:ui/template~TemplateDefinition} to know more about templates and complex\n * template definitions.\n *\n* @mixes module:utils/emittermixin~EmitterMixin\n */\n\nexport default class Template {\n  /**\n   * Creates an instance of the {@link ~Template} class.\n   *\n   * @param {module:ui/template~TemplateDefinition} def The definition of the template.\n   */\n  constructor(def) {\n    Object.assign(this, normalize(clone(def)));\n    /**\n     * Indicates whether this particular Template instance has been\n     * {@link #render rendered}.\n     *\n     * @readonly\n     * @protected\n     * @member {Boolean}\n     */\n\n    this._isRendered = false;\n    /**\n     * The tag (`tagName`) of this template, e.g. `div`. It also indicates that the template\n     * renders to an HTML element.\n     *\n     * @member {String} #tag\n     */\n\n    /**\n     * The text of the template. It also indicates that the template renders to a DOM text node.\n     *\n     * @member {Array.<String|module:ui/template~TemplateValueSchema>} #text\n     */\n\n    /**\n     * The attributes of the template, e.g. `{ id: [ 'ck-id' ] }`, corresponding with\n     * the attributes of an HTML element.\n     *\n     * **Note**: This property only makes sense when {@link #tag} is defined.\n     *\n     * @member {Object} #attributes\n     */\n\n    /**\n     * The children of the template. They can be either:\n     * * independent instances of {@link ~Template} (sub–templates),\n     * * native DOM Nodes.\n     *\n     * **Note**: This property only makes sense when {@link #tag} is defined.\n     *\n     * @member {Array.<module:ui/template~Template|Node>} #children\n     */\n\n    /**\n     * The DOM event listeners of the template.\n     *\n     * @member {Object} #eventListeners\n     */\n\n    /**\n     * The data used by the {@link #revert} method to restore a node to its original state.\n     *\n     * See: {@link #apply}.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/template~RenderData}\n     */\n\n    this._revertData = null;\n  }\n  /**\n   * Renders a DOM Node (an HTML element or text) out of the template.\n   *\n   *\t\tconst domNode = new Template( { ... } ).render();\n   *\n   * See: {@link #apply}.\n   *\n   * @returns {HTMLElement|Text}\n   */\n\n\n  render() {\n    const node = this._renderNode({\n      intoFragment: true\n    });\n\n    this._isRendered = true;\n    return node;\n  }\n  /**\n   * Applies the template to an existing DOM Node, either HTML element or text.\n   *\n   * **Note:** No new DOM nodes will be created. Applying extends:\n   *\n   * {@link module:ui/template~TemplateDefinition attributes},\n   * {@link module:ui/template~TemplateDefinition event listeners}, and\n   * `textContent` of {@link module:ui/template~TemplateDefinition children} only.\n   *\n   * **Note:** Existing `class` and `style` attributes are extended when a template\n   * is applied to an HTML element, while other attributes and `textContent` are overridden.\n   *\n   * **Note:** The process of applying a template can be easily reverted using the\n   * {@link module:ui/template~Template#revert} method.\n   *\n   *\t\tconst element = document.createElement( 'div' );\n   *\t\tconst observable = new Model( { divClass: 'my-div' } );\n   *\t\tconst emitter = Object.create( EmitterMixin );\n   *\t\tconst bind = Template.bind( observable, emitter );\n   *\n   *\t\tnew Template( {\n   *\t\t\tattributes: {\n   *\t\t\t\tid: 'first-div',\n   *\t\t\t\tclass: bind.to( 'divClass' )\n   *\t\t\t},\n   *\t\t\ton: {\n   *\t\t\t\tclick: bind( 'elementClicked' ) // Will be fired by the observable.\n   *\t\t\t},\n   *\t\t\tchildren: [\n   *\t\t\t\t'Div text.'\n   *\t\t\t]\n   *\t\t} ).apply( element );\n   *\n   *\t\tconsole.log( element.outerHTML ); // -> '<div id=\"first-div\" class=\"my-div\"></div>'\n   *\n   * @see module:ui/template~Template#render\n   * @see module:ui/template~Template#revert\n   * @param {Node} node Root node for the template to apply.\n   */\n\n\n  apply(node) {\n    this._revertData = getEmptyRevertData();\n\n    this._renderNode({\n      node,\n      isApplying: true,\n      revertData: this._revertData\n    });\n\n    return node;\n  }\n  /**\n   * Reverts a template {@link module:ui/template~Template#apply applied} to a DOM node.\n   *\n   * @param {Node} node The root node for the template to revert. In most of the cases, it is the\n   * same node used by {@link module:ui/template~Template#apply}.\n   */\n\n\n  revert(node) {\n    if (!this._revertData) {\n      /**\n       * Attempting to revert a template which has not been applied yet.\n       *\n       * @error ui-template-revert-not-applied\n       */\n      throw new CKEditorError('ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.', [this, node]);\n    }\n\n    this._revertTemplateFromNode(node, this._revertData);\n  }\n  /**\n   * Returns an iterator which traverses the template in search of {@link module:ui/view~View}\n   * instances and returns them one by one.\n   *\n   *\t\tconst viewFoo = new View();\n   *\t\tconst viewBar = new View();\n   *\t\tconst viewBaz = new View();\n   *\t\tconst template = new Template( {\n   *\t\t\ttag: 'div',\n   *\t\t\tchildren: [\n   *\t\t\t\tviewFoo,\n   *\t\t\t\t{\n   *\t\t\t\t\ttag: 'div',\n   *\t\t\t\t\tchildren: [\n   *\t\t\t\t\t\tviewBar\n   *\t\t\t\t\t]\n   *\t\t\t\t},\n   *\t\t\t\tviewBaz\n   *\t\t\t]\n   *\t\t} );\n   *\n   *\t\t// Logs: viewFoo, viewBar, viewBaz\n   *\t\tfor ( const view of template.getViews() ) {\n   *\t\t\tconsole.log( view );\n   *\t\t}\n   *\n   * @returns {Iterable.<module:ui/view~View>}\n   */\n\n\n  *getViews() {\n    function* search(def) {\n      if (def.children) {\n        for (const child of def.children) {\n          if (isView(child)) {\n            yield child;\n          } else if (isTemplate(child)) {\n            yield* search(child);\n          }\n        }\n      }\n    }\n\n    yield* search(this);\n  }\n  /**\n   * An entry point to the interface which binds DOM nodes to\n   * {@link module:utils/observablemixin~Observable observables}.\n   * There are two types of bindings:\n   *\n   * * HTML element attributes or text `textContent` synchronized with attributes of an\n   * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}\n   * and {@link module:ui/template~BindChain#if}.\n   *\n   *\t\tconst bind = Template.bind( observable, emitter );\n   *\n   *\t\tnew Template( {\n   *\t\t\tattributes: {\n   *\t\t\t\t// Binds the element \"class\" attribute to observable#classAttribute.\n   *\t\t\t\tclass: bind.to( 'classAttribute' )\n   *\t\t\t}\n   *\t\t} ).render();\n   *\n   * * DOM events fired on HTML element propagated through\n   * {@link module:utils/observablemixin~Observable}. Learn more about {@link module:ui/template~BindChain#to}.\n   *\n   *\t\tconst bind = Template.bind( observable, emitter );\n   *\n   *\t\tnew Template( {\n   *\t\t\ton: {\n   *\t\t\t\t// Will be fired by the observable.\n   *\t\t\t\tclick: bind( 'elementClicked' )\n   *\t\t\t}\n   *\t\t} ).render();\n   *\n   * Also see {@link module:ui/view~View#bindTemplate}.\n   *\n   * @param {module:utils/observablemixin~Observable} observable An observable which provides boundable attributes.\n   * @param {module:utils/emittermixin~Emitter} emitter An emitter that listens to observable attribute\n   * changes or DOM Events (depending on the kind of the binding). Usually, a {@link module:ui/view~View} instance.\n   * @returns {module:ui/template~BindChain}\n   */\n\n\n  static bind(observable, emitter) {\n    return {\n      to(eventNameOrFunctionOrAttribute, callback) {\n        return new TemplateToBinding({\n          eventNameOrFunction: eventNameOrFunctionOrAttribute,\n          attribute: eventNameOrFunctionOrAttribute,\n          observable,\n          emitter,\n          callback\n        });\n      },\n\n      if(attribute, valueIfTrue, callback) {\n        return new TemplateIfBinding({\n          observable,\n          emitter,\n          attribute,\n          valueIfTrue,\n          callback\n        });\n      }\n\n    };\n  }\n  /**\n   * Extends an existing {@link module:ui/template~Template} instance with some additional content\n   * from another {@link module:ui/template~TemplateDefinition}.\n   *\n   *\t\tconst bind = Template.bind( observable, emitter );\n   *\n   *\t\tconst template = new Template( {\n   *\t\t\ttag: 'p',\n   *\t\t\tattributes: {\n   *\t\t\t\tclass: 'a',\n   *\t\t\t\tdata-x: bind.to( 'foo' )\n   *\t\t\t},\n   *\t\t\tchildren: [\n   *\t\t\t\t{\n   *\t\t\t\t\ttag: 'span',\n   *\t\t\t\t\tattributes: {\n   *\t\t\t\t\t\tclass: 'b'\n   *\t\t\t\t\t},\n   *\t\t\t\t\tchildren: [\n   *\t\t\t\t\t\t'Span'\n   *\t\t\t\t\t]\n   *\t\t\t\t}\n   *\t\t\t]\n   *\t\t } );\n   *\n   *\t\t// Instance-level extension.\n   *\t\tTemplate.extend( template, {\n   *\t\t\tattributes: {\n   *\t\t\t\tclass: 'b',\n   *\t\t\t\tdata-x: bind.to( 'bar' )\n   *\t\t\t},\n   *\t\t\tchildren: [\n   *\t\t\t\t{\n   *\t\t\t\t\tattributes: {\n   *\t\t\t\t\t\tclass: 'c'\n   *\t\t\t\t\t}\n   *\t\t\t\t}\n   *\t\t\t]\n   *\t\t} );\n   *\n   *\t\t// Child extension.\n   *\t\tTemplate.extend( template.children[ 0 ], {\n   *\t\t\tattributes: {\n   *\t\t\t\tclass: 'd'\n   *\t\t\t}\n   *\t\t} );\n   *\n   * the `outerHTML` of `template.render()` is:\n   *\n   *\t\t<p class=\"a b\" data-x=\"{ observable.foo } { observable.bar }\">\n   *\t\t\t<span class=\"b c d\">Span</span>\n   *\t\t</p>\n   *\n   * @param {module:ui/template~Template} template An existing template instance to be extended.\n   * @param {module:ui/template~TemplateDefinition} def Additional definition to be applied to a template.\n   */\n\n\n  static extend(template, def) {\n    if (template._isRendered) {\n      /**\n       * Extending a template after rendering may not work as expected. To make sure\n       * the {@link module:ui/template~Template.extend extending} works for an element,\n       * make sure it happens before {@link #render} is called.\n       *\n       * @error template-extend-render\n       */\n      throw new CKEditorError('template-extend-render: Attempting to extend a template which has already been rendered.', [this, template]);\n    }\n\n    extendTemplate(template, normalize(clone(def)));\n  }\n  /**\n   * Renders a DOM Node (either an HTML element or text) out of the template.\n   *\n   * @protected\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _renderNode(data) {\n    let isInvalid;\n\n    if (data.node) {\n      // When applying, a definition cannot have \"tag\" and \"text\" at the same time.\n      isInvalid = this.tag && this.text;\n    } else {\n      // When rendering, a definition must have either \"tag\" or \"text\": XOR( this.tag, this.text ).\n      isInvalid = this.tag ? this.text : !this.text;\n    }\n\n    if (isInvalid) {\n      /**\n       * Node definition cannot have the \"tag\" and \"text\" properties at the same time.\n       * Node definition must have either \"tag\" or \"text\" when rendering a new Node.\n       *\n       * @error ui-template-wrong-syntax\n       */\n      throw new CKEditorError('ui-template-wrong-syntax: Node definition must have either \"tag\" or \"text\" when rendering a new Node.', this);\n    }\n\n    if (this.text) {\n      return this._renderText(data);\n    } else {\n      return this._renderElement(data);\n    }\n  }\n  /**\n   * Renders an HTML element out of the template.\n   *\n   * @protected\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _renderElement(data) {\n    let node = data.node;\n\n    if (!node) {\n      node = data.node = document.createElementNS(this.ns || xhtmlNs, this.tag);\n    }\n\n    this._renderAttributes(data);\n\n    this._renderElementChildren(data);\n\n    this._setUpListeners(data);\n\n    return node;\n  }\n  /**\n   * Renders a text node out of {@link module:ui/template~Template#text}.\n   *\n   * @protected\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _renderText(data) {\n    let node = data.node; // Save the original textContent to revert it in #revert().\n\n    if (node) {\n      data.revertData.text = node.textContent;\n    } else {\n      node = data.node = document.createTextNode('');\n    } // Check if this Text Node is bound to Observable. Cases:\n    //\n    //\t\ttext: [ Template.bind( ... ).to( ... ) ]\n    //\n    //\t\ttext: [\n    //\t\t\t'foo',\n    //\t\t\tTemplate.bind( ... ).to( ... ),\n    //\t\t\t...\n    //\t\t]\n    //\n\n\n    if (hasTemplateBinding(this.text)) {\n      this._bindToObservable({\n        schema: this.text,\n        updater: getTextUpdater(node),\n        data\n      });\n    } // Simply set text. Cases:\n    //\n    //\t\ttext: [ 'all', 'are', 'static' ]\n    //\n    //\t\ttext: [ 'foo' ]\n    //\n    else {\n        node.textContent = this.text.join('');\n      }\n\n    return node;\n  }\n  /**\n   * Renders HTML element attributes out of {@link module:ui/template~Template#attributes}.\n   *\n   * @protected\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _renderAttributes(data) {\n    let attrName, attrValue, domAttrValue, attrNs;\n\n    if (!this.attributes) {\n      return;\n    }\n\n    const node = data.node;\n    const revertData = data.revertData;\n\n    for (attrName in this.attributes) {\n      // Current attribute value in DOM.\n      domAttrValue = node.getAttribute(attrName); // The value to be set.\n\n      attrValue = this.attributes[attrName]; // Save revert data.\n\n      if (revertData) {\n        revertData.attributes[attrName] = domAttrValue;\n      } // Detect custom namespace:\n      //\n      //\t\tclass: {\n      //\t\t\tns: 'abc',\n      //\t\t\tvalue: Template.bind( ... ).to( ... )\n      //\t\t}\n      //\n\n\n      attrNs = isObject(attrValue[0]) && attrValue[0].ns ? attrValue[0].ns : null; // Activate binding if one is found. Cases:\n      //\n      //\t\tclass: [\n      //\t\t\tTemplate.bind( ... ).to( ... )\n      //\t\t]\n      //\n      //\t\tclass: [\n      //\t\t\t'bar',\n      //\t\t\tTemplate.bind( ... ).to( ... ),\n      //\t\t\t'baz'\n      //\t\t]\n      //\n      //\t\tclass: {\n      //\t\t\tns: 'abc',\n      //\t\t\tvalue: Template.bind( ... ).to( ... )\n      //\t\t}\n      //\n\n      if (hasTemplateBinding(attrValue)) {\n        // Normalize attributes with additional data like namespace:\n        //\n        //\t\tclass: {\n        //\t\t\tns: 'abc',\n        //\t\t\tvalue: [ ... ]\n        //\t\t}\n        //\n        const valueToBind = attrNs ? attrValue[0].value : attrValue; // Extend the original value of attributes like \"style\" and \"class\",\n        // don't override them.\n\n        if (revertData && shouldExtend(attrName)) {\n          valueToBind.unshift(domAttrValue);\n        }\n\n        this._bindToObservable({\n          schema: valueToBind,\n          updater: getAttributeUpdater(node, attrName, attrNs),\n          data\n        });\n      } // Style attribute could be an Object so it needs to be parsed in a specific way.\n      //\n      //\t\tstyle: {\n      //\t\t\twidth: '100px',\n      //\t\t\theight: Template.bind( ... ).to( ... )\n      //\t\t}\n      //\n      else if (attrName == 'style' && typeof attrValue[0] !== 'string') {\n          this._renderStyleAttribute(attrValue[0], data);\n        } // Otherwise simply set the static attribute:\n        //\n        //\t\tclass: [ 'foo' ]\n        //\n        //\t\tclass: [ 'all', 'are', 'static' ]\n        //\n        //\t\tclass: [\n        //\t\t\t{\n        //\t\t\t\tns: 'abc',\n        //\t\t\t\tvalue: [ 'foo' ]\n        //\t\t\t}\n        //\t\t]\n        //\n        else {\n            // Extend the original value of attributes like \"style\" and \"class\",\n            // don't override them.\n            if (revertData && domAttrValue && shouldExtend(attrName)) {\n              attrValue.unshift(domAttrValue);\n            }\n\n            attrValue = attrValue // Retrieve \"values\" from:\n            //\n            //\t\tclass: [\n            //\t\t\t{\n            //\t\t\t\tns: 'abc',\n            //\t\t\t\tvalue: [ ... ]\n            //\t\t\t}\n            //\t\t]\n            //\n            .map(val => val ? val.value || val : val) // Flatten the array.\n            .reduce((prev, next) => prev.concat(next), []) // Convert into string.\n            .reduce(arrayValueReducer, '');\n\n            if (!isFalsy(attrValue)) {\n              node.setAttributeNS(attrNs, attrName, attrValue);\n            }\n          }\n    }\n  }\n  /**\n   * Renders the `style` attribute of an HTML element based on\n   * {@link module:ui/template~Template#attributes}.\n   *\n   * A style attribute is an {Object} with static values:\n   *\n   *\t\tattributes: {\n   *\t\t\tstyle: {\n   *\t\t\t\tcolor: 'red'\n   *\t\t\t}\n   *\t\t}\n   *\n   * or values bound to {@link module:ui/model~Model} properties:\n   *\n   *\t\tattributes: {\n   *\t\t\tstyle: {\n   *\t\t\t\tcolor: bind.to( ... )\n   *\t\t\t}\n   *\t\t}\n   *\n   * Note: The `style` attribute is rendered without setting the namespace. It does not seem to be\n   * needed.\n   *\n   * @private\n   * @param {Object} styles Styles located in `attributes.style` of {@link module:ui/template~TemplateDefinition}.\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _renderStyleAttribute(styles, data) {\n    const node = data.node;\n\n    for (const styleName in styles) {\n      const styleValue = styles[styleName]; // Cases:\n      //\n      //\t\tstyle: {\n      //\t\t\tcolor: bind.to( 'attribute' )\n      //\t\t}\n      //\n\n      if (hasTemplateBinding(styleValue)) {\n        this._bindToObservable({\n          schema: [styleValue],\n          updater: getStyleUpdater(node, styleName),\n          data\n        });\n      } // Cases:\n      //\n      //\t\tstyle: {\n      //\t\t\tcolor: 'red'\n      //\t\t}\n      //\n      else {\n          node.style[styleName] = styleValue;\n        }\n    }\n  }\n  /**\n   * Recursively renders HTML element's children from {@link module:ui/template~Template#children}.\n   *\n   * @protected\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _renderElementChildren(data) {\n    const node = data.node;\n    const container = data.intoFragment ? document.createDocumentFragment() : node;\n    const isApplying = data.isApplying;\n    let childIndex = 0;\n\n    for (const child of this.children) {\n      if (isViewCollection(child)) {\n        if (!isApplying) {\n          child.setParent(node); // Note: ViewCollection renders its children.\n\n          for (const view of child) {\n            container.appendChild(view.element);\n          }\n        }\n      } else if (isView(child)) {\n        if (!isApplying) {\n          if (!child.isRendered) {\n            child.render();\n          }\n\n          container.appendChild(child.element);\n        }\n      } else if (isNode(child)) {\n        container.appendChild(child);\n      } else {\n        if (isApplying) {\n          const revertData = data.revertData;\n          const childRevertData = getEmptyRevertData();\n          revertData.children.push(childRevertData);\n\n          child._renderNode({\n            node: container.childNodes[childIndex++],\n            isApplying: true,\n            revertData: childRevertData\n          });\n        } else {\n          container.appendChild(child.render());\n        }\n      }\n    }\n\n    if (data.intoFragment) {\n      node.appendChild(container);\n    }\n  }\n  /**\n   * Activates `on` event listeners from the {@link module:ui/template~TemplateDefinition}\n   * on an HTML element.\n   *\n   * @protected\n   * @param {module:ui/template~RenderData} data Rendering data.\n   */\n\n\n  _setUpListeners(data) {\n    if (!this.eventListeners) {\n      return;\n    }\n\n    for (const key in this.eventListeners) {\n      const revertBindings = this.eventListeners[key].map(schemaItem => {\n        const [domEvtName, domSelector] = key.split('@');\n        return schemaItem.activateDomEventListener(domEvtName, domSelector, data);\n      });\n\n      if (data.revertData) {\n        data.revertData.bindings.push(revertBindings);\n      }\n    }\n  }\n  /**\n   * For a given {@link module:ui/template~TemplateValueSchema} containing {@link module:ui/template~TemplateBinding}\n   * activates the binding and sets its initial value.\n   *\n   * Note: {@link module:ui/template~TemplateValueSchema} can be for HTML element attributes or\n   * text node `textContent`.\n   *\n   * @protected\n   * @param {Object} options Binding options.\n   * @param {module:ui/template~TemplateValueSchema} options.schema\n   * @param {Function} options.updater A function which updates the DOM (like attribute or text).\n   * @param {module:ui/template~RenderData} options.data Rendering data.\n   */\n\n\n  _bindToObservable({\n    schema,\n    updater,\n    data\n  }) {\n    const revertData = data.revertData; // Set initial values.\n\n    syncValueSchemaValue(schema, updater, data);\n    const revertBindings = schema // Filter \"falsy\" (false, undefined, null, '') value schema components out.\n    .filter(item => !isFalsy(item)) // Filter inactive bindings from schema, like static strings ('foo'), numbers (42), etc.\n    .filter(item => item.observable) // Once only the actual binding are left, let the emitter listen to observable change:attribute event.\n    // TODO: Reduce the number of listeners attached as many bindings may listen\n    // to the same observable attribute.\n    .map(templateBinding => templateBinding.activateAttributeListener(schema, updater, data));\n\n    if (revertData) {\n      revertData.bindings.push(revertBindings);\n    }\n  }\n  /**\n   * Reverts {@link module:ui/template~RenderData#revertData template data} from a node to\n   * return it to the original state.\n   *\n   * @protected\n   * @param {HTMLElement|Text} node A node to be reverted.\n   * @param {Object} revertData An object that stores information about what changes have been made by\n   * {@link #apply} to the node. See {@link module:ui/template~RenderData#revertData} for more information.\n   */\n\n\n  _revertTemplateFromNode(node, revertData) {\n    for (const binding of revertData.bindings) {\n      // Each binding may consist of several observable+observable#attribute.\n      // like the following has 2:\n      //\n      //\t\tclass: [\n      //\t\t\t'x',\n      //\t\t\tbind.to( 'foo' ),\n      //\t\t\t'y',\n      //\t\t\tbind.to( 'bar' )\n      //\t\t]\n      //\n      for (const revertBinding of binding) {\n        revertBinding();\n      }\n    }\n\n    if (revertData.text) {\n      node.textContent = revertData.text;\n      return;\n    }\n\n    for (const attrName in revertData.attributes) {\n      const attrValue = revertData.attributes[attrName]; // When the attribute has **not** been set before #apply().\n\n      if (attrValue === null) {\n        node.removeAttribute(attrName);\n      } else {\n        node.setAttribute(attrName, attrValue);\n      }\n    }\n\n    for (let i = 0; i < revertData.children.length; ++i) {\n      this._revertTemplateFromNode(node.childNodes[i], revertData.children[i]);\n    }\n  }\n\n}\nmix(Template, EmitterMixin);\n/**\n * Describes a binding created by the {@link module:ui/template~Template.bind} interface.\n *\n * @protected\n */\n\nexport class TemplateBinding {\n  /**\n   * Creates an instance of the {@link module:ui/template~TemplateBinding} class.\n   *\n   * @param {module:ui/template~TemplateDefinition} def The definition of the binding.\n   */\n  constructor(def) {\n    Object.assign(this, def);\n    /**\n     * An observable instance of the binding. It either:\n     *\n     * * provides the attribute with the value,\n     * * or passes the event when a corresponding DOM event is fired.\n     *\n     * @member {module:utils/observablemixin~ObservableMixin} module:ui/template~TemplateBinding#observable\n     */\n\n    /**\n     * An {@link module:utils/emittermixin~Emitter} used by the binding to:\n     *\n     * * listen to the attribute change in the {@link module:ui/template~TemplateBinding#observable},\n     * * or listen to the event in the DOM.\n     *\n     * @member {module:utils/emittermixin~EmitterMixin} module:ui/template~TemplateBinding#emitter\n     */\n\n    /**\n     * The name of the {@link module:ui/template~TemplateBinding#observable observed attribute}.\n     *\n     * @member {String} module:ui/template~TemplateBinding#attribute\n     */\n\n    /**\n     * A custom function to process the value of the {@link module:ui/template~TemplateBinding#attribute}.\n     *\n     * @member {Function} [module:ui/template~TemplateBinding#callback]\n     */\n  }\n  /**\n   * Returns the value of the binding. It is the value of the {@link module:ui/template~TemplateBinding#attribute} in\n   * {@link module:ui/template~TemplateBinding#observable}. The value may be processed by the\n   * {@link module:ui/template~TemplateBinding#callback}, if such has been passed to the binding.\n   *\n   * @param {Node} [node] A native DOM node, passed to the custom {@link module:ui/template~TemplateBinding#callback}.\n   * @returns {*} The value of {@link module:ui/template~TemplateBinding#attribute} in\n   * {@link module:ui/template~TemplateBinding#observable}.\n   */\n\n\n  getValue(node) {\n    const value = this.observable[this.attribute];\n    return this.callback ? this.callback(value, node) : value;\n  }\n  /**\n   * Activates the listener which waits for changes of the {@link module:ui/template~TemplateBinding#attribute} in\n   * {@link module:ui/template~TemplateBinding#observable}, then updates the DOM with the aggregated\n   * value of {@link module:ui/template~TemplateValueSchema}.\n   *\n   * @param {module:ui/template~TemplateValueSchema} schema A full schema to generate an attribute or text in the DOM.\n   * @param {Function} updater A DOM updater function used to update the native DOM attribute or text.\n   * @param {module:ui/template~RenderData} data Rendering data.\n   * @returns {Function} A function to sever the listener binding.\n   */\n\n\n  activateAttributeListener(schema, updater, data) {\n    const callback = () => syncValueSchemaValue(schema, updater, data);\n\n    this.emitter.listenTo(this.observable, 'change:' + this.attribute, callback); // Allows revert of the listener.\n\n    return () => {\n      this.emitter.stopListening(this.observable, 'change:' + this.attribute, callback);\n    };\n  }\n\n}\n/**\n * Describes either:\n *\n * * a binding to an {@link module:utils/observablemixin~Observable},\n * * or a native DOM event binding.\n *\n * It is created by the {@link module:ui/template~BindChain#to} method.\n *\n * @protected\n */\n\nexport class TemplateToBinding extends TemplateBinding {\n  /**\n   * Activates the listener for the native DOM event, which when fired, is propagated by\n   * the {@link module:ui/template~TemplateBinding#emitter}.\n   *\n   * @param {String} domEvtName The name of the native DOM event.\n   * @param {String} domSelector The selector in the DOM to filter delegated events.\n   * @param {module:ui/template~RenderData} data Rendering data.\n   * @returns {Function} A function to sever the listener binding.\n   */\n  activateDomEventListener(domEvtName, domSelector, data) {\n    const callback = (evt, domEvt) => {\n      if (!domSelector || domEvt.target.matches(domSelector)) {\n        if (typeof this.eventNameOrFunction == 'function') {\n          this.eventNameOrFunction(domEvt);\n        } else {\n          this.observable.fire(this.eventNameOrFunction, domEvt);\n        }\n      }\n    };\n\n    this.emitter.listenTo(data.node, domEvtName, callback); // Allows revert of the listener.\n\n    return () => {\n      this.emitter.stopListening(data.node, domEvtName, callback);\n    };\n  }\n\n}\n/**\n * Describes a binding to {@link module:utils/observablemixin~ObservableMixin} created by the {@link module:ui/template~BindChain#if}\n * method.\n *\n * @protected\n */\n\nexport class TemplateIfBinding extends TemplateBinding {\n  /**\n   * @inheritDoc\n   */\n  getValue(node) {\n    const value = super.getValue(node);\n    return isFalsy(value) ? false : this.valueIfTrue || true;\n  }\n  /**\n   * The value of the DOM attribute or text to be set if the {@link module:ui/template~TemplateBinding#attribute} in\n   * {@link module:ui/template~TemplateBinding#observable} is `true`.\n   *\n   * @member {String} [module:ui/template~TemplateIfBinding#valueIfTrue]\n   */\n\n\n} // Checks whether given {@link module:ui/template~TemplateValueSchema} contains a\n// {@link module:ui/template~TemplateBinding}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @returns {Boolean}\n\nfunction hasTemplateBinding(schema) {\n  if (!schema) {\n    return false;\n  } // Normalize attributes with additional data like namespace:\n  //\n  //\t\tclass: {\n  //\t\t\tns: 'abc',\n  //\t\t\tvalue: [ ... ]\n  //\t\t}\n  //\n\n\n  if (schema.value) {\n    schema = schema.value;\n  }\n\n  if (Array.isArray(schema)) {\n    return schema.some(hasTemplateBinding);\n  } else if (schema instanceof TemplateBinding) {\n    return true;\n  }\n\n  return false;\n} // Assembles the value using {@link module:ui/template~TemplateValueSchema} and stores it in a form of\n// an Array. Each entry of the Array corresponds to one of {@link module:ui/template~TemplateValueSchema}\n// items.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n// @returns {Array}\n\n\nfunction getValueSchemaValue(schema, node) {\n  return schema.map(schemaItem => {\n    // Process {@link module:ui/template~TemplateBinding} bindings.\n    if (schemaItem instanceof TemplateBinding) {\n      return schemaItem.getValue(node);\n    } // All static values like strings, numbers, and \"falsy\" values (false, null, undefined, '', etc.) just pass.\n\n\n    return schemaItem;\n  });\n} // A function executed each time the bound Observable attribute changes, which updates the DOM with a value\n// constructed from {@link module:ui/template~TemplateValueSchema}.\n//\n// @param {module:ui/template~TemplateValueSchema} schema\n// @param {Function} updater A function which updates the DOM (like attribute or text).\n// @param {Node} node DOM Node updated when {@link module:utils/observablemixin~ObservableMixin} changes.\n\n\nfunction syncValueSchemaValue(schema, updater, {\n  node\n}) {\n  let value = getValueSchemaValue(schema, node); // Check if schema is a single Template.bind.if, like:\n  //\n  //\t\tclass: Template.bind.if( 'foo' )\n  //\n\n  if (schema.length == 1 && schema[0] instanceof TemplateIfBinding) {\n    value = value[0];\n  } else {\n    value = value.reduce(arrayValueReducer, '');\n  }\n\n  if (isFalsy(value)) {\n    updater.remove();\n  } else {\n    updater.set(value);\n  }\n} // Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset `textContent`.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @returns {Object}\n\n\nfunction getTextUpdater(node) {\n  return {\n    set(value) {\n      node.textContent = value;\n    },\n\n    remove() {\n      node.textContent = '';\n    }\n\n  };\n} // Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of DOM Node to set or reset an attribute.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} attrName Name of the attribute to be modified.\n// @param {String} [ns=null] Namespace to use.\n// @returns {Object}\n\n\nfunction getAttributeUpdater(el, attrName, ns) {\n  return {\n    set(value) {\n      el.setAttributeNS(ns, attrName, value);\n    },\n\n    remove() {\n      el.removeAttributeNS(ns, attrName);\n    }\n\n  };\n} // Returns an object consisting of `set` and `remove` functions, which\n// can be used in the context of CSSStyleDeclaration to set or remove a style.\n// @see module:ui/view~View#_bindToObservable\n//\n// @param {Node} node DOM Node to be modified.\n// @param {String} styleName Name of the style to be modified.\n// @returns {Object}\n\n\nfunction getStyleUpdater(el, styleName) {\n  return {\n    set(value) {\n      el.style[styleName] = value;\n    },\n\n    remove() {\n      el.style[styleName] = null;\n    }\n\n  };\n} // Clones definition of the template.\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition}\n\n\nfunction clone(def) {\n  const clone = cloneDeepWith(def, value => {\n    // Don't clone the `Template.bind`* bindings because of the references to Observable\n    // and DomEmitterMixin instances inside, which would also be traversed and cloned by greedy\n    // cloneDeepWith algorithm. There's no point in cloning Observable/DomEmitterMixins\n    // along with the definition.\n    //\n    // Don't clone Template instances if provided as a child. They're simply #render()ed\n    // and nothing should interfere.\n    //\n    // Also don't clone View instances if provided as a child of the Template. The template\n    // instance will be extracted from the View during the normalization and there's no need\n    // to clone it.\n    if (value && (value instanceof TemplateBinding || isTemplate(value) || isView(value) || isViewCollection(value))) {\n      return value;\n    }\n  });\n  return clone;\n} // Normalizes given {@link module:ui/template~TemplateDefinition}.\n//\n// See:\n//  * {@link normalizeAttributes}\n//  * {@link normalizeListeners}\n//  * {@link normalizePlainTextDefinition}\n//  * {@link normalizeTextDefinition}\n//\n// @param {module:ui/template~TemplateDefinition} def\n// @returns {module:ui/template~TemplateDefinition} Normalized definition.\n\n\nfunction normalize(def) {\n  if (typeof def == 'string') {\n    def = normalizePlainTextDefinition(def);\n  } else if (def.text) {\n    normalizeTextDefinition(def);\n  }\n\n  if (def.on) {\n    def.eventListeners = normalizeListeners(def.on); // Template mixes EmitterMixin, so delete #on to avoid collision.\n\n    delete def.on;\n  }\n\n  if (!def.text) {\n    if (def.attributes) {\n      normalizeAttributes(def.attributes);\n    }\n\n    const children = [];\n\n    if (def.children) {\n      if (isViewCollection(def.children)) {\n        children.push(def.children);\n      } else {\n        for (const child of def.children) {\n          if (isTemplate(child) || isView(child) || isNode(child)) {\n            children.push(child);\n          } else {\n            children.push(new Template(child));\n          }\n        }\n      }\n    }\n\n    def.children = children;\n  }\n\n  return def;\n} // Normalizes \"attributes\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tattributes: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: {\n//\t\t\t\tvalue: 'bar'\n//\t\t\t}\n//\t\t}\n//\n// becomes\n//\n//\t\tattributes: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: {\n//\t\t\t\tvalue: [ 'bar' ]\n//\t\t\t}\n//\t\t}\n//\n// @param {Object} attributes\n\n\nfunction normalizeAttributes(attributes) {\n  for (const a in attributes) {\n    if (attributes[a].value) {\n      attributes[a].value = [].concat(attributes[a].value);\n    }\n\n    arrayify(attributes, a);\n  }\n} // Normalizes \"on\" section of {@link module:ui/template~TemplateDefinition}.\n//\n//\t\ton: {\n//\t\t\ta: 'bar',\n//\t\t\tb: {@link module:ui/template~TemplateBinding},\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// becomes\n//\n//\t\ton: {\n//\t\t\ta: [ 'bar' ],\n//\t\t\tb: [ {@link module:ui/template~TemplateBinding} ],\n//\t\t\tc: [ {@link module:ui/template~TemplateBinding}, () => { ... } ]\n//\t\t}\n//\n// @param {Object} listeners\n// @returns {Object} Object containing normalized listeners.\n\n\nfunction normalizeListeners(listeners) {\n  for (const l in listeners) {\n    arrayify(listeners, l);\n  }\n\n  return listeners;\n} // Normalizes \"string\" {@link module:ui/template~TemplateDefinition}.\n//\n//\t\t\"foo\"\n//\n// becomes\n//\n//\t\t{ text: [ 'foo' ] },\n//\n// @param {String} def\n// @returns {module:ui/template~TemplateDefinition} Normalized template definition.\n\n\nfunction normalizePlainTextDefinition(def) {\n  return {\n    text: [def]\n  };\n} // Normalizes text {@link module:ui/template~TemplateDefinition}.\n//\n//\t\tchildren: [\n//\t\t\t{ text: 'def' },\n//\t\t\t{ text: {@link module:ui/template~TemplateBinding} }\n//\t\t]\n//\n// becomes\n//\n//\t\tchildren: [\n//\t\t\t{ text: [ 'def' ] },\n//\t\t\t{ text: [ {@link module:ui/template~TemplateBinding} ] }\n//\t\t]\n//\n// @param {module:ui/template~TemplateDefinition} def\n\n\nfunction normalizeTextDefinition(def) {\n  if (!Array.isArray(def.text)) {\n    def.text = [def.text];\n  }\n} // Wraps an entry in Object in an Array, if not already one.\n//\n//\t\t{\n//\t\t\tx: 'y',\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// becomes\n//\n//\t\t{\n//\t\t\tx: [ 'y' ],\n//\t\t\ta: [ 'b' ]\n//\t\t}\n//\n// @param {Object} obj\n// @param {String} key\n\n\nfunction arrayify(obj, key) {\n  if (!Array.isArray(obj[key])) {\n    obj[key] = [obj[key]];\n  }\n} // A helper which concatenates the value avoiding unwanted\n// leading white spaces.\n//\n// @param {String} prev\n// @param {String} cur\n// @returns {String}\n\n\nfunction arrayValueReducer(prev, cur) {\n  if (isFalsy(cur)) {\n    return prev;\n  } else if (isFalsy(prev)) {\n    return cur;\n  } else {\n    return `${prev} ${cur}`;\n  }\n} // Extends one object defined in the following format:\n//\n//\t\t{\n//\t\t\tkey1: [Array1],\n//\t\t\tkey2: [Array2],\n//\t\t\t...\n//\t\t\tkeyN: [ArrayN]\n//\t\t}\n//\n// with another object of the same data format.\n//\n// @param {Object} obj Base object.\n// @param {Object} ext Object extending base.\n// @returns {String}\n\n\nfunction extendObjectValueArray(obj, ext) {\n  for (const a in ext) {\n    if (obj[a]) {\n      obj[a].push(...ext[a]);\n    } else {\n      obj[a] = ext[a];\n    }\n  }\n} // A helper for {@link module:ui/template~Template#extend}. Recursively extends {@link module:ui/template~Template} instance\n// with content from {@link module:ui/template~TemplateDefinition}. See {@link module:ui/template~Template#extend} to learn more.\n//\n// @param {module:ui/template~Template} def A template instance to be extended.\n// @param {module:ui/template~TemplateDefinition} def A definition which is to extend the template instance.\n// @param {Object} Error context.\n\n\nfunction extendTemplate(template, def) {\n  if (def.attributes) {\n    if (!template.attributes) {\n      template.attributes = {};\n    }\n\n    extendObjectValueArray(template.attributes, def.attributes);\n  }\n\n  if (def.eventListeners) {\n    if (!template.eventListeners) {\n      template.eventListeners = {};\n    }\n\n    extendObjectValueArray(template.eventListeners, def.eventListeners);\n  }\n\n  if (def.text) {\n    template.text.push(...def.text);\n  }\n\n  if (def.children && def.children.length) {\n    if (template.children.length != def.children.length) {\n      /**\n       * The number of children in extended definition does not match.\n       *\n       * @error ui-template-extend-children-mismatch\n       */\n      throw new CKEditorError('ui-template-extend-children-mismatch: The number of children in extended definition does not match.', template);\n    }\n\n    let childIndex = 0;\n\n    for (const childDef of def.children) {\n      extendTemplate(template.children[childIndex++], childDef);\n    }\n  }\n} // Checks if value is \"falsy\".\n// Note: 0 (Number) is not \"falsy\" in this context.\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isFalsy(value) {\n  return !value && value !== 0;\n} // Checks if the item is an instance of {@link module:ui/view~View}\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isView(item) {\n  return item instanceof View;\n} // Checks if the item is an instance of {@link module:ui/template~Template}\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isTemplate(item) {\n  return item instanceof Template;\n} // Checks if the item is an instance of {@link module:ui/viewcollection~ViewCollection}\n//\n// @private\n// @param {*} value Value to be checked.\n\n\nfunction isViewCollection(item) {\n  return item instanceof ViewCollection;\n} // Creates an empty skeleton for {@link module:ui/template~Template#revert}\n// data.\n//\n// @private\n\n\nfunction getEmptyRevertData() {\n  return {\n    children: [],\n    bindings: [],\n    attributes: {}\n  };\n} // Checks whether an attribute should be extended when\n// {@link module:ui/template~Template#apply} is called.\n//\n// @private\n// @param {String} attrName Attribute name to check.\n\n\nfunction shouldExtend(attrName) {\n  return attrName == 'class' || attrName == 'style';\n}\n/**\n * A definition of the {@link module:ui/template~Template}. It describes what kind of\n * node a template will render (HTML element or text), attributes of an element, DOM event\n * listeners and children.\n *\n * Also see:\n * * {@link module:ui/template~TemplateValueSchema} to learn about HTML element attributes,\n * * {@link module:ui/template~TemplateListenerSchema} to learn about DOM event listeners.\n *\n * A sample definition on an HTML element can look like this:\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\ttag: 'span',\n *\t\t\t\t\tattributes: { ... },\n *\t\t\t\t\tchildren: [ ... ],\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\ttext: 'static–text'\n *\t\t\t\t},\n *\t\t\t\t'also-static–text',\n *\t\t\t],\n *\t\t\tattributes: {\n *\t\t\t\tclass: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tid: {@link module:ui/template~TemplateValueSchema},\n *\t\t\t\tstyle: {@link module:ui/template~TemplateValueSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t},\n *\t\t\ton: {\n *\t\t\t\t'click': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// Document.querySelector format is also accepted.\n *\t\t\t\t'keyup@a.some-class': {@link module:ui/template~TemplateListenerSchema}\n *\n *\t\t\t\t// ...\n *\t\t\t}\n *\t\t} );\n *\n * A {@link module:ui/view~View}, another {@link module:ui/template~Template} or a native DOM node\n * can also become a child of a template. When a view is passed, its {@link module:ui/view~View#element} is used:\n *\n *\t\tconst view = new SomeView();\n *\t\tconst childTemplate = new Template( { ... } );\n *\t\tconst childNode = document.createElement( 'b' );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: [\n *\t\t\t\t// view#element will be added as a child of this <p>.\n *\t\t\t\tview,\n *\n * \t\t\t\t// The output of childTemplate.render() will be added here.\n *\t\t\t\tchildTemplate,\n *\n *\t\t\t\t// Native DOM nodes are included directly in the rendered output.\n *\t\t\t\tchildNode\n *\t\t\t]\n *\t\t} );\n *\n * An entire {@link module:ui/viewcollection~ViewCollection} can be used as a child in the definition:\n *\n *\t\tconst collection = new ViewCollection();\n *\t\tcollection.add( someView );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\n *\t\t\tchildren: collection\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateDefinition\n * @type Object\n *\n * @property {String} tag See the template {@link module:ui/template~Template#tag} property.\n *\n * @property {Array.<module:ui/template~TemplateDefinition>} [children]\n * See the template {@link module:ui/template~Template#children} property.\n *\n * @property {Object.<String, module:ui/template~TemplateValueSchema>} [attributes]\n * See the template {@link module:ui/template~Template#attributes} property.\n *\n * @property {String|module:ui/template~TemplateValueSchema|Array.<String|module:ui/template~TemplateValueSchema>} [text]\n * See the template {@link module:ui/template~Template#text} property.\n *\n * @property {Object.<String, module:ui/template~TemplateListenerSchema>} [on]\n * See the template {@link module:ui/template~Template#eventListeners} property.\n */\n\n/**\n * Describes a value of an HTML element attribute or `textContent`. It allows combining multiple\n * data sources like static values and {@link module:utils/observablemixin~Observable} attributes.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn where to use it,\n * * {@link module:ui/template~Template.bind} to learn how to configure\n * {@link module:utils/observablemixin~Observable} attribute bindings,\n * * {@link module:ui/template~Template#render} to learn how to render a template,\n * * {@link module:ui/template~BindChain#to `to()`} and {@link module:ui/template~BindChain#if `if()`}\n * methods to learn more about bindings.\n *\n * Attribute values can be described in many different ways:\n *\n *\t\t// Bind helper will create bindings to attributes of the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// A plain string schema.\n *\t\t\t\t'class': 'static-text',\n *\n *\t\t\t\t// An object schema, binds to the \"foo\" attribute of the\n *\t\t\t\t// observable and follows its value.\n *\t\t\t\t'class': bind.to( 'foo' ),\n *\n *\t\t\t\t// An array schema, combines the above.\n *\t\t\t\t'class': [\n *\t\t\t\t\t'static-text',\n *\t\t\t\t\tbind.to( 'bar', () => { ... } ),\n *\n * \t\t\t\t\t// Bindings can also be conditional.\n *\t\t\t\t\tbind.if( 'baz', 'class-when-baz-is-true' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema, with a custom namespace, e.g. useful for creating SVGs.\n *\t\t\t\t'class': {\n *\t\t\t\t\tns: 'http://ns.url',\n *\t\t\t\t\tvalue: [\n *\t\t\t\t\t\tbind.if( 'baz', 'value-when-true' ),\n *\t\t\t\t\t\t'static-text'\n *\t\t\t\t\t]\n *\t\t\t\t},\n *\n *\t\t\t\t// An object schema, specific for styles.\n *\t\t\t\tstyle: {\n *\t\t\t\t\tcolor: 'red',\n *\t\t\t\t\tbackgroundColor: bind.to( 'qux', () => { ... } )\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * Text nodes can also have complex values:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\t// Will render a \"foo\" text node.\n *\t\tnew Template( {\n *\t\t\ttext: 'foo'\n *\t\t} );\n *\n *\t\t// Will render a \"static text: {observable.foo}\" text node.\n *\t\t// The text of the node will be updated as the \"foo\" attribute changes.\n *\t\tnew Template( {\n *\t\t\ttext: [\n *\t\t\t\t'static text: ',\n *\t\t\t\tbind.to( 'foo', () => { ... } )\n *\t\t\t]\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateValueSchema\n * @type {Object|String|Array}\n */\n\n/**\n * Describes an event listener attached to an HTML element. Such listener can propagate DOM events\n * through an {@link module:utils/observablemixin~Observable} instance, execute custom callbacks\n * or both, if necessary.\n *\n * Also see:\n * * {@link module:ui/template~TemplateDefinition} to learn more about template definitions,\n * * {@link module:ui/template~BindChain#to `to()`} method to learn more about bindings.\n *\n * Check out different ways of attaching event listeners below:\n *\n *\t\t// Bind helper will propagate events through the observable.\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\ton: {\n *\t\t\t\t// An object schema. The observable will fire the \"clicked\" event upon DOM \"click\".\n *\t\t\t\tclick: bind.to( 'clicked' )\n *\n *\t\t\t\t// An object schema. It will work for \"click\" event on \"a.foo\" children only.\n *\t\t\t\t'click@a.foo': bind.to( 'clicked' )\n *\n *\t\t\t\t// An array schema, makes the observable propagate multiple events.\n *\t\t\t\tclick: [\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( 'executed' )\n *\t\t\t\t],\n *\n *\t\t\t\t// An array schema with a custom callback.\n *\t\t\t\t'click@a.foo': {\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\t\t\t\t\tbind.to( evt => {\n *\t\t\t\t\t\tconsole.log( `${ evt.target } has been clicked!` );\n *\t\t\t\t\t} }\n *\t\t\t\t}\n *\t\t\t}\n *\t\t} );\n *\n * @typedef module:ui/template~TemplateListenerSchema\n * @type {Object|String|Array}\n */\n\n/**\n * The return value of {@link ~Template.bind `Template.bind()`}. It provides `to()` and `if()`\n * methods to create the {@link module:utils/observablemixin~Observable observable} attribute and event bindings.\n *\n * @interface module:ui/template~BindChain\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to either:\n *\n * * an HTML element attribute or a text node `textContent`, so it remains in sync with the observable\n * attribute as it changes,\n * * or an HTML element DOM event, so the DOM events are propagated through an observable.\n *\n * Some common use cases of `to()` bindings are presented below:\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'p',\n *\t\t\tattributes: {\n *\t\t\t\t// class=\"...\" attribute gets bound to `observable#a`\n *\t\t\t\tclass: bind.to( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t// <p>...</p> gets bound to observable#b; always `toUpperCase()`.\n *\t\t\t\t{\n *\t\t\t\t\ttext: bind.to( 'b', ( value, node ) => value.toUpperCase() )\n *\t\t\t\t}\n *\t\t\t],\n *\t\t\ton: {\n *\t\t\t\tclick: [\n *\t\t\t\t\t// An observable will fire \"clicked\" upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( 'clicked' ),\n *\n *\t\t\t\t\t// A custom callback will be executed upon \"click\" in the DOM.\n *\t\t\t\t\tbind.to( () => {\n *\t\t\t\t\t\t...\n *\t\t\t\t\t} )\n *\t\t\t\t]\n *\t\t\t}\n *\t\t} ).render();\n *\n * Learn more about using `to()` in the {@link module:ui/template~TemplateValueSchema} and\n * {@link module:ui/template~TemplateListenerSchema}.\n *\n * @method #to\n * @param {String|Function} eventNameOrFunctionOrAttribute An attribute name of\n * {@link module:utils/observablemixin~Observable} or a DOM event name or an event callback.\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * Binds an {@link module:utils/observablemixin~Observable observable} to an HTML element attribute or a text\n * node `textContent` so it remains in sync with the observable attribute as it changes.\n *\n * Unlike {@link module:ui/template~BindChain#to}, it controls the presence of the attribute or `textContent`\n * depending on the \"falseness\" of an {@link module:utils/observablemixin~Observable} attribute.\n *\n *\t\tconst bind = Template.bind( observable, emitter );\n *\n *\t\tnew Template( {\n *\t\t\ttag: 'input',\n *\t\t\tattributes: {\n *\t\t\t\t// <input checked> when `observable#a` is not undefined/null/false/''\n *\t\t\t\t// <input> when `observable#a` is undefined/null/false\n *\t\t\t\tchecked: bind.if( 'a' )\n *\t\t\t},\n *\t\t\tchildren: [\n *\t\t\t\t{\n *\t\t\t\t\t// <input>\"b-is-not-set\"</input> when `observable#b` is undefined/null/false/''\n *\t\t\t\t\t// <input></input> when `observable#b` is not \"falsy\"\n *\t\t\t\t\ttext: bind.if( 'b', 'b-is-not-set', ( value, node ) => !value )\n *\t\t\t\t}\n *\t\t\t]\n *\t\t} ).render();\n *\n * Learn more about using `if()` in the {@link module:ui/template~TemplateValueSchema}.\n *\n * @method #if\n * @param {String} attribute An attribute name of {@link module:utils/observablemixin~Observable} used in the binding.\n * @param {String} [valueIfTrue] Value set when the {@link module:utils/observablemixin~Observable} attribute is not\n * undefined/null/false/'' (empty string).\n * @param {Function} [callback] Allows for processing of the value. Accepts `Node` and `value` as arguments.\n * @returns {module:ui/template~TemplateBinding}\n */\n\n/**\n * The {@link module:ui/template~Template#_renderNode} configuration.\n *\n * @private\n * @interface module:ui/template~RenderData\n */\n\n/**\n * Tells {@link module:ui/template~Template#_renderNode} to render\n * children into `DocumentFragment` first and then append the fragment\n * to the parent element. It is a speed optimization.\n *\n * @member {Boolean} #intoFragment\n */\n\n/**\n * A node which is being rendered.\n *\n * @member {HTMLElement|Text} #node\n */\n\n/**\n * Indicates whether the {@module:ui/template~RenderNodeOptions#node} has\n * been provided by {@module:ui/template~Template#apply}.\n *\n * @member {Boolean} #isApplying\n */\n\n/**\n * An object storing the data that helps {@module:ui/template~Template#revert}\n * bringing back an element to its initial state, i.e. before\n * {@module:ui/template~Template#apply} was called.\n *\n * @member {Object} #revertData\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/view\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ViewCollection from './viewcollection';\nimport Template from './template';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport isIterable from '@ckeditor/ckeditor5-utils/src/isiterable';\nimport '../theme/globals/globals.css';\n/**\n * The basic view class, which represents an HTML element created out of a\n * {@link module:ui/view~View#template}. Views are building blocks of the user interface and handle\n * interaction\n *\n * Views {@link module:ui/view~View#registerChild aggregate} children in\n * {@link module:ui/view~View#createCollection collections} and manage the life cycle of DOM\n * listeners e.g. by handling rendering and destruction.\n *\n * See the {@link module:ui/template~TemplateDefinition} syntax to learn more about shaping view\n * elements, attributes and listeners.\n *\n *\t\tclass SampleView extends View {\n *\t\t\tconstructor( locale ) {\n *\t\t\t\tsuper( locale );\n *\n *\t\t\t\tconst bind = this.bindTemplate;\n *\n *\t\t\t\t// Views define their interface (state) using observable attributes.\n *\t\t\t\tthis.set( 'elementClass', 'bar' );\n *\n *\t\t\t\tthis.setTemplate( {\n *\t\t\t\t\ttag: 'p',\n *\n *\t\t\t\t\t// The element of the view can be defined with its children.\n *\t\t\t\t\tchildren: [\n *\t\t\t\t\t\t'Hello',\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\ttag: 'b',\n *\t\t\t\t\t\t\tchildren: [ 'world!' ]\n *\t\t\t\t\t\t}\n *\t\t\t\t\t],\n *\t\t\t\t\tattributes: {\n *\t\t\t\t\t\tclass: [\n *\t\t\t\t\t\t\t'foo',\n *\n *\t\t\t\t\t\t\t// Observable attributes control the state of the view in DOM.\n *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n *\t\t\t\t\t\t]\n *\t\t\t\t\t},\n *\t\t\t\t\ton: {\n *\t\t\t\t\t\t// Views listen to DOM events and propagate them.\n *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n *\t\t\t\t\t}\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\tconst view = new SampleView( locale );\n *\n *\t\tview.render();\n *\n *\t\t// Append <p class=\"foo bar\">Hello<b>world</b></p> to the <body>\n *\t\tdocument.body.appendChild( view.element );\n *\n *\t\t// Change the class attribute to <p class=\"foo baz\">Hello<b>world</b></p>\n *\t\tview.elementClass = 'baz';\n *\n *\t\t// Respond to the \"click\" event in DOM by executing a custom action.\n *\t\tview.on( 'clicked', () => {\n *\t\t\tconsole.log( 'The view has been clicked!' );\n *\t\t} );\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class View {\n  /**\n   * Creates an instance of the {@link module:ui/view~View} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   */\n  constructor(locale) {\n    /**\n     * An HTML element of the view. `null` until {@link #render rendered}\n     * from the {@link #template}.\n     *\n     *\t\tclass SampleView extends View {\n     *\t\t\tconstructor() {\n     *\t\t\t\tsuper();\n     *\n     *\t\t\t\t// A template instance the #element will be created from.\n     *\t\t\t\tthis.setTemplate( {\n     *\t\t\t\t\ttag: 'p'\n     *\n     *\t\t\t\t\t// ...\n     *\t\t\t\t} );\n     *\t\t\t}\n     *\t\t}\n     *\n     *\t\tconst view = new SampleView();\n     *\n     *\t\t// Renders the #template.\n     *\t\tview.render();\n     *\n     *\t\t// Append the HTML element of the view to <body>.\n     *\t\tdocument.body.appendChild( view.element );\n     *\n     * **Note**: The element of the view can also be assigned directly:\n     *\n     *\t\tview.element = document.querySelector( '#my-container' );\n     *\n     * @member {HTMLElement}\n     */\n    this.element = null;\n    /**\n     * Set `true` when the view has already been {@link module:ui/view~View#render rendered}.\n     *\n     * @readonly\n     * @member {Boolean} #isRendered\n     */\n\n    this.isRendered = false;\n    /**\n     * A set of tools to localize the user interface.\n     *\n     * Also see {@link module:core/editor/editor~Editor#locale}.\n     *\n     * @readonly\n     * @member {module:utils/locale~Locale}\n     */\n\n    this.locale = locale;\n    /**\n     * Shorthand for {@link module:utils/locale~Locale#t}.\n     *\n     * Note: If {@link #locale} instance hasn't been passed to the view this method may not\n     * be available.\n     *\n     * @see module:utils/locale~Locale#t\n     * @method\n     */\n\n    this.t = locale && locale.t;\n    /**\n     * Collections registered with {@link #createCollection}.\n     *\n     * @protected\n     * @member {Set.<module:ui/viewcollection~ViewCollection>}\n     */\n\n    this._viewCollections = new Collection();\n    /**\n     * A collection of view instances, which have been added directly\n     * into the {@link module:ui/template~Template#children}.\n     *\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this._unboundChildren = this.createCollection(); // Pass parent locale to its children.\n\n    this._viewCollections.on('add', (evt, collection) => {\n      collection.locale = locale;\n    });\n    /**\n     * Template of this view. It provides the {@link #element} representing\n     * the view in DOM, which is {@link #render rendered}.\n     *\n     * @member {module:ui/template~Template} #template\n     */\n\n    /**\n     * Cached {@link module:ui/template~BindChain bind chain} object created by the\n     * {@link #template}. See {@link #bindTemplate}.\n     *\n     * @private\n     * @member {Object} #_bindTemplate\n     */\n\n\n    this.decorate('render');\n  }\n  /**\n   * Shorthand for {@link module:ui/template~Template.bind}, a binding\n   * {@link module:ui/template~BindChain interface} pre–configured for the view instance.\n   *\n   * It provides {@link module:ui/template~BindChain#to `to()`} and\n   * {@link module:ui/template~BindChain#if `if()`} methods that initialize bindings with\n   * observable attributes and attach DOM listeners.\n   *\n   *\t\tclass SampleView extends View {\n   *\t\t\tconstructor( locale ) {\n   *\t\t\t\tsuper( locale );\n   *\n   *\t\t\t\tconst bind = this.bindTemplate;\n   *\n   *\t\t\t\t// These {@link module:utils/observablemixin~Observable observable} attributes will control\n   *\t\t\t\t// the state of the view in DOM.\n   *\t\t\t\tthis.set( {\n   *\t\t\t\t\telementClass: 'foo',\n   *\t\t\t\t \tisEnabled: true\n   *\t\t\t\t } );\n   *\n   *\t\t\t\tthis.setTemplate( {\n   *\t\t\t\t\ttag: 'p',\n   *\n   *\t\t\t\t\tattributes: {\n   *\t\t\t\t\t\t// The class HTML attribute will follow elementClass\n   *\t\t\t\t\t\t// and isEnabled view attributes.\n   *\t\t\t\t\t\tclass: [\n   *\t\t\t\t\t\t\tbind.to( 'elementClass' )\n   *\t\t\t\t\t\t\tbind.if( 'isEnabled', 'present-when-enabled' )\n   *\t\t\t\t\t\t]\n   *\t\t\t\t\t},\n   *\n   *\t\t\t\t\ton: {\n   *\t\t\t\t\t\t// The view will fire the \"clicked\" event upon clicking <p> in DOM.\n   *\t\t\t\t\t\tclick: bind.to( 'clicked' )\n   *\t\t\t\t\t}\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\t\t}\n   *\n   * @method #bindTemplate\n   */\n\n\n  get bindTemplate() {\n    if (this._bindTemplate) {\n      return this._bindTemplate;\n    }\n\n    return this._bindTemplate = Template.bind(this, this);\n  }\n  /**\n   * Creates a new collection of views, which can be used as\n   * {@link module:ui/template~Template#children} of this view.\n   *\n   *\t\tclass SampleView extends View {\n   *\t\t\tconstructor( locale ) {\n   *\t\t\t\tsuper( locale );\n   *\n   *\t\t\t\tthis.items = this.createCollection();\n  \t *\n   *\t\t\t\tthis.setTemplate( {\n   *\t\t\t\t\ttag: 'p',\n   *\n   *\t\t\t\t\t// `items` collection will render here.\n   *\t\t\t\t\tchildren: this.items\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\t\t}\n   *\n   *\t\tconst view = new SampleView( locale );\n   *\t\tconst child = new ChildView( locale );\n   *\n   *\t\tview.render();\n   *\n   *\t\t// It will append <p></p> to the <body>.\n   *\t\tdocument.body.appendChild( view.element );\n   *\n   *\t\t// From now on the child is nested under its parent, which is also reflected in DOM.\n   *\t\t// <p><child#element></p>\n   *\t\tview.items.add( child );\n   *\n   * @returns {module:ui/viewcollection~ViewCollection} A new collection of view instances.\n   */\n\n\n  createCollection() {\n    const collection = new ViewCollection();\n\n    this._viewCollections.add(collection);\n\n    return collection;\n  }\n  /**\n   * Registers a new child view under the view instance. Once registered, a child\n   * view is managed by its parent, including {@link #render rendering}\n   * and {@link #destroy destruction}.\n   *\n   * To revert this, use {@link #deregisterChild}.\n   *\n   *\t\tclass SampleView extends View {\n   *\t\t\tconstructor( locale ) {\n   *\t\t\t\tsuper( locale );\n   *\n   *\t\t\t\tthis.childA = new SomeChildView( locale );\n   *\t\t\t\tthis.childB = new SomeChildView( locale );\n   *\n   *\t\t\t\tthis.setTemplate( { tag: 'p' } );\n   *\n   *\t\t\t\t// Register the children.\n   *\t\t\t\tthis.registerChild( [ this.childA, this.childB ] );\n   *\t\t\t}\n   *\n   *\t\t\trender() {\n   *\t\t\t\tsuper.render();\n   *\n   *\t\t\t\tthis.element.appendChild( this.childA.element );\n   *\t\t\t\tthis.element.appendChild( this.childB.element );\n   *\t\t\t}\n   *\t\t}\n   *\n   *\t\tconst view = new SampleView( locale );\n   *\n   *\t\tview.render();\n   *\n   *\t\t// Will append <p><childA#element><b></b><childB#element></p>.\n   *\t\tdocument.body.appendChild( view.element );\n   *\n   * **Note**: There's no need to add child views if they're already referenced in the\n   * {@link #template}:\n   *\n   *\t\tclass SampleView extends View {\n   *\t\t\tconstructor( locale ) {\n   *\t\t\t\tsuper( locale );\n   *\n   *\t\t\t\tthis.childA = new SomeChildView( locale );\n   *\t\t\t\tthis.childB = new SomeChildView( locale );\n   *\n   *\t\t\t\tthis.setTemplate( {\n   *\t\t\t\t\ttag: 'p',\n   *\n  \t *\t\t\t\t\t// These children will be added automatically. There's no\n  \t *\t\t\t\t\t// need to call {@link #registerChild} for any of them.\n   *\t\t\t\t\tchildren: [ this.childA, this.childB ]\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\n   *\t\t\t// ...\n   *\t\t}\n   *\n   * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Children views to be registered.\n   */\n\n\n  registerChild(children) {\n    if (!isIterable(children)) {\n      children = [children];\n    }\n\n    for (const child of children) {\n      this._unboundChildren.add(child);\n    }\n  }\n  /**\n   * The opposite of {@link #registerChild}. Removes a child view from this view instance.\n   * Once removed, the child is no longer managed by its parent, e.g. it can safely\n   * become a child of another parent view.\n   *\n   * @see #registerChild\n   * @param {module:ui/view~View|Iterable.<module:ui/view~View>} children Child views to be removed.\n   */\n\n\n  deregisterChild(children) {\n    if (!isIterable(children)) {\n      children = [children];\n    }\n\n    for (const child of children) {\n      this._unboundChildren.remove(child);\n    }\n  }\n  /**\n   * Sets the {@link #template} of the view with with given definition.\n   *\n   * A shorthand for:\n   *\n   *\t\tview.setTemplate( definition );\n   *\n   * @param {module:ui/template~TemplateDefinition} definition Definition of view's template.\n   */\n\n\n  setTemplate(definition) {\n    this.template = new Template(definition);\n  }\n  /**\n   * {@link module:ui/template~Template.extend Extends} the {@link #template} of the view with\n   * with given definition.\n   *\n   * A shorthand for:\n   *\n   *\t\tTemplate.extend( view.template, definition );\n   *\n   * **Note**: Is requires the {@link #template} to be already set. See {@link #setTemplate}.\n   *\n   * @param {module:ui/template~TemplateDefinition} definition Definition which\n   * extends the {@link #template}.\n   */\n\n\n  extendTemplate(definition) {\n    Template.extend(this.template, definition);\n  }\n  /**\n   * Recursively renders the view.\n   *\n   * Once the view is rendered:\n   * * the {@link #element} becomes an HTML element out of {@link #template},\n   * * the {@link #isRendered} flag is set `true`.\n   *\n   * **Note**: The children of the view:\n   * * defined directly in the {@link #template}\n   * * residing in collections created by the {@link #createCollection} method,\n   * * and added by {@link #registerChild}\n   * are also rendered in the process.\n   *\n   * In general, `render()` method is the right place to keep the code which refers to the\n   * {@link #element} and should be executed at the very beginning of the view's life cycle.\n   *\n   * It is possible to {@link module:ui/template~Template.extend} the {@link #template} before\n   * the view is rendered. To allow an early customization of the view (e.g. by its parent),\n   * such references should be done in `render()`.\n   *\n   *\t\tclass SampleView extends View {\n   *\t\t\tconstructor() {\n   *\t\t\t\tthis.setTemplate( {\n   *\t\t\t\t\t// ...\n   *\t\t\t\t} );\n   *\t\t\t},\n   *\n   *\t\t\trender() {\n   *\t\t\t\t// View#element becomes available.\n   *\t\t\t\tsuper.render();\n   *\n   *\t\t\t\t// The \"scroll\" listener depends on #element.\n   *\t\t\t\tthis.listenTo( window, 'scroll', () => {\n   *\t\t\t\t\t// A reference to #element would render the #template and make it non-extendable.\n   *\t\t\t\t\tif ( window.scrollY > 0 ) {\n   *\t\t\t\t\t\tthis.element.scrollLeft = 100;\n   *\t\t\t\t\t} else {\n   *\t\t\t\t\t\tthis.element.scrollLeft = 0;\n   *\t\t\t\t\t}\n   *\t\t\t\t} );\n   *\t\t\t}\n   *\t\t}\n   *\n   *\t\tconst view = new SampleView();\n   *\n   *\t\t// Let's customize the view before it gets rendered.\n   *\t\tview.extendTemplate( {\n   *\t\t\tattributes: {\n   *\t\t\t\tclass: [\n   *\t\t\t\t\t'additional-class'\n   *\t\t\t\t]\n   *\t\t\t}\n   *\t\t} );\n   *\n   *\t\t// Late rendering allows customization of the view.\n   *\t\tview.render();\n   */\n\n\n  render() {\n    if (this.isRendered) {\n      /**\n       * This View has already been rendered.\n       *\n       * @error ui-view-render-rendered\n       */\n      throw new CKEditorError('ui-view-render-already-rendered: This View has already been rendered.', this);\n    } // Render #element of the view.\n\n\n    if (this.template) {\n      this.element = this.template.render(); // Auto–register view children from #template.\n\n      this.registerChild(this.template.getViews());\n    }\n\n    this.isRendered = true;\n  }\n  /**\n   * Recursively destroys the view instance and child views added by {@link #registerChild} and\n   * residing in collections created by the {@link #createCollection}.\n   *\n   * Destruction disables all event listeners:\n   * * created on the view, e.g. `view.on( 'event', () => {} )`,\n   * * defined in the {@link #template} for DOM events.\n   */\n\n\n  destroy() {\n    this.stopListening();\n\n    this._viewCollections.map(c => c.destroy()); // Template isn't obligatory for views.\n\n\n    if (this.template && this.template._revertData) {\n      this.template.revert(this.element);\n    }\n  }\n  /**\n   * Event fired by the {@link #render} method. Actual rendering is executed as a listener to\n   * this event with the default priority.\n   *\n   * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n   *\n   * @event render\n   */\n\n\n}\nmix(View, DomEmitterMixin);\nmix(View, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editorui/editoruiview\n */\n\n/* globals document */\nimport View from '../view';\nimport Template from '../template';\nimport '../../theme/components/editorui/editorui.css';\n/**\n * The editor UI view class. Base class for the editor main views.\n *\n * @extends module:ui/view~View\n */\n\nexport default class EditorUIView extends View {\n  /**\n   * Creates an instance of the editor UI view class.\n   *\n   * @param {module:utils/locale~Locale} [locale] The locale instance.\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * Collection of the child views, detached from the DOM\n     * structure of the editor, like panels, icons etc.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection} #body\n     */\n\n    this.body = this.createCollection();\n    /**\n     * The element holding elements of the 'body' region.\n     *\n     * @private\n     * @member {HTMLElement} #_bodyCollectionContainer\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    this._renderBodyCollection();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this._bodyCollectionContainer.remove();\n\n    return super.destroy();\n  }\n  /**\n   * Creates and appends to `<body>` the {@link #body} collection container.\n   *\n   * @private\n   */\n\n\n  _renderBodyCollection() {\n    const locale = this.locale;\n    const bodyElement = this._bodyCollectionContainer = new Template({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-reset_all', 'ck-body', 'ck-rounded-corners'],\n        dir: locale.uiLanguageDirection\n      },\n      children: this.body\n    }).render();\n    document.body.appendChild(bodyElement);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/editableui/editableuiview\n */\nimport View from '../view';\n/**\n * The editable UI view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class EditableUIView extends View {\n  /**\n   * Creates an instance of EditableUIView class.\n   *\n   * @param {module:utils/locale~Locale} [locale] The locale instance.\n   * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n   * @param {HTMLElement} [editableElement] The editable element. If not specified, this view\n   * should create it. Otherwise, the existing element should be used.\n   */\n  constructor(locale, editingView, editableElement) {\n    super(locale);\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-content', 'ck-editor__editable', 'ck-rounded-corners'],\n        lang: locale.contentLanguage,\n        dir: locale.contentLanguageDirection\n      }\n    });\n    /**\n     * The name of the editable UI view.\n     *\n     * @member {String} #name\n     */\n\n    this.name = null;\n    /**\n     * Controls whether the editable is focused, i.e. the user is typing in it.\n     *\n     * @observable\n     * @member {Boolean} #isFocused\n     */\n\n    this.set('isFocused', false);\n    /**\n     * The element which is the main editable element (usually the one with `contentEditable=\"true\"`).\n     *\n     * @private\n     * @member {HTMLElement} #_editableElement\n     */\n\n    this._editableElement = editableElement;\n    /**\n     * Whether an external {@link #_editableElement} was passed into the constructor, which also means\n     * the view will not render its {@link #template}.\n     *\n     * @private\n     * @member {Boolean} #_hasExternalElement\n     */\n\n    this._hasExternalElement = !!this._editableElement;\n    /**\n     * The editing view instance the editable is related to. Editable uses the editing\n     * view to dynamically modify its certain DOM attributes after {@link #render rendering}.\n     *\n     * **Note**: The DOM attributes are performed by the editing view and not UI\n     * {@link module:ui/view~View#bindTemplate template bindings} because once rendered,\n     * the editable DOM element must remain under the full control of the engine to work properly.\n     *\n     * @protected\n     * @member {module:engine/view/view~View} #isFocused\n     */\n\n    this._editingView = editingView;\n  }\n  /**\n   * Renders the view by either applying the {@link #template} to the existing\n   * {@link #_editableElement} or assigning {@link #element} as {@link #_editableElement}.\n   */\n\n\n  render() {\n    super.render();\n\n    if (this._hasExternalElement) {\n      this.template.apply(this.element = this._editableElement);\n    } else {\n      this._editableElement = this.element;\n    }\n\n    this.on('change:isFocused', () => this._updateIsFocusedClasses());\n\n    this._updateIsFocusedClasses();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    if (this._hasExternalElement) {\n      this.template.revert(this._editableElement);\n    }\n\n    super.destroy();\n  }\n  /**\n   * Updates the `ck-focused` and `ck-blurred` CSS classes on the {@link #element} according to\n   * the {@link #isFocused} property value using the {@link #_editingView editing view} API.\n   *\n   * @private\n   */\n\n\n  _updateIsFocusedClasses() {\n    const editingView = this._editingView;\n\n    if (editingView.isRenderingInProgress) {\n      updateAfterRender(this);\n    } else {\n      update(this);\n    }\n\n    function update(view) {\n      editingView.change(writer => {\n        const viewRoot = editingView.document.getRoot(view.name);\n        writer.addClass(view.isFocused ? 'ck-focused' : 'ck-blurred', viewRoot);\n        writer.removeClass(view.isFocused ? 'ck-blurred' : 'ck-focused', viewRoot);\n      });\n    } // In a case of a multi-root editor, a callback will be attached more than once (one callback for each root).\n    // While executing one callback the `isRenderingInProgress` observable is changing what causes executing another\n    // callback and render is called inside the already pending render.\n    // We need to be sure that callback is executed only when the value has changed from `true` to `false`.\n    // See https://github.com/ckeditor/ckeditor5/issues/1676.\n\n\n    function updateAfterRender(view) {\n      editingView.once('change:isRenderingInProgress', (evt, name, value) => {\n        if (!value) {\n          update(view);\n        } else {\n          updateAfterRender(view);\n        }\n      });\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/editableui/inline/inlineeditableuiview\n */\nimport EditableUIView from '../../editableui/editableuiview';\n/**\n * The inline editable UI class implementing an inline {@link module:ui/editableui/editableuiview~EditableUIView}.\n *\n * @extends module:ui/editableui/editableuiview~EditableUIView\n */\nexport default class InlineEditableUIView extends EditableUIView {\n    /**\n   * Creates an instance of the InlineEditableUIView class.\n   *\n   * @param {module:utils/locale~Locale} [locale] The locale instance.\n   * @param {module:engine/view/view~View} editingView The editing view instance the editable is related to.\n   * @param {HTMLElement} [editableElement] The editable element. If not specified, the\n   * {@link module:ui/editableui/editableuiview~EditableUIView}\n   * will create it. Otherwise, the existing element will be used.\n   */\n    constructor(locale, editingView, editableElement) {\n        super(locale, editingView, editableElement);\n        this.extendTemplate({\n            attributes: {\n                role: 'textbox',\n                class: 'ck-editor__editable_inline'\n            }\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n        super.render();\n        const editingView = this._editingView;\n        const t = this.t;\n        editingView.change(writer => {\n            const viewRoot = editingView.document.getRoot(this.name);\n            writer.setAttribute('aria-label', t('cg', [this.name]), viewRoot);\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/focuscycler\n */\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\n/**\n * A utility class that helps cycling over focusable {@link module:ui/view~View views} in a\n * {@link module:ui/viewcollection~ViewCollection} when the focus is tracked by the\n * {@link module:utils/focustracker~FocusTracker} instance. It helps implementing keyboard\n * navigation in HTML forms, toolbars, lists and the like.\n *\n * To work properly it requires:\n * * a collection of focusable (HTML `tabindex` attribute) views that implement the `focus()` method,\n * * an associated focus tracker to determine which view is focused.\n *\n * A simple cycler setup can look like this:\n *\n *\t\tconst focusables = new ViewCollection();\n *\t\tconst focusTracker = new FocusTracker();\n *\n *\t\t// Add focusable views to the focus tracker.\n *\t\tfocusTracker.add( ... );\n *\n * Then, the cycler can be used manually:\n *\n *\t\tconst cycler = new FocusCycler( { focusables, focusTracker } );\n *\n *\t\t// Will focus the first focusable view in #focusables.\n *\t\tcycler.focusFirst();\n *\n *\t\t// Will log the next focusable item in #focusables.\n *\t\tconsole.log( cycler.next );\n *\n * Alternatively, it can work side by side with the {@link module:utils/keystrokehandler~KeystrokeHandler}:\n *\n *\t\tconst keystrokeHandler = new KeystrokeHandler();\n *\n *\t\t// Activate the keystroke handler.\n *\t\tkeystrokeHandler.listenTo( sourceOfEvents );\n *\n *\t\tconst cycler = new FocusCycler( {\n *\t\t\tfocusables, focusTracker, keystrokeHandler,\n *\t\t\tactions: {\n *\t\t\t\t// When arrowup of arrowleft is detected by the #keystrokeHandler,\n *\t\t\t\t// focusPrevious() will be called on the cycler.\n *\t\t\t\tfocusPrevious: [ 'arrowup', 'arrowleft' ],\n *\t\t\t}\n *\t\t} );\n */\n\nexport default class FocusCycler {\n  /**\n   * Creates an instance of the focus cycler utility.\n   *\n   * @param {Object} options Configuration options.\n   * @param {module:utils/collection~Collection|Object} options.focusables\n   * @param {module:utils/focustracker~FocusTracker} options.focusTracker\n   * @param {module:utils/keystrokehandler~KeystrokeHandler} [options.keystrokeHandler]\n   * @param {Object} [options.actions]\n   */\n  constructor(options) {\n    Object.assign(this, options);\n    /**\n     * A {@link module:ui/view~View view} collection that the cycler operates on.\n     *\n     * @readonly\n     * @member {module:utils/collection~Collection} #focusables\n     */\n\n    /**\n     * A focus tracker instance that the cycler uses to determine the current focus\n     * state in {@link #focusables}.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker} #focusTracker\n     */\n\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n     * which can respond to certain keystrokes and cycle the focus.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler} #keystrokeHandler\n     */\n\n    /**\n     * Actions that the cycler can take when a keystroke is pressed. Requires\n     * `options.keystrokeHandler` to be passed and working. When an action is\n     * performed, `preventDefault` and `stopPropagation` will be called on the event\n     * the keystroke fired in the DOM.\n     *\n     *\t\tactions: {\n     *\t\t\t// Will call #focusPrevious() when arrowleft or arrowup is pressed.\n     *\t\t\tfocusPrevious: [ 'arrowleft', 'arrowup' ],\n     *\n     *\t\t\t// Will call #focusNext() when arrowdown is pressed.\n     *\t\t\tfocusNext: 'arrowdown'\n     *\t\t}\n     *\n     * @readonly\n     * @member {Object} #actions\n     */\n\n    if (options.actions && options.keystrokeHandler) {\n      for (const methodName in options.actions) {\n        let actions = options.actions[methodName];\n\n        if (typeof actions == 'string') {\n          actions = [actions];\n        }\n\n        for (const keystroke of actions) {\n          options.keystrokeHandler.set(keystroke, (data, cancel) => {\n            this[methodName]();\n            cancel();\n          });\n        }\n      }\n    }\n  }\n  /**\n   * Returns the first focusable view in {@link #focusables}.\n   * Returns `null` if there is none.\n   *\n   * @readonly\n   * @member {module:ui/view~View|null} #first\n   */\n\n\n  get first() {\n    return this.focusables.find(isFocusable) || null;\n  }\n  /**\n   * Returns the last focusable view in {@link #focusables}.\n   * Returns `null` if there is none.\n   *\n   * @readonly\n   * @member {module:ui/view~View|null} #last\n   */\n\n\n  get last() {\n    return this.focusables.filter(isFocusable).slice(-1)[0] || null;\n  }\n  /**\n   * Returns the next focusable view in {@link #focusables} based on {@link #current}.\n   * Returns `null` if there is none.\n   *\n   * @readonly\n   * @member {module:ui/view~View|null} #next\n   */\n\n\n  get next() {\n    return this._getFocusableItem(1);\n  }\n  /**\n   * Returns the previous focusable view in {@link #focusables} based on {@link #current}.\n   * Returns `null` if there is none.\n   *\n   * @readonly\n   * @member {module:ui/view~View|null} #previous\n   */\n\n\n  get previous() {\n    return this._getFocusableItem(-1);\n  }\n  /**\n   * An index of the view in the {@link #focusables} which is focused according\n   * to {@link #focusTracker}. Returns `null` when there is no such view.\n   *\n   * @readonly\n   * @member {Number|null} #current\n   */\n\n\n  get current() {\n    let index = null; // There's no focused view in the focusables.\n\n    if (this.focusTracker.focusedElement === null) {\n      return null;\n    }\n\n    this.focusables.find((view, viewIndex) => {\n      const focused = view.element === this.focusTracker.focusedElement;\n\n      if (focused) {\n        index = viewIndex;\n      }\n\n      return focused;\n    });\n    return index;\n  }\n  /**\n   * Focuses the {@link #first} item in {@link #focusables}.\n   */\n\n\n  focusFirst() {\n    this._focus(this.first);\n  }\n  /**\n   * Focuses the {@link #last} item in {@link #focusables}.\n   */\n\n\n  focusLast() {\n    this._focus(this.last);\n  }\n  /**\n   * Focuses the {@link #next} item in {@link #focusables}.\n   */\n\n\n  focusNext() {\n    this._focus(this.next);\n  }\n  /**\n   * Focuses the {@link #previous} item in {@link #focusables}.\n   */\n\n\n  focusPrevious() {\n    this._focus(this.previous);\n  }\n  /**\n   * Focuses the given view if it exists.\n   *\n   * @protected\n   * @param {module:ui/view~View} view\n   */\n\n\n  _focus(view) {\n    if (view) {\n      view.focus();\n    }\n  }\n  /**\n   * Returns the next or previous focusable view in {@link #focusables} with respect\n   * to {@link #current}.\n   *\n   * @protected\n   * @param {Number} step Either `1` for checking forward from {@link #current} or\n   * `-1` for checking backwards.\n   * @returns {module:ui/view~View|null}\n   */\n\n\n  _getFocusableItem(step) {\n    // Cache for speed.\n    const current = this.current;\n    const collectionLength = this.focusables.length;\n\n    if (!collectionLength) {\n      return null;\n    } // Start from the beginning if no view is focused.\n    // https://github.com/ckeditor/ckeditor5-ui/issues/206\n\n\n    if (current === null) {\n      return this[step === 1 ? 'first' : 'last'];\n    } // Cycle in both directions.\n\n\n    let index = (current + collectionLength + step) % collectionLength;\n\n    do {\n      const view = this.focusables.get(index); // TODO: Check if view is visible.\n\n      if (isFocusable(view)) {\n        return view;\n      } // Cycle in both directions.\n\n\n      index = (index + collectionLength + step) % collectionLength;\n    } while (index !== current);\n\n    return null;\n  }\n\n} // Checks whether a view is focusable.\n//\n// @private\n// @param {module:ui/view~View} view A view to be checked.\n// @returns {Boolean}\n\nfunction isFocusable(view) {\n  return !!(view.focus && global.window.getComputedStyle(view.element).display != 'none');\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/toolbar/toolbarseparatorview\n */\nimport View from '../view';\n/**\n * The toolbar separator view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ToolbarSeparatorView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    this.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-toolbar__separator']\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getresizeobserver\n */\n\n/* globals setTimeout, clearTimeout */\nimport mix from '../mix';\nimport global from './global';\nimport Rect from './rect';\nimport DomEmitterMixin from './emittermixin';\nconst RESIZE_CHECK_INTERVAL = 100;\n/**\n * Returns an instance of [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n * In browsers that support the `ResizeObserver` API, the native observer instance is returned.\n * In other browsers, a polyfilled instance is returned instead with a compatible API.\n *\n * [Learn more](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) about the native API.\n *\n * @param {Function} callback A function called when any observed element was resized. Refer to the\n * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n * learn more.\n * @returns {module:utils/dom/getresizeobserver~ResizeObserver} An observer instance.\n */\n\nexport default function getResizeObserver(callback) {\n  // TODO: One day, the `ResizeObserver` API will be supported in all modern web browsers.\n  // When it happens, this module will no longer make sense and should be removed and\n  // the native implementation should be used across the project to save bytes.\n  // Check out https://caniuse.com/#feat=resizeobserver.\n  if (typeof global.window.ResizeObserver === 'function') {\n    return new global.window.ResizeObserver(callback);\n  } else {\n    return new ResizeObserverPolyfill(callback);\n  }\n}\n/**\n * A polyfill class for the native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver).\n *\n * @private\n * @mixes module:utils/domemittermixin~DomEmitterMixin\n */\n\nclass ResizeObserverPolyfill {\n  /**\n   * Creates an instance of the {@link module:utils/dom/getresizeobserver~ResizeObserverPolyfill} class.\n   *\n   * It synchronously reacts to resize of the window to check if observed elements' geometry changed.\n   *\n   * Additionally, the polyfilled observer uses a timeout to check if observed elements' geometry has changed\n   * in some other way (dynamic layouts, scrollbars showing up, etc.), so its response can also be asynchronous.\n   *\n   * @param {Function} callback A function called when any observed element was resized. Refer to the\n   * native [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API to\n   * learn more.\n   */\n  constructor(callback) {\n    /**\n     * A function called when any observed {@link #_elements element} was resized.\n     *\n     * @readonly\n     * @protected\n     * @member {Function}\n     */\n    this._callback = callback;\n    /**\n     * DOM elements currently observed by the observer instance.\n     *\n     * @readonly\n     * @protected\n     * @member {Set}\n     */\n\n    this._elements = new Set();\n    /**\n     * Cached DOM {@link #_elements elements} bounding rects to compare to upon the next check.\n     *\n     * @readonly\n     * @protected\n     * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n     */\n\n    this._previousRects = new Map();\n    /**\n     * An UID of the current timeout upon which the observed elements rects\n     * will be compared to the {@link #_previousRects previous rects} from the past.\n     *\n     * @readonly\n     * @protected\n     * @member {Map.<HTMLElement,module:utils/dom/rect~Rect>}\n     */\n\n    this._periodicCheckTimeout = null;\n  }\n  /**\n   * Starts observing a DOM element.\n   *\n   * Learn more in the\n   * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/observe).\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  observe(element) {\n    this._elements.add(element);\n\n    if (this._elements.size === 1) {\n      this._startPeriodicCheck();\n    }\n  }\n  /**\n   * Stops observing a DOM element.\n   *\n   * Learn more in the\n   * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/unobserve).\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  unobserve(element) {\n    this._elements.delete(element);\n\n    this._previousRects.delete(element);\n\n    if (!this._elements.size) {\n      this._stopPeriodicCheck();\n    }\n  }\n  /**\n   * Stops observing all observed DOM elements.\n   *\n   * Learn more in the\n   * [native method documentation](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver/disconnect).\n   *\n   * @param {HTMLElement} element\n   */\n\n\n  disconnect() {\n    this._elements.forEach(element => this.unobserve(element));\n  }\n  /**\n   * When called, the observer calls the {@link #_callback resize callback} for all observed\n   * {@link #_elements elements} but also starts checking periodically for changes in the elements' geometry.\n   * If some are detected, {@link #_callback resize callback} is called for relevant elements that were resized.\n   *\n   * @protected\n   */\n\n\n  _startPeriodicCheck() {\n    const periodicCheck = () => {\n      this._checkElementRectsAndExecuteCallback();\n\n      this._periodicCheckTimeout = setTimeout(periodicCheck, RESIZE_CHECK_INTERVAL);\n    };\n\n    this.listenTo(global.window, 'resize', () => {\n      this._checkElementRectsAndExecuteCallback();\n    });\n    periodicCheck();\n  }\n  /**\n   * Stops checking for changes in all observed {@link #_elements elements} geometry.\n   *\n   * @protected\n   */\n\n\n  _stopPeriodicCheck() {\n    clearTimeout(this._periodicCheckTimeout);\n    this.stopListening();\n\n    this._previousRects.clear();\n  }\n  /**\n   * Checks if the geometry of any of the {@link #_elements element} has changed. If so, executes\n   * the {@link #_callback resize callback} with element geometry data.\n   *\n   * @protected\n   */\n\n\n  _checkElementRectsAndExecuteCallback() {\n    const entries = [];\n\n    for (const element of this._elements) {\n      if (this._hasRectChanged(element)) {\n        entries.push({\n          target: element,\n          contentRect: this._previousRects.get(element)\n        });\n      }\n    }\n\n    if (entries.length) {\n      this._callback(entries);\n    }\n  }\n  /**\n   * Compares the DOM element geometry to the {@link #_previousRects cached geometry} from the past.\n   * Returns `true` if geometry has changed or the element is checked for the first time.\n   *\n   * @protected\n   * @param {HTMLElement} element\n   * @returns {Boolean}\n   */\n\n\n  _hasRectChanged(element) {\n    if (!element.ownerDocument.body.contains(element)) {\n      return false;\n    }\n\n    const currentRect = new Rect(element);\n\n    const previousRect = this._previousRects.get(element); // The first check should always yield true despite no Previous rect to compare to.\n    // The native ResizeObserver does that and... that makes sense. Sort of.\n\n\n    const hasChanged = !previousRect || !previousRect.isEqual(currentRect);\n\n    this._previousRects.set(element, currentRect);\n\n    return hasChanged;\n  }\n\n}\n\nmix(ResizeObserverPolyfill, DomEmitterMixin);\n/**\n * A resize observer object (either native or {@link module:utils/dom/getresizeobserver~getResizeObserver polyfilled})\n * offering the [`ResizeObserver`](https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver) API.\n *\n * @typedef {Function} module:utils/dom/getresizeobserver~ResizeObserver\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownpanelview\n */\nimport View from '../view';\n/**\n * The dropdown panel view class.\n *\n * See {@link module:ui/dropdown/dropdownview~DropdownView} to learn about the common usage.\n *\n * @extends module:ui/view~View\n */\n\nexport default class DropdownPanelView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * Controls whether the panel is visible.\n     *\n     * @observable\n     * @member {Boolean} #isVisible\n     */\n\n    this.set('isVisible', false);\n    /**\n     * The position of the panel, relative to the parent.\n     *\n     * This property is reflected in the CSS class set to {@link #element} that controls\n     * the position of the panel.\n     *\n     * @observable\n     * @default 'se'\n     * @member {'se'|'sw'|'ne'|'nw'} #position\n     */\n\n    this.set('position', 'se');\n    /**\n     * Collection of the child views in this panel.\n     *\n     * A common child type is the {@link module:ui/list/listview~ListView} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n     * See {@link module:ui/dropdown/utils~addListToDropdown} and\n     * {@link module:ui/dropdown/utils~addToolbarToDropdown} to learn more about child views of dropdowns.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-reset', 'ck-dropdown__panel', bind.to('position', value => `ck-dropdown__panel_${value}`), bind.if('isVisible', 'ck-dropdown__panel-visible')]\n      },\n      children: this.children,\n      on: {\n        // Drag and drop in the panel should not break the selection in the editor.\n        // https://github.com/ckeditor/ckeditor5-ui/issues/228\n        selectstart: bind.to(evt => evt.preventDefault())\n      }\n    });\n  }\n  /**\n   * Focuses the view element or first item in view collection on opening dropdown's panel.\n   *\n   * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n   */\n\n\n  focus() {\n    if (this.children.length) {\n      this.children.first.focus();\n    }\n  }\n  /**\n   * Focuses the view element or last item in view collection on opening dropdown's panel.\n   *\n   * See also {@link module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable}.\n   */\n\n\n  focusLast() {\n    if (this.children.length) {\n      const lastChild = this.children.last;\n\n      if (typeof lastChild.focusLast === 'function') {\n        lastChild.focusLast();\n      } else {\n        lastChild.focus();\n      }\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/position\n */\nimport global from './global';\nimport Rect from './rect';\nimport getPositionedAncestor from './getpositionedancestor';\nimport getBorderWidths from './getborderwidths';\nimport { isFunction } from 'lodash-es';\n/**\n * Calculates the `position: absolute` coordinates of a given element so it can be positioned with respect to the\n * target in the visually most efficient way, taking various restrictions like viewport or limiter geometry\n * into consideration.\n *\n *\t\t// The element which is to be positioned.\n *\t\tconst element = document.body.querySelector( '#toolbar' );\n *\n *\t\t// A target to which the element is positioned relatively.\n *\t\tconst target = document.body.querySelector( '#container' );\n *\n *\t\t// Finding the optimal coordinates for the positioning.\n *\t\tconst { left, top, name } = getOptimalPosition( {\n *\t\t\telement: element,\n *\t\t\ttarget: target,\n *\n * \t\t\t// The algorithm will chose among these positions to meet the requirements such\n * \t\t\t// as \"limiter\" element or \"fitInViewport\", set below. The positions are considered\n * \t\t\t// in the order of the array.\n *\t\t\tpositions: [\n *\t\t\t\t//\n *\t\t\t \t//\t[ Target ]\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\n *\t\t\t\ttargetRect => ( {\n *\t\t\t\t\ttop: targetRect.bottom,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'mySouthEastPosition'\n *\t\t\t\t} ),\n *\n *\t\t\t\t//\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t|     Element     |\n *\t\t\t\t//\t+-----------------+\n *\t\t\t\t//\t[ Target ]\n *\t\t\t\t//\n *\t\t\t\t( targetRect, elementRect ) => ( {\n *\t\t\t\t\ttop: targetRect.top - elementRect.height,\n *\t\t\t\t\tleft: targetRect.left,\n *\t\t\t\t\tname: 'myNorthEastPosition'\n *\t\t\t\t} )\n *\t\t\t],\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of <body>.\n *\t\t\tlimiter: document.body,\n *\n *\t\t\t// Find a position such guarantees the element remains within visible boundaries of the browser viewport.\n *\t\t\tfitInViewport: true\n *\t\t} );\n *\n *\t\t// The best position which fits into document.body and the viewport. May be useful\n *\t\t// to set proper class on the `element`.\n *\t\tconsole.log( name ); // -> \"myNorthEastPosition\"\n *\n *\t\t// Using the absolute coordinates which has been found to position the element\n *\t\t// as in the diagram depicting the \"myNorthEastPosition\" position.\n *\t\telement.style.top = top;\n *\t\telement.style.left = left;\n *\n * @param {module:utils/dom/position~Options} options Positioning options object.\n * @returns {module:utils/dom/position~Position}\n */\n\nexport function getOptimalPosition({\n  element,\n  target,\n  positions,\n  limiter,\n  fitInViewport\n}) {\n  // If the {@link module:utils/dom/position~Options#target} is a function, use what it returns.\n  // https://github.com/ckeditor/ckeditor5-utils/issues/157\n  if (isFunction(target)) {\n    target = target();\n  } // If the {@link module:utils/dom/position~Options#limiter} is a function, use what it returns.\n  // https://github.com/ckeditor/ckeditor5-ui/issues/260\n\n\n  if (isFunction(limiter)) {\n    limiter = limiter();\n  }\n\n  const positionedElementAncestor = getPositionedAncestor(element.parentElement);\n  const elementRect = new Rect(element);\n  const targetRect = new Rect(target);\n  let bestPosition;\n  let name; // If there are no limits, just grab the very first position and be done with that drama.\n\n  if (!limiter && !fitInViewport) {\n    [name, bestPosition] = getPosition(positions[0], targetRect, elementRect);\n  } else {\n    const limiterRect = limiter && new Rect(limiter).getVisible();\n    const viewportRect = fitInViewport && new Rect(global.window);\n    [name, bestPosition] = getBestPosition(positions, targetRect, elementRect, limiterRect, viewportRect) || // If there's no best position found, i.e. when all intersections have no area because\n    // rects have no width or height, then just use the first available position.\n    getPosition(positions[0], targetRect, elementRect);\n  }\n\n  let {\n    left,\n    top\n  } = getAbsoluteRectCoordinates(bestPosition);\n\n  if (positionedElementAncestor) {\n    const ancestorPosition = getAbsoluteRectCoordinates(new Rect(positionedElementAncestor));\n    const ancestorBorderWidths = getBorderWidths(positionedElementAncestor); // (https://github.com/ckeditor/ckeditor5-ui-default/issues/126)\n    // If there's some positioned ancestor of the panel, then its `Rect` must be taken into\n    // consideration. `Rect` is always relative to the viewport while `position: absolute` works\n    // with respect to that positioned ancestor.\n\n    left -= ancestorPosition.left;\n    top -= ancestorPosition.top; // (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n    // If there's some positioned ancestor of the panel, not only its position must be taken into\n    // consideration (see above) but also its internal scrolls. Scroll have an impact here because `Rect`\n    // is relative to the viewport (it doesn't care about scrolling), while `position: absolute`\n    // must compensate that scrolling.\n\n    left += positionedElementAncestor.scrollLeft;\n    top += positionedElementAncestor.scrollTop; // (https://github.com/ckeditor/ckeditor5-utils/issues/139)\n    // If there's some positioned ancestor of the panel, then its `Rect` includes its CSS `borderWidth`\n    // while `position: absolute` positioning does not consider it.\n    // E.g. `{ position: absolute, top: 0, left: 0 }` means upper left corner of the element,\n    // not upper-left corner of its border.\n\n    left -= ancestorBorderWidths.left;\n    top -= ancestorBorderWidths.top;\n  }\n\n  return {\n    left,\n    top,\n    name\n  };\n} // For given position function, returns a corresponding `Rect` instance.\n//\n// @private\n// @param {Function} position A function returning {@link module:utils/dom/position~Position}.\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned element.\n// @returns {Array} An array containing position name and its Rect.\n\nfunction getPosition(position, targetRect, elementRect) {\n  const {\n    left,\n    top,\n    name\n  } = position(targetRect, elementRect);\n  return [name, elementRect.clone().moveTo(left, top)];\n} // For a given array of positioning functions, returns such that provides the best\n// fit of the `elementRect` into the `limiterRect` and `viewportRect`.\n//\n// @private\n// @param {module:utils/dom/position~Options#positions} positions Functions returning\n// {@link module:utils/dom/position~Position} to be checked, in the order of preference.\n// @param {utils/dom/rect~Rect} targetRect A rect of the {@link module:utils/dom/position~Options#target}.\n// @param {utils/dom/rect~Rect} elementRect A rect of positioned {@link module:utils/dom/position~Options#element}.\n// @param {utils/dom/rect~Rect} limiterRect A rect of the {@link module:utils/dom/position~Options#limiter}.\n// @param {utils/dom/rect~Rect} viewportRect A rect of the viewport.\n// @returns {Array} An array containing the name of the position and it's rect.\n\n\nfunction getBestPosition(positions, targetRect, elementRect, limiterRect, viewportRect) {\n  let maxLimiterIntersectArea = 0;\n  let maxViewportIntersectArea = 0;\n  let bestPositionRect;\n  let bestPositionName; // This is when element is fully visible.\n\n  const elementRectArea = elementRect.getArea();\n  positions.some(position => {\n    const [positionName, positionRect] = getPosition(position, targetRect, elementRect);\n    let limiterIntersectArea;\n    let viewportIntersectArea;\n\n    if (limiterRect) {\n      if (viewportRect) {\n        // Consider only the part of the limiter which is visible in the viewport. So the limiter is getting limited.\n        const limiterViewportIntersectRect = limiterRect.getIntersection(viewportRect);\n\n        if (limiterViewportIntersectRect) {\n          // If the limiter is within the viewport, then check the intersection between that part of the\n          // limiter and actual position.\n          limiterIntersectArea = limiterViewportIntersectRect.getIntersectionArea(positionRect);\n        } else {\n          limiterIntersectArea = 0;\n        }\n      } else {\n        limiterIntersectArea = limiterRect.getIntersectionArea(positionRect);\n      }\n    }\n\n    if (viewportRect) {\n      viewportIntersectArea = viewportRect.getIntersectionArea(positionRect);\n    } // The only criterion: intersection with the viewport.\n\n\n    if (viewportRect && !limiterRect) {\n      if (viewportIntersectArea > maxViewportIntersectArea) {\n        setBestPosition();\n      }\n    } // The only criterion: intersection with the limiter.\n    else if (!viewportRect && limiterRect) {\n        if (limiterIntersectArea > maxLimiterIntersectArea) {\n          setBestPosition();\n        }\n      } // Two criteria: intersection with the viewport and the limiter visible in the viewport.\n      else {\n          if (viewportIntersectArea > maxViewportIntersectArea && limiterIntersectArea >= maxLimiterIntersectArea) {\n            setBestPosition();\n          } else if (viewportIntersectArea >= maxViewportIntersectArea && limiterIntersectArea > maxLimiterIntersectArea) {\n            setBestPosition();\n          }\n        }\n\n    function setBestPosition() {\n      maxViewportIntersectArea = viewportIntersectArea;\n      maxLimiterIntersectArea = limiterIntersectArea;\n      bestPositionRect = positionRect;\n      bestPositionName = positionName;\n    } // If a such position is found that element is fully container by the limiter then, obviously,\n    // there will be no better one, so finishing.\n\n\n    return limiterIntersectArea === elementRectArea;\n  });\n  return bestPositionRect ? [bestPositionName, bestPositionRect] : null;\n} // DOMRect (also Rect) works in a scroll–independent geometry but `position: absolute` doesn't.\n// This function converts Rect to `position: absolute` coordinates.\n//\n// @private\n// @param {utils/dom/rect~Rect} rect A rect to be converted.\n// @returns {Object} Object containing `left` and `top` properties, in absolute coordinates.\n\n\nfunction getAbsoluteRectCoordinates({\n  left,\n  top\n}) {\n  const {\n    scrollX,\n    scrollY\n  } = global.window;\n  return {\n    left: left + scrollX,\n    top: top + scrollY\n  };\n}\n/**\n * The `getOptimalPosition` helper options.\n *\n * @interface module:utils/dom/position~Options\n */\n\n/**\n * Element that is to be positioned.\n *\n * @member {HTMLElement} #element\n */\n\n/**\n * Target with respect to which the `element` is to be positioned.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #target\n */\n\n/**\n * An array of functions which return {@link module:utils/dom/position~Position} relative\n * to the `target`, in the order of preference.\n *\n * @member {Array.<Function>} #positions\n */\n\n/**\n * When set, the algorithm will chose position which fits the most in the\n * limiter's bounding rect.\n *\n * @member {HTMLElement|Range|ClientRect|Rect|Function} #limiter\n */\n\n/**\n * When set, the algorithm will chose such a position which fits `element`\n * the most inside visible viewport.\n *\n * @member {Boolean} #fitInViewport\n */\n\n/**\n * An object describing a position in `position: absolute` coordinate\n * system, along with position name.\n *\n * @typedef {Object} module:utils/dom/position~Position\n *\n * @property {Number} top Top position offset.\n * @property {Number} left Left position offset.\n * @property {String} name Name of the position.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/getpositionedancestor\n */\nimport global from './global';\n/**\n * For a given element, returns the nearest ancestor element which CSS position is not \"static\".\n *\n * @param {HTMLElement} element The native DOM element to be checked.\n * @returns {HTMLElement|null}\n */\n\nexport default function getPositionedAncestor(element) {\n  while (element && element.tagName.toLowerCase() != 'html') {\n    if (global.window.getComputedStyle(element).position != 'static') {\n      return element;\n    }\n\n    element = element.parentElement;\n  }\n\n  return null;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/dropdownview\n */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/dropdown/dropdown.css';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\n/**\n * The dropdown view class. It manages the dropdown button and dropdown panel.\n *\n * In most cases, the easiest way to create a dropdown is by using the {@link module:ui/dropdown/utils~createDropdown}\n * util:\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * If you want to add a richer content to the dropdown panel, you can use the {@link module:ui/dropdown/utils~addListToDropdown}\n * and {@link module:ui/dropdown/utils~addToolbarToDropdown} helpers. See more examples in\n * {@link module:ui/dropdown/utils~createDropdown} documentation.\n *\n * If you want to create a completely custom dropdown, then you can compose it manually:\n *\n *\t\tconst button = new DropdownButtonView( locale );\n *\t\tconst panel = new DropdownPanelView( locale );\n *\t\tconst dropdown = new DropdownView( locale, button, panel );\n *\n *\t\tbutton.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\tpanel.element.textContent = 'Content of the panel';\n *\n *\t\t// Will render a dropdown with a panel containing a \"Content of the panel\" text.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * However, dropdown created this way will contain little behavior. You will need to implement handlers for actions\n * such as {@link module:ui/bindings/clickoutsidehandler~clickOutsideHandler clicking outside an open dropdown}\n * (which should close it) and support for arrow keys inside the panel. Therefore, unless you really know what\n * you do and you really need to do it, it is recommended to use the {@link module:ui/dropdown/utils~createDropdown} helper.\n *\n * @extends module:ui/view~View\n */\n\nexport default class DropdownView extends View {\n  /**\n   * Creates an instance of the dropdown.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {module:ui/dropdown/button/dropdownbutton~DropdownButton} buttonView\n   * @param {module:ui/dropdown/dropdownpanelview~DropdownPanelView} panelView\n   */\n  constructor(locale, buttonView, panelView) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * Button of the dropdown view. Clicking the button opens the {@link #panelView}.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView} #buttonView\n     */\n\n    this.buttonView = buttonView;\n    /**\n     * Panel of the dropdown. It opens when the {@link #buttonView} is\n     * {@link module:ui/button/buttonview~ButtonView#event:execute executed} (i.e. clicked).\n     *\n     * Child views can be added to the panel's `children` collection:\n     *\n     *\t\tdropdown.panelView.children.add( childView );\n     *\n     * See {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#children} and\n     * {@link module:ui/viewcollection~ViewCollection#add}.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownpanelview~DropdownPanelView} #panelView\n     */\n\n    this.panelView = panelView;\n    /**\n     * Controls whether the dropdown view is open, i.e. shows or hides the {@link #panelView panel}.\n     *\n     * @observable\n     * @member {Boolean} #isOpen\n     */\n\n    this.set('isOpen', false);\n    /**\n     * Controls whether the dropdown is enabled, i.e. it can be clicked and execute an action.\n     *\n     * See {@link module:ui/button/buttonview~ButtonView#isEnabled}.\n     *\n     * @observable\n     * @member {Boolean} #isEnabled\n     */\n\n    this.set('isEnabled', true);\n    /**\n     * (Optional) The additional CSS class set on the dropdown {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n    this.set('class');\n    /**\n     * The position of the panel, relative to the dropdown.\n     *\n     * **Note**: When `'auto'`, the panel will use one of the remaining positions to stay\n     * in the viewport, visible to the user. The positions correspond directly to\n     * {@link module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions default panel positions}.\n     *\n     * **Note**: This value has an impact on the\n     * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView#position} property\n     * each time the panel becomes {@link #isOpen open}.\n     *\n     * @observable\n     * @default 'auto'\n     * @member {'auto'|'se'|'sw'|'ne'|'nw'} #panelPosition\n     */\n\n    this.set('panelPosition', 'auto');\n    /**\n     * Tracks information about DOM focus in the dropdown.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n     * keystrokes of the dropdown:\n     *\n     * * <kbd>▼</kbd> opens the dropdown,\n     * * <kbd>◀</kbd> and <kbd>Esc</kbd> closes the dropdown.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-dropdown', bind.to('class'), bind.if('isEnabled', 'ck-disabled', value => !value)]\n      },\n      children: [buttonView, panelView]\n    });\n    buttonView.extendTemplate({\n      attributes: {\n        class: ['ck-dropdown__button']\n      }\n    });\n    /**\n     * A child {@link module:ui/list/listview~ListView list view} of the dropdown located\n     * in its {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n     *\n     * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}.\n     *\n     * @readonly\n     * @member {module:ui/list/listview~ListView} #listView\n     */\n\n    /**\n     * A child toolbar of the dropdown located in the\n     * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel}.\n     *\n     * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarView} #toolbarView\n     */\n\n    /**\n     * Fired when the toolbar button or list item is executed.\n     *\n     * For {@link #listView} It fires when a child of some {@link module:ui/list/listitemview~ListItemView}\n     * fired `execute`.\n     *\n     * For {@link #toolbarView} It fires when one of the buttons has been\n     * {@link module:ui/button/buttonview~ButtonView#event:execute executed}.\n     *\n     * **Note**: Only supported when dropdown has list view added using {@link module:ui/dropdown/utils~addListToDropdown}\n     * or {@link module:ui/dropdown/utils~addToolbarToDropdown}.\n     *\n     * @event execute\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Toggle the dropdown when its button has been clicked.\n\n    this.listenTo(this.buttonView, 'open', () => {\n      this.isOpen = !this.isOpen;\n    }); // Toggle the visibility of the panel when the dropdown becomes open.\n\n    this.panelView.bind('isVisible').to(this, 'isOpen'); // Let the dropdown control the position of the panel. The position must\n    // be updated every time the dropdown is open.\n\n    this.on('change:isOpen', () => {\n      if (!this.isOpen) {\n        return;\n      } // If \"auto\", find the best position of the panel to fit into the viewport.\n      // Otherwise, simply assign the static position.\n\n\n      if (this.panelPosition === 'auto') {\n        this.panelView.position = DropdownView._getOptimalPosition({\n          element: this.panelView.element,\n          target: this.buttonView.element,\n          fitInViewport: true,\n          positions: this._panelPositions\n        }).name;\n      } else {\n        this.panelView.position = this.panelPosition;\n      }\n    }); // Listen for keystrokes coming from within #element.\n\n    this.keystrokes.listenTo(this.element); // Register #element in the focus tracker.\n\n    this.focusTracker.add(this.element);\n\n    const closeDropdown = (data, cancel) => {\n      if (this.isOpen) {\n        this.buttonView.focus();\n        this.isOpen = false;\n        cancel();\n      }\n    }; // Open the dropdown panel using the arrow down key, just like with return or space.\n\n\n    this.keystrokes.set('arrowdown', (data, cancel) => {\n      // Don't open if the dropdown is disabled or already open.\n      if (this.buttonView.isEnabled && !this.isOpen) {\n        this.isOpen = true;\n        cancel();\n      }\n    }); // Block the right arrow key (until nested dropdowns are implemented).\n\n    this.keystrokes.set('arrowright', (data, cancel) => {\n      if (this.isOpen) {\n        cancel();\n      }\n    }); // Close the dropdown using the arrow left/escape key.\n\n    this.keystrokes.set('arrowleft', closeDropdown);\n    this.keystrokes.set('esc', closeDropdown);\n  }\n  /**\n   * Focuses the {@link #buttonView}.\n   */\n\n\n  focus() {\n    this.buttonView.focus();\n  }\n  /**\n   * Returns {@link #panelView panel} positions to be used by the\n   * {@link module:utils/dom/position~getOptimalPosition `getOptimalPosition()`}\n   * utility considering the direction of the language the UI of the editor is displayed in.\n   *\n   * @type {module:utils/dom/position~Options#positions}\n   * @private\n   */\n\n\n  get _panelPositions() {\n    const {\n      southEast,\n      southWest,\n      northEast,\n      northWest\n    } = DropdownView.defaultPanelPositions;\n\n    if (this.locale.uiLanguageDirection === 'ltr') {\n      return [southEast, southWest, northEast, northWest];\n    } else {\n      return [southWest, southEast, northWest, northEast];\n    }\n  }\n\n}\n/**\n * A set of positioning functions used by the dropdown view to determine\n * the optimal position (i.e. fitting into the browser viewport) of its\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelView panel} when\n * {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition} is set to 'auto'`.\n *\n * The available positioning functions are as follow:\n *\n * **South**\n *\n * * `southEast`\n *\n *\t\t[ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * * `southWest`\n *\n *\t\t         [ Button ]\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\n * **North**\n *\n * * `northEast`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t[ Button ]\n *\n * * `northWest`\n *\n *\t\t+-----------------+\n *\t\t|      Panel      |\n *\t\t+-----------------+\n *\t\t         [ Button ]\n *\n * Positioning functions are compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that position function returns will be reflected in dropdown panel's class that\n * controls its placement. See {@link module:ui/dropdown/dropdownview~DropdownView#panelPosition}\n * to learn more.\n *\n * @member {Object} module:ui/dropdown/dropdownview~DropdownView.defaultPanelPositions\n */\n\nDropdownView.defaultPanelPositions = {\n  southEast: buttonRect => {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left,\n      name: 'se'\n    };\n  },\n  southWest: (buttonRect, panelRect) => {\n    return {\n      top: buttonRect.bottom,\n      left: buttonRect.left - panelRect.width + buttonRect.width,\n      name: 'sw'\n    };\n  },\n  northEast: (buttonRect, panelRect) => {\n    return {\n      top: buttonRect.top - panelRect.height,\n      left: buttonRect.left,\n      name: 'ne'\n    };\n  },\n  northWest: (buttonRect, panelRect) => {\n    return {\n      top: buttonRect.bottom - panelRect.height,\n      left: buttonRect.left - panelRect.width + buttonRect.width,\n      name: 'nw'\n    };\n  }\n};\n/**\n * A function used to calculate the optimal position for the dropdown panel.\n *\n * @protected\n * @member {Function} module:ui/dropdown/dropdownview~DropdownView._getOptimalPosition\n */\n\nDropdownView._getOptimalPosition = getOptimalPosition;","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* global DOMParser */\n\n/**\n * @module ui/icon/iconview\n */\nimport View from '../view';\nimport '../../theme/components/icon/icon.css';\n/**\n * The icon view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class IconView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    super();\n    const bind = this.bindTemplate;\n    /**\n     * The SVG source of the icon.\n     *\n     * @observable\n     * @member {String} #content\n     */\n\n    this.set('content', '');\n    /**\n     * This attribute specifies the boundaries to which the\n     * icon content should stretch.\n     *\n     * @observable\n     * @default '0 0 20 20'\n     * @member {String} #viewBox\n     */\n\n    this.set('viewBox', '0 0 20 20');\n    /**\n     * The fill color of the child `path.ck-icon__fill`.\n     *\n     * @observable\n     * @default ''\n     * @member {String} #fillColor\n     */\n\n    this.set('fillColor', '');\n    this.setTemplate({\n      tag: 'svg',\n      ns: 'http://www.w3.org/2000/svg',\n      attributes: {\n        class: ['ck', 'ck-icon'],\n        viewBox: bind.to('viewBox')\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    this._updateXMLContent();\n\n    this._colorFillPaths(); // This is a hack for lack of innerHTML binding.\n    // See: https://github.com/ckeditor/ckeditor5-ui/issues/99.\n\n\n    this.on('change:content', () => {\n      this._updateXMLContent();\n\n      this._colorFillPaths();\n    });\n    this.on('change:fillColor', () => {\n      this._colorFillPaths();\n    });\n  }\n  /**\n   * Updates the {@link #element} with the value of {@link #content}.\n   *\n   * @private\n   */\n\n\n  _updateXMLContent() {\n    if (this.content) {\n      const parsed = new DOMParser().parseFromString(this.content.trim(), 'image/svg+xml');\n      const svg = parsed.querySelector('svg');\n      const viewBox = svg.getAttribute('viewBox');\n\n      if (viewBox) {\n        this.viewBox = viewBox;\n      }\n\n      this.element.innerHTML = '';\n\n      while (svg.childNodes.length > 0) {\n        this.element.appendChild(svg.childNodes[0]);\n      }\n    }\n  }\n  /**\n   * Fills all child `path.ck-icon__fill` with the `#fillColor`.\n   *\n   * @private\n   */\n\n\n  _colorFillPaths() {\n    if (this.fillColor) {\n      this.element.querySelectorAll('.ck-icon__fill').forEach(path => {\n        path.style.fill = this.fillColor;\n      });\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/tooltip/tooltipview\n */\nimport View from '../view';\nimport '../../theme/components/tooltip/tooltip.css';\n/**\n * The tooltip view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class TooltipView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * The text of the tooltip visible to the user.\n     *\n     * @observable\n     * @member {String} #text\n     */\n\n    this.set('text', '');\n    /**\n     * The position of the tooltip (south or north).\n     *\n     *\t\t+-----------+\n     *\t\t|   north   |\n     *\t\t+-----------+\n     *\t\t      V\n     *\t\t  [element]\n     *\n     *\t\t  [element]\n     *\t\t      ^\n     *\t\t+-----------+\n     *\t\t|   south   |\n     *\t\t+-----------+\n     *\n     * @observable\n     * @default 's'\n     * @member {'s'|'n'} #position\n     */\n\n    this.set('position', 's');\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-tooltip', bind.to('position', position => 'ck-tooltip_' + position), bind.if('text', 'ck-hidden', value => !value.trim())]\n      },\n      children: [{\n        tag: 'span',\n        attributes: {\n          class: ['ck', 'ck-tooltip__text']\n        },\n        children: [{\n          text: bind.to('text')\n        }]\n      }]\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/buttonview\n */\nimport View from '../view';\nimport IconView from '../icon/iconview';\nimport TooltipView from '../tooltip/tooltipview';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport { getEnvKeystrokeText } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport '../../theme/components/button/button.css';\n/**\n * The button view class.\n *\n *\t\tconst view = new ButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true,\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/view~View\n * @implements module:ui/button/button~Button\n */\n\nexport default class ButtonView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    const ariaLabelUid = uid(); // Implement the Button interface.\n\n    this.set('class');\n    this.set('labelStyle');\n    this.set('icon');\n    this.set('isEnabled', true);\n    this.set('isOn', false);\n    this.set('isVisible', true);\n    this.set('isToggleable', false);\n    this.set('keystroke');\n    this.set('label');\n    this.set('tabindex', -1);\n    this.set('tooltip');\n    this.set('tooltipPosition', 's');\n    this.set('type', 'button');\n    this.set('withText', false);\n    /**\n     * Collection of the child views inside of the button {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    /**\n     * Tooltip of the button view. It is configurable using the {@link #tooltip tooltip attribute}.\n     *\n     * @readonly\n     * @member {module:ui/tooltip/tooltipview~TooltipView} #tooltipView\n     */\n\n    this.tooltipView = this._createTooltipView();\n    /**\n     * Label of the button view. It is configurable using the {@link #label label attribute}.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #labelView\n     */\n\n    this.labelView = this._createLabelView(ariaLabelUid);\n    /**\n     * The icon view of the button. Will be added to {@link #children} when the\n     * {@link #icon icon attribute} is defined.\n     *\n     * @readonly\n     * @member {module:ui/icon/iconview~IconView} #iconView\n     */\n\n    this.iconView = new IconView();\n    this.iconView.extendTemplate({\n      attributes: {\n        class: 'ck-button__icon'\n      }\n    });\n    /**\n     * Tooltip of the button bound to the template.\n     *\n     * @see #tooltip\n     * @see #_getTooltipString\n     * @private\n     * @observable\n     * @member {Boolean} #_tooltipString\n     */\n\n    this.bind('_tooltipString').to(this, 'tooltip', this, 'label', this, 'keystroke', this._getTooltipString.bind(this));\n    this.setTemplate({\n      tag: 'button',\n      attributes: {\n        class: ['ck', 'ck-button', bind.to('class'), bind.if('isEnabled', 'ck-disabled', value => !value), bind.if('isVisible', 'ck-hidden', value => !value), bind.to('isOn', value => value ? 'ck-on' : 'ck-off'), bind.if('withText', 'ck-button_with-text')],\n        type: bind.to('type', value => value ? value : 'button'),\n        tabindex: bind.to('tabindex'),\n        'aria-labelledby': `ck-editor__aria-label_${ariaLabelUid}`,\n        'aria-disabled': bind.if('isEnabled', true, value => !value),\n        'aria-pressed': bind.to('isOn', value => this.isToggleable ? String(value) : false)\n      },\n      children: this.children,\n      on: {\n        mousedown: bind.to(evt => {\n          evt.preventDefault();\n        }),\n        click: bind.to(evt => {\n          // We can't make the button disabled using the disabled attribute, because it won't be focusable.\n          // Though, shouldn't this condition be moved to the button controller?\n          if (this.isEnabled) {\n            this.fire('execute');\n          } else {\n            // Prevent the default when button is disabled, to block e.g.\n            // automatic form submitting. See ckeditor/ckeditor5-link#74.\n            evt.preventDefault();\n          }\n        })\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    if (this.icon) {\n      this.iconView.bind('content').to(this, 'icon');\n      this.children.add(this.iconView);\n    }\n\n    this.children.add(this.tooltipView);\n    this.children.add(this.labelView);\n  }\n  /**\n   * Focuses the {@link #element} of the button.\n   */\n\n\n  focus() {\n    this.element.focus();\n  }\n  /**\n   * Creates a {@link module:ui/tooltip/tooltipview~TooltipView} instance and binds it with button\n   * attributes.\n   *\n   * @private\n   * @returns {module:ui/tooltip/tooltipview~TooltipView}\n   */\n\n\n  _createTooltipView() {\n    const tooltipView = new TooltipView();\n    tooltipView.bind('text').to(this, '_tooltipString');\n    tooltipView.bind('position').to(this, 'tooltipPosition');\n    return tooltipView;\n  }\n  /**\n   * Creates a label view instance and binds it with button attributes.\n   *\n   * @private\n   * @param {String} ariaLabelUid The aria label UID.\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createLabelView(ariaLabelUid) {\n    const labelView = new View();\n    const bind = this.bindTemplate;\n    labelView.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-button__label'],\n        style: bind.to('labelStyle'),\n        id: `ck-editor__aria-label_${ariaLabelUid}`\n      },\n      children: [{\n        text: this.bindTemplate.to('label')\n      }]\n    });\n    return labelView;\n  }\n  /**\n   * Gets the text for the {@link #tooltipView} from the combination of\n   * {@link #tooltip}, {@link #label} and {@link #keystroke} attributes.\n   *\n   * @private\n   * @see #tooltip\n   * @see #_tooltipString\n   * @param {Boolean|String|Function} tooltip Button tooltip.\n   * @param {String} label Button label.\n   * @param {String} keystroke Button keystroke.\n   * @returns {String}\n   */\n\n\n  _getTooltipString(tooltip, label, keystroke) {\n    if (tooltip) {\n      if (typeof tooltip == 'string') {\n        return tooltip;\n      } else {\n        if (keystroke) {\n          keystroke = getEnvKeystrokeText(keystroke);\n        }\n\n        if (tooltip instanceof Function) {\n          return tooltip(label, keystroke);\n        } else {\n          return `${label}${keystroke ? ` (${keystroke})` : ''}`;\n        }\n      }\n    }\n\n    return '';\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 10 10\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/dropdownbuttonview\n */\nimport ButtonView from '../../button/buttonview';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport IconView from '../../icon/iconview';\n/**\n * The default dropdown button view class.\n *\n *\t\tconst view = new DropdownButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/button/buttonview~ButtonView\n */\n\nexport default class DropdownButtonView extends ButtonView {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * An icon that displays arrow to indicate a dropdown button.\n     *\n     * @readonly\n     * @member {module:ui/icon/iconview~IconView}\n     */\n\n    this.arrowView = this._createArrowView();\n    this.extendTemplate({\n      attributes: {\n        'aria-haspopup': true\n      }\n    }); // The DropdownButton interface expects the open event upon which will open the dropdown.\n\n    this.delegate('execute').to(this, 'open');\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.children.add(this.arrowView);\n  }\n  /**\n   * Creates a {@link module:ui/icon/iconview~IconView} instance as {@link #arrowView}.\n   *\n   * @private\n   * @returns {module:ui/icon/iconview~IconView}\n   */\n\n\n  _createArrowView() {\n    const arrowView = new IconView();\n    arrowView.content = dropdownArrowIcon;\n    arrowView.extendTemplate({\n      attributes: {\n        class: 'ck-dropdown__arrow'\n      }\n    });\n    return arrowView;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listview\n */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/list/list.css';\n/**\n * The list view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\n\nexport default class ListView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor() {\n    super();\n    /**\n     * Collection of the child list views.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * Tracks information about DOM focus in the list.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Helps cycling over focusable {@link #items} in the list.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.items,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate list items backwards using the arrowup key.\n        focusPrevious: 'arrowup',\n        // Navigate toolbar items forwards using the arrowdown key.\n        focusNext: 'arrowdown'\n      }\n    });\n    this.setTemplate({\n      tag: 'ul',\n      attributes: {\n        class: ['ck', 'ck-reset', 'ck-list']\n      },\n      children: this.items\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Items added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * Focuses the first focusable in {@link #items}.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Focuses the last focusable in {@link #items}.\n   */\n\n\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listitemview\n */\nimport View from '../view';\n/**\n * The list item view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ListItemView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * Collection of the child views inside of the list item {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    this.setTemplate({\n      tag: 'li',\n      attributes: {\n        class: ['ck', 'ck-list__item']\n      },\n      children: this.children\n    });\n  }\n  /**\n   * Focuses the list item.\n   */\n\n\n  focus() {\n    this.children.first.focus();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/list/listseparatorview\n */\nimport View from '../view';\n/**\n * The list separator view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ListSeparatorView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    this.setTemplate({\n      tag: 'li',\n      attributes: {\n        class: ['ck', 'ck-list__separator']\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/button/switchbuttonview\n */\nimport View from '../view';\nimport ButtonView from './buttonview';\nimport '../../theme/components/button/switchbutton.css';\n/**\n * The switch button view class.\n *\n *\t\tconst view = new SwitchButtonView();\n *\n *\t\tview.set( {\n *\t\t\twithText: true,\n *\t\t\tlabel: 'Switch me!'\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * @extends module:ui/button/buttonview~ButtonView\n */\n\nexport default class SwitchButtonView extends ButtonView {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    this.isToggleable = true;\n    /**\n     * The toggle switch of the button.\n     *\n     * @readonly\n     * @member {module:ui/view~View} #toggleSwitchView\n     */\n\n    this.toggleSwitchView = this._createToggleView();\n    this.extendTemplate({\n      attributes: {\n        class: 'ck-switchbutton'\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.children.add(this.toggleSwitchView);\n  }\n  /**\n   * Creates a toggle child view.\n   *\n   * @private\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createToggleView() {\n    const toggleSwitchView = new View();\n    toggleSwitchView.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: ['ck', 'ck-button__toggle']\n      },\n      children: [{\n        tag: 'span',\n        attributes: {\n          class: ['ck', 'ck-button__toggle__inner']\n        }\n      }]\n    });\n    return toggleSwitchView;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/clickoutsidehandler\n */\n\n/* global document */\n\n/**\n * Handles clicking **outside** of a specified set of elements, then fires an action.\n *\n * **Note**: Actually, the action is executed upon `mousedown`, not `click`. It prevents\n * certain issues when the user keeps holding the mouse button and the UI cannot react\n * properly.\n *\n * @param {Object} options Configuration options.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior\n * should be added.\n * @param {Function} options.activator Function returning a `Boolean`, to determine whether the handler is active.\n * @param {Array.<HTMLElement>} options.contextElements HTML elements that determine the scope of the\n * handler. Clicking any of them or their descendants will **not** fire the callback.\n * @param {Function} options.callback An action executed by the handler.\n */\nexport default function clickOutsideHandler({\n  emitter,\n  activator,\n  callback,\n  contextElements\n}) {\n  emitter.listenTo(document, 'mousedown', (evt, {\n    target\n  }) => {\n    if (!activator()) {\n      return;\n    }\n\n    for (const contextElement of contextElements) {\n      if (contextElement.contains(target)) {\n        return;\n      }\n    }\n\n    callback();\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/dropdown/utils\n */\nimport DropdownPanelView from './dropdownpanelview';\nimport DropdownView from './dropdownview';\nimport DropdownButtonView from './button/dropdownbuttonview';\nimport ToolbarView from '../toolbar/toolbarview';\nimport ListView from '../list/listview';\nimport ListItemView from '../list/listitemview';\nimport ListSeparatorView from '../list/listseparatorview';\nimport ButtonView from '../button/buttonview';\nimport SwitchButtonView from '../button/switchbuttonview';\nimport clickOutsideHandler from '../bindings/clickoutsidehandler';\nimport '../../theme/components/dropdown/toolbardropdown.css';\nimport '../../theme/components/dropdown/listdropdown.css';\n/**\n * A helper for creating dropdowns. It creates an instance of a {@link module:ui/dropdown/dropdownview~DropdownView dropdown},\n * with a {@link module:ui/dropdown/button/dropdownbutton~DropdownButton button},\n * {@link module:ui/dropdown/dropdownpanelview~DropdownPanelView panel} and all standard dropdown's behaviors.\n *\n * # Creating dropdowns\n *\n * By default, the default {@link module:ui/dropdown/button/dropdownbuttonview~DropdownButtonView} class is used as\n * definition of the button:\n *\n *\t\tconst dropdown = createDropdown( model );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * You can also provide other button views (they need to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface). For instance, you can use\n * {@link module:ui/dropdown/button/splitbuttonview~SplitButtonView} to create a dropdown with a split button.\n *\n *\t\tconst dropdown = createDropdown( model, SplitButtonView );\n *\n *\t\t// Configure dropdown's button properties:\n *\t\tdropdown.buttonView.set( {\n *\t\t\tlabel: 'A dropdown',\n *\t\t\twithText: true\n *\t\t} );\n *\n *\t\tdropdown.buttonView.on( 'execute', () => {\n *\t\t\t// Add the behavior of the \"action part\" of the split button.\n *\t\t\t// Split button consists of the \"action part\" and \"arrow part\".\n *\t\t\t// The arrow opens the dropdown while the action part can have some other behavior.\n * \t\t} );\n *\n *\t\tdropdown.render();\n *\n *\t\t// Will render a dropdown labeled \"A dropdown\" with an empty panel.\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * # Adding content to the dropdown's panel\n *\n * The content of the panel can be inserted directly into the `dropdown.panelView.element`:\n *\n *\t\tdropdown.panelView.element.textContent = 'Content of the panel';\n *\n * However, most of the time you will want to add there either a {@link module:ui/list/listview~ListView list of options}\n * or a list of buttons (i.e. a {@link module:ui/toolbar/toolbarview~ToolbarView toolbar}).\n * To simplify the task, you can use, respectively, {@link module:ui/dropdown/utils~addListToDropdown} or\n * {@link module:ui/dropdown/utils~addToolbarToDropdown} utils.\n *\n * @param {module:utils/locale~Locale} locale The locale instance.\n * @param {Function} ButtonClass The dropdown button view class. Needs to implement the\n * {@link module:ui/dropdown/button/dropdownbutton~DropdownButton} interface.\n * @returns {module:ui/dropdown/dropdownview~DropdownView} The dropdown view instance.\n */\nexport function createDropdown(locale, ButtonClass = DropdownButtonView) {\n    const buttonView = new ButtonClass(locale);\n    const panelView = new DropdownPanelView(locale);\n    const dropdownView = new DropdownView(locale, buttonView, panelView);\n    buttonView.bind('isEnabled').to(dropdownView);\n    if (buttonView instanceof DropdownButtonView) {\n        buttonView.bind('isOn').to(dropdownView, 'isOpen');\n    } else {\n        buttonView.arrowView.bind('isOn').to(dropdownView, 'isOpen');\n    }\n    addDefaultBehavior(dropdownView);\n    return dropdownView;\n}\n/**\n * Adds an instance of {@link module:ui/toolbar/toolbarview~ToolbarView} to a dropdown.\n *\n *\t\tconst buttons = [];\n *\n *\t\t// Either create a new ButtonView instance or create existing.\n *\t\tbuttons.push( new ButtonView() );\n *\t\tbuttons.push( editor.ui.componentFactory.get( 'someButton' ) );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddToolbarToDropdown( dropdown, buttons );\n *\n *\t\tdropdown.toolbarView.isVertical = true;\n *\n *\t\t// Will render a vertical button dropdown labeled \"A button dropdown\"\n *\t\t// with a button group in the panel containing two buttons.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ToolbarView` will be added.\n * @param {Iterable.<module:ui/button/buttonview~ButtonView>} buttons\n */\nexport function addToolbarToDropdown(dropdownView, buttons) {\n    const locale = dropdownView.locale;\n    const t = locale.t;\n    const toolbarView = dropdownView.toolbarView = new ToolbarView(locale);\n    toolbarView.set('ariaLabel', t('cf'));\n    dropdownView.extendTemplate({ attributes: { class: ['ck-toolbar-dropdown'] } });\n    buttons.map(view => toolbarView.items.add(view));\n    dropdownView.panelView.children.add(toolbarView);\n    toolbarView.items.delegate('execute').to(dropdownView);\n}\n/**\n * Adds an instance of {@link module:ui/list/listview~ListView} to a dropdown.\n *\n *\t\tconst items = new Collection();\n *\n *\t\titems.add( {\n *\t\t\ttype: 'button',\n *\t\t\tmodel: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'First item',\n *\t\t\t\tlabelStyle: 'color: red'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\titems.add( {\n *\t\t\t type: 'button',\n *\t\t\t model: new Model( {\n *\t\t\t\twithText: true,\n *\t\t\t\tlabel: 'Second item',\n *\t\t\t\tlabelStyle: 'color: green',\n *\t\t\t\tclass: 'foo'\n *\t\t\t} )\n *\t\t} );\n *\n *\t\tconst dropdown = createDropdown( locale );\n *\n *\t\taddListToDropdown( dropdown, items );\n *\n *\t\t// Will render a dropdown with a list in the panel containing two items.\n *\t\tdropdown.render()\n *\t\tdocument.body.appendChild( dropdown.element );\n *\n * The `items` collection passed to this methods controls the presence and attributes of respective\n * {@link module:ui/list/listitemview~ListItemView list items}.\n *\n *\n * See {@link module:ui/dropdown/utils~createDropdown} and {@link module:list/list~List}.\n *\n * @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView A dropdown instance to which `ListVIew` will be added.\n * @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} items\n * A collection of the list item definitions to populate the list.\n */\nexport function addListToDropdown(dropdownView, items) {\n    const locale = dropdownView.locale;\n    const listView = dropdownView.listView = new ListView(locale);\n    listView.items.bindTo(items).using(({type, model}) => {\n        if (type === 'separator') {\n            return new ListSeparatorView(locale);\n        } else if (type === 'button' || type === 'switchbutton') {\n            const listItemView = new ListItemView(locale);\n            let buttonView;\n            if (type === 'button') {\n                buttonView = new ButtonView(locale);\n            } else {\n                buttonView = new SwitchButtonView(locale);\n            }\n            // Bind all model properties to the button view.\n            buttonView.bind(...Object.keys(model)).to(model);\n            buttonView.delegate('execute').to(listItemView);\n            listItemView.children.add(buttonView);\n            return listItemView;\n        }\n    });\n    dropdownView.panelView.children.add(listView);\n    listView.items.delegate('execute').to(dropdownView);\n}\n// Add a set of default behaviors to dropdown view.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction addDefaultBehavior(dropdownView) {\n    closeDropdownOnBlur(dropdownView);\n    closeDropdownOnExecute(dropdownView);\n    focusDropdownContentsOnArrows(dropdownView);\n}\n// Adds a behavior to a dropdownView that closes opened dropdown when user clicks outside the dropdown.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnBlur(dropdownView) {\n    dropdownView.on('render', () => {\n        clickOutsideHandler({\n            emitter: dropdownView,\n            activator: () => dropdownView.isOpen,\n            callback: () => {\n                dropdownView.isOpen = false;\n            },\n            contextElements: [dropdownView.element]\n        });\n    });\n}\n// Adds a behavior to a dropdownView that closes the dropdown view on \"execute\" event.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction closeDropdownOnExecute(dropdownView) {\n    // Close the dropdown when one of the list items has been executed.\n    dropdownView.on('execute', evt => {\n        // Toggling a switch button view should not close the dropdown.\n        if (evt.source instanceof SwitchButtonView) {\n            return;\n        }\n        dropdownView.isOpen = false;\n    });\n}\n// Adds a behavior to a dropdownView that focuses the dropdown's panel view contents on keystrokes.\n//\n// @param {module:ui/dropdown/dropdownview~DropdownView} dropdownView\nfunction focusDropdownContentsOnArrows(dropdownView) {\n    // If the dropdown panel is already open, the arrow down key should focus the first child of the #panelView.\n    dropdownView.keystrokes.set('arrowdown', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focus();\n            cancel();\n        }\n    });\n    // If the dropdown panel is already open, the arrow up key should focus the last child of the #panelView.\n    dropdownView.keystrokes.set('arrowup', (data, cancel) => {\n        if (dropdownView.isOpen) {\n            dropdownView.panelView.focusLast();\n            cancel();\n        }\n    });\n}    /**\n * A definition of the list item used by the {@link module:ui/dropdown/utils~addListToDropdown}\n * utility.\n *\n * @typedef {Object} module:ui/dropdown/utils~ListDropdownItemDefinition\n *\n * @property {String} type Either `'separator'`, `'button'` or `'switchbutton'`.\n * @property {module:ui/model~Model} [model] Model of the item (when **not** `'separator'`).\n * Its properties fuel the newly created list item (or its children, depending on the `type`).\n */","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><circle cx=\\\"9.5\\\" cy=\\\"4.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"10.5\\\" r=\\\"1.5\\\"/><circle cx=\\\"9.5\\\" cy=\\\"16.5\\\" r=\\\"1.5\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/toolbar/toolbarview\n */\n/* globals console */\nimport View from '../view';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport ToolbarSeparatorView from './toolbarseparatorview';\nimport getResizeObserver from '@ckeditor/ckeditor5-utils/src/dom/getresizeobserver';\nimport preventDefault from '../bindings/preventdefault.js';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport {\n    createDropdown,\n    addToolbarToDropdown\n} from '../dropdown/utils';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport verticalDotsIcon from '@ckeditor/ckeditor5-core/theme/icons/three-vertical-dots.svg';\nimport '../../theme/components/toolbar/toolbar.css';\n/**\n * The toolbar view class.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\nexport default class ToolbarView extends View {\n    /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~ToolbarView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} locale The localization services instance.\n   * @param {module:ui/toolbar/toolbarview~ToolbarOptions} [options] Configuration options of the toolbar.\n   */\n    constructor(locale, options) {\n        super(locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        /**\n     * A reference to the options object passed to the constructor.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarOptions}\n     */\n        this.options = options || {};\n        /**\n     * Label used by assistive technologies to describe this toolbar element.\n     *\n     * @default 'Editor toolbar'\n     * @member {String} #ariaLabel\n     */\n        this.set('ariaLabel', t('cd'));\n        /**\n     * A collection of toolbar items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.items = this.createCollection();\n        /**\n     * Tracks information about the DOM focus in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n        this.focusTracker = new FocusTracker();\n        /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}\n     * to handle keyboard navigation in the toolbar.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n        this.set('class');\n        /**\n     * A (child) view containing {@link #items toolbar items}.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n        this.itemsView = new ItemsView(locale);\n        /**\n     * A top–level collection aggregating building blocks of the toolbar.\n     *\n     *\t┌───────────────── ToolbarView ─────────────────┐\n     *\t| ┌──────────────── #children ────────────────┐ |\n     *\t| |   ┌──────────── #itemsView ───────────┐   | |\n     *\t| |   | [ item1 ] [ item2 ] ... [ itemN ] |   | |\n     *\t| |   └──────────────────────────────────-┘   | |\n     *\t| └───────────────────────────────────────────┘ |\n     *\t└───────────────────────────────────────────────┘\n     *\n     * By default, it contains the {@link #itemsView} but it can be extended with additional\n     * UI elements when necessary.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.children = this.createCollection();\n        this.children.add(this.itemsView);\n        /**\n     * A collection of {@link #items} that take part in the focus cycling\n     * (i.e. navigation using the keyboard). Usually, it contains a subset of {@link #items} with\n     * some optional UI elements that also belong to the toolbar and should be focusable\n     * by the user.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.focusables = this.createCollection();\n        /**\n     * Controls the orientation of toolbar items. Only available when\n     * {@link module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull dynamic items grouping}\n     * is **disabled**.\n     *\n     * @observable\n     * @member {Boolean} #isVertical\n     */\n        /**\n     * Helps cycling over {@link #focusables focusable items} in the toolbar.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n        this._focusCycler = new FocusCycler({\n            focusables: this.focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate toolbar items backwards using the arrow[left,up] keys.\n                focusPrevious: [\n                    'arrowleft',\n                    'arrowup'\n                ],\n                // Navigate toolbar items forwards using the arrow[right,down] keys.\n                focusNext: [\n                    'arrowright',\n                    'arrowdown'\n                ]\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar',\n                    bind.to('class')\n                ],\n                role: 'toolbar',\n                'aria-label': bind.to('ariaLabel')\n            },\n            children: this.children,\n            on: {\n                // https://github.com/ckeditor/ckeditor5-ui/issues/206\n                mousedown: preventDefault(this)\n            }\n        });\n        /**\n     * An instance of the active toolbar behavior that shapes its look and functionality.\n     *\n     * See {@link module:ui/toolbar/toolbarview~ToolbarBehavior} to learn more.\n     *\n     * @protected\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarBehavior}\n     */\n        this._behavior = this.options.shouldGroupWhenFull ? new DynamicGrouping(this) : new StaticLayout(this);\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n        super.render();\n        // Children added before rendering should be known to the #focusTracker.\n        for (const item of this.items) {\n            this.focusTracker.add(item.element);\n        }\n        this.items.on('add', (evt, item) => {\n            this.focusTracker.add(item.element);\n        });\n        this.items.on('remove', (evt, item) => {\n            this.focusTracker.remove(item.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n        this._behavior.render(this);\n    }\n    /**\n   * @inheritDoc\n   */\n    destroy() {\n        this._behavior.destroy();\n        return super.destroy();\n    }\n    /**\n   * Focuses the first focusable in {@link #focusables}.\n   */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n   * Focuses the last focusable in {@link #focusables}.\n   */\n    focusLast() {\n        this._focusCycler.focusLast();\n    }\n    /**\n   * A utility that expands the plain toolbar configuration into\n   * {@link module:ui/toolbar/toolbarview~ToolbarView#items} using a given component factory.\n   *\n   * @param {Array.<String>} config The toolbar items configuration.\n   * @param {module:ui/componentfactory~ComponentFactory} factory A factory producing toolbar items.\n   */\n    fillFromConfig(config, factory) {\n        config.map(name => {\n            if (name == '|') {\n                this.items.add(new ToolbarSeparatorView());\n            } else if (factory.has(name)) {\n                this.items.add(factory.create(name));\n            } else {\n                /**\n         * There was a problem processing the configuration of the toolbar. The item with the given\n         * name does not exist so it was omitted when rendering the toolbar.\n         *\n         * This warning usually shows up when the {@link module:core/plugin~Plugin} which is supposed\n         * to provide a toolbar item has not been loaded or there is a typo in the configuration.\n         *\n         * Make sure the plugin responsible for this toolbar item is loaded and the toolbar configuration\n         * is correct, e.g. {@link module:basic-styles/bold~Bold} is loaded for the `'bold'` toolbar item.\n         *\n         * You can use the following snippet to retrieve all available toolbar items:\n         *\n         *\t\tArray.from( editor.ui.componentFactory.names() );\n         *\n         * @error toolbarview-item-unavailable\n         * @param {String} name The name of the component.\n         */\n                console.warn(attachLinkToDocumentation('toolbarview-item-unavailable: The requested toolbar item is unavailable.'), { name });\n            }\n        });\n    }\n}\n/**\n * An inner block of the {@link module:ui/toolbar/toolbarview~ToolbarView} hosting its\n * {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n *\n * @private\n * @extends module:ui/view~View\n */\nclass ItemsView extends View {\n    /**\n   * @inheritDoc\n   */\n    constructor(locale) {\n        super(locale);\n        /**\n     * A collection of items (buttons, dropdowns, etc.).\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.children = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-toolbar__items'\n                ]\n            },\n            children: this.children\n        });\n    }\n}\n/**\n * A toolbar behavior that makes it static and unresponsive to the changes of the environment.\n * At the same time, it also makes it possible to display a toolbar with a vertical layout\n * using the {@link module:ui/toolbar/toolbarview~ToolbarView#isVertical} property.\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass StaticLayout {\n    /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~StaticLayout} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n    constructor(view) {\n        const bind = view.bindTemplate;\n        // Static toolbar can be vertical when needed.\n        view.set('isVertical', false);\n        // 1:1 pass–through binding, all ToolbarView#items are visible.\n        view.itemsView.children.bindTo(view.items).using(item => item);\n        // 1:1 pass–through binding, all ToolbarView#items are focusable.\n        view.focusables.bindTo(view.items).using(item => item);\n        view.extendTemplate({\n            attributes: {\n                class: [// When vertical, the toolbar has an additional CSS class.\n                    bind.if('isVertical', 'ck-toolbar_vertical')]\n            }\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n    }\n    /**\n   * @inheritDoc\n   */\n    destroy() {\n    }\n}\n/**\n * A toolbar behavior that makes the items respond to changes in the geometry.\n *\n * In a nutshell, it groups {@link module:ui/toolbar/toolbarview~ToolbarView#items}\n * that do not fit visually into a single row of the toolbar (due to limited space).\n * Items that do not fit are aggregated in a dropdown displayed at the end of the toolbar.\n *\n *\t┌──────────────────────────────────────── ToolbarView ──────────────────────────────────────────┐\n *\t| ┌─────────────────────────────────────── #children ─────────────────────────────────────────┐ |\n *\t| |   ┌─────── #itemsView ────────┐ ┌──────────────────────┐ ┌── #groupedItemsDropdown ───┐   | |\n *\t| |   |       #ungroupedItems     | | ToolbarSeparatorView | |        #groupedItems       |   | |\n *\t| |   └──────────────────────────-┘ └──────────────────────┘ └────────────────────────────┘   | |\n *\t| |                                  \\---------- only when toolbar items overflow --------/    | |\n *\t| └───────────────────────────────────────────────────────────────────────────────────────────┘ |\n *\t└───────────────────────────────────────────────────────────────────────────────────────────────┘\n *\n * @private\n * @implements module:ui/toolbar/toolbarview~ToolbarBehavior\n */\nclass DynamicGrouping {\n    /**\n   * Creates an instance of the {@link module:ui/toolbar/toolbarview~DynamicGrouping} toolbar\n   * behavior.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n    constructor(view) {\n        /**\n     * A collection of toolbar children.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.viewChildren = view.children;\n        /**\n     * A collection of focusable toolbar elements.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.viewFocusables = view.focusables;\n        /**\n     * A view containing toolbar items.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ItemsView}\n     */\n        this.viewItemsView = view.itemsView;\n        /**\n     * Toolbar focus tracker.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n        this.viewFocusTracker = view.focusTracker;\n        /**\n     * Toolbar locale.\n     *\n     * @readonly\n     * @member {module:utils/locale~Locale}\n     */\n        this.viewLocale = view.locale;\n        /**\n     * Toolbar element.\n     *\n     * @readonly\n     * @member {HTMLElement} #viewElement\n     */\n        /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * Aggregates items that fit into a single row of the toolbar and were not {@link #groupedItems grouped}\n     * into a {@link #groupedItemsDropdown dropdown}. Items of this collection are displayed in the\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#itemsView}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped, it\n     * matches the {@link module:ui/toolbar/toolbarview~ToolbarView#items} collection in size and order.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.ungroupedItems = view.createCollection();\n        /**\n     * A subset of toolbar {@link module:ui/toolbar/toolbarview~ToolbarView#items}.\n     * A collection of the toolbar items that do not fit into a single row of the toolbar.\n     * Grouped items are displayed in a dedicated {@link #groupedItemsDropdown dropdown}.\n     *\n     * When none of the {@link module:ui/toolbar/toolbarview~ToolbarView#items} were grouped,\n     * this collection is empty.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this.groupedItems = view.createCollection();\n        /**\n     * The dropdown that aggregates {@link #groupedItems grouped items} that do not fit into a single\n     * row of the toolbar. It is displayed on demand as the last of\n     * {@link module:ui/toolbar/toolbarview~ToolbarView#children toolbar children} and offers another\n     * (nested) toolbar which displays items that would normally overflow.\n     *\n     * @readonly\n     * @member {module:ui/dropdown/dropdownview~DropdownView}\n     */\n        this.groupedItemsDropdown = this._createGroupedItemsDropdown();\n        /**\n     * An instance of the resize observer that helps dynamically determine the geometry of the toolbar\n     * and manage items that do not fit into a single row.\n     *\n     * **Note:** Created in {@link #_enableGroupingOnResize}.\n     *\n     * @readonly\n     * @member {module:utils/dom/getresizeobserver~ResizeObserver}\n     */\n        this.resizeObserver = null;\n        /**\n     * A cached value of the horizontal padding style used by {@link #_updateGrouping}\n     * to manage the {@link module:ui/toolbar/toolbarview~ToolbarView#items} that do not fit into\n     * a single toolbar line. This value can be reused between updates because it is unlikely that\n     * the padding will change and re–using `Window.getComputedStyle()` is expensive.\n     *\n     * @readonly\n     * @member {Number}\n     */\n        this.cachedPadding = null;\n        // Only those items that were not grouped are visible to the user.\n        view.itemsView.children.bindTo(this.ungroupedItems).using(item => item);\n        // Make sure all #items visible in the main space of the toolbar are \"focuscycleable\".\n        this.ungroupedItems.on('add', this._updateFocusCycleableItems.bind(this));\n        this.ungroupedItems.on('remove', this._updateFocusCycleableItems.bind(this));\n        // Make sure the #groupedItemsDropdown is also included in cycling when it appears.\n        view.children.on('add', this._updateFocusCycleableItems.bind(this));\n        view.children.on('remove', this._updateFocusCycleableItems.bind(this));\n        // ToolbarView#items is dynamic. When an item is added, it should be automatically\n        // represented in either grouped or ungrouped items at the right index.\n        // In other words #items == concat( #ungroupedItems, #groupedItems )\n        // (in length and order).\n        view.items.on('add', (evt, item, index) => {\n            if (index > this.ungroupedItems.length) {\n                this.groupedItems.add(item, index - this.ungroupedItems.length);\n            } else {\n                this.ungroupedItems.add(item, index);\n            }\n            // When a new ungrouped item joins in and lands in #ungroupedItems, there's a chance it causes\n            // the toolbar to overflow.\n            this._updateGrouping();\n        });\n        // When an item is removed from ToolbarView#items, it should be automatically\n        // removed from either grouped or ungrouped items.\n        view.items.on('remove', (evt, item, index) => {\n            if (index > this.ungroupedItems.length) {\n                this.groupedItems.remove(item);\n            } else {\n                this.ungroupedItems.remove(item);\n            }\n            // Whether removed from grouped or ungrouped items, there is a chance\n            // some new space is available and we could do some ungrouping.\n            this._updateGrouping();\n        });\n        view.extendTemplate({\n            attributes: {\n                class: [// To group items dynamically, the toolbar needs a dedicated CSS class.\n                    'ck-toolbar_grouping']\n            }\n        });\n    }\n    /**\n   * Enables dynamic items grouping based on the dimensions of the toolbar.\n   *\n   * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior\n   * is added to.\n   */\n    render(view) {\n        this.viewElement = view.element;\n        this._enableGroupingOnResize();\n    }\n    /**\n   * Cleans up the internals used by this behavior.\n   */\n    destroy() {\n        // The dropdown may not be in ToolbarView#children at the moment of toolbar destruction\n        // so let's make sure it's actually destroyed along with the toolbar.\n        this.groupedItemsDropdown.destroy();\n        this.resizeObserver.disconnect();\n    }\n    /**\n   * When called, it will check if any of the {@link #ungroupedItems} do not fit into a single row of the toolbar,\n   * and it will move them to the {@link #groupedItems} when it happens.\n   *\n   * At the same time, it will also check if there is enough space in the toolbar for the first of the\n   * {@link #groupedItems} to be returned back to {@link #ungroupedItems} and still fit into a single row\n   * without the toolbar wrapping.\n   *\n   * @protected\n   */\n    _updateGrouping() {\n        // Do no grouping–related geometry analysis when the toolbar is detached from visible DOM,\n        // for instance before #render(), or after render but without a parent or a parent detached\n        // from DOM. DOMRects won't work anyway and there will be tons of warning in the console and\n        // nothing else.\n        if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {\n            return;\n        }\n        let wereItemsGrouped;\n        // Group #items as long as some wrap to the next row. This will happen, for instance,\n        // when the toolbar is getting narrow and there is not enough space to display all items in\n        // a single row.\n        while (this._areItemsOverflowing) {\n            this._groupLastItem();\n            wereItemsGrouped = true;\n        }\n        // If none were grouped now but there were some items already grouped before,\n        // then, what the hell, maybe let's see if some of them can be ungrouped. This happens when,\n        // for instance, the toolbar is stretching and there's more space in it than before.\n        if (!wereItemsGrouped && this.groupedItems.length) {\n            // Ungroup items as long as none are overflowing or there are none to ungroup left.\n            while (this.groupedItems.length && !this._areItemsOverflowing) {\n                this._ungroupFirstItem();\n            }\n            // If the ungrouping ended up with some item wrapping to the next row,\n            // put it back to the group toolbar (\"undo the last ungroup\"). We don't know whether\n            // an item will wrap or not until we ungroup it (that's a DOM/CSS thing) so this\n            // clean–up is vital for the algorithm.\n            if (this._areItemsOverflowing) {\n                this._groupLastItem();\n            }\n        }\n    }\n    /**\n   * Returns `true` when {@link module:ui/toolbar/toolbarview~ToolbarView#element} children visually overflow,\n   * for instance if the toolbar is narrower than its members. Returns `false` otherwise.\n   *\n   * @private\n   * @type {Boolean}\n   */\n    get _areItemsOverflowing() {\n        // An empty toolbar cannot overflow.\n        if (!this.ungroupedItems.length) {\n            return false;\n        }\n        const element = this.viewElement;\n        const uiLanguageDirection = this.viewLocale.uiLanguageDirection;\n        const lastChildRect = new Rect(element.lastChild);\n        const toolbarRect = new Rect(element);\n        if (!this.cachedPadding) {\n            const computedStyle = global.window.getComputedStyle(element);\n            const paddingProperty = uiLanguageDirection === 'ltr' ? 'paddingRight' : 'paddingLeft';\n            // parseInt() is essential because of quirky floating point numbers logic and DOM.\n            // If the padding turned out too big because of that, the grouped items dropdown would\n            // always look (from the Rect perspective) like it overflows (while it's not).\n            this.cachedPadding = Number.parseInt(computedStyle[paddingProperty]);\n        }\n        if (uiLanguageDirection === 'ltr') {\n            return lastChildRect.right > toolbarRect.right - this.cachedPadding;\n        } else {\n            return lastChildRect.left < toolbarRect.left + this.cachedPadding;\n        }\n    }\n    /**\n   * Enables the functionality that prevents {@link #ungroupedItems} from overflowing (wrapping to the next row)\n   * upon resize when there is little space available. Instead, the toolbar items are moved to the\n   * {@link #groupedItems} collection and displayed in a dropdown at the end of the row (which has its own nested toolbar).\n   *\n   * When called, the toolbar will automatically analyze the location of its {@link #ungroupedItems} and \"group\"\n   * them in the dropdown if necessary. It will also observe the browser window for size changes in\n   * the future and respond to them by grouping more items or reverting already grouped back, depending\n   * on the visual space available.\n   *\n   * @private\n   */\n    _enableGroupingOnResize() {\n        let previousWidth;\n        // TODO: Consider debounce.\n        this.resizeObserver = getResizeObserver(([entry]) => {\n            if (!previousWidth || previousWidth !== entry.contentRect.width) {\n                this._updateGrouping();\n                previousWidth = entry.contentRect.width;\n            }\n        });\n        this.resizeObserver.observe(this.viewElement);\n        this._updateGrouping();\n    }\n    /**\n   * When called, it will remove the last item from {@link #ungroupedItems} and move it back\n   * to the {@link #groupedItems} collection.\n   *\n   * The opposite of {@link #_ungroupFirstItem}.\n   *\n   * @private\n   */\n    _groupLastItem() {\n        if (!this.groupedItems.length) {\n            this.viewChildren.add(new ToolbarSeparatorView());\n            this.viewChildren.add(this.groupedItemsDropdown);\n            this.viewFocusTracker.add(this.groupedItemsDropdown.element);\n        }\n        this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0);\n    }\n    /**\n   * Moves the very first item belonging to {@link #groupedItems} back\n   * to the {@link #ungroupedItems} collection.\n   *\n   * The opposite of {@link #_groupLastItem}.\n   *\n   * @private\n   */\n    _ungroupFirstItem() {\n        this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));\n        if (!this.groupedItems.length) {\n            this.viewChildren.remove(this.groupedItemsDropdown);\n            this.viewChildren.remove(this.viewChildren.last);\n            this.viewFocusTracker.remove(this.groupedItemsDropdown.element);\n        }\n    }\n    /**\n   * Creates the {@link #groupedItemsDropdown} that hosts the members of the {@link #groupedItems}\n   * collection when there is not enough space in the toolbar to display all items in a single row.\n   *\n   * @private\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n    _createGroupedItemsDropdown() {\n        const locale = this.viewLocale;\n        const t = locale.t;\n        const dropdown = createDropdown(locale);\n        dropdown.class = 'ck-toolbar__grouped-dropdown';\n        // Make sure the dropdown never sticks out to the left/right. It should be under the main toolbar.\n        // (https://github.com/ckeditor/ckeditor5/issues/5608)\n        dropdown.panelPosition = locale.uiLanguageDirection === 'ltr' ? 'sw' : 'se';\n        addToolbarToDropdown(dropdown, []);\n        dropdown.buttonView.set({\n            label: t('ce'),\n            tooltip: true,\n            icon: verticalDotsIcon\n        });\n        // 1:1 pass–through binding.\n        dropdown.toolbarView.items.bindTo(this.groupedItems).using(item => item);\n        return dropdown;\n    }\n    /**\n   * Updates the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables focus–cycleable items}\n   * collection so it represents the up–to–date state of the UI from the perspective of the user.\n   *\n   * For instance, the {@link #groupedItemsDropdown} can show up and hide but when it is visible,\n   * it must be subject to focus cycling in the toolbar.\n   *\n   * See the {@link module:ui/toolbar/toolbarview~ToolbarView#focusables collection} documentation\n   * to learn more about the purpose of this method.\n   *\n   * @private\n   */\n    _updateFocusCycleableItems() {\n        this.viewFocusables.clear();\n        this.ungroupedItems.map(item => {\n            this.viewFocusables.add(item);\n        });\n        if (this.groupedItems.length) {\n            this.viewFocusables.add(this.groupedItemsDropdown);\n        }\n    }\n}    /**\n * Options passed to the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n *\n * @interface module:ui/toolbar/toolbarview~ToolbarOptions\n */\n     /**\n * When set to `true`, the toolbar will automatically group {@link module:ui/toolbar/toolbarview~ToolbarView#items} that\n * would normally wrap to the next line when there is not enough space to display them in a single row, for\n * instance, if the parent container of the toolbar is narrow.\n *\n * @member {Boolean} module:ui/toolbar/toolbarview~ToolbarOptions#shouldGroupWhenFull\n */\n     /**\n * A class interface defining the behavior of the {@link module:ui/toolbar/toolbarview~ToolbarView}.\n *\n * Toolbar behaviors extend its look and functionality and have an impact on the\n * {@link module:ui/toolbar/toolbarview~ToolbarView#element} template or\n * {@link module:ui/toolbar/toolbarview~ToolbarView#render rendering}. They can be enabled\n * conditionally, e.g. depending on the configuration of the toolbar.\n *\n * @private\n * @interface module:ui/toolbar/toolbarview~ToolbarBehavior\n */\n     /**\n * Creates a new toolbar behavior instance.\n *\n * The instance is created in the {@link module:ui/toolbar/toolbarview~ToolbarView#constructor} of the toolbar.\n * This is the right place to extend the {@link module:ui/toolbar/toolbarview~ToolbarView#template} of\n * the toolbar, define extra toolbar properties, etc.\n *\n * @method #constructor\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar that this behavior is added to.\n */\n     /**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#render rendered}.\n * It can be used to, for example, customize the behavior of the toolbar when its {@link module:ui/toolbar/toolbarview~ToolbarView#element}\n * is available.\n *\n * @readonly\n * @member {Function} #render\n * @param {module:ui/toolbar/toolbarview~ToolbarView} view An instance of the toolbar being rendered.\n */\n     /**\n * A method called after the toolbar has been {@link module:ui/toolbar/toolbarview~ToolbarView#destroy destroyed}.\n * It allows cleaning up after the toolbar behavior, for instance, this is the right place to detach\n * event listeners, free up references, etc.\n *\n * @readonly\n * @member {Function} #destroy\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/preventdefault\n */\n\n/**\n * A helper which executes a native `Event.preventDefault()` if the target of an event equals the\n * {@link module:ui/view~View#element element of the view}. It shortens the definition of a\n * {@link module:ui/view~View#template template}.\n *\n *\t\t// In a class extending View.\n *\t\timport preventDefault from '@ckeditor/ckeditor5-ui/src/bindings/preventdefault';\n *\n *\t\t// ...\n *\n *\t\tthis.setTemplate( {\n *\t\t\ttag: 'div',\n *\n *\t\t\ton: {\n *\t\t\t\t// Prevent the default mousedown action on this view.\n *\t\t\t\tmousedown: preventDefault( this )\n *\t\t\t}\n *\t\t} );\n *\n * @param {module:ui/view~View} view View instance that defines the template.\n * @returns {module:ui/template~TemplateToBinding}\n */\nexport default function preventDefault(view) {\n  return view.bindTemplate.to(evt => {\n    if (evt.target === view.element) {\n      evt.preventDefault();\n    }\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitoruiview\n */\nimport EditorUIView from '@ckeditor/ckeditor5-ui/src/editorui/editoruiview';\nimport InlineEditableUIView from '@ckeditor/ckeditor5-ui/src/editableui/inline/inlineeditableuiview';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\n/**\n * The decoupled editor UI view. It is a virtual view providing an inline\n * {@link module:editor-decoupled/decouplededitoruiview~DecoupledEditorUIView#editable} and a\n * {@link module:editor-decoupled/decouplededitoruiview~DecoupledEditorUIView#toolbar}, but without any\n * specific arrangement of the components in the DOM.\n *\n * See {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}\n * to learn more about this view.\n *\n * @extends module:ui/editorui/editoruiview~EditorUIView\n */\n\nexport default class DecoupledEditorUIView extends EditorUIView {\n  /**\n   * Creates an instance of the decoupled editor UI view.\n   *\n   * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n   * @param {module:engine/view/view~View} editingView The editing view instance this view is related to.\n   * @param {HTMLElement} [editableElement] The editable element. If not specified, it will be automatically created by\n   * {@link module:ui/editableui/editableuiview~EditableUIView}. Otherwise, the given element will be used.\n   */\n  constructor(locale, editingView, editableElement) {\n    super(locale);\n    /**\n     * The main toolbar of the decoupled editor UI.\n     *\n     * @readonly\n     * @member {module:ui/toolbar/toolbarview~ToolbarView}\n     */\n\n    this.toolbar = new ToolbarView(locale, {\n      shouldGroupWhenFull: true\n    });\n    /**\n     * The editable of the decoupled editor UI.\n     *\n     * @readonly\n     * @member {module:ui/editableui/inline/inlineeditableuiview~InlineEditableUIView}\n     */\n\n    this.editable = new InlineEditableUIView(locale, editingView, editableElement); // This toolbar may be placed anywhere in the page so things like font size need to be reset in it.\n    // Because of the above, make sure the toolbar supports rounded corners.\n    // Also, make sure the toolbar has the proper dir attribute because its ancestor may not have one\n    // and some toolbar item styles depend on this attribute.\n\n    this.toolbar.extendTemplate({\n      attributes: {\n        class: ['ck-reset_all', 'ck-rounded-corners'],\n        dir: locale.uiLanguageDirection\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.registerChild([this.toolbar, this.editable]);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module editor-decoupled/decouplededitor\n */\nimport Editor from '@ckeditor/ckeditor5-core/src/editor/editor';\nimport DataApiMixin from '@ckeditor/ckeditor5-core/src/editor/utils/dataapimixin';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\nimport DecoupledEditorUI from './decouplededitorui';\nimport DecoupledEditorUIView from './decouplededitoruiview';\nimport getDataFromElement from '@ckeditor/ckeditor5-utils/src/dom/getdatafromelement';\nimport setDataInElement from '@ckeditor/ckeditor5-utils/src/dom/setdatainelement';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { isElement } from 'lodash-es';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport secureSourceElement from '@ckeditor/ckeditor5-core/src/editor/utils/securesourceelement';\n/**\n * The {@glink builds/guides/overview#document-editor decoupled editor} implementation.\n * It provides an inline editable and a toolbar. However, unlike other editors,\n * it does not render these components anywhere in the DOM unless configured.\n *\n * This type of an editor is dedicated to integrations which require a customized UI with an open\n * structure, allowing developers to specify the exact location of the interface.\n *\n * See the document editor {@glink examples/builds/document-editor demo} to learn about possible use cases\n * for the decoupled editor.\n *\n * In order to create a decoupled editor instance, use the static\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method.\n *\n * # Decoupled editor and document editor build\n *\n * The decoupled editor can be used directly from source (if you installed the\n * [`@ckeditor/ckeditor5-editor-decoupled`](https://www.npmjs.com/package/@ckeditor/ckeditor5-editor-decoupled) package)\n * but it is also available in the {@glink builds/guides/overview#document-editor document editor build}.\n *\n * {@glink builds/guides/overview Builds} are ready-to-use editors with plugins bundled in. When using the editor from\n * source you need to take care of loading all plugins by yourself\n * (through the {@link module:core/editor/editorconfig~EditorConfig#plugins `config.plugins`} option).\n * Using the editor from source gives much better flexibility and allows for easier customization.\n *\n * Read more about initializing the editor from source or as a build in\n * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`}.\n *\n * @mixes module:core/editor/utils/dataapimixin~DataApiMixin\n * @implements module:core/editor/editorwithui~EditorWithUI\n * @extends module:core/editor/editor~Editor\n */\n\nexport default class DecoupledEditor extends Editor {\n  /**\n   * Creates an instance of the decoupled editor.\n   *\n   * **Note:** Do not use the constructor to create editor instances. Use the static\n   * {@link module:editor-decoupled/decouplededitor~DecoupledEditor.create `DecoupledEditor.create()`} method instead.\n   *\n   * @protected\n   * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n   * (on which the editor will be initialized) or initial data for the editor. For more information see\n   * {@link module:editor-balloon/ballooneditor~BalloonEditor.create `BalloonEditor.create()`}.\n   * @param {module:core/editor/editorconfig~EditorConfig} config The editor configuration.\n   */\n  constructor(sourceElementOrData, config) {\n    super(config);\n\n    if (isElement(sourceElementOrData)) {\n      this.sourceElement = sourceElementOrData;\n      secureSourceElement(this);\n    }\n\n    this.data.processor = new HtmlDataProcessor();\n    this.model.document.createRoot();\n    const view = new DecoupledEditorUIView(this.locale, this.editing.view, this.sourceElement);\n    this.ui = new DecoupledEditorUI(this, view);\n  }\n  /**\n   * Destroys the editor instance, releasing all resources used by it.\n   *\n   * **Note**: The decoupled editor does not remove the toolbar and editable when destroyed. You can\n   * do that yourself in the destruction chain:\n   *\n   *\t\teditor.destroy()\n   *\t\t\t.then( () => {\n   *\t\t\t\t// Remove the toolbar from DOM.\n   *\t\t\t\teditor.ui.view.toolbar.element.remove();\n   *\n   *\t\t\t\t// Remove the editable from DOM.\n   *\t\t\t\teditor.ui.view.editable.element.remove();\n   *\n   *\t\t\t\tconsole.log( 'Editor was destroyed' );\n   *\t\t\t} );\n   *\n   * @returns {Promise}\n   */\n\n\n  destroy() {\n    // Cache the data, then destroy.\n    // It's safe to assume that the model->view conversion will not work after super.destroy().\n    const data = this.getData();\n    this.ui.destroy();\n    return super.destroy().then(() => {\n      if (this.sourceElement) {\n        setDataInElement(this.sourceElement, data);\n      }\n    });\n  }\n  /**\n   * Creates a new decoupled editor instance.\n   *\n   * Remember that `DecoupledEditor` does not append the toolbar element to your web page so you have to do it manually after the editor\n   * has been initialized.\n   *\n   * There are two ways how the editor can be initialized.\n   *\n   * # Using an existing DOM element (and loading data from it)\n   *\n   * You can initialize the editor using an existing DOM element:\n   *\n   *\t\tDecoupledEditor\n   *\t\t\t.create( document.querySelector( '#editor' ) )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Append the toolbar to the <body> element.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * The element's content will be used as the editor data and the element will become the editable element.\n   *\n   * # Creating a detached editor\n   *\n   * Alternatively, you can initialize the editor by passing the initial data directly as a string.\n   * In this case, you will have to manually append both the toolbar element and the editable element to your web page.\n   *\n   *\t\tDecoupledEditor\n   *\t\t\t.create( '<p>Hello world!</p>' )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Append the toolbar to the <body> element.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n   *\n   *\t\t\t\t// Initial data was provided so the editor UI element needs to be added manually to the DOM.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.getEditableElement() );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * This lets you dynamically append the editor to your web page whenever it is convenient for you. You may use this method if your\n   * web page content is generated on the client side and the DOM structure is not ready at the moment when you initialize the editor.\n   *\n   * # Using an existing DOM element (and data provided in `config.initialData`)\n   *\n   * You can also mix these two ways by providing a DOM element to be used and passing the initial data through the configuration:\n   *\n   *\t\tDecoupledEditor\n   *\t\t\t.create( document.querySelector( '#editor' ), {\n   *\t\t\t\tinitialData: '<h2>Initial data</h2><p>Foo bar.</p>'\n   *\t\t\t} )\n   *\t\t\t.then( editor => {\n   *\t\t\t\tconsole.log( 'Editor was initialized', editor );\n   *\n   *\t\t\t\t// Append the toolbar to the <body> element.\n   *\t\t\t\tdocument.body.appendChild( editor.ui.view.toolbar.element );\n   *\t\t\t} )\n   *\t\t\t.catch( err => {\n   *\t\t\t\tconsole.error( err.stack );\n   *\t\t\t} );\n   *\n   * This method can be used to initialize the editor on an existing element with the specified content in case if your integration\n   * makes it difficult to set the content of the source element.\n   *\n   * Note that an error will be thrown if you pass the initial data both as the first parameter and also in the configuration.\n   *\n   * # Configuring the editor\n   *\n   * See the {@link module:core/editor/editorconfig~EditorConfig editor configuration documentation} to learn more about\n   * customizing plugins, toolbar and more.\n   *\n   * # Using the editor from source\n   *\n   * The code samples listed in the previous sections of this documentation assume that you are using an\n   * {@glink builds/guides/overview editor build} (for example – `@ckeditor/ckeditor5-build-decoupled`).\n   *\n   * If you want to use the decoupled editor from source (`@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor`),\n   * you need to define the list of\n   * {@link module:core/editor/editorconfig~EditorConfig#plugins plugins to be initialized} and\n   * {@link module:core/editor/editorconfig~EditorConfig#toolbar toolbar items}. Read more about using the editor from\n   * source in the {@glink builds/guides/integration/advanced-setup \"Advanced setup\" guide}.\n   *\n   * @param {HTMLElement|String} sourceElementOrData The DOM element that will be the source for the created editor\n   * or the editor's initial data.\n   *\n   * If a DOM element is passed, its content will be automatically loaded to the editor upon initialization.\n   * Moreover, the editor data will be set back to the original element once the editor is destroyed.\n   *\n   * If the initial data is passed, a detached editor will be created. In this case you need to insert it into the DOM manually.\n   * It is available via\n   * {@link module:editor-decoupled/decouplededitorui~DecoupledEditorUI#getEditableElement `editor.ui.getEditableElement()`}.\n   *\n   * @param {module:core/editor/editorconfig~EditorConfig} [config] The editor configuration.\n   * @returns {Promise} A promise resolved once the editor is ready. The promise resolves with the created editor instance.\n   */\n\n\n  static create(sourceElementOrData, config = {}) {\n    return new Promise(resolve => {\n      const isHTMLElement = isElement(sourceElementOrData);\n\n      if (isHTMLElement && sourceElementOrData.tagName === 'TEXTAREA') {\n        // Documented in core/editor/editor.js\n        throw new CKEditorError('editor-wrong-element: This type of editor cannot be initialized inside <textarea> element.', null);\n      }\n\n      const editor = new this(sourceElementOrData, config);\n      resolve(editor.initPlugins().then(() => {\n        editor.ui.init();\n      }).then(() => {\n        if (!isHTMLElement && config.initialData) {\n          // Documented in core/editor/editorconfig.jdoc.\n          throw new CKEditorError('editor-create-initial-data: ' + 'The config.initialData option cannot be used together with initial data passed in Editor.create().', null);\n        }\n\n        const initialData = config.initialData || getInitialData(sourceElementOrData);\n        return editor.data.init(initialData);\n      }).then(() => editor.fire('ready')).then(() => editor));\n    });\n  }\n\n}\nmix(DecoupledEditor, DataApiMixin);\n\nfunction getInitialData(sourceElementOrData) {\n  return isElement(sourceElementOrData) ? getDataFromElement(sourceElementOrData) : sourceElementOrData;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * @module core/editor/utils/securesourceelement\n */\n\n/**\n * Marks the source element on which the editor was initialized. This prevents other editor instances from using this element.\n *\n * Running multiple editor instances on the same source element causes various issues and it is\n * crucial this helper is called as soon as the source element is known to prevent collisions.\n *\n * @param {module:core/editor/editor~Editor} editor Editor instance.\n */\n\nexport default function secureSourceElement(editor) {\n  const sourceElement = editor.sourceElement; // If the editor was initialized without specifying an element, we don't need to secure anything.\n\n  if (!sourceElement) {\n    return;\n  }\n\n  if (sourceElement.ckeditorInstance) {\n    /**\n     * A DOM element used to create the editor (e.g.\n     * {@link module:editor-inline/inlineeditor~InlineEditor.create `InlineEditor.create()`})\n     * has already been used to create another editor instance. Make sure each editor is\n     * created with an unique DOM element.\n     *\n     * @error editor-source-element-already-used\n     * @param {HTMLElement} element DOM element that caused the collision.\n     */\n    throw new CKEditorError('editor-source-element-already-used: ' + 'The DOM element cannot be used to create multiple editor instances.', editor);\n  }\n\n  sourceElement.ckeditorInstance = editor;\n  editor.once('destroy', () => {\n    delete sourceElement.ckeditorInstance;\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/setdatainelement\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * Sets data in a given element.\n *\n * @param {HTMLElement} el The element in which the data will be set.\n * @param {String} data The data string.\n */\nexport default function setDataInElement(el, data) {\n  if (el instanceof HTMLTextAreaElement) {\n    el.value = data;\n  }\n\n  el.innerHTML = data;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals HTMLTextAreaElement */\n\n/**\n * @module utils/dom/getdatafromelement\n */\n\n/**\n * Gets data from a given source element.\n *\n * @param {HTMLElement} el The element from which the data will be retrieved.\n * @returns {String} The data string.\n */\nexport default function getDataFromElement(el) {\n  if (el instanceof HTMLTextAreaElement) {\n    return el.value;\n  }\n\n  return el.innerHTML;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/plugin\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The base class for CKEditor plugin classes.\n *\n * @implements module:core/plugin~PluginInterface\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Plugin {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    /**\n     * The editor instance.\n     *\n     * Note that most editors implement the {@link module:core/editor/editorwithui~EditorWithUI} interface in addition\n     * to the base {@link module:core/editor/editor~Editor} interface. However, editors with an external UI\n     * (i.e. Bootstrap-based) or a headless editor may not implement the {@link module:core/editor/editorwithui~EditorWithUI}\n     * interface.\n     *\n     * Because of above, to make plugins more universal, it is recommended to split features into:\n     *  - The \"editing\" part that only uses the {@link module:core/editor/editor~Editor} interface.\n     *  - The \"UI\" part that uses both the {@link module:core/editor/editor~Editor} interface and\n     *  the {@link module:core/editor/editorwithui~EditorWithUI} interface.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor} #editor\n     */\n    this.editor = editor;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this.stopListening();\n  }\n\n}\nmix(Plugin, ObservableMixin);\n/**\n * The base interface for CKEditor plugins.\n *\n * In its minimal form a plugin can be a simple function that accepts {@link module:core/editor/editor~Editor the editor}\n * as a parameter:\n *\n *\t\t// A simple plugin that enables a data processor.\n *\t\tfunction MyPlugin( editor ) {\n *\t\t\teditor.data.processor = new MyDataProcessor();\n *\t\t}\n *\n * In most cases however, you will want to inherit from the {@link module:core/plugin~Plugin} class which implements the\n * {@link module:utils/observablemixin~ObservableMixin} and is, therefore, more convenient:\n *\n *\t\tclass MyPlugin extends Plugin {\n *\t\t\tinit() {\n *\t\t\t\t// `listenTo()` and `editor` are available thanks to `Plugin`.\n *\t\t\t\t// By using `listenTo()` you will ensure that the listener is removed when\n *\t\t\t\t// the plugin is destroyed.\n *\t\t\t\tthis.listenTo( this.editor.data, 'ready', () => {\n *\t\t\t\t\t// Do something when the data is ready.\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n * The plugin can also implement methods (e.g. {@link module:core/plugin~PluginInterface#init `init()`} or\n * {@link module:core/plugin~PluginInterface#destroy `destroy()`}) which, when present, will be used to properly\n * initialize and destroy the plugin.\n *\n * **Note:** When defined as a plain function, the plugin acts as a constructor and will be\n * called in parallel with other plugins' {@link module:core/plugin~PluginInterface#constructor constructors}.\n * This means the code of that plugin will be executed **before** {@link module:core/plugin~PluginInterface#init `init()`} and\n * {@link module:core/plugin~PluginInterface#afterInit `afterInit()`} methods of other plugins and, for instance,\n * you cannot use it to extend other plugins' {@glink framework/guides/architecture/editing-engine#schema schema}\n * rules as they are defined later on during the `init()` stage.\n *\n * @interface PluginInterface\n */\n\n/**\n * Creates a new plugin instance. This is the first step of the plugin initialization.\n * See also {@link #init} and {@link #afterInit}.\n *\n * A plugin is always instantiated after its {@link module:core/plugin~PluginInterface.requires dependencies} and the\n * {@link #init} and {@link #afterInit} methods are called in the same order.\n *\n * Usually, you will want to put your plugin's initialization code in the {@link #init} method.\n * The constructor can be understood as \"before init\" and used in special cases, just like\n * {@link #afterInit} serves the special \"after init\" scenarios (e.g.the code which depends on other\n * plugins, but which does not {@link module:core/plugin~PluginInterface.requires explicitly require} them).\n *\n * @method #constructor\n * @param {module:core/editor/editor~Editor} editor\n */\n\n/**\n * An array of plugins required by this plugin.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\timport Image from './image.js';\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ Image ];\n *\t\t\t}\n *\t\t}\n *\n * @static\n * @readonly\n * @member {Array.<Function>|undefined} module:core/plugin~PluginInterface.requires\n */\n\n/**\n * An optional name of the plugin. If set, the plugin will be available in\n * {@link module:core/plugincollection~PluginCollection#get} by its\n * name and its constructor. If not, then only by its constructor.\n *\n * The name should reflect the constructor name.\n *\n * To keep the plugin class definition tight it is recommended to define this property as a static getter:\n *\n *\t\texport default class ImageCaption {\n *\t\t\tstatic get pluginName() {\n *\t\t\t\treturn 'ImageCaption';\n *\t\t\t}\n *\t\t}\n *\n * Note: The native `Function.name` property could not be used to keep the plugin name because\n * it will be mangled during code minification.\n *\n * Naming a plugin is necessary to enable removing it through the\n * {@link module:core/editor/editorconfig~EditorConfig#removePlugins `config.removePlugins`} option.\n *\n * @static\n * @readonly\n * @member {String|undefined} module:core/plugin~PluginInterface.pluginName\n */\n\n/**\n * The second stage (after plugin {@link #constructor}) of plugin initialization.\n * Unlike the plugin constructor this method can be asynchronous.\n *\n * A plugin's `init()` method is called after its {@link module:core/plugin~PluginInterface.requires dependencies} are initialized,\n * so in the same order as constructors of these plugins.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #init\n * @returns {null|Promise}\n */\n\n/**\n * The third (and last) stage of plugin initialization. See also {@link #constructor} and {@link #init}.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #afterInit\n * @returns {null|Promise}\n */\n\n/**\n * Destroys the plugin.\n *\n * **Note:** This method is optional. A plugin instance does not need to have it defined.\n *\n * @method #destroy\n * @returns {null|Promise}\n */\n\n/**\n * Array of loaded plugins.\n *\n * @typedef {Array.<module:core/plugin~PluginInterface>} module:core/plugin~LoadedPlugins\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/datatransfer\n */\n\n/**\n * Facade over the native [`DataTransfer`](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer) object.\n */\nexport default class DataTransfer {\n  constructor(nativeDataTransfer) {\n    /**\n     * The array of files created from the native `DataTransfer#files` or `DataTransfer#items`.\n     *\n     * @readonly\n     * @member {Array.<File>} #files\n     */\n    this.files = getFiles(nativeDataTransfer);\n    /**\n     * The native DataTransfer object.\n     *\n     * @private\n     * @member {DataTransfer} #_native\n     */\n\n    this._native = nativeDataTransfer;\n  }\n  /**\n   * Returns an array of available native content types.\n   *\n   * @returns {Array.<String>}\n   */\n\n\n  get types() {\n    return this._native.types;\n  }\n  /**\n   * Gets data from the data transfer by its mime type.\n   *\n   *\t\tdataTransfer.getData( 'text/plain' );\n   *\n   * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n   * @returns {String}\n   */\n\n\n  getData(type) {\n    return this._native.getData(type);\n  }\n  /**\n   * Sets data in the data transfer.\n   *\n   * @param {String} type The mime type. E.g. `text/html` or `text/plain`.\n   * @param {String} data\n   */\n\n\n  setData(type, data) {\n    this._native.setData(type, data);\n  }\n\n}\n\nfunction getFiles(nativeDataTransfer) {\n  // DataTransfer.files and items are Array-like and might not have an iterable interface.\n  const files = nativeDataTransfer.files ? Array.from(nativeDataTransfer.files) : [];\n  const items = nativeDataTransfer.items ? Array.from(nativeDataTransfer.items) : [];\n\n  if (files.length) {\n    return files;\n  } // Chrome have empty DataTransfer.files, but let get files through the items interface.\n\n\n  return items.filter(item => item.kind === 'file').map(item => item.getAsFile());\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboardobserver\n */\nimport DomEventObserver from '@ckeditor/ckeditor5-engine/src/view/observer/domeventobserver';\nimport EventInfo from '@ckeditor/ckeditor5-utils/src/eventinfo';\nimport DataTransfer from './datatransfer';\n/**\n * Clipboard events observer.\n *\n * Fires the following events:\n *\n * * {@link module:engine/view/document~Document#event:clipboardInput}\n * * {@link module:engine/view/document~Document#event:dragover}\n * * {@link module:engine/view/document~Document#event:drop}\n * * {@link module:engine/view/document~Document#event:paste}\n * * {@link module:engine/view/document~Document#event:copy}\n * * {@link module:engine/view/document~Document#event:cut}\n *\n * Note that this observer is not available by default (it is not added by the engine).\n * To make it available it needs to be added to {@link module:engine/view/document~Document} by\n * the {@link module:engine/view/view~View#addObserver `View#addObserver()`} method. You can also load the\n * {@link module:clipboard/clipboard~Clipboard} plugin which adds this observer automatically (because it uses it).\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class ClipboardObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    const viewDocument = this.document;\n    this.domEventType = ['paste', 'copy', 'cut', 'drop', 'dragover'];\n    this.listenTo(viewDocument, 'paste', handleInput, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'drop', handleInput, {\n      priority: 'low'\n    });\n\n    function handleInput(evt, data) {\n      data.preventDefault();\n      const targetRanges = data.dropRange ? [data.dropRange] : Array.from(viewDocument.selection.getRanges());\n      const eventInfo = new EventInfo(viewDocument, 'clipboardInput');\n      viewDocument.fire(eventInfo, {\n        dataTransfer: data.dataTransfer,\n        targetRanges\n      }); // If CKEditor handled the input, do not bubble the original event any further.\n      // This helps external integrations recognize that fact and act accordingly.\n      // https://github.com/ckeditor/ckeditor5-upload/issues/92\n\n      if (eventInfo.stop.called) {\n        data.stopPropagation();\n      }\n    }\n  }\n\n  onDomEvent(domEvent) {\n    const evtData = {\n      dataTransfer: new DataTransfer(domEvent.clipboardData ? domEvent.clipboardData : domEvent.dataTransfer)\n    };\n\n    if (domEvent.type == 'drop') {\n      evtData.dropRange = getDropViewRange(this.view, domEvent);\n    }\n\n    this.fire(domEvent.type, domEvent, evtData);\n  }\n\n}\n\nfunction getDropViewRange(view, domEvent) {\n  const domDoc = domEvent.target.ownerDocument;\n  const x = domEvent.clientX;\n  const y = domEvent.clientY;\n  let domRange; // Webkit & Blink.\n\n  if (domDoc.caretRangeFromPoint && domDoc.caretRangeFromPoint(x, y)) {\n    domRange = domDoc.caretRangeFromPoint(x, y);\n  } // FF.\n  else if (domEvent.rangeParent) {\n      domRange = domDoc.createRange();\n      domRange.setStart(domEvent.rangeParent, domEvent.rangeOffset);\n      domRange.collapse(true);\n    }\n\n  if (domRange) {\n    return view.domConverter.domRangeToView(domRange);\n  } else {\n    return view.document.selection.getFirstRange();\n  }\n}\n/**\n * Fired as a continuation of {@link #event:paste} and {@link #event:drop} events.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * Fired with a `dataTransfer` which comes from the clipboard and which content should be processed\n * and inserted into the editor.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardInput\n * @param {Object} data Event data.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n * @param {Array.<module:engine/view/range~Range>} data.targetRanges Ranges which are the target of the operation\n * (usually – into which the content should be inserted).\n * If clipboard input was triggered by a paste operation, then these are the selection ranges. If by a drop operation,\n * then it's the drop position (which can be different than the selection at the moment of drop).\n */\n\n/**\n * Fired when user drags content over one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:dragover\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user dropped content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:drop\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n * @param {module:engine/view/range~Range} dropRange The position into which the content is dropped.\n */\n\n/**\n * Fired when user pasted content into one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:engine/view/document~Document#event:clipboardInput\n * @event module:engine/view/document~Document#event:paste\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user copied content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:copy\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * Fired when user cut content from one of the editables.\n *\n * Introduced by {@link module:clipboard/clipboardobserver~ClipboardObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:clipboard/clipboardobserver~ClipboardObserver}\n * needs to be added to {@link module:engine/view/document~Document} by the {@link module:engine/view/view~View#addObserver} method.\n * It's done by the {@link module:clipboard/clipboard~Clipboard} feature. If it's not loaded, it must be done manually.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @event module:engine/view/document~Document#event:cut\n * @param {module:clipboard/clipboardobserver~ClipboardEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:paste},\n * {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut} events.\n *\n * In order to access clipboard data use `dataTransfer` property.\n *\n * @class module:clipboard/clipboardobserver~ClipboardEventData\n * @extends module:engine/view/observer/domeventdata~DomEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboardobserver~ClipboardEventData#dataTransfer\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/viewtoplaintext\n */\n// Elements which should not have empty-line padding.\n// Most `view.ContainerElement` want to be separate by new-line, but some are creating one structure\n// together (like `<li>`) so it is better to separate them by only one \"\\n\".\nconst smallPaddingElements = ['figcaption', 'li'];\n/**\n * Converts {@link module:engine/view/item~Item view item} and all of its children to plain text.\n *\n * @param {module:engine/view/item~Item} viewItem View item to convert.\n * @returns {String} Plain text representation of `viewItem`.\n */\n\nexport default function viewToPlainText(viewItem) {\n  let text = '';\n\n  if (viewItem.is('text') || viewItem.is('textProxy')) {\n    // If item is `Text` or `TextProxy` simple take its text data.\n    text = viewItem.data;\n  } else if (viewItem.is('img') && viewItem.hasAttribute('alt')) {\n    // Special case for images - use alt attribute if it is provided.\n    text = viewItem.getAttribute('alt');\n  } else {\n    // Other elements are document fragments, attribute elements or container elements.\n    // They don't have their own text value, so convert their children.\n    let prev = null;\n\n    for (const child of viewItem.getChildren()) {\n      const childText = viewToPlainText(child); // Separate container element children with one or more new-line characters.\n\n      if (prev && (prev.is('containerElement') || child.is('containerElement'))) {\n        if (smallPaddingElements.includes(prev.name) || smallPaddingElements.includes(child.name)) {\n          text += '\\n';\n        } else {\n          text += '\\n\\n';\n        }\n      }\n\n      text += childText;\n      prev = child;\n    }\n  }\n\n  return text;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/clipboard\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClipboardObserver from './clipboardobserver';\nimport plainTextToHtml from './utils/plaintexttohtml';\nimport normalizeClipboardHtml from './utils/normalizeclipboarddata';\nimport viewToPlainText from './utils/viewtoplaintext.js';\nimport HtmlDataProcessor from '@ckeditor/ckeditor5-engine/src/dataprocessor/htmldataprocessor';\n/**\n * The clipboard feature. It is responsible for intercepting the `paste` and `drop` events and\n * passing the pasted content through the clipboard pipeline in order to insert it into the editor's content.\n * It also handles the `cut` and `copy` events to fill the native clipboard with serialized editor's data.\n *\n * Read more about the clipboard integration in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive} guide.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Clipboard extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Clipboard';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const modelDocument = editor.model.document;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    /**\n     * Data processor used to convert pasted HTML to a view structure.\n     *\n     * @private\n     * @member {module:engine/dataprocessor/htmldataprocessor~HtmlDataProcessor} #_htmlDataProcessor\n     */\n\n    this._htmlDataProcessor = new HtmlDataProcessor();\n    view.addObserver(ClipboardObserver); // The clipboard paste pipeline.\n    // Pasting and dropping is disabled when editor is read-only.\n    // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n\n    this.listenTo(viewDocument, 'clipboardInput', evt => {\n      if (editor.isReadOnly) {\n        evt.stop();\n      }\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(viewDocument, 'clipboardInput', (evt, data) => {\n      const dataTransfer = data.dataTransfer;\n      let content = '';\n\n      if (dataTransfer.getData('text/html')) {\n        content = normalizeClipboardHtml(dataTransfer.getData('text/html'));\n      } else if (dataTransfer.getData('text/plain')) {\n        content = plainTextToHtml(dataTransfer.getData('text/plain'));\n      }\n\n      content = this._htmlDataProcessor.toView(content);\n      this.fire('inputTransformation', {\n        content,\n        dataTransfer\n      });\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(this, 'inputTransformation', (evt, data) => {\n      if (!data.content.isEmpty) {\n        const dataController = this.editor.data;\n        const model = this.editor.model; // Convert the pasted content to a model document fragment.\n        // Conversion is contextual, but in this case we need an \"all allowed\" context and for that\n        // we use the $clipboardHolder item.\n\n        const modelFragment = dataController.toModel(data.content, '$clipboardHolder');\n\n        if (modelFragment.childCount == 0) {\n          return;\n        }\n\n        model.insertContent(modelFragment);\n      }\n    }, {\n      priority: 'low'\n    }); // The clipboard copy/cut pipeline.\n\n    function onCopyCut(evt, data) {\n      const dataTransfer = data.dataTransfer;\n      data.preventDefault();\n      const content = editor.data.toView(editor.model.getSelectedContent(modelDocument.selection));\n      viewDocument.fire('clipboardOutput', {\n        dataTransfer,\n        content,\n        method: evt.name\n      });\n    }\n\n    this.listenTo(viewDocument, 'copy', onCopyCut, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'cut', (evt, data) => {\n      // Cutting is disabled when editor is read-only.\n      // See: https://github.com/ckeditor/ckeditor5-clipboard/issues/26.\n      if (editor.isReadOnly) {\n        data.preventDefault();\n      } else {\n        onCopyCut(evt, data);\n      }\n    }, {\n      priority: 'low'\n    });\n    this.listenTo(viewDocument, 'clipboardOutput', (evt, data) => {\n      if (!data.content.isEmpty) {\n        data.dataTransfer.setData('text/html', this._htmlDataProcessor.toData(data.content));\n        data.dataTransfer.setData('text/plain', viewToPlainText(data.content));\n      }\n\n      if (data.method == 'cut') {\n        editor.model.deleteContent(modelDocument.selection);\n      }\n    }, {\n      priority: 'low'\n    });\n  }\n\n}\n/**\n * Fired with a `content` and `dataTransfer` objects. The `content` which comes from the clipboard (was pasted or dropped)\n * should be processed in order to be inserted into the editor. The `dataTransfer` object is available\n * in case the transformation functions needs access to a raw clipboard data.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#input-pipeline \"clipboard input pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:clipboard/clipboard~Clipboard#event:inputTransformation\n * @param {Object} data Event data.\n * @param {module:engine/view/documentfragment~DocumentFragment} data.content Event data. Content to be inserted into the editor.\n * It can be modified by the event listeners. Read more about the clipboard pipelines in\n * {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n * @param {module:clipboard/datatransfer~DataTransfer} data.dataTransfer Data transfer instance.\n */\n\n/**\n * Fired on {@link module:engine/view/document~Document#event:copy} and {@link module:engine/view/document~Document#event:cut}\n * with a copy of selected content. The content can be processed before it ends up in the clipboard.\n *\n * It is a part of the {@glink framework/guides/deep-dive/clipboard#output-pipeline \"clipboard output pipeline\"}.\n *\n * @see module:clipboard/clipboardobserver~ClipboardObserver\n * @see module:clipboard/clipboard~Clipboard\n * @event module:engine/view/document~Document#event:clipboardOutput\n * @param {module:clipboard/clipboard~ClipboardOutputEventData} data Event data.\n */\n\n/**\n * The value of the {@link module:engine/view/document~Document#event:clipboardOutput} event.\n *\n * @class module:clipboard/clipboard~ClipboardOutputEventData\n */\n\n/**\n * Data transfer instance.\n *\n * @readonly\n * @member {module:clipboard/datatransfer~DataTransfer} module:clipboard/clipboard~ClipboardOutputEventData#dataTransfer\n */\n\n/**\n * Content to be put into the clipboard. It can be modified by the event listeners.\n * Read more about the clipboard pipelines in {@glink framework/guides/deep-dive/clipboard \"Clipboard\" deep dive}.\n *\n * @member {module:engine/view/documentfragment~DocumentFragment} module:clipboard/clipboard~ClipboardOutputEventData#content\n */\n\n/**\n * Whether the event was triggered by copy or cut operation.\n *\n * @member {'copy'|'cut'} module:clipboard/clipboard~ClipboardOutputEventData#method\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/normalizeclipboarddata\n */\n\n/**\n * Removes some popular browser quirks out of the clipboard data (HTML).\n *\n * @param {String} data The HTML data to normalize.\n * @returns {String} Normalized HTML.\n */\nexport default function normalizeClipboardData(data) {\n  return data.replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, (fullMatch, spaces) => {\n    // Handle the most popular and problematic case when even a single space becomes an nbsp;.\n    // Decode those to normal spaces. Read more in https://github.com/ckeditor/ckeditor5-clipboard/issues/2.\n    if (spaces.length == 1) {\n      return ' ';\n    }\n\n    return spaces;\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module clipboard/utils/plaintexttohtml\n */\n\n/**\n * Converts plain text to its HTML-ized version.\n *\n * @param {String} text The plain text to convert.\n * @returns {String} HTML generated from the plain text.\n */\nexport default function plainTextToHtml(text) {\n  text = text // Encode <>.\n  .replace(/</g, '&lt;').replace(/>/g, '&gt;') // Creates paragraphs for every line breaks.\n  .replace(/\\n/g, '</p><p>') // Preserve trailing spaces (only the first and last one – the rest is handled below).\n  .replace(/^\\s/, '&nbsp;').replace(/\\s$/, '&nbsp;') // Preserve other subsequent spaces now.\n  .replace(/\\s\\s/g, ' &nbsp;');\n\n  if (text.indexOf('</p><p>') > -1) {\n    // If we created paragraphs above, add the trailing ones.\n    text = `<p>${text}</p>`;\n  } // TODO:\n  // * What about '\\nfoo' vs ' foo'?\n\n\n  return text;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/command\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * The base class for CKEditor commands.\n *\n * Commands are the main way to manipulate editor contents and state. They are mostly used by UI elements (or by other\n * commands) to make changes in the model. Commands are available in every part of code that has access to\n * the {@link module:core/editor/editor~Editor editor} instance.\n *\n * Instances of registered commands can be retrieved from {@link module:core/editor/editor~Editor#commands `editor.commands`}.\n * The easiest way to execute a command is through {@link module:core/editor/editor~Editor#execute `editor.execute()`}.\n *\n * By default commands are disabled when the editor is in {@link module:core/editor/editor~Editor#isReadOnly read-only} mode.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Command {\n  /**\n   * Creates a new `Command` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor on which this command will be used.\n   */\n  constructor(editor) {\n    /**\n     * The editor on which this command will be used.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor}\n     */\n    this.editor = editor;\n    /**\n     * The value of the command. A concrete command class should define what it represents for it.\n     *\n     * For example, the `'bold'` command's value indicates whether the selection starts in a bolded text.\n     * And the value of the `'link'` command may be an object with links details.\n     *\n     * It is possible for a command to have no value (e.g. for stateless actions such as `'imageUpload'`).\n     *\n     * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n     *\n     * @observable\n     * @readonly\n     * @member #value\n     */\n\n    this.set('value', undefined);\n    /**\n     * Flag indicating whether a command is enabled or disabled.\n     * A disabled command will do nothing when executed.\n     *\n     * A concrete command class should control this value by overriding the {@link #refresh `refresh()`} method.\n     *\n     * It is possible to disable a command from \"outside\". For instance, in your integration you may want to disable\n     * a certain set of commands for the time being. To do that, you can use the fact that `isEnabled` is observable\n     * and it fires the `set:isEnabled` event every time anyone tries to modify its value:\n     *\n     *\t\tfunction disableCommand( cmd ) {\n     *\t\t\tcmd.on( 'set:isEnabled', forceDisable, { priority: 'highest' } );\n     *\n     *\t\t\tcmd.isEnabled = false;\n     *\n     *\t\t\t// Make it possible to enable the command again.\n     *\t\t\treturn () => {\n     *\t\t\t\tcmd.off( 'set:isEnabled', forceDisable );\n     *\t\t\t\tcmd.refresh();\n     *\t\t\t};\n     *\n     *\t\t\tfunction forceDisable( evt ) {\n     *\t\t\t\tevt.return = false;\n     *\t\t\t\tevt.stop();\n     *\t\t\t}\n     *\t\t}\n     *\n     *\t\t// Usage:\n     *\n     *\t\t// Disabling the command.\n     *\t\tconst enableBold = disableCommand( editor.commands.get( 'bold' ) );\n     *\n     *\t\t// Enabling the command again.\n     *\t\tenableBold();\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #isEnabled\n     */\n\n    this.set('isEnabled', false);\n    /**\n     * Holds identifiers for {@link #forceDisabled} mechanism.\n     *\n     * @type {Set.<String>}\n     * @private\n     */\n\n    this._disableStack = new Set();\n    this.decorate('execute'); // By default every command is refreshed when changes are applied to the model.\n\n    this.listenTo(this.editor.model.document, 'change', () => {\n      this.refresh();\n    });\n    this.on('execute', evt => {\n      if (!this.isEnabled) {\n        evt.stop();\n      }\n    }, {\n      priority: 'high'\n    }); // By default commands are disabled when the editor is in read-only mode.\n\n    this.listenTo(editor, 'change:isReadOnly', (evt, name, value) => {\n      if (value) {\n        this.forceDisabled('readOnlyMode');\n      } else {\n        this.clearForceDisabled('readOnlyMode');\n      }\n    });\n  }\n  /**\n   * Refreshes the command. The command should update its {@link #isEnabled} and {@link #value} properties\n   * in this method.\n   *\n   * This method is automatically called when\n   * {@link module:engine/model/document~Document#event:change any changes are applied to the document}.\n   */\n\n\n  refresh() {\n    this.isEnabled = true;\n  }\n  /**\n   * Disables the command.\n   *\n   * Command may be disabled by multiple features or algorithms (at once). When disabling a command, unique id should be passed\n   * (e.g. feature name). The same identifier should be used when {@link #clearForceDisabled enabling back} the command.\n   * The command becomes enabled only after all features {@link #clearForceDisabled enabled it back}.\n   *\n   * Disabling and enabling a command:\n   *\n   *\t\tcommand.isEnabled; // -> true\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> false\n   *\t\tcommand.clearForceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> true\n   *\n   * Command disabled by multiple features:\n   *\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.forceDisabled( 'OtherFeature' );\n   *\t\tcommand.clearForceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> false\n   *\t\tcommand.clearForceDisabled( 'OtherFeature' );\n   *\t\tcommand.isEnabled; // -> true\n   *\n   * Multiple disabling with the same identifier is redundant:\n   *\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.forceDisabled( 'MyFeature' );\n   *\t\tcommand.clearForceDisabled( 'MyFeature' );\n   *\t\tcommand.isEnabled; // -> true\n   *\n   * **Note:** some commands or algorithms may have more complex logic when it comes to enabling or disabling certain commands,\n   * so the command might be still disabled after {@link #clearForceDisabled} was used.\n   *\n   * @param {String} id Unique identifier for disabling. Use the same id when {@link #clearForceDisabled enabling back} the command.\n   */\n\n\n  forceDisabled(id) {\n    this._disableStack.add(id);\n\n    if (this._disableStack.size == 1) {\n      this.on('set:isEnabled', forceDisable, {\n        priority: 'highest'\n      });\n      this.isEnabled = false;\n    }\n  }\n  /**\n   * Clears forced disable previously set through {@link #clearForceDisabled}. See {@link #clearForceDisabled}.\n   *\n   * @param {String} id Unique identifier, equal to the one passed in {@link #forceDisabled} call.\n   */\n\n\n  clearForceDisabled(id) {\n    this._disableStack.delete(id);\n\n    if (this._disableStack.size == 0) {\n      this.off('set:isEnabled', forceDisable);\n      this.refresh();\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   * A command may accept parameters. They will be passed from {@link module:core/editor/editor~Editor#execute `editor.execute()`}\n   * to the command.\n   *\n   * The `execute()` method will automatically abort when the command is disabled ({@link #isEnabled} is `false`).\n   * This behavior is implemented by a high priority listener to the {@link #event:execute} event.\n   *\n   * In order to see how to disable a command from \"outside\" see the {@link #isEnabled} documentation.\n   *\n   * @fires execute\n   */\n\n\n  execute() {}\n  /**\n   * Destroys the command.\n   */\n\n\n  destroy() {\n    this.stopListening();\n  }\n  /**\n   * Event fired by the {@link #execute} method. The command action is a listener to this event so it's\n   * possible to change/cancel the behavior of the command by listening to this event.\n   *\n   * See {@link module:utils/observablemixin~ObservableMixin#decorate} for more information and samples.\n   *\n   * **Note:** This event is fired even if command is disabled. However, it is automatically blocked\n   * by a high priority listener in order to prevent command execution.\n   *\n   * @event execute\n   */\n\n\n}\nmix(Command, ObservableMixin); // Helper function that forces command to be disabled.\n\nfunction forceDisable(evt) {\n  evt.return = false;\n  evt.stop();\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/utils\n */\n\n/**\n * Returns attributes that should be preserved on the enter key.\n *\n * Filtering is realized based on `copyOnEnter` attribute property. Read more about attribute properties\n * {@link module:engine/model/schema~Schema#setAttributeProperties here}.\n *\n * @param {module:engine/model/schema~Schema} schema\n * @param {Iterable.<*>} allAttributes attributes to filter.\n * @returns {Iterable.<*>}\n */\nexport function* getCopyOnEnterAttributes(schema, allAttributes) {\n  for (const attribute of allAttributes) {\n    if (attribute && schema.getAttributeProperties(attribute[0]).copyOnEnter) {\n      yield attribute;\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/entercommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * Enter command. It is used by the {@link module:enter/enter~Enter Enter feature} to handle the <kbd>Enter</kbd> key.\n *\n * @extends module:core/command~Command\n */\n\nexport default class EnterCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    model.change(writer => {\n      enterBlock(this.editor.model, writer, doc.selection, model.schema);\n      this.fire('afterExecute', {\n        writer\n      });\n    });\n  }\n\n} // Creates a new block in the way that the <kbd>Enter</kbd> key is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n// @param {module:engine/model/schema~Schema} schema\n\nfunction enterBlock(model, writer, selection, schema) {\n  const isSelectionEmpty = selection.isCollapsed;\n  const range = selection.getFirstRange();\n  const startElement = range.start.parent;\n  const endElement = range.end.parent; // Don't touch the roots and other limit elements.\n\n  if (schema.isLimit(startElement) || schema.isLimit(endElement)) {\n    // Delete the selected content but only if inside a single limit element.\n    // Abort, when crossing limit elements boundary (e.g. <limit1>x[x</limit1>donttouchme<limit2>y]y</limit2>).\n    // This is an edge case and it's hard to tell what should actually happen because such a selection\n    // is not entirely valid.\n    if (!isSelectionEmpty && startElement == endElement) {\n      model.deleteContent(selection);\n    }\n\n    return;\n  }\n\n  if (isSelectionEmpty) {\n    const attributesToCopy = getCopyOnEnterAttributes(writer.model.schema, selection.getAttributes());\n    splitBlock(writer, range.start);\n    writer.setSelectionAttribute(attributesToCopy);\n  } else {\n    const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n    const isContainedWithinOneElement = startElement == endElement;\n    model.deleteContent(selection, {\n      leaveUnmerged\n    });\n\n    if (leaveUnmerged) {\n      // Partially selected elements.\n      //\n      // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x</h><h>^x</h>\n      if (isContainedWithinOneElement) {\n        splitBlock(writer, selection.focus);\n      } // Selection over multiple elements.\n      //\n      // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n      else {\n          writer.setSelection(endElement, 0);\n        }\n    }\n  }\n}\n\nfunction splitBlock(writer, splitPos) {\n  writer.split(splitPos);\n  writer.setSelection(splitPos.parent.nextSibling, 0);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enterobserver\n */\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\n/**\n * Enter observer introduces the {@link module:engine/view/document~Document#event:enter} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class EnterObserver extends Observer {\n  constructor(view) {\n    super(view);\n    const doc = this.document;\n    doc.on('keydown', (evt, data) => {\n      if (this.isEnabled && data.keyCode == keyCodes.enter) {\n        // Save the event object to check later if it was stopped or not.\n        let event;\n        doc.once('enter', evt => event = evt, {\n          priority: 'highest'\n        });\n        doc.fire('enter', new DomEventData(doc, data.domEvent, {\n          isSoft: data.shiftKey\n        })); // Stop `keydown` event if `enter` event was stopped.\n        // https://github.com/ckeditor/ckeditor5/issues/753\n\n        if (event && event.stop.called) {\n          evt.stop();\n        }\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe() {}\n\n}\n/**\n * Event fired when the user presses the <kbd>Enter</kbd> key.\n *\n * Note: This event is fired by the {@link module:enter/enterobserver~EnterObserver observer}\n * (usually registered by the {@link module:enter/enter~Enter Enter feature} and\n * {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature}).\n *\n * @event module:engine/view/document~Document#event:enter\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {Boolean} data.isSoft Whether it's a soft enter (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or hard enter (<kbd>Enter</kbd>).\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/enter\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport EnterCommand from './entercommand';\nimport EnterObserver from './enterobserver';\n/**\n * This plugin handles the <kbd>Enter</kbd> key (hard line break) in the editor.\n *\n * See also the {@link module:enter/shiftenter~ShiftEnter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Enter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Enter';\n  }\n\n  init() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    view.addObserver(EnterObserver);\n    editor.commands.add('enter', new EnterCommand(editor));\n    this.listenTo(viewDocument, 'enter', (evt, data) => {\n      data.preventDefault(); // The soft enter key is handled by the ShiftEnter plugin.\n\n      if (data.isSoft) {\n        return;\n      }\n\n      editor.execute('enter');\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftentercommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { getCopyOnEnterAttributes } from './utils';\n/**\n * ShiftEnter command. It is used by the {@link module:enter/shiftenter~ShiftEnter ShiftEnter feature} to handle\n * the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ShiftEnterCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    model.change(writer => {\n      softBreakAction(model, writer, doc.selection);\n      this.fire('afterExecute', {\n        writer\n      });\n    });\n  }\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.isEnabled = isEnabled(model.schema, doc.selection);\n  }\n\n} // Checks whether the ShiftEnter command should be enabled in the specified selection.\n//\n// @param {module:engine/model/schema~Schema} schema\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n\nfunction isEnabled(schema, selection) {\n  // At this moment it is okay to support single range selections only.\n  // But in the future we may need to change that.\n  if (selection.rangeCount > 1) {\n    return false;\n  }\n\n  const anchorPos = selection.anchor; // Check whether the break element can be inserted in the current selection anchor.\n\n  if (!anchorPos || !schema.checkChild(anchorPos, 'softBreak')) {\n    return false;\n  }\n\n  const range = selection.getFirstRange();\n  const startElement = range.start.parent;\n  const endElement = range.end.parent; // Do not modify the content if selection is cross-limit elements.\n\n  if ((isInsideLimitElement(startElement, schema) || isInsideLimitElement(endElement, schema)) && startElement !== endElement) {\n    return false;\n  }\n\n  return true;\n} // Creates a break in the way that the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke is expected to work.\n//\n// @param {module:engine/model~Model} model\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n// Selection on which the action should be performed.\n\n\nfunction softBreakAction(model, writer, selection) {\n  const isSelectionEmpty = selection.isCollapsed;\n  const range = selection.getFirstRange();\n  const startElement = range.start.parent;\n  const endElement = range.end.parent;\n  const isContainedWithinOneElement = startElement == endElement;\n\n  if (isSelectionEmpty) {\n    const attributesToCopy = getCopyOnEnterAttributes(model.schema, selection.getAttributes());\n    insertBreak(writer, range.end);\n    writer.removeSelectionAttribute(selection.getAttributeKeys());\n    writer.setSelectionAttribute(attributesToCopy);\n  } else {\n    const leaveUnmerged = !(range.start.isAtStart && range.end.isAtEnd);\n    model.deleteContent(selection, {\n      leaveUnmerged\n    }); // Selection within one element:\n    //\n    // <h>x[xx]x</h>\t\t-> <h>x^x</h>\t\t\t-> <h>x<br>^x</h>\n\n    if (isContainedWithinOneElement) {\n      insertBreak(writer, selection.focus);\n    } // Selection over multiple elements.\n    //\n    // <h>x[x</h><p>y]y<p>\t-> <h>x^</h><p>y</p>\t-> <h>x</h><p>^y</p>\n    //\n    // We chose not to insert a line break in this case because:\n    //\n    // * it's not a very common scenario,\n    // * it actually surprised me when I saw the \"expected behavior\" in real life.\n    //\n    // It's ok if the user will need to be more specific where they want the <br> to be inserted.\n    else {\n        // Move the selection to the 2nd element (last step of the example above).\n        if (leaveUnmerged) {\n          writer.setSelection(endElement, 0);\n        }\n      }\n  }\n}\n\nfunction insertBreak(writer, position) {\n  const breakLineElement = writer.createElement('softBreak');\n  writer.insert(breakLineElement, position);\n  writer.setSelection(breakLineElement, 'after');\n} // Checks whether the specified `element` is a child of the limit element.\n//\n// Checking whether the `<p>` element is inside a limit element:\n//   - <$root><p>Text.</p></$root> => false\n//   - <$root><limitElement><p>Text</p></limitElement></$root> => true\n//\n// @param {module:engine/model/element~Element} element\n// @param {module:engine/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction isInsideLimitElement(element, schema) {\n  // `$root` is a limit element but in this case is an invalid element.\n  if (element.is('rootElement')) {\n    return false;\n  }\n\n  return schema.isLimit(element) || isInsideLimitElement(element.parent, schema);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module enter/shiftenter\n */\nimport ShiftEnterCommand from './shiftentercommand';\nimport EnterObserver from './enterobserver';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * This plugin handles the <kbd>Shift</kbd>+<kbd>Enter</kbd> keystroke (soft line break) in the editor.\n *\n * See also the {@link module:enter/enter~Enter} plugin.\n *\n * For more information about this feature see the {@glink api/enter package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ShiftEnter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ShiftEnter';\n  }\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const conversion = editor.conversion;\n    const view = editor.editing.view;\n    const viewDocument = view.document; // Configure the schema.\n\n    schema.register('softBreak', {\n      allowWhere: '$text',\n      isInline: true\n    }); // Configure converters.\n\n    conversion.for('upcast').elementToElement({\n      model: 'softBreak',\n      view: 'br'\n    });\n    conversion.for('downcast').elementToElement({\n      model: 'softBreak',\n      view: (modelElement, viewWriter) => viewWriter.createEmptyElement('br')\n    });\n    view.addObserver(EnterObserver);\n    editor.commands.add('shiftEnter', new ShiftEnterCommand(editor));\n    this.listenTo(viewDocument, 'enter', (evt, data) => {\n      data.preventDefault(); // The hard enter key is handled by the Enter plugin.\n\n      if (!data.isSoft) {\n        return;\n      }\n\n      editor.execute('shiftEnter');\n      view.scrollToTheSelection();\n    }, {\n      priority: 'low'\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/changebuffer\n */\n\n/**\n * Change buffer allows to group atomic changes (like characters that have been typed) into\n * {@link module:engine/model/batch~Batch batches}.\n *\n * Batches represent single undo steps, hence changes added to one single batch are undone together.\n *\n * The buffer has a configurable limit of atomic changes that it can accommodate. After the limit was\n * exceeded (see {@link ~ChangeBuffer#input}), a new batch is created in {@link ~ChangeBuffer#batch}.\n *\n * To use the change buffer you need to let it know about the number of changes that were added to the batch:\n *\n *\t\tconst buffer = new ChangeBuffer( model, LIMIT );\n *\n *\t\t// Later on in your feature:\n *\t\tbuffer.batch.insert( pos, insertedCharacters );\n *\t\tbuffer.input( insertedCharacters.length );\n *\n */\nexport default class ChangeBuffer {\n  /**\n   * Creates a new instance of the change buffer.\n   *\n   * @param {module:engine/model/model~Model} model\n   * @param {Number} [limit=20] The maximum number of atomic changes which can be contained in one batch.\n   */\n  constructor(model, limit = 20) {\n    /**\n     * The model instance.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model} #model\n     */\n    this.model = model;\n    /**\n     * The number of atomic changes in the buffer. Once it exceeds the {@link #limit},\n     * the {@link #batch batch} is set to a new one.\n     *\n     * @readonly\n     * @member {Number} #size\n     */\n\n    this.size = 0;\n    /**\n     * The maximum number of atomic changes which can be contained in one batch.\n     *\n     * @readonly\n     * @member {Number} #limit\n     */\n\n    this.limit = limit;\n    /**\n     * Whether the buffer is locked. A locked buffer cannot be reset unless it gets unlocked.\n     *\n     * @readonly\n     * @member {Boolean} #isLocked\n     */\n\n    this.isLocked = false; // The function to be called in order to notify the buffer about batches which appeared in the document.\n    // The callback will check whether it is a new batch and in that case the buffer will be flushed.\n    //\n    // The reason why the buffer needs to be flushed whenever a new batch appears is that the changes added afterwards\n    // should be added to a new batch. For instance, when the  user types, then inserts an image, and then types again,\n    // the characters typed after inserting the image should be added to a different batch than the characters typed before.\n\n    this._changeCallback = (evt, batch) => {\n      if (batch.type != 'transparent' && batch !== this._batch) {\n        this._reset(true);\n      }\n    };\n\n    this._selectionChangeCallback = () => {\n      this._reset();\n    };\n\n    this.model.document.on('change', this._changeCallback);\n    this.model.document.selection.on('change:range', this._selectionChangeCallback);\n    this.model.document.selection.on('change:attribute', this._selectionChangeCallback);\n    /**\n     * The current batch instance.\n     *\n     * @private\n     * @member #_batch\n     */\n\n    /**\n     * The callback to document the change event which later needs to be removed.\n     *\n     * @private\n     * @member #_changeCallback\n     */\n\n    /**\n     * The callback to document selection `change:attribute` and `change:range` events which resets the buffer.\n     *\n     * @private\n     * @member #_selectionChangeCallback\n     */\n  }\n  /**\n   * The current batch to which a feature should add its operations. Once the {@link #size}\n   * is reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n   *\n   * @type {module:engine/model/batch~Batch}\n   */\n\n\n  get batch() {\n    if (!this._batch) {\n      this._batch = this.model.createBatch();\n    }\n\n    return this._batch;\n  }\n  /**\n   * The input number of changes into the buffer. Once the {@link #size} is\n   * reached or exceeds the {@link #limit}, the batch is set to a new instance and the size is reset.\n   *\n   * @param {Number} changeCount The number of atomic changes to input.\n   */\n\n\n  input(changeCount) {\n    this.size += changeCount;\n\n    if (this.size >= this.limit) {\n      this._reset(true);\n    }\n  }\n  /**\n   * Locks the buffer.\n   */\n\n\n  lock() {\n    this.isLocked = true;\n  }\n  /**\n   * Unlocks the buffer.\n   */\n\n\n  unlock() {\n    this.isLocked = false;\n  }\n  /**\n   * Destroys the buffer.\n   */\n\n\n  destroy() {\n    this.model.document.off('change', this._changeCallback);\n    this.model.document.selection.off('change:range', this._selectionChangeCallback);\n    this.model.document.selection.off('change:attribute', this._selectionChangeCallback);\n  }\n  /**\n   * Resets the change buffer.\n   *\n   * @private\n   * @param {Boolean} [ignoreLock] Whether internal lock {@link #isLocked} should be ignored.\n   */\n\n\n  _reset(ignoreLock) {\n    if (!this.isLocked || ignoreLock) {\n      this._batch = null;\n      this.size = 0;\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/inputcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport ChangeBuffer from './utils/changebuffer';\n/**\n * The input command. Used by the {@link module:typing/input~Input input feature} to handle typing.\n *\n * @extends module:core/command~Command\n */\n\nexport default class InputCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {Number} undoStepSize The maximum number of atomic changes\n   * which can be contained in one batch in the command buffer.\n   */\n  constructor(editor, undoStepSize) {\n    super(editor);\n    /**\n     * Typing's change buffer used to group subsequent changes into batches.\n     *\n     * @readonly\n     * @private\n     * @member {module:typing/utils/changebuffer~ChangeBuffer} #_buffer\n     */\n\n    this._buffer = new ChangeBuffer(editor.model, undoStepSize);\n    /**\n     * Stores batches created by the input command. The batches are used to differentiate input batches from other batches using\n     * {@link module:typing/input~Input#isInput} method.\n     *\n     * @type {WeakSet<module:engine/model/batch~Batch>}\n     * @protected\n     */\n\n    this._batches = new WeakSet();\n  }\n  /**\n   * The current change buffer.\n   *\n   * @type {module:typing/utils/changebuffer~ChangeBuffer}\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    this._buffer.destroy();\n  }\n  /**\n   * Executes the input command. It replaces the content within the given range with the given text.\n   * Replacing is a two step process, first the content within the range is removed and then the new text is inserted\n   * at the beginning of the range (which after the removal is a collapsed range).\n   *\n   * @fires execute\n   * @param {Object} [options] The command options.\n   * @param {String} [options.text=''] The text to be inserted.\n   * @param {module:engine/model/range~Range} [options.range] The range in which the text is inserted. Defaults\n   * to the first range in the current selection.\n   * @param {module:engine/model/range~Range} [options.resultRange] The range where the selection\n   * should be placed after the insertion. If not specified, the selection will be placed right after\n   * the inserted text.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const text = options.text || '';\n    const textInsertions = text.length;\n    const range = options.range || doc.selection.getFirstRange();\n    const resultRange = options.resultRange;\n    model.enqueueChange(this._buffer.batch, writer => {\n      const isCollapsedRange = range.isCollapsed;\n\n      this._buffer.lock();\n\n      model.deleteContent(model.createSelection(range));\n\n      if (text) {\n        model.insertContent(writer.createText(text, doc.selection.getAttributes()), range.start);\n      }\n\n      if (resultRange) {\n        writer.setSelection(resultRange);\n      } else if (isCollapsedRange) {\n        // If range was collapsed just shift the selection by the number of inserted characters.\n        writer.setSelection(range.start.getShiftedBy(textInsertions));\n      }\n\n      this._buffer.unlock();\n\n      this._buffer.input(textInsertions); // Store the batch as an 'input' batch for the Input.isInput( batch ) check.\n\n\n      this._batches.add(this._buffer.batch);\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injectunsafekeystrokeshandling\n */\nimport { getCode } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Handles keystrokes which are unsafe for typing. This handler's logic is explained\n * in https://github.com/ckeditor/ckeditor5-typing/issues/83#issuecomment-398690251.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\n\nexport default function injectUnsafeKeystrokesHandling(editor) {\n  let latestCompositionSelection = null;\n  const model = editor.model;\n  const view = editor.editing.view;\n  const inputCommand = editor.commands.get('input'); // For Android, we want to handle keystrokes on `beforeinput` to be sure that code in `DeleteObserver` already had a chance to be fired.\n\n  if (env.isAndroid) {\n    view.document.on('beforeinput', (evt, evtData) => handleUnsafeKeystroke(evtData), {\n      priority: 'lowest'\n    });\n  } else {\n    view.document.on('keydown', (evt, evtData) => handleUnsafeKeystroke(evtData), {\n      priority: 'lowest'\n    });\n  }\n\n  view.document.on('compositionstart', handleCompositionStart, {\n    priority: 'lowest'\n  });\n  view.document.on('compositionend', () => {\n    latestCompositionSelection = model.createSelection(model.document.selection);\n  }, {\n    priority: 'lowest'\n  }); // Handles the keydown event. We need to guess whether such keystroke is going to result\n  // in typing. If so, then before character insertion happens, any selected content needs\n  // to be deleted. Otherwise the default browser deletion mechanism would be\n  // triggered, resulting in:\n  //\n  // * Hundreds of mutations which could not be handled.\n  // * But most importantly, loss of control over how the content is being deleted.\n  //\n  // The method is used in a low-priority listener, hence allowing other listeners (e.g. delete or enter features)\n  // to handle the event.\n  //\n  // @param {module:engine/view/observer/keyobserver~KeyEventData} evtData\n\n  function handleUnsafeKeystroke(evtData) {\n    const doc = model.document;\n    const isComposing = view.document.isComposing;\n    const isSelectionUnchanged = latestCompositionSelection && latestCompositionSelection.isEqual(doc.selection); // Reset stored composition selection.\n\n    latestCompositionSelection = null; // By relying on the state of the input command we allow disabling the entire input easily\n    // by just disabling the input command. We could’ve used here the delete command but that\n    // would mean requiring the delete feature which would block loading one without the other.\n    // We could also check the editor.isReadOnly property, but that wouldn't allow to block\n    // the input without blocking other features.\n\n    if (!inputCommand.isEnabled) {\n      return;\n    }\n\n    if (isSafeKeystroke(evtData) || doc.selection.isCollapsed) {\n      return;\n    } // If during composition, deletion should be prevented as it may remove composed sequence (#83).\n\n\n    if (isComposing && evtData.keyCode === 229) {\n      return;\n    } // If there is a `keydown` event fired with '229' keycode it might be related\n    // to recent composition. Check if selection is the same as upon ending recent composition,\n    // if so do not remove selected content as it will remove composed sequence (#83).\n\n\n    if (!isComposing && evtData.keyCode === 229 && isSelectionUnchanged) {\n      return;\n    }\n\n    deleteSelectionContent();\n  } // Handles the `compositionstart` event. It is used only in special cases to remove the contents\n  // of a non-collapsed selection so composition itself does not result in complex mutations.\n  //\n  // The special case mentioned above is a situation in which the `keydown` event is fired after\n  // `compositionstart` event. In such cases {@link #handleKeydown} cannot clear current selection\n  // contents (because it is too late and will break the composition) so the composition handler takes care of it.\n\n\n  function handleCompositionStart() {\n    const doc = model.document;\n    const isFlatSelection = doc.selection.rangeCount === 1 ? doc.selection.getFirstRange().isFlat : true; // If on `compositionstart` there is a non-collapsed selection which start and end have different parents\n    // it means the `handleKeydown()` method did not remove its contents. It happens usually because\n    // of different order of events (`compositionstart` before `keydown` - in Safari). In such cases\n    // we need to remove selection contents on composition start (#83).\n\n    if (doc.selection.isCollapsed || isFlatSelection) {\n      return;\n    }\n\n    deleteSelectionContent();\n  }\n\n  function deleteSelectionContent() {\n    const buffer = inputCommand.buffer;\n    buffer.lock();\n    model.enqueueChange(buffer.batch, () => {\n      model.deleteContent(model.document.selection);\n    });\n    buffer.unlock();\n  }\n}\nconst safeKeycodes = [getCode('arrowUp'), getCode('arrowRight'), getCode('arrowDown'), getCode('arrowLeft'), 9, // Tab\n16, // Shift\n17, // Ctrl\n18, // Alt\n19, // Pause\n20, // CapsLock\n27, // Escape\n33, // PageUp\n34, // PageDown\n35, // Home\n36, // End,\n45, // Insert,\n91, // Windows,\n93, // Menu key,\n144, // NumLock\n145, // ScrollLock,\n173, // Mute/Unmute\n174, // Volume up\n175, // Volume down,\n176, // Next song,\n177, // Previous song,\n178, // Stop,\n179, // Play/Pause,\n255 // Display brightness (increase and decrease)\n]; // Function keys.\n\nfor (let code = 112; code <= 135; code++) {\n  safeKeycodes.push(code);\n} // Returns `true` if a keystroke should not cause any content change caused by \"typing\".\n//\n// Note: This implementation is very simple and will need to be refined with time.\n//\n// @private\n// @param {engine.view.observer.keyObserver.KeyEventData} keyData\n// @returns {Boolean}\n\n\nfunction isSafeKeystroke(keyData) {\n  // Keystrokes which contain Ctrl don't represent typing.\n  if (keyData.ctrlKey) {\n    return true;\n  }\n\n  return safeKeycodes.includes(keyData.keyCode);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/utils\n */\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport diffToChanges from '@ckeditor/ckeditor5-utils/src/difftochanges';\n/**\n * Returns true if container children have mutated or more than a single text node was changed.\n *\n * @private\n * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n * @returns {Boolean}\n */\n\nexport function containerChildrenMutated(mutations) {\n  if (mutations.length == 0) {\n    return false;\n  } // Check if there is any mutation of `children` type or any mutation that changes more than one text node.\n\n\n  for (const mutation of mutations) {\n    if (mutation.type === 'children' && !getSingleTextNodeChange(mutation)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Returns change made to a single text node.\n *\n * @private\n * @param {module:engine/view/observer/mutationobserver~MutatedText|\n * module:engine/view/observer/mutationobserver~MutatedChildren} mutation\n * @returns {Object|undefined} Change object (see {@link module:utils/difftochanges~diffToChanges} output)\n * or undefined if more than a single text node was changed.\n */\n\nexport function getSingleTextNodeChange(mutation) {\n  // One new node.\n  if (mutation.newChildren.length - mutation.oldChildren.length != 1) {\n    return;\n  } // Which is text.\n\n\n  const diffResult = diff(mutation.oldChildren, mutation.newChildren, compareChildNodes);\n  const changes = diffToChanges(diffResult, mutation.newChildren); // In case of [ delete, insert, insert ] the previous check will not exit.\n\n  if (changes.length > 1) {\n    return;\n  }\n\n  const change = changes[0]; // Which is text.\n\n  if (!(!!change.values[0] && change.values[0].is('text'))) {\n    return;\n  }\n\n  return change;\n}\n/**\n * Checks whether two view nodes are identical, which means they are the same object\n * or contain exactly same data (in case of text nodes).\n *\n * @private\n * @param {module:engine/view/node~Node} oldChild\n * @param {module:engine/view/node~Node} newChild\n * @returns {Boolean}\n */\n\nexport function compareChildNodes(oldChild, newChild) {\n  if (!!oldChild && oldChild.is('text') && !!newChild && newChild.is('text')) {\n    return oldChild.data === newChild.data;\n  } else {\n    return oldChild === newChild;\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/difftochanges\n */\n\n/**\n * Creates a set of changes which need to be applied to the input in order to transform\n * it into the output. This function can be used with strings or arrays.\n *\n *\t\tconst input = Array.from( 'abc' );\n *\t\tconst output = Array.from( 'xaby' );\n *\t\tconst changes = diffToChanges( diff( input, output ), output );\n *\n *\t\tchanges.forEach( change => {\n *\t\t\tif ( change.type == 'insert' ) {\n *\t\t\t\tinput.splice( change.index, 0, ...change.values );\n *\t\t\t} else if ( change.type == 'delete' ) {\n *\t\t\t\tinput.splice( change.index, change.howMany );\n *\t\t\t}\n *\t\t} );\n *\n *\t\tinput.join( '' ) == output.join( '' ); // -> true\n *\n * @param {Array.<'equal'|'insert'|'delete'>} diff Result of {@link module:utils/diff~diff}.\n * @param {String|Array} output The string or array which was passed as diff's output.\n * @returns {Array.<Object>} Set of changes (insert or delete) which need to be applied to the input\n * in order to transform it into the output.\n */\nexport default function diffToChanges(diff, output) {\n  const changes = [];\n  let index = 0;\n  let lastOperation;\n  diff.forEach(change => {\n    if (change == 'equal') {\n      pushLast();\n      index++;\n    } else if (change == 'insert') {\n      if (isContinuationOf('insert')) {\n        lastOperation.values.push(output[index]);\n      } else {\n        pushLast();\n        lastOperation = {\n          type: 'insert',\n          index,\n          values: [output[index]]\n        };\n      }\n\n      index++;\n    } else\n      /* if ( change == 'delete' ) */\n      {\n        if (isContinuationOf('delete')) {\n          lastOperation.howMany++;\n        } else {\n          pushLast();\n          lastOperation = {\n            type: 'delete',\n            index,\n            howMany: 1\n          };\n        }\n      }\n  });\n  pushLast();\n  return changes;\n\n  function pushLast() {\n    if (lastOperation) {\n      changes.push(lastOperation);\n      lastOperation = null;\n    }\n  }\n\n  function isContinuationOf(expected) {\n    return lastOperation && lastOperation.type == expected;\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/injecttypingmutationshandling\n */\nimport diff from '@ckeditor/ckeditor5-utils/src/diff';\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\nimport { getSingleTextNodeChange, containerChildrenMutated } from './utils';\n/**\n * Handles mutations caused by normal typing.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\n\nexport default function injectTypingMutationsHandling(editor) {\n  editor.editing.view.document.on('mutations', (evt, mutations, viewSelection) => {\n    new MutationHandler(editor).handle(mutations, viewSelection);\n  });\n}\n/**\n * Helper class for translating DOM mutations into model changes.\n *\n * @private\n */\n\nclass MutationHandler {\n  /**\n   * Creates an instance of the mutation handler.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   */\n  constructor(editor) {\n    /**\n     * Editor instance for which mutations are handled.\n     *\n     * @readonly\n     * @member {module:core/editor/editor~Editor} #editor\n     */\n    this.editor = editor;\n    /**\n     * The editing controller.\n     *\n     * @readonly\n     * @member {module:engine/controller/editingcontroller~EditingController} #editing\n     */\n\n    this.editing = this.editor.editing;\n  }\n  /**\n   * Handles given mutations.\n   *\n   * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n   * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n   * @param {module:engine/view/selection~Selection|null} viewSelection\n   */\n\n\n  handle(mutations, viewSelection) {\n    if (containerChildrenMutated(mutations)) {\n      this._handleContainerChildrenMutations(mutations, viewSelection);\n    } else {\n      for (const mutation of mutations) {\n        // Fortunately it will never be both.\n        this._handleTextMutation(mutation, viewSelection);\n\n        this._handleTextNodeInsertion(mutation);\n      }\n    }\n  }\n  /**\n   * Handles situations when container's children mutated during input. This can happen when\n   * the browser is trying to \"fix\" DOM in certain situations. For example, when the user starts to type\n   * in `<p><a href=\"\"><i>Link{}</i></a></p>`, the browser might change the order of elements\n   * to `<p><i><a href=\"\">Link</a>x{}</i></p>`. A similar situation happens when the spell checker\n   * replaces a word wrapped with `<strong>` with a word wrapped with a `<b>` element.\n   *\n   * To handle such situations, the common DOM ancestor of all mutations is converted to the model representation\n   * and then compared with the current model to calculate the proper text change.\n   *\n   * Note: Single text node insertion is handled in {@link #_handleTextNodeInsertion} and text node mutation is handled\n   * in {@link #_handleTextMutation}).\n   *\n   * @private\n   * @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n   * module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n   * @param {module:engine/view/selection~Selection|null} viewSelection\n   */\n\n\n  _handleContainerChildrenMutations(mutations, viewSelection) {\n    // Get common ancestor of all mutations.\n    const mutationsCommonAncestor = getMutationsContainer(mutations); // Quit if there is no common ancestor.\n\n    if (!mutationsCommonAncestor) {\n      return;\n    }\n\n    const domConverter = this.editor.editing.view.domConverter; // Get common ancestor in DOM.\n\n    const domMutationCommonAncestor = domConverter.mapViewToDom(mutationsCommonAncestor); // Create fresh DomConverter so it will not use existing mapping and convert current DOM to model.\n    // This wouldn't be needed if DomConverter would allow to create fresh view without checking any mappings.\n\n    const freshDomConverter = new DomConverter();\n    const modelFromCurrentDom = this.editor.data.toModel(freshDomConverter.domToView(domMutationCommonAncestor)).getChild(0); // Current model.\n\n    const currentModel = this.editor.editing.mapper.toModelElement(mutationsCommonAncestor); // If common ancestor is not mapped, do not do anything. It probably is a parent of another view element.\n    // That means that we would need to diff model elements (see `if` below). Better return early instead of\n    // trying to get a reasonable model ancestor. It will fell into the `if` below anyway.\n    // This situation happens for example for lists. If `<ul>` is a common ancestor, `currentModel` is `undefined`\n    // because `<ul>` is not mapped (`<li>`s are).\n    // See https://github.com/ckeditor/ckeditor5/issues/718.\n\n    if (!currentModel) {\n      return;\n    } // Get children from both ancestors.\n\n\n    const modelFromDomChildren = Array.from(modelFromCurrentDom.getChildren());\n    const currentModelChildren = Array.from(currentModel.getChildren()); // Remove the last `<softBreak>` from the end of `modelFromDomChildren` if there is no `<softBreak>` in current model.\n    // If the described scenario happened, it means that this is a bogus `<br />` added by a browser.\n\n    const lastDomChild = modelFromDomChildren[modelFromDomChildren.length - 1];\n    const lastCurrentChild = currentModelChildren[currentModelChildren.length - 1];\n\n    if (lastDomChild && lastDomChild.is('softBreak') && lastCurrentChild && !lastCurrentChild.is('softBreak')) {\n      modelFromDomChildren.pop();\n    }\n\n    const schema = this.editor.model.schema; // Skip situations when common ancestor has any container elements.\n\n    if (!isSafeForTextMutation(modelFromDomChildren, schema) || !isSafeForTextMutation(currentModelChildren, schema)) {\n      return;\n    } // Replace &nbsp; inserted by the browser with normal space. See comment in `_handleTextMutation`.\n    // Replace non-texts with any character. This is potentially dangerous but passes in manual tests. The thing is\n    // that we need to take care of proper indexes so we cannot simply remove non-text elements from the content.\n    // By inserting a character we keep all the real texts on their indexes.\n\n\n    const newText = modelFromDomChildren.map(item => item.is('text') ? item.data : '@').join('').replace(/\\u00A0/g, ' ');\n    const oldText = currentModelChildren.map(item => item.is('text') ? item.data : '@').join('').replace(/\\u00A0/g, ' '); // Do nothing if mutations created same text.\n\n    if (oldText === newText) {\n      return;\n    }\n\n    const diffResult = diff(oldText, newText);\n    const {\n      firstChangeAt,\n      insertions,\n      deletions\n    } = calculateChanges(diffResult); // Try setting new model selection according to passed view selection.\n\n    let modelSelectionRange = null;\n\n    if (viewSelection) {\n      modelSelectionRange = this.editing.mapper.toModelRange(viewSelection.getFirstRange());\n    }\n\n    const insertText = newText.substr(firstChangeAt, insertions);\n    const removeRange = this.editor.model.createRange(this.editor.model.createPositionAt(currentModel, firstChangeAt), this.editor.model.createPositionAt(currentModel, firstChangeAt + deletions));\n    this.editor.execute('input', {\n      text: insertText,\n      range: removeRange,\n      resultRange: modelSelectionRange\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  _handleTextMutation(mutation, viewSelection) {\n    if (mutation.type != 'text') {\n      return;\n    } // Replace &nbsp; inserted by the browser with normal space.\n    // We want only normal spaces in the model and in the view. Renderer and DOM Converter will be then responsible\n    // for rendering consecutive spaces using &nbsp;, but the model and the view has to be clear.\n    // Other feature may introduce inserting non-breakable space on specific key stroke (for example shift + space).\n    // However then it will be handled outside of mutations, like enter key is.\n    // The replacing is here because it has to be done before `diff` and `diffToChanges` functions, as they\n    // take `newText` and compare it to (cleaned up) view.\n    // It could also be done in mutation observer too, however if any outside plugin would like to\n    // introduce additional events for mutations, they would get already cleaned up version (this may be good or not).\n\n\n    const newText = mutation.newText.replace(/\\u00A0/g, ' '); // To have correct `diffResult`, we also compare view node text data with &nbsp; replaced by space.\n\n    const oldText = mutation.oldText.replace(/\\u00A0/g, ' '); // Do nothing if mutations created same text.\n\n    if (oldText === newText) {\n      return;\n    }\n\n    const diffResult = diff(oldText, newText);\n    const {\n      firstChangeAt,\n      insertions,\n      deletions\n    } = calculateChanges(diffResult); // Try setting new model selection according to passed view selection.\n\n    let modelSelectionRange = null;\n\n    if (viewSelection) {\n      modelSelectionRange = this.editing.mapper.toModelRange(viewSelection.getFirstRange());\n    } // Get the position in view and model where the changes will happen.\n\n\n    const viewPos = this.editing.view.createPositionAt(mutation.node, firstChangeAt);\n    const modelPos = this.editing.mapper.toModelPosition(viewPos);\n    const removeRange = this.editor.model.createRange(modelPos, modelPos.getShiftedBy(deletions));\n    const insertText = newText.substr(firstChangeAt, insertions);\n    this.editor.execute('input', {\n      text: insertText,\n      range: removeRange,\n      resultRange: modelSelectionRange\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  _handleTextNodeInsertion(mutation) {\n    if (mutation.type != 'children') {\n      return;\n    }\n\n    const change = getSingleTextNodeChange(mutation);\n    const viewPos = this.editing.view.createPositionAt(mutation.node, change.index);\n    const modelPos = this.editing.mapper.toModelPosition(viewPos);\n    const insertedText = change.values[0].data;\n    this.editor.execute('input', {\n      // Replace &nbsp; inserted by the browser with normal space.\n      // See comment in `_handleTextMutation`.\n      // In this case we don't need to do this before `diff` because we diff whole nodes.\n      // Just change &nbsp; in case there are some.\n      text: insertedText.replace(/\\u00A0/g, ' '),\n      range: this.editor.model.createRange(modelPos)\n    });\n  }\n\n} // Returns first common ancestor of all mutations that is either {@link module:engine/view/containerelement~ContainerElement}\n// or {@link module:engine/view/rootelement~RootElement}.\n//\n// @private\n// @param {Array.<module:engine/view/observer/mutationobserver~MutatedText|\n// module:engine/view/observer/mutationobserver~MutatedChildren>} mutations\n// @returns {module:engine/view/containerelement~ContainerElement|engine/view/rootelement~RootElement|undefined}\n\n\nfunction getMutationsContainer(mutations) {\n  const lca = mutations.map(mutation => mutation.node).reduce((commonAncestor, node) => {\n    return commonAncestor.getCommonAncestor(node, {\n      includeSelf: true\n    });\n  });\n\n  if (!lca) {\n    return;\n  } // We need to look for container and root elements only, so check all LCA's\n  // ancestors (starting from itself).\n\n\n  return lca.getAncestors({\n    includeSelf: true,\n    parentFirst: true\n  }).find(element => element.is('containerElement') || element.is('rootElement'));\n} // Returns true if provided array contains content that won't be problematic during diffing and text mutation handling.\n//\n// @param {Array.<module:engine/model/node~Node>} children\n// @param {module:engine/model/schema~Schema} schema\n// @returns {Boolean}\n\n\nfunction isSafeForTextMutation(children, schema) {\n  return children.every(child => schema.isInline(child));\n} // Calculates first change index and number of characters that should be inserted and deleted starting from that index.\n//\n// @private\n// @param diffResult\n// @returns {{insertions: number, deletions: number, firstChangeAt: *}}\n\n\nfunction calculateChanges(diffResult) {\n  // Index where the first change happens. Used to set the position from which nodes will be removed and where will be inserted.\n  let firstChangeAt = null; // Index where the last change happens. Used to properly count how many characters have to be removed and inserted.\n\n  let lastChangeAt = null; // Get `firstChangeAt` and `lastChangeAt`.\n\n  for (let i = 0; i < diffResult.length; i++) {\n    const change = diffResult[i];\n\n    if (change != 'equal') {\n      firstChangeAt = firstChangeAt === null ? i : firstChangeAt;\n      lastChangeAt = i;\n    }\n  } // How many characters, starting from `firstChangeAt`, should be removed.\n\n\n  let deletions = 0; // How many characters, starting from `firstChangeAt`, should be inserted.\n\n  let insertions = 0;\n\n  for (let i = firstChangeAt; i <= lastChangeAt; i++) {\n    // If there is no change (equal) or delete, the character is existing in `oldText`. We count it for removing.\n    if (diffResult[i] != 'insert') {\n      deletions++;\n    } // If there is no change (equal) or insert, the character is existing in `newText`. We count it for inserting.\n\n\n    if (diffResult[i] != 'delete') {\n      insertions++;\n    }\n  }\n\n  return {\n    insertions,\n    deletions,\n    firstChangeAt\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/input\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport InputCommand from './inputcommand';\nimport injectUnsafeKeystrokesHandling from './utils/injectunsafekeystrokeshandling';\nimport injectTypingMutationsHandling from './utils/injecttypingmutationshandling';\n/**\n * Handles text input coming from the keyboard or other input methods.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Input extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Input';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // TODO The above default configuration value should be defined using editor.config.define() once it's fixed.\n\n    const inputCommand = new InputCommand(editor, editor.config.get('typing.undoStep') || 20);\n    editor.commands.add('input', inputCommand);\n    injectUnsafeKeystrokesHandling(editor);\n    injectTypingMutationsHandling(editor);\n  }\n  /**\n   * Checks batch if it is a result of user input - e.g. typing.\n   *\n   *\t\tconst input = editor.plugins.get( 'Input' );\n   *\n   *\t\teditor.model.document.on( 'change:data', ( evt, batch ) => {\n   *\t\t\tif ( input.isTyping( batch ) ) {\n   *\t\t\t\tconsole.log( 'The user typed something...' );\n   *\t\t\t}\n   *\t\t} );\n   *\n   * **Note:** This method checks if the batch was created using {@link module:typing/inputcommand~InputCommand 'input'}\n   * command as typing changes coming from user input are inserted to the document using that command.\n   *\n   * @param {module:engine/model/batch~Batch} batch A batch to check.\n   * @returns {Boolean}\n   */\n\n\n  isInput(batch) {\n    const inputCommand = this.editor.commands.get('input');\n    return inputCommand._batches.has(batch);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deletecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport count from '@ckeditor/ckeditor5-utils/src/count';\nimport ChangeBuffer from './utils/changebuffer';\n/**\n * The delete command. Used by the {@link module:typing/delete~Delete delete feature} to handle the <kbd>Delete</kbd> and\n * <kbd>Backspace</kbd> keys.\n *\n * @extends module:core/command~Command\n */\n\nexport default class DeleteCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {'forward'|'backward'} direction The directionality of the delete describing in what direction it\n   * should consume the content when the selection is collapsed.\n   */\n  constructor(editor, direction) {\n    super(editor);\n    /**\n     * The directionality of the delete describing in what direction it should\n     * consume the content when the selection is collapsed.\n     *\n     * @readonly\n     * @member {'forward'|'backward'} #direction\n     */\n\n    this.direction = direction;\n    /**\n     * Delete's change buffer used to group subsequent changes into batches.\n     *\n     * @readonly\n     * @private\n     * @member {typing.ChangeBuffer} #buffer\n     */\n\n    this._buffer = new ChangeBuffer(editor.model, editor.config.get('typing.undoStep'));\n  }\n  /**\n   * The current change buffer.\n   *\n   * @type {module:typing/utils/changebuffer~ChangeBuffer}\n   */\n\n\n  get buffer() {\n    return this._buffer;\n  }\n  /**\n   * Executes the delete command. Depending on whether the selection is collapsed or not, deletes its content\n   * or a piece of content in the {@link #direction defined direction}.\n   *\n   * @fires execute\n   * @param {Object} [options] The command options.\n   * @param {'character'} [options.unit='character'] See {@link module:engine/model/utils/modifyselection~modifySelection}'s options.\n   * @param {Number} [options.sequence=1] A number describing which subsequent delete event it is without the key being released.\n   * See the {@link module:engine/view/document~Document#event:delete} event data.\n   * @param {module:engine/model/selection~Selection} [options.selection] Selection to remove. If not set, current model selection\n   * will be used.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    model.enqueueChange(this._buffer.batch, writer => {\n      this._buffer.lock();\n\n      const selection = writer.createSelection(options.selection || doc.selection); // Do not replace the whole selected content if selection was collapsed.\n      // This prevents such situation:\n      //\n      // <h1></h1><p>[]</p>\t-->  <h1>[</h1><p>]</p> \t\t-->  <p></p>\n      // starting content\t\t-->   after `modifySelection`\t-->  after `deleteContent`.\n\n      const doNotResetEntireContent = selection.isCollapsed; // Try to extend the selection in the specified direction.\n\n      if (selection.isCollapsed) {\n        model.modifySelection(selection, {\n          direction: this.direction,\n          unit: options.unit\n        });\n      } // Check if deleting in an empty editor. See #61.\n\n\n      if (this._shouldEntireContentBeReplacedWithParagraph(options.sequence || 1)) {\n        this._replaceEntireContentWithParagraph(writer);\n\n        return;\n      } // If selection is still collapsed, then there's nothing to delete.\n\n\n      if (selection.isCollapsed) {\n        return;\n      }\n\n      let changeCount = 0;\n      selection.getFirstRange().getMinimalFlatRanges().forEach(range => {\n        changeCount += count(range.getWalker({\n          singleCharacters: true,\n          ignoreElementEnd: true,\n          shallow: true\n        }));\n      });\n      model.deleteContent(selection, {\n        doNotResetEntireContent\n      });\n\n      this._buffer.input(changeCount);\n\n      writer.setSelection(selection);\n\n      this._buffer.unlock();\n    });\n  }\n  /**\n   * If the user keeps <kbd>Backspace</kbd> or <kbd>Delete</kbd> key pressed, the content of the current\n   * editable will be cleared. However, this will not yet lead to resetting the remaining block to a paragraph\n   * (which happens e.g. when the user does <kbd>Ctrl</kbd> + <kbd>A</kbd>, <kbd>Backspace</kbd>).\n   *\n   * But, if the user pressed the key in an empty editable for the first time,\n   * we want to replace the entire content with a paragraph if:\n   *\n   * * the current limit element is empty,\n   * * the paragraph is allowed in the limit element,\n   * * the limit doesn't already have a paragraph inside.\n   *\n   * See https://github.com/ckeditor/ckeditor5-typing/issues/61.\n   *\n   * @private\n   * @param {Number} sequence A number describing which subsequent delete event it is without the key being released.\n   * @returns {Boolean}\n   */\n\n\n  _shouldEntireContentBeReplacedWithParagraph(sequence) {\n    // Does nothing if user pressed and held the \"Backspace\" or \"Delete\" key.\n    if (sequence > 1) {\n      return false;\n    }\n\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const limitElement = model.schema.getLimitElement(selection); // If a collapsed selection contains the whole content it means that the content is empty\n    // (from the user perspective).\n\n    const limitElementIsEmpty = selection.isCollapsed && selection.containsEntireContent(limitElement);\n\n    if (!limitElementIsEmpty) {\n      return false;\n    }\n\n    if (!model.schema.checkChild(limitElement, 'paragraph')) {\n      return false;\n    }\n\n    const limitElementFirstChild = limitElement.getChild(0); // Does nothing if the limit element already contains only a paragraph.\n    // We ignore the case when paragraph might have some inline elements (<p><inlineWidget>[]</inlineWidget></p>)\n    // because we don't support such cases yet and it's unclear whether inlineWidget shouldn't be a limit itself.\n\n    if (limitElementFirstChild && limitElementFirstChild.name === 'paragraph') {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * The entire content is replaced with the paragraph. Selection is moved inside the paragraph.\n   *\n   * @private\n   */\n\n\n  _replaceEntireContentWithParagraph(writer) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const limitElement = model.schema.getLimitElement(selection);\n    const paragraph = writer.createElement('paragraph');\n    writer.remove(writer.createRangeIn(limitElement));\n    writer.insert(paragraph, limitElement);\n    writer.setSelection(paragraph, 0);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/deleteobserver\n */\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\nimport DomEventData from '@ckeditor/ckeditor5-engine/src/view/observer/domeventdata';\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * Delete observer introduces the {@link module:engine/view/document~Document#event:delete} event.\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class DeleteObserver extends Observer {\n  constructor(view) {\n    super(view);\n    const document = view.document;\n    let sequence = 0;\n    document.on('keyup', (evt, data) => {\n      if (data.keyCode == keyCodes.delete || data.keyCode == keyCodes.backspace) {\n        sequence = 0;\n      }\n    });\n    document.on('keydown', (evt, data) => {\n      const deleteData = {};\n\n      if (data.keyCode == keyCodes.delete) {\n        deleteData.direction = 'forward';\n        deleteData.unit = 'character';\n      } else if (data.keyCode == keyCodes.backspace) {\n        deleteData.direction = 'backward';\n        deleteData.unit = 'codePoint';\n      } else {\n        return;\n      }\n\n      const hasWordModifier = env.isMac ? data.altKey : data.ctrlKey;\n      deleteData.unit = hasWordModifier ? 'word' : deleteData.unit;\n      deleteData.sequence = ++sequence;\n      fireViewDeleteEvent(evt, data.domEvent, deleteData);\n    }); // `beforeinput` is handled only for Android devices. Desktop Chrome and iOS are skipped because they are working fine now.\n\n    if (env.isAndroid) {\n      document.on('beforeinput', (evt, data) => {\n        // If event type is other than `deleteContentBackward` then this is not deleting.\n        if (data.domEvent.inputType != 'deleteContentBackward') {\n          return;\n        }\n\n        const deleteData = {\n          unit: 'codepoint',\n          direction: 'backward',\n          sequence: 1\n        }; // Android IMEs may change the DOM selection on `beforeinput` event so that the selection contains all the text\n        // that the IME wants to remove. We will pass this information to `delete` event so proper part of the content is removed.\n        //\n        // Sometimes it is only expanding by a one character (in case of collapsed selection). In this case we don't need to\n        // set a different selection to remove, it will work just fine.\n\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n\n        if (domSelection.anchorNode == domSelection.focusNode && domSelection.anchorOffset + 1 != domSelection.focusOffset) {\n          deleteData.selectionToRemove = view.domConverter.domSelectionToView(domSelection);\n        }\n\n        fireViewDeleteEvent(evt, data.domEvent, deleteData);\n      });\n    }\n\n    function fireViewDeleteEvent(originalEvent, domEvent, deleteData) {\n      // Save the event object to check later if it was stopped or not.\n      let event;\n      document.once('delete', evt => event = evt, {\n        priority: Number.POSITIVE_INFINITY\n      });\n      document.fire('delete', new DomEventData(document, domEvent, deleteData)); // Stop the original event if `delete` event was stopped.\n      // https://github.com/ckeditor/ckeditor5/issues/753\n\n      if (event && event.stop.called) {\n        originalEvent.stop();\n      }\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe() {}\n\n}\n/**\n * Event fired when the user tries to delete content (e.g. presses <kbd>Delete</kbd> or <kbd>Backspace</kbd>).\n *\n * Note: This event is fired by the {@link module:typing/deleteobserver~DeleteObserver observer}\n * (usually registered by the {@link module:typing/delete~Delete delete feature}).\n *\n * @event module:engine/view/document~Document#event:delete\n * @param {module:engine/view/observer/domeventdata~DomEventData} data\n * @param {'forward'|'delete'} data.direction The direction in which the deletion should happen.\n * @param {'character'|'word'} data.unit The \"amount\" of content that should be deleted.\n * @param {Number} data.sequence A number describing which subsequent delete event it is without the key being released.\n * If it's 2 or more it means that the key was pressed and hold.\n * @param {module:engine/view/selection~Selection} [data.selectionToRemove] View selection which content should be removed. If not set,\n * current selection should be used.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/delete\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport DeleteCommand from './deletecommand';\nimport DeleteObserver from './deleteobserver';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\n/**\n * The delete and backspace feature. Handles the <kbd>Delete</kbd> and <kbd>Backspace</kbd> keys in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Delete extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Delete';\n  }\n\n  init() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    view.addObserver(DeleteObserver);\n    editor.commands.add('forwardDelete', new DeleteCommand(editor, 'forward'));\n    editor.commands.add('delete', new DeleteCommand(editor, 'backward'));\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      const deleteCommandParams = {\n        unit: data.unit,\n        sequence: data.sequence\n      }; // If a specific (view) selection to remove was set, convert it to a model selection and set as a parameter for `DeleteCommand`.\n\n      if (data.selectionToRemove) {\n        const modelSelection = editor.model.createSelection();\n        const ranges = [];\n\n        for (const viewRange of data.selectionToRemove.getRanges()) {\n          ranges.push(editor.editing.mapper.toModelRange(viewRange));\n        }\n\n        modelSelection.setTo(ranges);\n        deleteCommandParams.selection = modelSelection;\n      }\n\n      editor.execute(data.direction == 'forward' ? 'forwardDelete' : 'delete', deleteCommandParams);\n      data.preventDefault();\n      view.scrollToTheSelection();\n    }); // Android IMEs have a quirk - they change DOM selection after the input changes were performed by the browser.\n    // This happens on `keyup` event. Android doesn't know anything about our deletion and selection handling. Even if the selection\n    // was changed during input events, IME remembers the position where the selection \"should\" be placed and moves it there.\n    //\n    // To prevent incorrect selection, we save the selection after deleting here and then re-set it on `keyup`. This has to be done\n    // on DOM selection level, because on `keyup` the model selection is still the same as it was just after deletion, so it\n    // wouldn't be changed and the fix would do nothing.\n    //\n\n    if (env.isAndroid) {\n      let domSelectionAfterDeletion = null;\n      this.listenTo(viewDocument, 'delete', (evt, data) => {\n        const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n        domSelectionAfterDeletion = {\n          anchorNode: domSelection.anchorNode,\n          anchorOffset: domSelection.anchorOffset,\n          focusNode: domSelection.focusNode,\n          focusOffset: domSelection.focusOffset\n        };\n      }, {\n        priority: 'lowest'\n      });\n      this.listenTo(viewDocument, 'keyup', (evt, data) => {\n        if (domSelectionAfterDeletion) {\n          const domSelection = data.domTarget.ownerDocument.defaultView.getSelection();\n          domSelection.collapse(domSelectionAfterDeletion.anchorNode, domSelectionAfterDeletion.anchorOffset);\n          domSelection.extend(domSelectionAfterDeletion.focusNode, domSelectionAfterDeletion.focusOffset);\n          domSelectionAfterDeletion = null;\n        }\n      });\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/typing\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Input from './input';\nimport Delete from './delete';\n/**\n * The typing feature. It handles typing.\n *\n * This is a \"glue\" plugin which loads the {@link module:typing/input~Input} and {@link module:typing/delete~Delete}\n * plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Typing extends Plugin {\n  static get requires() {\n    return [Input, Delete];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Typing';\n  }\n\n}\n/**\n * The configuration of the typing features. Used by the features from the `@ckeditor/ckeditor5-typing` package.\n *\n * Read more in {@link module:typing/typing~TypingConfig}.\n *\n * @member {module:typing/typing~TypingConfig} module:core/editor/editorconfig~EditorConfig#typing\n */\n\n/**\n * The configuration of the typing features. Used by the typing features in `@ckeditor/ckeditor5-typing` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttyping: ... // Typing feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TypingConfig\n */\n\n/**\n * The granularity of undo/redo for typing and deleting. The value `20` means (more or less) that a new undo step\n * is created every 20 characters are inserted or deleted.\n *\n * @member {Number} [module:typing/typing~TypingConfig#undoStep=20]\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/model/operation/nooperation\n */\nimport Operation from './operation';\n/**\n * Operation which is doing nothing (\"empty operation\", \"do-nothing operation\", \"noop\"). This is an operation,\n * which when executed does not change the tree model. It still has some parameters defined for transformation purposes.\n *\n * In most cases this operation is a result of transforming operations. When transformation returns\n * {@link module:engine/model/operation/nooperation~NoOperation} it means that changes done by the transformed operation\n * have already been applied.\n *\n * @extends module:engine/model/operation/operation~Operation\n */\n\nexport default class NoOperation extends Operation {\n  get type() {\n    return 'noop';\n  }\n  /**\n   * Creates and returns an operation that has the same parameters as this operation.\n   *\n   * @returns {module:engine/model/operation/nooperation~NoOperation} Clone of this operation.\n   */\n\n\n  clone() {\n    return new NoOperation(this.baseVersion);\n  }\n  /**\n   * See {@link module:engine/model/operation/operation~Operation#getReversed `Operation#getReversed()`}.\n   *\n   * @returns {module:engine/model/operation/nooperation~NoOperation}\n   */\n\n\n  getReversed() {\n    return new NoOperation(this.baseVersion + 1);\n  }\n\n  _execute() {}\n  /**\n   * @inheritDoc\n   */\n\n\n  static get className() {\n    return 'NoOperation';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport InsertOperation from './insertoperation';\nimport AttributeOperation from './attributeoperation';\nimport RenameOperation from './renameoperation';\nimport MarkerOperation from './markeroperation';\nimport MoveOperation from './moveoperation';\nimport RootAttributeOperation from './rootattributeoperation';\nimport MergeOperation from './mergeoperation';\nimport SplitOperation from './splitoperation';\nimport NoOperation from './nooperation';\nimport Range from '../range';\nimport Position from '../position';\nimport compareArrays from '@ckeditor/ckeditor5-utils/src/comparearrays';\nconst transformations = new Map();\n/**\n * @module engine/model/operation/transform\n */\n\n/**\n * Sets a transformation function to be be used to transform instances of class `OperationA` by instances of class `OperationB`.\n *\n * The `transformationFunction` is passed three parameters:\n *\n * * `a` - operation to be transformed, an instance of `OperationA`,\n * * `b` - operation to be transformed by, an instance of `OperationB`,\n * * {@link module:engine/model/operation/transform~TransformationContext `context`} - object with additional information about\n * transformation context.\n *\n * The `transformationFunction` should return transformation result, which is an array with one or multiple\n * {@link module:engine/model/operation/operation~Operation operation} instances.\n *\n * @protected\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @param {Function} transformationFunction Function to use for transforming.\n */\n\nfunction setTransformation(OperationA, OperationB, transformationFunction) {\n  let aGroup = transformations.get(OperationA);\n\n  if (!aGroup) {\n    aGroup = new Map();\n    transformations.set(OperationA, aGroup);\n  }\n\n  aGroup.set(OperationB, transformationFunction);\n}\n/**\n * Returns a previously set transformation function for transforming an instance of `OperationA` by an instance of `OperationB`.\n *\n * If no transformation was set for given pair of operations, {@link module:engine/model/operation/transform~noUpdateTransformation}\n * is returned. This means that if no transformation was set, the `OperationA` instance will not change when transformed\n * by the `OperationB` instance.\n *\n * @private\n * @param {Function} OperationA\n * @param {Function} OperationB\n * @returns {Function} Function set to transform an instance of `OperationA` by an instance of `OperationB`.\n */\n\n\nfunction getTransformation(OperationA, OperationB) {\n  const aGroup = transformations.get(OperationA);\n\n  if (aGroup && aGroup.has(OperationB)) {\n    return aGroup.get(OperationB);\n  }\n\n  return noUpdateTransformation;\n}\n/**\n * A transformation function that only clones operation to transform, without changing it.\n *\n * @private\n * @param {module:engine/model/operation/operation~Operation} a Operation to transform.\n * @returns {Array.<module:engine/model/operation/operation~Operation>}\n */\n\n\nfunction noUpdateTransformation(a) {\n  return [a];\n}\n/**\n * Transforms operation `a` by operation `b`.\n *\n * @param {module:engine/model/operation/operation~Operation} a Operation to be transformed.\n * @param {module:engine/model/operation/operation~Operation} b Operation to transform by.\n * @param {module:engine/model/operation/transform~TransformationContext} context Transformation context for this transformation.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} Transformation result.\n */\n\n\nexport function transform(a, b, context = {}) {\n  const transformationFunction = getTransformation(a.constructor, b.constructor);\n\n  try {\n    a = a.clone();\n    return transformationFunction(a, b, context);\n  } catch (e) {\n    // @if CK_DEBUG // console.warn( 'Error during operation transformation!', e.message );\n    // @if CK_DEBUG // console.warn( 'Transformed operation', a );\n    // @if CK_DEBUG // console.warn( 'Operation transformed by', b );\n    // @if CK_DEBUG // console.warn( 'context.aIsStrong', context.aIsStrong );\n    // @if CK_DEBUG // console.warn( 'context.aWasUndone', context.aWasUndone );\n    // @if CK_DEBUG // console.warn( 'context.bWasUndone', context.bWasUndone );\n    // @if CK_DEBUG // console.warn( 'context.abRelation', context.abRelation );\n    // @if CK_DEBUG // console.warn( 'context.baRelation', context.baRelation );\n    throw e;\n  }\n}\n/**\n * Performs a transformation of two sets of operations - `operationsA` and `operationsB`. The transformation is two-way -\n * both transformed `operationsA` and transformed `operationsB` are returned.\n *\n * Note, that the first operation in each set should base on the same document state (\n * {@link module:engine/model/document~Document#version document version}).\n *\n * It is assumed that `operationsA` are \"more important\" during conflict resolution between two operations.\n *\n * New copies of both passed arrays and operations inside them are returned. Passed arguments are not altered.\n *\n * Base versions of the transformed operations sets are updated accordingly. For example, assume that base versions are `4`\n * and there are `3` operations in `operationsA` and `5` operations in `operationsB`. Then:\n *\n * * transformed `operationsA` will start from base version `9` (`4` base version + `5` operations B),\n * * transformed `operationsB` will start from base version `7` (`4` base version + `3` operations A).\n *\n * If no operation was broken into two during transformation, then both sets will end up with an operation that bases on version `11`:\n *\n * * transformed `operationsA` start from `9` and there are `3` of them, so the last will have `baseVersion` equal to `11`,\n * * transformed `operationsB` start from `7` and there are `5` of them, so the last will have `baseVersion` equal to `11`.\n *\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsA\n * @param {Array.<module:engine/model/operation/operation~Operation>} operationsB\n * @param {Object} options Additional transformation options.\n * @param {module:engine/model/document~Document|null} options.document Document which the operations change.\n * @param {Boolean} [options.useRelations=false] Whether during transformation relations should be used (used during undo for\n * better conflict resolution).\n * @param {Boolean} [options.padWithNoOps=false] Whether additional {@link module:engine/model/operation/nooperation~NoOperation}s\n * should be added to the transformation results to force the same last base version for both transformed sets (in case\n * if some operations got broken into multiple operations during transformation).\n * @returns {Object} Transformation result.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsA Transformed `operationsA`.\n * @returns {Array.<module:engine/model/operation/operation~Operation>} return.operationsB Transformed `operationsB`.\n * @returns {Map} return.originalOperations A map that links transformed operations to original operations. The keys are the transformed\n * operations and the values are the original operations from the input (`operationsA` and `operationsB`).\n */\n\nexport function transformSets(operationsA, operationsB, options) {\n  // Create new arrays so the originally passed arguments are not changed.\n  // No need to clone operations, they are cloned as they are transformed.\n  operationsA = operationsA.slice();\n  operationsB = operationsB.slice();\n  const contextFactory = new ContextFactory(options.document, options.useRelations, options.forceWeakRemove);\n  contextFactory.setOriginalOperations(operationsA);\n  contextFactory.setOriginalOperations(operationsB);\n  const originalOperations = contextFactory.originalOperations; // If one of sets is empty there is simply nothing to transform, so return sets as they are.\n\n  if (operationsA.length == 0 || operationsB.length == 0) {\n    return {\n      operationsA,\n      operationsB,\n      originalOperations\n    };\n  } //\n  // Following is a description of transformation process:\n  //\n  // There are `operationsA` and `operationsB` to be transformed, both by both.\n  //\n  // So, suppose we have sets of two operations each: `operationsA` = `[ a1, a2 ]`, `operationsB` = `[ b1, b2 ]`.\n  //\n  // Remember, that we can only transform operations that base on the same context. We assert that `a1` and `b1` base on\n  // the same context and we transform them. Then, we get `a1'` and `b1'`. `a2` bases on a context with `a1` -- `a2`\n  // is an operation that followed `a1`. Similarly, `b2` bases on a context with `b1`.\n  //\n  // However, since `a1'` is a result of transformation by `b1`, `a1'` now also has a context with `b1`. This means that\n  // we can safely transform `a1'` by `b2`. As we finish transforming `a1`, we also transformed all `operationsB`.\n  // All `operationsB` also have context including `a1`. Now, we can properly transform `a2` by those operations.\n  //\n  // The transformation process can be visualized on a transformation diagram (\"diamond diagram\"):\n  //\n  //          [the initial state]\n  //         [common for a1 and b1]\n  //\n  //                   *\n  //                  / \\\n  //                 /   \\\n  //               b1     a1\n  //               /       \\\n  //              /         \\\n  //             *           *\n  //            / \\         / \\\n  //           /   \\       /   \\\n  //         b2    a1'   b1'    a2\n  //         /       \\   /       \\\n  //        /         \\ /         \\\n  //       *           *           *\n  //        \\         / \\         /\n  //         \\       /   \\       /\n  //        a1''   b2'   a2'   b1''\n  //           \\   /       \\   /\n  //            \\ /         \\ /\n  //             *           *\n  //              \\         /\n  //               \\       /\n  //              a2''   b2''\n  //                 \\   /\n  //                  \\ /\n  //                   *\n  //\n  //           [the final state]\n  //\n  // The final state can be reached from the initial state by applying `a1`, `a2`, `b1''` and `b2''`, as well as by\n  // applying `b1`, `b2`, `a1''`, `a2''`. Note how the operations get to a proper common state before each pair is\n  // transformed.\n  //\n  // Another thing to consider is that an operation during transformation can be broken into multiple operations.\n  // Suppose that `a1` * `b1` = `[ a11', a12' ]` (instead of `a1'` that we considered previously).\n  //\n  // In that case, we leave `a12'` for later and we continue transforming `a11'` until it is transformed by all `operationsB`\n  // (in our case it is just `b2`). At this point, `b1` is transformed by \"whole\" `a1`, while `b2` is only transformed\n  // by `a11'`. Similarly, `a12'` is only transformed by `b1`. This leads to a conclusion that we need to start transforming `a12'`\n  // from the moment just after it was broken. So, `a12'` is transformed by `b2`. Now, \"the whole\" `a1` is transformed\n  // by `operationsB`, while all `operationsB` are transformed by \"the whole\" `a1`. This means that we can continue with\n  // following `operationsA` (in our case it is just `a2`).\n  //\n  // Of course, also `operationsB` can be broken. However, since we focus on transforming operation `a` to the end,\n  // the only thing to do is to store both pieces of operation `b`, so that the next transformed operation `a` will\n  // be transformed by both of them.\n  //\n  //                       *\n  //                      / \\\n  //                     /   \\\n  //                    /     \\\n  //                  b1       a1\n  //                  /         \\\n  //                 /           \\\n  //                /             \\\n  //               *               *\n  //              / \\             / \\\n  //             /  a11'         /   \\\n  //            /     \\         /     \\\n  //          b2       *      b1'      a2\n  //          /       / \\     /         \\\n  //         /       /  a12' /           \\\n  //        /       /     \\ /             \\\n  //       *       b2'     *               *\n  //        \\     /       / \\             /\n  //       a11'' /     b21'' \\           /\n  //          \\ /       /     \\         /\n  //           *       *      a2'     b1''\n  //            \\     / \\       \\     /\n  //          a12'' b22''\\       \\   /\n  //              \\ /     \\       \\ /\n  //               *      a2''     *\n  //                \\       \\     /\n  //                 \\       \\  b21'''\n  //                  \\       \\ /\n  //                a2'''      *\n  //                    \\     /\n  //                     \\  b22'''\n  //                      \\ /\n  //                       *\n  //\n  // Note, how `a1` is broken and transformed into `a11'` and `a12'`, while `b2'` got broken and transformed into `b21''` and `b22''`.\n  //\n  // Having all that on mind, here is an outline for the transformation process algorithm:\n  //\n  // 1. We have `operationsA` and `operationsB` array, which we dynamically update as the transformation process goes.\n  //\n  // 2. We take next (or first) operation from `operationsA` and check from which operation `b` we need to start transforming it.\n  // All original `operationsA` are set to be transformed starting from the first operation `b`.\n  //\n  // 3. We take operations from `operationsB`, one by one, starting from the correct one, and transform operation `a`\n  // by operation `b` (and vice versa). We update `operationsA` and `operationsB` by replacing the original operations\n  // with the transformation results.\n  //\n  // 4. If operation is broken into multiple operations, we save all the new operations in the place of the\n  // original operation.\n  //\n  // 5. Additionally, if operation `a` was broken, for the \"new\" operation, we remember from which operation `b` it should\n  // be transformed by.\n  //\n  // 6. We continue transforming \"current\" operation `a` until it is transformed by all `operationsB`. Then, go to 2.\n  // unless the last operation `a` was transformed.\n  //\n  // The actual implementation of the above algorithm is slightly different, as only one loop (while) is used.\n  // The difference is that we have \"current\" `a` operation to transform and we store the index of the next `b` operation\n  // to transform by. Each loop operates on two indexes then: index pointing to currently processed `a` operation and\n  // index pointing to next `b` operation. Each loop is just one `a * b` + `b * a` transformation. After each loop\n  // operation `b` index is updated. If all `b` operations were visited for the current `a` operation, we change\n  // current `a` operation index to the next one.\n  //\n  // For each operation `a`, keeps information what is the index in `operationsB` from which the transformation should start.\n\n\n  const nextTransformIndex = new WeakMap(); // For all the original `operationsA`, set that they should be transformed starting from the first of `operationsB`.\n\n  for (const op of operationsA) {\n    nextTransformIndex.set(op, 0);\n  } // Additional data that is used for some postprocessing after the main transformation process is done.\n\n\n  const data = {\n    nextBaseVersionA: operationsA[operationsA.length - 1].baseVersion + 1,\n    nextBaseVersionB: operationsB[operationsB.length - 1].baseVersion + 1,\n    originalOperationsACount: operationsA.length,\n    originalOperationsBCount: operationsB.length\n  }; // Index of currently transformed operation `a`.\n\n  let i = 0; // While not all `operationsA` are transformed...\n\n  while (i < operationsA.length) {\n    // Get \"current\" operation `a`.\n    const opA = operationsA[i]; // For the \"current\" operation `a`, get the index of the next operation `b` to transform by.\n\n    const indexB = nextTransformIndex.get(opA); // If operation `a` was already transformed by every operation `b`, change \"current\" operation `a` to the next one.\n\n    if (indexB == operationsB.length) {\n      i++;\n      continue;\n    }\n\n    const opB = operationsB[indexB]; // Transform `a` by `b` and `b` by `a`.\n\n    const newOpsA = transform(opA, opB, contextFactory.getContext(opA, opB, true));\n    const newOpsB = transform(opB, opA, contextFactory.getContext(opB, opA, false)); // As a result we get one or more `newOpsA` and one or more `newOpsB` operations.\n    // Update contextual information about operations.\n\n    contextFactory.updateRelation(opA, opB);\n    contextFactory.setOriginalOperations(newOpsA, opA);\n    contextFactory.setOriginalOperations(newOpsB, opB); // For new `a` operations, update their index of the next operation `b` to transform them by.\n    //\n    // This is needed even if there was only one result (`a` was not broken) because that information is used\n    // at the beginning of this loop every time.\n\n    for (const newOpA of newOpsA) {\n      // Acknowledge, that operation `b` also might be broken into multiple operations.\n      //\n      // This is why we raise `indexB` not just by 1. If `newOpsB` are multiple operations, they will be\n      // spliced in the place of `opB`. So we need to change `transformBy` accordingly, so that an operation won't\n      // be transformed by the same operation (part of it) again.\n      nextTransformIndex.set(newOpA, indexB + newOpsB.length);\n    } // Update `operationsA` and `operationsB` with the transformed versions.\n\n\n    operationsA.splice(i, 1, ...newOpsA);\n    operationsB.splice(indexB, 1, ...newOpsB);\n  }\n\n  if (options.padWithNoOps) {\n    // If no-operations padding is enabled, count how many extra `a` and `b` operations were generated.\n    const brokenOperationsACount = operationsA.length - data.originalOperationsACount;\n    const brokenOperationsBCount = operationsB.length - data.originalOperationsBCount; // Then, if that number is not the same, pad `operationsA` or `operationsB` with correct number of no-ops so\n    // that the base versions are equalled.\n    //\n    // Note that only one array will be updated, as only one of those subtractions can be greater than zero.\n\n    padWithNoOps(operationsA, brokenOperationsBCount - brokenOperationsACount);\n    padWithNoOps(operationsB, brokenOperationsACount - brokenOperationsBCount);\n  } // Finally, update base versions of transformed operations.\n\n\n  updateBaseVersions(operationsA, data.nextBaseVersionB);\n  updateBaseVersions(operationsB, data.nextBaseVersionA);\n  return {\n    operationsA,\n    operationsB,\n    originalOperations\n  };\n} // Gathers additional data about operations processed during transformation. Can be used to obtain contextual information\n// about two operations that are about to be transformed. This contextual information can be used for better conflict resolution.\n\nclass ContextFactory {\n  // Creates `ContextFactory` instance.\n  //\n  // @param {module:engine/model/document~Document} document Document which the operations change.\n  // @param {Boolean} useRelations Whether during transformation relations should be used (used during undo for\n  // better conflict resolution).\n  // @param {Boolean} [forceWeakRemove=false] If set to `false`, remove operation will be always stronger than move operation,\n  // so the removed nodes won't end up back in the document root. When set to `true`, context data will be used.\n  constructor(document, useRelations, forceWeakRemove = false) {\n    // For each operation that is created during transformation process, we keep a reference to the original operation\n    // which it comes from. The original operation works as a kind of \"identifier\". Every contextual information\n    // gathered during transformation that we want to save for given operation, is actually saved for the original operation.\n    // This way no matter if operation `a` is cloned, then transformed, even breaks, we still have access to the previously\n    // gathered data through original operation reference.\n    this.originalOperations = new Map(); // `model.History` instance which information about undone operations will be taken from.\n\n    this._history = document.history; // Whether additional context should be used.\n\n    this._useRelations = useRelations;\n    this._forceWeakRemove = !!forceWeakRemove; // Relations is a double-map structure (maps in map) where for two operations we store how those operations were related\n    // to each other. Those relations are evaluated during transformation process. For every transformated pair of operations\n    // we keep relations between them.\n\n    this._relations = new Map();\n  } // Sets \"original operation\" for given operations.\n  //\n  // During transformation process, operations are cloned, then changed, then processed again, sometimes broken into two\n  // or multiple operations. When gathering additional data it is important that all operations can be somehow linked\n  // so a cloned and transformed \"version\" still kept track of the data assigned earlier to it.\n  //\n  // The original operation object will be used as such an universal linking id. Throughout the transformation process\n  // all cloned operations will refer to \"the original operation\" when storing and reading additional data.\n  //\n  // If `takeFrom` is not set, each operation from `operations` array will be assigned itself as \"the original operation\".\n  // This should be used as an initialization step.\n  //\n  // If `takeFrom` is set, each operation from `operations` will be assigned the same original operation as assigned\n  // for `takeFrom` operation. This should be used to update original operations. It should be used in a way that\n  // `operations` are the result of `takeFrom` transformation to ensure proper \"original operation propagation\".\n  //\n  // @param {Array.<module:engine/model/operation/operation~Operation>} operations\n  // @param {module:engine/model/operation/operation~Operation|null} [takeFrom=null]\n\n\n  setOriginalOperations(operations, takeFrom = null) {\n    const originalOperation = takeFrom ? this.originalOperations.get(takeFrom) : null;\n\n    for (const operation of operations) {\n      this.originalOperations.set(operation, originalOperation || operation);\n    }\n  } // Saves a relation between operations `opA` and `opB`.\n  //\n  // Relations are then later used to help solve conflicts when operations are transformed.\n  //\n  // @param {module:engine/model/operation/operation~Operation} opA\n  // @param {module:engine/model/operation/operation~Operation} opB\n\n\n  updateRelation(opA, opB) {\n    // The use of relations is described in a bigger detail in transformation functions.\n    //\n    // In brief, this function, for specified pairs of operation types, checks how positions defined in those operations relate.\n    // Then those relations are saved. For example, for two move operations, it is saved if one of those operations target\n    // position is before the other operation source position. This kind of information gives contextual information when\n    // transformation is used during undo. Similar checks are done for other pairs of operations.\n    //\n    switch (opA.constructor) {\n      case MoveOperation:\n        {\n          switch (opB.constructor) {\n            case MergeOperation:\n              {\n                if (opA.targetPosition.isEqual(opB.sourcePosition) || opB.movedRange.containsPosition(opA.targetPosition)) {\n                  this._setRelation(opA, opB, 'insertAtSource');\n                } else if (opA.targetPosition.isEqual(opB.deletionPosition)) {\n                  this._setRelation(opA, opB, 'insertBetween');\n                } else if (opA.targetPosition.isAfter(opB.sourcePosition)) {\n                  this._setRelation(opA, opB, 'moveTargetAfter');\n                }\n\n                break;\n              }\n\n            case MoveOperation:\n              {\n                if (opA.targetPosition.isEqual(opB.sourcePosition) || opA.targetPosition.isBefore(opB.sourcePosition)) {\n                  this._setRelation(opA, opB, 'insertBefore');\n                } else {\n                  this._setRelation(opA, opB, 'insertAfter');\n                }\n\n                break;\n              }\n          }\n\n          break;\n        }\n\n      case SplitOperation:\n        {\n          switch (opB.constructor) {\n            case MergeOperation:\n              {\n                if (opA.splitPosition.isBefore(opB.sourcePosition)) {\n                  this._setRelation(opA, opB, 'splitBefore');\n                }\n\n                break;\n              }\n\n            case MoveOperation:\n              {\n                if (opA.splitPosition.isEqual(opB.sourcePosition) || opA.splitPosition.isBefore(opB.sourcePosition)) {\n                  this._setRelation(opA, opB, 'splitBefore');\n                }\n\n                break;\n              }\n          }\n\n          break;\n        }\n\n      case MergeOperation:\n        {\n          switch (opB.constructor) {\n            case MergeOperation:\n              {\n                if (!opA.targetPosition.isEqual(opB.sourcePosition)) {\n                  this._setRelation(opA, opB, 'mergeTargetNotMoved');\n                }\n\n                if (opA.sourcePosition.isEqual(opB.targetPosition)) {\n                  this._setRelation(opA, opB, 'mergeSourceNotMoved');\n                }\n\n                if (opA.sourcePosition.isEqual(opB.sourcePosition)) {\n                  this._setRelation(opA, opB, 'mergeSameElement');\n                }\n\n                break;\n              }\n\n            case SplitOperation:\n              {\n                if (opA.sourcePosition.isEqual(opB.splitPosition)) {\n                  this._setRelation(opA, opB, 'splitAtSource');\n                }\n              }\n          }\n\n          break;\n        }\n\n      case MarkerOperation:\n        {\n          const markerRange = opA.newRange;\n\n          if (!markerRange) {\n            return;\n          }\n\n          switch (opB.constructor) {\n            case MoveOperation:\n              {\n                const movedRange = Range._createFromPositionAndShift(opB.sourcePosition, opB.howMany);\n\n                const affectedLeft = movedRange.containsPosition(markerRange.start) || movedRange.start.isEqual(markerRange.start);\n                const affectedRight = movedRange.containsPosition(markerRange.end) || movedRange.end.isEqual(markerRange.end);\n\n                if ((affectedLeft || affectedRight) && !movedRange.containsRange(markerRange)) {\n                  this._setRelation(opA, opB, {\n                    side: affectedLeft ? 'left' : 'right',\n                    path: affectedLeft ? markerRange.start.path.slice() : markerRange.end.path.slice()\n                  });\n                }\n\n                break;\n              }\n\n            case MergeOperation:\n              {\n                const wasInLeftElement = markerRange.start.isEqual(opB.targetPosition);\n                const wasStartBeforeMergedElement = markerRange.start.isEqual(opB.deletionPosition);\n                const wasEndBeforeMergedElement = markerRange.end.isEqual(opB.deletionPosition);\n                const wasInRightElement = markerRange.end.isEqual(opB.sourcePosition);\n\n                if (wasInLeftElement || wasStartBeforeMergedElement || wasEndBeforeMergedElement || wasInRightElement) {\n                  this._setRelation(opA, opB, {\n                    wasInLeftElement,\n                    wasStartBeforeMergedElement,\n                    wasEndBeforeMergedElement,\n                    wasInRightElement\n                  });\n                }\n\n                break;\n              }\n          }\n\n          break;\n        }\n    }\n  } // Evaluates and returns contextual information about two given operations `opA` and `opB` which are about to be transformed.\n  //\n  // @param {module:engine/model/operation/operation~Operation} opA\n  // @param {module:engine/model/operation/operation~Operation} opB\n  // @returns {module:engine/model/operation/transform~TransformationContext}\n\n\n  getContext(opA, opB, aIsStrong) {\n    return {\n      aIsStrong,\n      aWasUndone: this._wasUndone(opA),\n      bWasUndone: this._wasUndone(opB),\n      abRelation: this._useRelations ? this._getRelation(opA, opB) : null,\n      baRelation: this._useRelations ? this._getRelation(opB, opA) : null,\n      forceWeakRemove: this._forceWeakRemove\n    };\n  } // Returns whether given operation `op` has already been undone.\n  //\n  // Information whether an operation was undone gives more context when making a decision when two operations are in conflict.\n  //\n  // @param {module:engine/model/operation/operation~Operation} op\n  // @returns {Boolean}\n\n\n  _wasUndone(op) {\n    // For `op`, get its original operation. After all, if `op` is a clone (or even transformed clone) of another\n    // operation, literally `op` couldn't be undone. It was just generated. If anything, it was the operation it origins\n    // from which was undone. So get that original operation.\n    const originalOp = this.originalOperations.get(op); // And check with the document if the original operation was undone.\n\n    return originalOp.wasUndone || this._history.isUndoneOperation(originalOp);\n  } // Returns a relation between `opA` and an operation which is undone by `opB`. This can be `String` value if a relation\n  // was set earlier or `null` if there was no relation between those operations.\n  //\n  // This is a little tricky to understand, so let's compare it to `ContextFactory#_wasUndone`.\n  //\n  // When `wasUndone( opB )` is used, we check if the `opB` has already been undone. It is obvious, that the\n  // undoing operation must happen after the undone operation. So, essentially, we have `opB`, we take document history,\n  // we look forward in the future and ask if in that future `opB` was undone.\n  //\n  // Relations is a backward process to `wasUndone()`.\n  //\n  // Long story short - using relations is asking what happened in the past. Looking back. This time we have an undoing\n  // operation `opB` which has undone some other operation. When there is a transformation `opA` x `opB` and there is\n  // a conflict to solve and `opB` is an undoing operation, we can look back in the history and see what was a relation\n  // between `opA` and the operation which `opB` undone. Basing on that relation from the past, we can now make\n  // a better decision when resolving a conflict between two operations, because we know more about the context of\n  // those two operations.\n  //\n  // This is why this function does not return a relation directly between `opA` and `opB` because we need to look\n  // back to search for a meaningful contextual information.\n  //\n  // @param {module:engine/model/operation/operation~Operation} opA\n  // @param {module:engine/model/operation/operation~Operation} opB\n  // @returns {String|null}\n\n\n  _getRelation(opA, opB) {\n    // Get the original operation. Similarly as in `wasUndone()` it is used as an universal identifier for stored data.\n    const origB = this.originalOperations.get(opB);\n\n    const undoneB = this._history.getUndoneOperation(origB); // If `opB` is not undoing any operation, there is no relation.\n\n\n    if (!undoneB) {\n      return null;\n    }\n\n    const origA = this.originalOperations.get(opA);\n\n    const relationsA = this._relations.get(origA); // Get all relations for `opA`, and check if there is a relation with `opB`-undone-counterpart. If so, return it.\n\n\n    if (relationsA) {\n      return relationsA.get(undoneB) || null;\n    }\n\n    return null;\n  } // Helper function for `ContextFactory#updateRelations`.\n  //\n  // @private\n  // @param {module:engine/model/operation/operation~Operation} opA\n  // @param {module:engine/model/operation/operation~Operation} opB\n  // @param {String} relation\n\n\n  _setRelation(opA, opB, relation) {\n    // As always, setting is for original operations, not the clones/transformed operations.\n    const origA = this.originalOperations.get(opA);\n    const origB = this.originalOperations.get(opB);\n\n    let relationsA = this._relations.get(origA);\n\n    if (!relationsA) {\n      relationsA = new Map();\n\n      this._relations.set(origA, relationsA);\n    }\n\n    relationsA.set(origB, relation);\n  }\n\n}\n/**\n * Holds additional contextual information about a transformed pair of operations (`a` and `b`). Those information\n * can be used for better conflict resolving.\n *\n * @typedef {Object} module:engine/model/operation/transform~TransformationContext\n *\n * @property {Boolean} aIsStrong Whether `a` is strong operation in this transformation, or weak.\n * @property {Boolean} aWasUndone Whether `a` operation was undone.\n * @property {Boolean} bWasUndone Whether `b` operation was undone.\n * @property {String|null} abRelation The relation between `a` operation and an operation undone by `b` operation.\n * @property {String|null} baRelation The relation between `b` operation and an operation undone by `a` operation.\n */\n\n/**\n * An utility function that updates {@link module:engine/model/operation/operation~Operation#baseVersion base versions}\n * of passed operations.\n *\n * The function simply sets `baseVersion` as a base version of the first passed operation and then increments it for\n * each following operation in `operations`.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations to update.\n * @param {Number} baseVersion Base version to set for the first operation in `operations`.\n */\n\n\nfunction updateBaseVersions(operations, baseVersion) {\n  for (const operation of operations) {\n    operation.baseVersion = baseVersion++;\n  }\n}\n/**\n * Adds `howMany` instances of {@link module:engine/model/operation/nooperation~NoOperation} to `operations` set.\n *\n * @private\n * @param {Array.<module:engine/model/operation/operation~Operation>} operations\n * @param {Number} howMany\n */\n\n\nfunction padWithNoOps(operations, howMany) {\n  for (let i = 0; i < howMany; i++) {\n    operations.push(new NoOperation(0));\n  }\n} // -----------------------\n\n\nsetTransformation(AttributeOperation, AttributeOperation, (a, b, context) => {\n  if (a.key === b.key) {\n    // If operations attributes are in conflict, check if their ranges intersect and manage them properly.\n    // First, we want to apply change to the part of a range that has not been changed by the other operation.\n    const operations = a.range.getDifference(b.range).map(range => {\n      return new AttributeOperation(range, a.key, a.oldValue, a.newValue, 0);\n    }); // Then we take care of the common part of ranges.\n\n    const common = a.range.getIntersection(b.range);\n\n    if (common) {\n      // If this operation is more important, we also want to apply change to the part of the\n      // original range that has already been changed by the other operation. Since that range\n      // got changed we also have to update `oldValue`.\n      if (context.aIsStrong) {\n        operations.push(new AttributeOperation(common, b.key, b.newValue, a.newValue, 0));\n      }\n    }\n\n    if (operations.length == 0) {\n      return [new NoOperation(0)];\n    }\n\n    return operations;\n  } else {\n    // If operations don't conflict, simply return an array containing just a clone of this operation.\n    return [a];\n  }\n});\nsetTransformation(AttributeOperation, InsertOperation, (a, b) => {\n  // Case 1:\n  //\n  // The attribute operation range includes the position where nodes were inserted.\n  // There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n  // the inserted nodes were elements and they should not receive attributes.\n  //\n  if (a.range.start.hasSameParentAs(b.position) && a.range.containsPosition(b.position)) {\n    // If new nodes should not receive attributes, two separated ranges will be returned.\n    // Otherwise, one expanded range will be returned.\n    const range = a.range._getTransformedByInsertion(b.position, b.howMany, !b.shouldReceiveAttributes);\n\n    const result = range.map(r => {\n      return new AttributeOperation(r, a.key, a.oldValue, a.newValue, a.baseVersion);\n    });\n\n    if (b.shouldReceiveAttributes) {\n      // `AttributeOperation#range` includes some newly inserted text.\n      // The operation should also change the attribute of that text. An example:\n      //\n      // Bold should be applied on the following range:\n      // <p>Fo[zb]ar</p>\n      //\n      // In meantime, new text is typed:\n      // <p>Fozxxbar</p>\n      //\n      // Bold should be applied also on the new text:\n      // <p>Fo[zxxb]ar</p>\n      // <p>Fo<$text bold=\"true\">zxxb</$text>ar</p>\n      //\n      // There is a special case to consider here to consider.\n      //\n      // Consider setting an attribute with multiple possible values, for example `highlight`. The inserted text might\n      // have already an attribute value applied and the `oldValue` property of the attribute operation might be wrong:\n      //\n      // Attribute `highlight=\"yellow\"` should be applied on the following range:\n      // <p>Fo[zb]ar<p>\n      //\n      // In meantime, character `x` with `highlight=\"red\"` is typed:\n      // <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>\n      //\n      // In this case we cannot simply apply operation changing the attribute value from `null` to `\"yellow\"` for the whole range\n      // because that would lead to an exception (`oldValue` is incorrect for `x`).\n      //\n      // We also cannot break the original range as this would mess up a scenario when there are multiple following\n      // insert operations, because then only the first inserted character is included in those ranges:\n      // <p>Fo[z][x][b]ar</p>   -->   <p>Fo[z][x]x[b]ar</p>   -->   <p>Fo[z][x]xx[b]ar</p>\n      //\n      // So, the attribute range needs be expanded, no matter what attributes are set on the inserted nodes:\n      //\n      // <p>Fo[z<$text highlight=\"red\">x</$text>b]ar</p>      <--- Change from `null` to `yellow`, throwing an exception.\n      //\n      // But before that operation would be applied, we will add an additional attribute operation that will change\n      // attributes on the inserted nodes in a way which would make the original operation correct:\n      //\n      // <p>Fo[z{<$text highlight=\"red\">}x</$text>b]ar</p>    <--- Change range `{}` from `red` to `null`.\n      // <p>Fo[zxb]ar</p>                                     <--- Now change from `null` to `yellow` is completely fine.\n      //\n      // Generate complementary attribute operation. Be sure to add it before the original operation.\n      const op = _getComplementaryAttributeOperations(b, a.key, a.oldValue);\n\n      if (op) {\n        result.unshift(op);\n      }\n    } // If nodes should not receive new attribute, we are done here.\n\n\n    return result;\n  } // If insert operation is not expanding the attribute operation range, simply transform the range.\n\n\n  a.range = a.range._getTransformedByInsertion(b.position, b.howMany, false)[0];\n  return [a];\n});\n/**\n * Helper function for `AttributeOperation` x `InsertOperation` (and reverse) transformation.\n *\n * For given `insertOperation` it checks the inserted node if it has an attribute `key` set to a value different\n * than `newValue`. If so, it generates an `AttributeOperation` which changes the value of `key` attribute to `newValue`.\n *\n * @private\n * @param {module:engine/model/operation/insertoperation~InsertOperation} insertOperation\n * @param {String} key\n * @param {*} newValue\n * @returns {module:engine/model/operation/attributeoperation~AttributeOperation|null}\n */\n\nfunction _getComplementaryAttributeOperations(insertOperation, key, newValue) {\n  const nodes = insertOperation.nodes; // At the beginning we store the attribute value from the first node.\n\n  const insertValue = nodes.getNode(0).getAttribute(key);\n\n  if (insertValue == newValue) {\n    return null;\n  }\n\n  const range = new Range(insertOperation.position, insertOperation.position.getShiftedBy(insertOperation.howMany));\n  return new AttributeOperation(range, key, insertValue, newValue, 0);\n}\n\nsetTransformation(AttributeOperation, MergeOperation, (a, b) => {\n  const ranges = []; // Case 1:\n  //\n  // Attribute change on the merged element. In this case, the merged element was moved to the graveyard.\n  // An additional attribute operation that will change the (re)moved element needs to be generated.\n  //\n\n  if (a.range.start.hasSameParentAs(b.deletionPosition)) {\n    if (a.range.containsPosition(b.deletionPosition) || a.range.start.isEqual(b.deletionPosition)) {\n      ranges.push(Range._createFromPositionAndShift(b.graveyardPosition, 1));\n    }\n  }\n\n  const range = a.range._getTransformedByMergeOperation(b); // Do not add empty (collapsed) ranges to the result. `range` may be collapsed if it contained only the merged element.\n\n\n  if (!range.isCollapsed) {\n    ranges.push(range);\n  } // Create `AttributeOperation`s out of the ranges.\n\n\n  return ranges.map(range => {\n    return new AttributeOperation(range, a.key, a.oldValue, a.newValue, a.baseVersion);\n  });\n});\nsetTransformation(AttributeOperation, MoveOperation, (a, b) => {\n  const ranges = _breakRangeByMoveOperation(a.range, b); // Create `AttributeOperation`s out of the ranges.\n\n\n  return ranges.map(range => new AttributeOperation(range, a.key, a.oldValue, a.newValue, a.baseVersion));\n}); // Helper function for `AttributeOperation` x `MoveOperation` transformation.\n//\n// Takes the passed `range` and transforms it by move operation `moveOp` in a specific way. Only top-level nodes of `range`\n// are considered to be in the range. If move operation moves nodes deep from inside of the range, those nodes won't\n// be included in the result. In other words, top-level nodes of the ranges from the result are exactly the same as\n// top-level nodes of the original `range`.\n//\n// This is important for `AttributeOperation` because, for its range, it changes only the top-level nodes. So we need to\n// track only how those nodes have been affected by `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/range~Range} range\n// @param {module:engine/model/operation/moveoperation~MoveOperation} moveOp\n// @returns {Array.<module:engine/model/range~Range>}\n\nfunction _breakRangeByMoveOperation(range, moveOp) {\n  const moveRange = Range._createFromPositionAndShift(moveOp.sourcePosition, moveOp.howMany); // We are transforming `range` (original range) by `moveRange` (range moved by move operation). As usual when it comes to\n  // transforming a ranges, we may have a common part of the ranges and we may have a difference part (zero to two ranges).\n\n\n  let common = null;\n  let difference = []; // Let's compare the ranges.\n\n  if (moveRange.containsRange(range, true)) {\n    // If the whole original range is moved, treat it whole as a common part. There's also no difference part.\n    common = range;\n  } else if (range.start.hasSameParentAs(moveRange.start)) {\n    // If the ranges are \"on the same level\" (in the same parent) then move operation may move exactly those nodes\n    // that are changed by the attribute operation. In this case we get common part and difference part in the usual way.\n    difference = range.getDifference(moveRange);\n    common = range.getIntersection(moveRange);\n  } else {\n    // In any other situation we assume that original range is different than move range, that is that move operation\n    // moves other nodes that attribute operation change. Even if the moved range is deep inside in the original range.\n    //\n    // Note that this is different than in `.getIntersection` (we would get a common part in that case) and different\n    // than `.getDifference` (we would get two ranges).\n    difference = [range];\n  }\n\n  const result = []; // The default behaviour of `_getTransformedByMove` might get wrong results for difference part, though, so\n  // we do it by hand.\n\n  for (let diff of difference) {\n    // First, transform the range by removing moved nodes. Since this is a difference, this is safe, `null` won't be returned\n    // as the range is different than the moved range.\n    diff = diff._getTransformedByDeletion(moveOp.sourcePosition, moveOp.howMany); // Transform also `targetPosition`.\n\n    const targetPosition = moveOp.getMovedRangeStart(); // Spread the range only if moved nodes are inserted only between the top-level nodes of the `diff` range.\n\n    const spread = diff.start.hasSameParentAs(targetPosition); // Transform by insertion of moved nodes.\n\n    diff = diff._getTransformedByInsertion(targetPosition, moveOp.howMany, spread);\n    result.push(...diff);\n  } // Common part can be simply transformed by the move operation. This is because move operation will not target to\n  // that common part (the operation would have to target inside its own moved range).\n\n\n  if (common) {\n    result.push(common._getTransformedByMove(moveOp.sourcePosition, moveOp.targetPosition, moveOp.howMany, false)[0]);\n  }\n\n  return result;\n}\n\nsetTransformation(AttributeOperation, SplitOperation, (a, b) => {\n  // Case 1:\n  //\n  // Split node is the last node in `AttributeOperation#range`.\n  // `AttributeOperation#range` needs to be expanded to include the new (split) node.\n  //\n  // Attribute `type` to be changed to `numbered` but the `listItem` is split.\n  // <listItem type=\"bulleted\">foobar</listItem>\n  //\n  // After split:\n  // <listItem type=\"bulleted\">foo</listItem><listItem type=\"bulleted\">bar</listItem>\n  //\n  // After attribute change:\n  // <listItem type=\"numbered\">foo</listItem><listItem type=\"numbered\">foo</listItem>\n  //\n  if (a.range.end.isEqual(b.insertionPosition)) {\n    if (!b.graveyardPosition) {\n      a.range.end.offset++;\n    }\n\n    return [a];\n  } // Case 2:\n  //\n  // Split position is inside `AttributeOperation#range`, at the same level, so the nodes to change are\n  // not going to make a flat range.\n  //\n  // Content with range-to-change and split position:\n  // <p>Fo[zb^a]r</p>\n  //\n  // After split:\n  // <p>Fozb</p><p>ar</p>\n  //\n  // Make two separate ranges containing all nodes to change:\n  // <p>Fo[zb]</p><p>[a]r</p>\n  //\n\n\n  if (a.range.start.hasSameParentAs(b.splitPosition) && a.range.containsPosition(b.splitPosition)) {\n    const secondPart = a.clone();\n    secondPart.range = new Range(b.moveTargetPosition.clone(), a.range.end._getCombined(b.splitPosition, b.moveTargetPosition));\n    a.range.end = b.splitPosition.clone();\n    a.range.end.stickiness = 'toPrevious';\n    return [a, secondPart];\n  } // The default case.\n  //\n\n\n  a.range = a.range._getTransformedBySplitOperation(b);\n  return [a];\n});\nsetTransformation(InsertOperation, AttributeOperation, (a, b) => {\n  const result = [a]; // Case 1:\n  //\n  // The attribute operation range includes the position where nodes were inserted.\n  // There are two possible scenarios: the inserted nodes were text and they should receive attributes or\n  // the inserted nodes were elements and they should not receive attributes.\n  //\n  // This is a mirror scenario to the one described in `AttributeOperation` x `InsertOperation` transformation,\n  // although this case is a little less complicated. In this case we simply need to change attributes of the\n  // inserted nodes and that's it.\n  //\n\n  if (a.shouldReceiveAttributes && a.position.hasSameParentAs(b.range.start) && b.range.containsPosition(a.position)) {\n    const op = _getComplementaryAttributeOperations(a, b.key, b.newValue);\n\n    if (op) {\n      result.push(op);\n    }\n  } // The default case is: do nothing.\n  // `AttributeOperation` does not change the model tree structure so `InsertOperation` does not need to be changed.\n  //\n\n\n  return result;\n});\nsetTransformation(InsertOperation, InsertOperation, (a, b, context) => {\n  // Case 1:\n  //\n  // Two insert operations insert nodes at the same position. Since they are the same, it needs to be decided\n  // what will be the order of inserted nodes. However, there is no additional information to help in that\n  // decision. Also, when `b` will be transformed by `a`, the same order must be maintained.\n  //\n  // To achieve that, we will check if the operation is strong.\n  // If it is, it won't get transformed. If it is not, it will be moved.\n  //\n  if (a.position.isEqual(b.position) && context.aIsStrong) {\n    return [a];\n  } // The default case.\n  //\n\n\n  a.position = a.position._getTransformedByInsertOperation(b);\n  return [a];\n});\nsetTransformation(InsertOperation, MoveOperation, (a, b) => {\n  // The default case.\n  //\n  a.position = a.position._getTransformedByMoveOperation(b);\n  return [a];\n});\nsetTransformation(InsertOperation, SplitOperation, (a, b) => {\n  // The default case.\n  //\n  a.position = a.position._getTransformedBySplitOperation(b);\n  return [a];\n});\nsetTransformation(InsertOperation, MergeOperation, (a, b) => {\n  a.position = a.position._getTransformedByMergeOperation(b);\n  return [a];\n}); // -----------------------\n\nsetTransformation(MarkerOperation, InsertOperation, (a, b) => {\n  if (a.oldRange) {\n    a.oldRange = a.oldRange._getTransformedByInsertOperation(b)[0];\n  }\n\n  if (a.newRange) {\n    a.newRange = a.newRange._getTransformedByInsertOperation(b)[0];\n  }\n\n  return [a];\n});\nsetTransformation(MarkerOperation, MarkerOperation, (a, b, context) => {\n  if (a.name == b.name) {\n    if (context.aIsStrong) {\n      a.oldRange = b.newRange ? b.newRange.clone() : null;\n    } else {\n      return [new NoOperation(0)];\n    }\n  }\n\n  return [a];\n});\nsetTransformation(MarkerOperation, MergeOperation, (a, b) => {\n  if (a.oldRange) {\n    a.oldRange = a.oldRange._getTransformedByMergeOperation(b);\n  }\n\n  if (a.newRange) {\n    a.newRange = a.newRange._getTransformedByMergeOperation(b);\n  }\n\n  return [a];\n});\nsetTransformation(MarkerOperation, MoveOperation, (a, b, context) => {\n  if (a.oldRange) {\n    a.oldRange = Range._createFromRanges(a.oldRange._getTransformedByMoveOperation(b));\n  }\n\n  if (a.newRange) {\n    if (context.abRelation) {\n      const aNewRange = Range._createFromRanges(a.newRange._getTransformedByMoveOperation(b));\n\n      if (context.abRelation.side == 'left' && b.targetPosition.isEqual(a.newRange.start)) {\n        a.newRange.start.path = context.abRelation.path;\n        a.newRange.end = aNewRange.end;\n        return [a];\n      } else if (context.abRelation.side == 'right' && b.targetPosition.isEqual(a.newRange.end)) {\n        a.newRange.start = aNewRange.start;\n        a.newRange.end.path = context.abRelation.path;\n        return [a];\n      }\n    }\n\n    a.newRange = Range._createFromRanges(a.newRange._getTransformedByMoveOperation(b));\n  }\n\n  return [a];\n});\nsetTransformation(MarkerOperation, SplitOperation, (a, b, context) => {\n  if (a.oldRange) {\n    a.oldRange = a.oldRange._getTransformedBySplitOperation(b);\n  }\n\n  if (a.newRange) {\n    if (context.abRelation) {\n      const aNewRange = a.newRange._getTransformedBySplitOperation(b);\n\n      if (a.newRange.start.isEqual(b.splitPosition) && context.abRelation.wasStartBeforeMergedElement) {\n        a.newRange.start = Position._createAt(b.insertionPosition);\n      } else if (a.newRange.start.isEqual(b.splitPosition) && !context.abRelation.wasInLeftElement) {\n        a.newRange.start = Position._createAt(b.moveTargetPosition);\n      }\n\n      if (a.newRange.end.isEqual(b.splitPosition) && context.abRelation.wasInRightElement) {\n        a.newRange.end = Position._createAt(b.moveTargetPosition);\n      } else if (a.newRange.end.isEqual(b.splitPosition) && context.abRelation.wasEndBeforeMergedElement) {\n        a.newRange.end = Position._createAt(b.insertionPosition);\n      } else {\n        a.newRange.end = aNewRange.end;\n      }\n\n      return [a];\n    }\n\n    a.newRange = a.newRange._getTransformedBySplitOperation(b);\n  }\n\n  return [a];\n}); // -----------------------\n\nsetTransformation(MergeOperation, InsertOperation, (a, b) => {\n  if (a.sourcePosition.hasSameParentAs(b.position)) {\n    a.howMany += b.howMany;\n  }\n\n  a.sourcePosition = a.sourcePosition._getTransformedByInsertOperation(b);\n  a.targetPosition = a.targetPosition._getTransformedByInsertOperation(b);\n  return [a];\n});\nsetTransformation(MergeOperation, MergeOperation, (a, b, context) => {\n  // Case 1:\n  //\n  // Same merge operations.\n  //\n  // Both operations have same source and target positions. So the element already got merged and there is\n  // theoretically nothing to do.\n  //\n  if (a.sourcePosition.isEqual(b.sourcePosition) && a.targetPosition.isEqual(b.targetPosition)) {\n    // There are two ways that we can provide a do-nothing operation.\n    //\n    // First is simply a NoOperation instance. We will use it if `b` operation was not undone.\n    //\n    // Second is a merge operation that has the source operation in the merged element - in the graveyard -\n    // same target position and `howMany` equal to `0`. So it is basically merging an empty element from graveyard\n    // which is almost the same as NoOperation.\n    //\n    // This way the merge operation can be later transformed by split operation\n    // to provide correct undo. This will be used if `b` operation was undone (only then it is correct).\n    //\n    if (!context.bWasUndone) {\n      return [new NoOperation(0)];\n    } else {\n      const path = b.graveyardPosition.path.slice();\n      path.push(0);\n      a.sourcePosition = new Position(b.graveyardPosition.root, path);\n      a.howMany = 0;\n      return [a];\n    }\n  } // Case 2:\n  //\n  // Same merge source position but different target position.\n  //\n  // This can happen during collaboration. For example, if one client merged a paragraph to the previous paragraph\n  // and the other person removed that paragraph and merged the same paragraph to something before:\n  //\n  // Client A:\n  // <p>Foo</p><p>Bar</p><p>[]Xyz</p>\n  // <p>Foo</p><p>BarXyz</p>\n  //\n  // Client B:\n  // <p>Foo</p>[<p>Bar</p>]<p>Xyz</p>\n  // <p>Foo</p><p>[]Xyz</p>\n  // <p>FooXyz</p>\n  //\n  // In this case we need to decide where finally \"Xyz\" will land:\n  //\n  // <p>FooXyz</p>               graveyard: <p>Bar</p>\n  // <p>Foo</p>                  graveyard: <p>BarXyz</p>\n  //\n  // Let's move it in a way so that a merge operation that does not target to graveyard is more important so that\n  // nodes does not end up in the graveyard. It makes sense. Both for Client A and for Client B \"Xyz\" finally did not\n  // end up in the graveyard (see above).\n  //\n  // If neither or both operations point to graveyard, then let `aIsStrong` decide.\n  //\n\n\n  if (a.sourcePosition.isEqual(b.sourcePosition) && !a.targetPosition.isEqual(b.targetPosition) && !context.bWasUndone && context.abRelation != 'splitAtSource') {\n    const aToGraveyard = a.targetPosition.root.rootName == '$graveyard';\n    const bToGraveyard = b.targetPosition.root.rootName == '$graveyard'; // If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\n    const aIsWeak = aToGraveyard && !bToGraveyard; // If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\n    const bIsWeak = bToGraveyard && !aToGraveyard; // Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\n    const forceMove = bIsWeak || !aIsWeak && context.aIsStrong;\n\n    if (forceMove) {\n      const sourcePosition = b.targetPosition._getTransformedByMergeOperation(b);\n\n      const targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n\n      return [new MoveOperation(sourcePosition, a.howMany, targetPosition, 0)];\n    } else {\n      return [new NoOperation(0)];\n    }\n  } // The default case.\n  //\n\n\n  if (a.sourcePosition.hasSameParentAs(b.targetPosition)) {\n    a.howMany += b.howMany;\n  }\n\n  a.sourcePosition = a.sourcePosition._getTransformedByMergeOperation(b);\n  a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b); // Handle positions in graveyard.\n  // If graveyard positions are same and `a` operation is strong - do not transform.\n\n  if (!a.graveyardPosition.isEqual(b.graveyardPosition) || !context.aIsStrong) {\n    a.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation(b);\n  }\n\n  return [a];\n});\nsetTransformation(MergeOperation, MoveOperation, (a, b, context) => {\n  // Case 1:\n  //\n  // The element to merge got removed.\n  //\n  // Merge operation does support merging elements which are not siblings. So it would not be a problem\n  // from technical point of view. However, if the element was removed, the intention of the user deleting it\n  // was to have it all deleted, together with its children. From user experience point of view, moving back the\n  // removed nodes might be unexpected. This means that in this scenario we will block the merging.\n  //\n  // The exception of this rule would be if the remove operation was later undone.\n  //\n  const removedRange = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n\n  if (b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove) {\n    if (a.deletionPosition.hasSameParentAs(b.sourcePosition) && removedRange.containsPosition(a.sourcePosition)) {\n      return [new NoOperation(0)];\n    }\n  } // The default case.\n  //\n\n\n  if (a.sourcePosition.hasSameParentAs(b.targetPosition)) {\n    a.howMany += b.howMany;\n  }\n\n  if (a.sourcePosition.hasSameParentAs(b.sourcePosition)) {\n    a.howMany -= b.howMany;\n  }\n\n  a.sourcePosition = a.sourcePosition._getTransformedByMoveOperation(b);\n  a.targetPosition = a.targetPosition._getTransformedByMoveOperation(b); // `MergeOperation` graveyard position is like `MoveOperation` target position. It is a position where element(s) will\n  // be moved. Like in other similar cases, we need to consider the scenario when those positions are same.\n  // Here, we will treat `MergeOperation` like it is always strong (see `InsertOperation` x `InsertOperation` for comparison).\n  // This means that we won't transform graveyard position if it is equal to move operation target position.\n\n  if (!a.graveyardPosition.isEqual(b.targetPosition)) {\n    a.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n  }\n\n  return [a];\n});\nsetTransformation(MergeOperation, SplitOperation, (a, b, context) => {\n  if (b.graveyardPosition) {\n    // If `b` operation defines graveyard position, a node from graveyard will be moved. This means that we need to\n    // transform `a.graveyardPosition` accordingly.\n    a.graveyardPosition = a.graveyardPosition._getTransformedByDeletion(b.graveyardPosition, 1); // This is a scenario foreseen in `MergeOperation` x `MergeOperation`, with two identical merge operations.\n    //\n    // So, there was `MergeOperation` x `MergeOperation` transformation earlier. Now, `a` is a merge operation which\n    // source position is in graveyard. Interestingly, split operation wants to use the node to be merged by `a`. This\n    // means that `b` is undoing that merge operation from earlier, which caused `a` to be in graveyard.\n    //\n    // If that's the case, at this point, we will only \"fix\" `a.howMany`. It was earlier set to `0` in\n    // `MergeOperation` x `MergeOperation` transformation. Later transformations in this function will change other\n    // properties.\n    //\n\n    if (a.deletionPosition.isEqual(b.graveyardPosition)) {\n      a.howMany = b.howMany;\n    }\n  } // Case 1:\n  //\n  // Merge operation moves nodes to the place where split happens.\n  // This is a classic situation when there are two paragraphs, and there is a split (enter) after the first\n  // paragraph and there is a merge (delete) at the beginning of the second paragraph:\n  //\n  // <p>Foo{}</p><p>[]Bar</p>.\n  //\n  // Split is after `Foo`, while merge is from `Bar` to the end of `Foo`.\n  //\n  // State after split:\n  // <p>Foo</p><p></p><p>Bar</p>\n  //\n  // Now, `Bar` should be merged to the new paragraph:\n  // <p>Foo</p><p>Bar</p>\n  //\n  // Instead of merging it to the original paragraph:\n  // <p>FooBar</p><p></p>\n  //\n  // This means that `targetPosition` needs to be transformed. This is the default case though.\n  // For example, if the split would be after `F`, `targetPosition` should also be transformed.\n  //\n  // There are three exceptions, though, when we want to keep `targetPosition` as it was.\n  //\n  // First exception is when the merge target position is inside an element (not at the end, as usual). This\n  // happens when the merge operation earlier was transformed by \"the same\" merge operation. If merge operation\n  // targets inside the element we want to keep the original target position (and not transform it) because\n  // we have additional context telling us that we want to merge to the original element. We can check if the\n  // merge operation points inside element by checking what is `SplitOperation#howMany`. Since merge target position\n  // is same as split position, if `howMany` is non-zero, it means that the merge target position is inside an element.\n  //\n  // Second exception is when the element to merge is in the graveyard and split operation uses it. In that case\n  // if target position would be transformed, the merge operation would target at the source position:\n  //\n  // root: <p>Foo</p>\t\t\t\tgraveyard: <p></p>\n  //\n  // SplitOperation: root [ 0, 3 ] using graveyard [ 0 ] (howMany = 0)\n  // MergeOperation: graveyard [ 0, 0 ] -> root [ 0, 3 ] (howMany = 0)\n  //\n  // Since split operation moves the graveyard node back to the root, the merge operation source position changes.\n  // We would like to merge from the empty <p> to the \"Foo\" <p>:\n  //\n  // root: <p>Foo</p><p></p>\t\t\tgraveyard:\n  //\n  // MergeOperation#sourcePosition = root [ 1, 0 ]\n  //\n  // If `targetPosition` is transformed, it would become root [ 1, 0 ] as well. It has to be kept as it was.\n  //\n  // Third exception is connected with relations. If this happens during undo and we have explicit information\n  // that target position has not been affected by the operation which is undone by this split then this split should\n  // not move the target position either.\n  //\n\n\n  if (a.targetPosition.isEqual(b.splitPosition)) {\n    const mergeInside = b.howMany != 0;\n    const mergeSplittingElement = b.graveyardPosition && a.deletionPosition.isEqual(b.graveyardPosition);\n\n    if (mergeInside || mergeSplittingElement || context.abRelation == 'mergeTargetNotMoved') {\n      a.sourcePosition = a.sourcePosition._getTransformedBySplitOperation(b);\n      return [a];\n    }\n  } // Case 2:\n  //\n  // Merge source is at the same position as split position. This sometimes happen, mostly during undo.\n  // The decision here is mostly to choose whether merge source position should stay where it is (so it will be at the end of the\n  // split element) or should be move to the beginning of the new element.\n  //\n\n\n  if (a.sourcePosition.isEqual(b.splitPosition)) {\n    // Use context to check if `SplitOperation` is not undoing a merge operation, that didn't change the `a` operation.\n    // This scenario happens the undone merge operation moved nodes at the source position of `a` operation.\n    // In that case `a` operation source position should stay where it is.\n    if (context.abRelation == 'mergeSourceNotMoved') {\n      a.howMany = 0;\n      a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n      return [a];\n    } // This merge operation might have been earlier transformed by a merge operation which both merged the same element.\n    // See that case in `MergeOperation` x `MergeOperation` transformation. In that scenario, if the merge operation has been undone,\n    // the special case is not applied.\n    //\n    // Now, the merge operation is transformed by the split which has undone that previous merge operation.\n    // So now we are fixing situation which was skipped in `MergeOperation` x `MergeOperation` case.\n    //\n\n\n    if (context.abRelation == 'mergeSameElement' || a.sourcePosition.offset > 0) {\n      a.sourcePosition = b.moveTargetPosition.clone();\n      a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n      return [a];\n    }\n  } // The default case.\n  //\n\n\n  if (a.sourcePosition.hasSameParentAs(b.splitPosition)) {\n    a.howMany = b.splitPosition.offset;\n  }\n\n  a.sourcePosition = a.sourcePosition._getTransformedBySplitOperation(b);\n  a.targetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n  return [a];\n}); // -----------------------\n\nsetTransformation(MoveOperation, InsertOperation, (a, b) => {\n  const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n\n  const transformed = moveRange._getTransformedByInsertOperation(b, false)[0];\n\n  a.sourcePosition = transformed.start;\n  a.howMany = transformed.end.offset - transformed.start.offset; // See `InsertOperation` x `MoveOperation` transformation for details on this case.\n  //\n  // In summary, both operations point to the same place, so the order of nodes needs to be decided.\n  // `MoveOperation` is considered weaker, so it is always transformed, unless there was a certain relation\n  // between operations.\n  //\n\n  if (!a.targetPosition.isEqual(b.position)) {\n    a.targetPosition = a.targetPosition._getTransformedByInsertOperation(b);\n  }\n\n  return [a];\n});\nsetTransformation(MoveOperation, MoveOperation, (a, b, context) => {\n  //\n  // Setting and evaluating some variables that will be used in special cases and default algorithm.\n  //\n  // Create ranges from `MoveOperations` properties.\n  const rangeA = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n\n  const rangeB = Range._createFromPositionAndShift(b.sourcePosition, b.howMany); // Assign `context.aIsStrong` to a different variable, because the value may change during execution of\n  // this algorithm and we do not want to override original `context.aIsStrong` that will be used in later transformations.\n\n\n  let aIsStrong = context.aIsStrong; // This will be used to decide the order of nodes if both operations target at the same position.\n  // By default, use strong/weak operation mechanism.\n\n  let insertBefore = !context.aIsStrong; // If the relation is set, then use it to decide nodes order.\n\n  if (context.abRelation == 'insertBefore' || context.baRelation == 'insertAfter') {\n    insertBefore = true;\n  } else if (context.abRelation == 'insertAfter' || context.baRelation == 'insertBefore') {\n    insertBefore = false;\n  } // `a.targetPosition` could be affected by the `b` operation. We will transform it.\n\n\n  let newTargetPosition;\n\n  if (a.targetPosition.isEqual(b.targetPosition) && insertBefore) {\n    newTargetPosition = a.targetPosition._getTransformedByDeletion(b.sourcePosition, b.howMany);\n  } else {\n    newTargetPosition = a.targetPosition._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n  } //\n  // Special case #1 + mirror.\n  //\n  // Special case when both move operations' target positions are inside nodes that are\n  // being moved by the other move operation. So in other words, we move ranges into inside of each other.\n  // This case can't be solved reasonably (on the other hand, it should not happen often).\n\n\n  if (_moveTargetIntoMovedRange(a, b) && _moveTargetIntoMovedRange(b, a)) {\n    // Instead of transforming operation, we return a reverse of the operation that we transform by.\n    // So when the results of this \"transformation\" will be applied, `b` MoveOperation will get reversed.\n    return [b.getReversed()];\n  } //\n  // End of special case #1.\n  //\n  //\n  // Special case #2.\n  //\n  // Check if `b` operation targets inside `rangeA`.\n\n\n  const bTargetsToA = rangeA.containsPosition(b.targetPosition); // If `b` targets to `rangeA` and `rangeA` contains `rangeB`, `b` operation has no influence on `a` operation.\n  // You might say that operation `b` is captured inside operation `a`.\n\n  if (bTargetsToA && rangeA.containsRange(rangeB, true)) {\n    // There is a mini-special case here, where `rangeB` is on other level than `rangeA`. That's why\n    // we need to transform `a` operation anyway.\n    rangeA.start = rangeA.start._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n    rangeA.end = rangeA.end._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n    return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n  } //\n  // Special case #2 mirror.\n  //\n\n\n  const aTargetsToB = rangeB.containsPosition(a.targetPosition);\n\n  if (aTargetsToB && rangeB.containsRange(rangeA, true)) {\n    // `a` operation is \"moved together\" with `b` operation.\n    // Here, just move `rangeA` \"inside\" `rangeB`.\n    rangeA.start = rangeA.start._getCombined(b.sourcePosition, b.getMovedRangeStart());\n    rangeA.end = rangeA.end._getCombined(b.sourcePosition, b.getMovedRangeStart());\n    return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n  } //\n  // End of special case #2.\n  //\n  //\n  // Special case #3 + mirror.\n  //\n  // `rangeA` has a node which is an ancestor of `rangeB`. In other words, `rangeB` is inside `rangeA`\n  // but not on the same tree level. In such case ranges have common part but we have to treat it\n  // differently, because in such case those ranges are not really conflicting and should be treated like\n  // two separate ranges. Also we have to discard two difference parts.\n\n\n  const aCompB = compareArrays(a.sourcePosition.getParentPath(), b.sourcePosition.getParentPath());\n\n  if (aCompB == 'prefix' || aCompB == 'extension') {\n    // Transform `rangeA` by `b` operation and make operation out of it, and that's all.\n    // Note that this is a simplified version of default case, but here we treat the common part (whole `rangeA`)\n    // like a one difference part.\n    rangeA.start = rangeA.start._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n    rangeA.end = rangeA.end._getTransformedByMove(b.sourcePosition, b.targetPosition, b.howMany);\n    return _makeMoveOperationsFromRanges([rangeA], newTargetPosition);\n  } //\n  // End of special case #3.\n  //\n  //\n  // Default case - ranges are on the same level or are not connected with each other.\n  //\n  // Modifier for default case.\n  // Modifies `aIsStrong` flag in certain conditions.\n  //\n  // If only one of operations is a remove operation, we force remove operation to be the \"stronger\" one\n  // to provide more expected results.\n\n\n  if (a.type == 'remove' && b.type != 'remove' && !context.aWasUndone && !context.forceWeakRemove) {\n    aIsStrong = true;\n  } else if (a.type != 'remove' && b.type == 'remove' && !context.bWasUndone && !context.forceWeakRemove) {\n    aIsStrong = false;\n  } // Handle operation's source ranges - check how `rangeA` is affected by `b` operation.\n  // This will aggregate transformed ranges.\n\n\n  const ranges = []; // Get the \"difference part\" of `a` operation source range.\n  // This is an array with one or two ranges. Two ranges if `rangeB` is inside `rangeA`.\n\n  const difference = rangeA.getDifference(rangeB);\n\n  for (const range of difference) {\n    // Transform those ranges by `b` operation. For example if `b` moved range from before those ranges, fix those ranges.\n    range.start = range.start._getTransformedByDeletion(b.sourcePosition, b.howMany);\n    range.end = range.end._getTransformedByDeletion(b.sourcePosition, b.howMany); // If `b` operation targets into `rangeA` on the same level, spread `rangeA` into two ranges.\n\n    const shouldSpread = compareArrays(range.start.getParentPath(), b.getMovedRangeStart().getParentPath()) == 'same';\n\n    const newRanges = range._getTransformedByInsertion(b.getMovedRangeStart(), b.howMany, shouldSpread);\n\n    ranges.push(...newRanges);\n  } // Then, we have to manage the \"common part\" of both move ranges.\n\n\n  const common = rangeA.getIntersection(rangeB);\n\n  if (common !== null && aIsStrong) {\n    // Calculate the new position of that part of original range.\n    common.start = common.start._getCombined(b.sourcePosition, b.getMovedRangeStart());\n    common.end = common.end._getCombined(b.sourcePosition, b.getMovedRangeStart()); // Take care of proper range order.\n    //\n    // Put `common` at appropriate place. Keep in mind that we are interested in original order.\n    // Basically there are only three cases: there is zero, one or two difference ranges.\n    //\n    // If there is zero difference ranges, just push `common` in the array.\n\n    if (ranges.length === 0) {\n      ranges.push(common);\n    } // If there is one difference range, we need to check whether common part was before it or after it.\n    else if (ranges.length == 1) {\n        if (rangeB.start.isBefore(rangeA.start) || rangeB.start.isEqual(rangeA.start)) {\n          ranges.unshift(common);\n        } else {\n          ranges.push(common);\n        }\n      } // If there are more ranges (which means two), put common part between them. This is the only scenario\n      // where there could be two difference ranges so we don't have to make any comparisons.\n      else {\n          ranges.splice(1, 0, common);\n        }\n  }\n\n  if (ranges.length === 0) {\n    // If there are no \"source ranges\", nothing should be changed.\n    // Note that this can happen only if `aIsStrong == false` and `rangeA.isEqual( rangeB )`.\n    return [new NoOperation(a.baseVersion)];\n  }\n\n  return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n});\nsetTransformation(MoveOperation, SplitOperation, (a, b, context) => {\n  let newTargetPosition = a.targetPosition.clone(); // Do not transform if target position is same as split insertion position and this split comes from undo.\n  // This should be done on relations but it is too much work for now as it would require relations working in collaboration.\n  // We need to make a decision how we will resolve such conflict and this is less harmful way.\n\n  if (!a.targetPosition.isEqual(b.insertionPosition) || !b.graveyardPosition || context.abRelation == 'moveTargetAfter') {\n    newTargetPosition = a.targetPosition._getTransformedBySplitOperation(b);\n  } // Case 1:\n  //\n  // Last element in the moved range got split.\n  //\n  // In this case the default range transformation will not work correctly as the element created by\n  // split operation would be outside the range. The range to move needs to be fixed manually.\n  //\n\n\n  const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n\n  if (moveRange.end.isEqual(b.insertionPosition)) {\n    // Do it only if this is a \"natural\" split, not a one that comes from undo.\n    // If this is undo split, only `targetPosition` needs to be changed (if the move is a remove).\n    if (!b.graveyardPosition) {\n      a.howMany++;\n    }\n\n    a.targetPosition = newTargetPosition;\n    return [a];\n  } // Case 2:\n  //\n  // Split happened between the moved nodes. In this case two ranges to move need to be generated.\n  //\n  // Characters `ozba` are moved to the end of paragraph `Xyz` but split happened.\n  // <p>F[oz|ba]r</p><p>Xyz</p>\n  //\n  // After split:\n  // <p>F[oz</p><p>ba]r</p><p>Xyz</p>\n  //\n  // Correct ranges:\n  // <p>F[oz]</p><p>[ba]r</p><p>Xyz</p>\n  //\n  // After move:\n  // <p>F</p><p>r</p><p>Xyzozba</p>\n  //\n\n\n  if (moveRange.start.hasSameParentAs(b.splitPosition) && moveRange.containsPosition(b.splitPosition)) {\n    let rightRange = new Range(b.splitPosition, moveRange.end);\n    rightRange = rightRange._getTransformedBySplitOperation(b);\n    const ranges = [new Range(moveRange.start, b.splitPosition), rightRange];\n    return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n  } // Case 3:\n  //\n  // Move operation targets at the split position. We need to decide if the nodes should be inserted\n  // at the end of the split element or at the beginning of the new element.\n  //\n\n\n  if (a.targetPosition.isEqual(b.splitPosition) && context.abRelation == 'insertAtSource') {\n    newTargetPosition = b.moveTargetPosition;\n  } // Case 4:\n  //\n  // Move operation targets just after the split element. We need to decide if the nodes should be inserted\n  // between two parts of split element, or after the new element.\n  //\n  // Split at `|`, while move operation moves `<p>Xyz</p>` and targets at `^`:\n  // <p>Foo|bar</p>^<p>baz</p>\n  // <p>Foo</p>^<p>bar</p><p>baz</p> or <p>Foo</p><p>bar</p>^<p>baz</p>?\n  //\n  // If there is no contextual information between operations (for example, they come from collaborative\n  // editing), we don't want to put some unrelated content (move) between parts of related content (split parts).\n  // However, if the split is from undo, in the past, the moved content might be targeting between the\n  // split parts, meaning that was exactly user's intention:\n  //\n  // <p>Foo</p>^<p>bar</p>\t\t<--- original situation, in \"past\".\n  // <p>Foobar</p>^\t\t\t\t<--- after merge target position is transformed.\n  // <p>Foo|bar</p>^\t\t\t\t<--- then the merge is undone, and split happens, which leads us to current situation.\n  //\n  // In this case it is pretty clear that the intention was to put new paragraph between those nodes,\n  // so we need to transform accordingly. We can detect this scenario thanks to relations.\n  //\n\n\n  if (a.targetPosition.isEqual(b.insertionPosition) && context.abRelation == 'insertBetween') {\n    newTargetPosition = a.targetPosition;\n  } // The default case.\n  //\n\n\n  const transformed = moveRange._getTransformedBySplitOperation(b);\n\n  const ranges = [transformed]; // Case 5:\n  //\n  // Moved range contains graveyard element used by split operation. Add extra move operation to the result.\n  //\n\n  if (b.graveyardPosition) {\n    const movesGraveyardElement = moveRange.start.isEqual(b.graveyardPosition) || moveRange.containsPosition(b.graveyardPosition);\n\n    if (a.howMany > 1 && movesGraveyardElement && !context.aWasUndone) {\n      ranges.push(Range._createFromPositionAndShift(b.insertionPosition, 1));\n    }\n  }\n\n  return _makeMoveOperationsFromRanges(ranges, newTargetPosition);\n});\nsetTransformation(MoveOperation, MergeOperation, (a, b, context) => {\n  const movedRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n\n  if (b.deletionPosition.hasSameParentAs(a.sourcePosition) && movedRange.containsPosition(b.sourcePosition)) {\n    if (a.type == 'remove' && !context.forceWeakRemove) {\n      // Case 1:\n      //\n      // The element to remove got merged.\n      //\n      // Merge operation does support merging elements which are not siblings. So it would not be a problem\n      // from technical point of view. However, if the element was removed, the intention of the user\n      // deleting it was to have it all deleted. From user experience point of view, moving back the\n      // removed nodes might be unexpected. This means that in this scenario we will reverse merging and remove the element.\n      //\n      if (!context.aWasUndone) {\n        const results = [];\n        let gyMoveSource = b.graveyardPosition.clone();\n\n        let splitNodesMoveSource = b.targetPosition._getTransformedByMergeOperation(b);\n\n        if (a.howMany > 1) {\n          results.push(new MoveOperation(a.sourcePosition, a.howMany - 1, a.targetPosition, 0));\n          gyMoveSource = gyMoveSource._getTransformedByMove(a.sourcePosition, a.targetPosition, a.howMany - 1);\n          splitNodesMoveSource = splitNodesMoveSource._getTransformedByMove(a.sourcePosition, a.targetPosition, a.howMany - 1);\n        }\n\n        const gyMoveTarget = b.deletionPosition._getCombined(a.sourcePosition, a.targetPosition);\n\n        const gyMove = new MoveOperation(gyMoveSource, 1, gyMoveTarget, 0);\n        const splitNodesMoveTargetPath = gyMove.getMovedRangeStart().path.slice();\n        splitNodesMoveTargetPath.push(0);\n        const splitNodesMoveTarget = new Position(gyMove.targetPosition.root, splitNodesMoveTargetPath);\n        splitNodesMoveSource = splitNodesMoveSource._getTransformedByMove(gyMoveSource, gyMoveTarget, 1);\n        const splitNodesMove = new MoveOperation(splitNodesMoveSource, b.howMany, splitNodesMoveTarget, 0);\n        results.push(gyMove);\n        results.push(splitNodesMove);\n        return results;\n      }\n    } else {\n      // Case 2:\n      //\n      // The element to move got merged and it was the only element to move.\n      // In this case just don't do anything, leave the node in the graveyard. Without special case\n      // it would be a move operation that moves 0 nodes, so maybe it is better just to return no-op.\n      //\n      if (a.howMany == 1) {\n        if (!context.bWasUndone) {\n          return [new NoOperation(0)];\n        } else {\n          a.sourcePosition = b.graveyardPosition.clone();\n          a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n          return [a];\n        }\n      }\n    }\n  } // The default case.\n  //\n\n\n  const moveRange = Range._createFromPositionAndShift(a.sourcePosition, a.howMany);\n\n  const transformed = moveRange._getTransformedByMergeOperation(b);\n\n  a.sourcePosition = transformed.start;\n  a.howMany = transformed.end.offset - transformed.start.offset;\n  a.targetPosition = a.targetPosition._getTransformedByMergeOperation(b);\n  return [a];\n}); // -----------------------\n\nsetTransformation(RenameOperation, InsertOperation, (a, b) => {\n  a.position = a.position._getTransformedByInsertOperation(b);\n  return [a];\n});\nsetTransformation(RenameOperation, MergeOperation, (a, b) => {\n  // Case 1:\n  //\n  // Element to rename got merged, so it was moved to `b.graveyardPosition`.\n  //\n  if (a.position.isEqual(b.deletionPosition)) {\n    a.position = b.graveyardPosition.clone();\n    a.position.stickiness = 'toNext';\n    return [a];\n  }\n\n  a.position = a.position._getTransformedByMergeOperation(b);\n  return [a];\n});\nsetTransformation(RenameOperation, MoveOperation, (a, b) => {\n  a.position = a.position._getTransformedByMoveOperation(b);\n  return [a];\n});\nsetTransformation(RenameOperation, RenameOperation, (a, b, context) => {\n  if (a.position.isEqual(b.position)) {\n    if (context.aIsStrong) {\n      a.oldName = b.newName;\n    } else {\n      return [new NoOperation(0)];\n    }\n  }\n\n  return [a];\n});\nsetTransformation(RenameOperation, SplitOperation, (a, b) => {\n  // Case 1:\n  //\n  // The element to rename has been split. In this case, the new element should be also renamed.\n  //\n  // User decides to change the paragraph to a list item:\n  // <paragraph>Foobar</paragraph>\n  //\n  // However, in meantime, split happens:\n  // <paragraph>Foo</paragraph><paragraph>bar</paragraph>\n  //\n  // As a result, rename both elements:\n  // <listItem>Foo</listItem><listItem>bar</listItem>\n  //\n  const renamePath = a.position.path;\n  const splitPath = b.splitPosition.getParentPath();\n\n  if (compareArrays(renamePath, splitPath) == 'same' && !b.graveyardPosition) {\n    const extraRename = new RenameOperation(a.position.getShiftedBy(1), a.oldName, a.newName, 0);\n    return [a, extraRename];\n  } // The default case.\n  //\n\n\n  a.position = a.position._getTransformedBySplitOperation(b);\n  return [a];\n}); // -----------------------\n\nsetTransformation(RootAttributeOperation, RootAttributeOperation, (a, b, context) => {\n  if (a.root === b.root && a.key === b.key) {\n    if (!context.aIsStrong || a.newValue === b.newValue) {\n      return [new NoOperation(0)];\n    } else {\n      a.oldValue = b.newValue;\n    }\n  }\n\n  return [a];\n}); // -----------------------\n\nsetTransformation(SplitOperation, InsertOperation, (a, b) => {\n  // The default case.\n  //\n  if (a.splitPosition.hasSameParentAs(b.position) && a.splitPosition.offset < b.position.offset) {\n    a.howMany += b.howMany;\n  }\n\n  a.splitPosition = a.splitPosition._getTransformedByInsertOperation(b);\n  a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n  return [a];\n});\nsetTransformation(SplitOperation, MergeOperation, (a, b, context) => {\n  // Case 1:\n  //\n  // Split element got merged. If two different elements were merged, clients will have different content.\n  //\n  // Example. Merge at `{}`, split at `[]`:\n  // <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n  //\n  // On merge side it will look like this:\n  // <heading>FooB[]ar</heading>\n  // <heading>FooB</heading><heading>ar</heading>\n  //\n  // On split side it will look like this:\n  // <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n  // <heading>FooB</heading><paragraph>ar</paragraph>\n  //\n  // Clearly, the second element is different for both clients.\n  //\n  // We could use the removed merge element from graveyard as a split element but then clients would have a different\n  // model state (in graveyard), because the split side client would still have an element in graveyard (removed by merge).\n  //\n  // To overcome this, in `SplitOperation` x `MergeOperation` transformation we will add additional `SplitOperation`\n  // in the graveyard, which will actually clone the merged-and-deleted element. Then, that cloned element will be\n  // used for splitting. Example below.\n  //\n  // Original state:\n  // <heading>Foo</heading>{}<paragraph>B[]ar</paragraph>\n  //\n  // Merge side client:\n  //\n  // After merge:\n  // <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph>\n  //\n  // Extra split:\n  // <heading>FooB[]ar</heading>                                 graveyard: <paragraph></paragraph><paragraph></paragraph>\n  //\n  // Use the \"cloned\" element from graveyard:\n  // <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n  //\n  // Split side client:\n  //\n  // After split:\n  // <heading>Foo</heading>{}<paragraph>B</paragraph><paragraph>ar</paragraph>\n  //\n  // After merge:\n  // <heading>FooB</heading><paragraph>ar</paragraph>            graveyard: <paragraph></paragraph>\n  //\n  // This special case scenario only applies if the original split operation clones the split element.\n  // If the original split operation has `graveyardPosition` set, it all doesn't have sense because split operation\n  // knows exactly which element it should use. So there would be no original problem with different contents.\n  //\n  // Additionally, the special case applies only if the merge wasn't already undone.\n  //\n  if (!a.graveyardPosition && !context.bWasUndone && a.splitPosition.hasSameParentAs(b.sourcePosition)) {\n    const splitPath = b.graveyardPosition.path.slice();\n    splitPath.push(0);\n    const splitPosition = new Position(b.graveyardPosition.root, splitPath);\n    const insertionPosition = SplitOperation.getInsertionPosition(new Position(b.graveyardPosition.root, splitPath));\n    const additionalSplit = new SplitOperation(splitPosition, 0, null, 0);\n    additionalSplit.insertionPosition = insertionPosition;\n    a.splitPosition = a.splitPosition._getTransformedByMergeOperation(b);\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    a.graveyardPosition = additionalSplit.insertionPosition.clone();\n    a.graveyardPosition.stickiness = 'toNext';\n    return [additionalSplit, a];\n  } // The default case.\n  //\n\n\n  if (a.splitPosition.hasSameParentAs(b.deletionPosition) && !a.splitPosition.isAfter(b.deletionPosition)) {\n    a.howMany--;\n  }\n\n  if (a.splitPosition.hasSameParentAs(b.targetPosition)) {\n    a.howMany += b.howMany;\n  }\n\n  a.splitPosition = a.splitPosition._getTransformedByMergeOperation(b);\n  a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n\n  if (a.graveyardPosition) {\n    a.graveyardPosition = a.graveyardPosition._getTransformedByMergeOperation(b);\n  }\n\n  return [a];\n});\nsetTransformation(SplitOperation, MoveOperation, (a, b, context) => {\n  const rangeToMove = Range._createFromPositionAndShift(b.sourcePosition, b.howMany);\n\n  if (a.graveyardPosition) {\n    // Case 1:\n    //\n    // Split operation graveyard node was moved. In this case move operation is stronger. Since graveyard element\n    // is already moved to the correct position, we need to only move the nodes after the split position.\n    // This will be done by `MoveOperation` instead of `SplitOperation`.\n    //\n    const gyElementMoved = rangeToMove.start.isEqual(a.graveyardPosition) || rangeToMove.containsPosition(a.graveyardPosition);\n\n    if (!context.bWasUndone && gyElementMoved) {\n      const sourcePosition = a.splitPosition._getTransformedByMoveOperation(b);\n\n      const newParentPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n\n      const newTargetPath = newParentPosition.path.slice();\n      newTargetPath.push(0);\n      const newTargetPosition = new Position(newParentPosition.root, newTargetPath);\n      const moveOp = new MoveOperation(sourcePosition, a.howMany, newTargetPosition, 0);\n      return [moveOp];\n    }\n\n    a.graveyardPosition = a.graveyardPosition._getTransformedByMoveOperation(b);\n  } // Case 2:\n  //\n  // If the split position is inside the moved range, we need to shift the split position to a proper place.\n  // The position cannot be moved together with moved range because that would result in splitting of an incorrect element.\n  //\n  // Characters `bc` should be moved to the second paragraph while split position is between them:\n  // <paragraph>A[b|c]d</paragraph><paragraph>Xyz</paragraph>\n  //\n  // After move, new split position is incorrect:\n  // <paragraph>Ad</paragraph><paragraph>Xb|cyz</paragraph>\n  //\n  // Correct split position:\n  // <paragraph>A|d</paragraph><paragraph>Xbcyz</paragraph>\n  //\n  // After split:\n  // <paragraph>A</paragraph><paragraph>d</paragraph><paragraph>Xbcyz</paragraph>\n  //\n\n\n  if (a.splitPosition.hasSameParentAs(b.sourcePosition) && rangeToMove.containsPosition(a.splitPosition)) {\n    const howManyRemoved = b.howMany - (a.splitPosition.offset - b.sourcePosition.offset);\n    a.howMany -= howManyRemoved;\n\n    if (a.splitPosition.hasSameParentAs(b.targetPosition) && a.splitPosition.offset < b.targetPosition.offset) {\n      a.howMany += b.howMany;\n    }\n\n    a.splitPosition = b.sourcePosition.clone();\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    return [a];\n  } // Case 3:\n  //\n  // Split is at a position where nodes were moved.\n  //\n  // This is a scenario described in `MoveOperation` x `SplitOperation` transformation but from the\n  // \"split operation point of view\".\n  //\n\n\n  const splitAtTarget = a.splitPosition.isEqual(b.targetPosition);\n\n  if (splitAtTarget && (context.baRelation == 'insertAtSource' || context.abRelation == 'splitBefore')) {\n    a.howMany += b.howMany;\n    a.splitPosition = a.splitPosition._getTransformedByDeletion(b.sourcePosition, b.howMany);\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n    return [a];\n  } // The default case.\n  // Don't change `howMany` if move operation does not really move anything.\n  //\n\n\n  if (!b.sourcePosition.isEqual(b.targetPosition)) {\n    if (a.splitPosition.hasSameParentAs(b.sourcePosition) && a.splitPosition.offset <= b.sourcePosition.offset) {\n      a.howMany -= b.howMany;\n    }\n\n    if (a.splitPosition.hasSameParentAs(b.targetPosition) && a.splitPosition.offset < b.targetPosition.offset) {\n      a.howMany += b.howMany;\n    }\n  } // Change position stickiness to force a correct transformation.\n\n\n  a.splitPosition.stickiness = 'toNone';\n  a.splitPosition = a.splitPosition._getTransformedByMoveOperation(b);\n  a.splitPosition.stickiness = 'toNext';\n\n  if (a.graveyardPosition) {\n    a.insertionPosition = a.insertionPosition._getTransformedByMoveOperation(b);\n  } else {\n    a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n  }\n\n  return [a];\n});\nsetTransformation(SplitOperation, SplitOperation, (a, b, context) => {\n  // Case 1:\n  //\n  // Split at the same position.\n  //\n  // If there already was a split at the same position as in `a` operation, it means that the intention\n  // conveyed by `a` operation has already been fulfilled and `a` should not do anything (to avoid double split).\n  //\n  // However, there is a difference if these are new splits or splits created by undo. These have different\n  // intentions. Also splits moving back different elements from graveyard have different intentions. They\n  // are just different operations.\n  //\n  // So we cancel split operation only if it was really identical.\n  //\n  // Also, there is additional case, where split operations aren't identical and should not be cancelled, however the\n  // default transformation is incorrect too.\n  //\n  if (a.splitPosition.isEqual(b.splitPosition)) {\n    if (!a.graveyardPosition && !b.graveyardPosition) {\n      return [new NoOperation(0)];\n    }\n\n    if (a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual(b.graveyardPosition)) {\n      return [new NoOperation(0)];\n    } // Use context to know that the `a.splitPosition` should stay where it is.\n    // This happens during undo when first a merge operation moved nodes to `a.splitPosition` and now `b` operation undoes that merge.\n\n\n    if (context.abRelation == 'splitBefore') {\n      // Since split is at the same position, there are no nodes left to split.\n      a.howMany = 0; // Note: there was `if ( a.graveyardPosition )` here but it was uncovered in tests and I couldn't find any scenarios for now.\n      // That would have to be a `SplitOperation` that didn't come from undo but is transformed by operations that were undone.\n      // It could happen if `context` is enabled in collaboration.\n\n      a.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation(b);\n      return [a];\n    }\n  } // Case 2:\n  //\n  // Same node is using to split different elements. This happens in undo when previously same element was merged to\n  // two different elements. This is described in `MergeOperation` x `MergeOperation` transformation.\n  //\n  // In this case we will follow the same logic. We will assume that `insertionPosition` is same for both\n  // split operations. This might not always be true but in the real cases that were experienced it was. After all,\n  // if these splits are reverses of merge operations that were merging the same element, then the `insertionPosition`\n  // should be same for both of those splits.\n  //\n  // Again, we will decide which operation is stronger by checking if split happens in graveyard or in non-graveyard root.\n  //\n\n\n  if (a.graveyardPosition && b.graveyardPosition && a.graveyardPosition.isEqual(b.graveyardPosition)) {\n    const aInGraveyard = a.splitPosition.root.rootName == '$graveyard';\n    const bInGraveyard = b.splitPosition.root.rootName == '$graveyard'; // If `aIsWeak` it means that `a` points to graveyard while `b` doesn't. Don't move nodes then.\n\n    const aIsWeak = aInGraveyard && !bInGraveyard; // If `bIsWeak` it means that `b` points to graveyard while `a` doesn't. Force moving nodes then.\n\n    const bIsWeak = bInGraveyard && !aInGraveyard; // Force move if `b` is weak or neither operation is weak but `a` is stronger through `context.aIsStrong`.\n\n    const forceMove = bIsWeak || !aIsWeak && context.aIsStrong;\n\n    if (forceMove) {\n      const result = []; // First we need to move any nodes split by `b` back to where they were.\n      // Do it only if `b` actually moved something.\n\n      if (b.howMany) {\n        result.push(new MoveOperation(b.moveTargetPosition, b.howMany, b.splitPosition, 0));\n      } // Then we need to move nodes from `a` split position to their new element.\n      // Do it only if `a` actually should move something.\n\n\n      if (a.howMany) {\n        result.push(new MoveOperation(a.splitPosition, a.howMany, a.moveTargetPosition, 0));\n      }\n\n      return result;\n    } else {\n      return [new NoOperation(0)];\n    }\n  }\n\n  if (a.graveyardPosition) {\n    a.graveyardPosition = a.graveyardPosition._getTransformedBySplitOperation(b);\n  } // Case 3:\n  //\n  // Position where operation `b` inserted a new node after split is the same as the operation `a` split position.\n  // As in similar cases, there is ambiguity if the split should be before the new node (created by `b`) or after.\n  //\n\n\n  if (a.splitPosition.isEqual(b.insertionPosition) && context.abRelation == 'splitBefore') {\n    a.howMany++;\n    return [a];\n  } // Case 4:\n  //\n  // This is a mirror to the case 2. above.\n  //\n\n\n  if (b.splitPosition.isEqual(a.insertionPosition) && context.baRelation == 'splitBefore') {\n    const newPositionPath = b.insertionPosition.path.slice();\n    newPositionPath.push(0);\n    const newPosition = new Position(b.insertionPosition.root, newPositionPath);\n    const moveOp = new MoveOperation(a.insertionPosition, 1, newPosition, 0);\n    return [a, moveOp];\n  } // The default case.\n  //\n\n\n  if (a.splitPosition.hasSameParentAs(b.splitPosition) && a.splitPosition.offset < b.splitPosition.offset) {\n    a.howMany -= b.howMany;\n  }\n\n  a.splitPosition = a.splitPosition._getTransformedBySplitOperation(b);\n  a.insertionPosition = SplitOperation.getInsertionPosition(a.splitPosition);\n  return [a];\n}); // Checks whether `MoveOperation` `targetPosition` is inside a node from the moved range of the other `MoveOperation`.\n//\n// @private\n// @param {module:engine/model/operation/moveoperation~MoveOperation} a\n// @param {module:engine/model/operation/moveoperation~MoveOperation} b\n// @returns {Boolean}\n\nfunction _moveTargetIntoMovedRange(a, b) {\n  return a.targetPosition._getTransformedByDeletion(b.sourcePosition, b.howMany) === null;\n} // Helper function for `MoveOperation` x `MoveOperation` transformation. Converts given ranges and target position to\n// move operations and returns them.\n//\n// Ranges and target position will be transformed on-the-fly when generating operations.\n//\n// Given `ranges` should be in the order of how they were in the original transformed operation.\n//\n// Given `targetPosition` is the target position of the first range from `ranges`.\n//\n// @private\n// @param {Array.<module:engine/model/range~Range>} ranges\n// @param {module:engine/model/position~Position} targetPosition\n// @returns {Array.<module:engine/model/operation/moveoperation~MoveOperation>}\n\n\nfunction _makeMoveOperationsFromRanges(ranges, targetPosition) {\n  // At this moment we have some ranges and a target position, to which those ranges should be moved.\n  // Order in `ranges` array is the go-to order of after transformation.\n  //\n  // We are almost done. We have `ranges` and `targetPosition` to make operations from.\n  // Unfortunately, those operations may affect each other. Precisely, first operation after move\n  // may affect source range and target position of second and third operation. Same with second\n  // operation affecting third.\n  //\n  // We need to fix those source ranges and target positions once again, before converting `ranges` to operations.\n  const operations = []; // Keep in mind that nothing will be transformed if there is just one range in `ranges`.\n\n  for (let i = 0; i < ranges.length; i++) {\n    // Create new operation out of a range and target position.\n    const range = ranges[i];\n    const op = new MoveOperation(range.start, range.end.offset - range.start.offset, targetPosition, 0);\n    operations.push(op); // Transform other ranges by the generated operation.\n\n    for (let j = i + 1; j < ranges.length; j++) {\n      // All ranges in `ranges` array should be:\n      //\n      // * non-intersecting (these are part of original operation source range), and\n      // * `targetPosition` does not target into them (opposite would mean that transformed operation targets \"inside itself\").\n      //\n      // This means that the transformation will be \"clean\" and always return one result.\n      ranges[j] = ranges[j]._getTransformedByMove(op.sourcePosition, op.targetPosition, op.howMany)[0];\n    }\n\n    targetPosition = targetPosition._getTransformedByMove(op.sourcePosition, op.targetPosition, op.howMany);\n  }\n\n  return operations;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/basecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { transformSets } from '@ckeditor/ckeditor5-engine/src/model/operation/transform';\n/**\n * Base class for undo feature commands: {@link module:undo/undocommand~UndoCommand} and {@link module:undo/redocommand~RedoCommand}.\n *\n * @protected\n * @extends module:core/command~Command\n */\n\nexport default class BaseCommand extends Command {\n  constructor(editor) {\n    super(editor);\n    /**\n     * Stack of items stored by the command. These are pairs of:\n     *\n     * * {@link module:engine/model/batch~Batch batch} saved by the command,\n     * * {@link module:engine/model/selection~Selection selection} state at the moment of saving the batch.\n     *\n     * @protected\n     * @member {Array} #_stack\n     */\n\n    this._stack = [];\n    /**\n     * Stores all batches that were created by this command.\n     *\n     * @protected\n     * @member {WeakSet.<module:engine/model/batch~Batch>} #_createdBatches\n     */\n\n    this._createdBatches = new WeakSet(); // Refresh state, so the command is inactive right after initialization.\n\n    this.refresh();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.isEnabled = this._stack.length > 0;\n  }\n  /**\n   * Stores a batch in the command, together with the selection state of the {@link module:engine/model/document~Document document}\n   * created by the editor which this command is registered to.\n   *\n   * @param {module:engine/model/batch~Batch} batch The batch to add.\n   */\n\n\n  addBatch(batch) {\n    const docSelection = this.editor.model.document.selection;\n    const selection = {\n      ranges: docSelection.hasOwnRange ? Array.from(docSelection.getRanges()) : [],\n      isBackward: docSelection.isBackward\n    };\n\n    this._stack.push({\n      batch,\n      selection\n    });\n\n    this.refresh();\n  }\n  /**\n   * Removes all items from the stack.\n   */\n\n\n  clearStack() {\n    this._stack = [];\n    this.refresh();\n  }\n  /**\n   * Restores the {@link module:engine/model/document~Document#selection document selection} state after a batch was undone.\n   *\n   * @protected\n   * @param {Array.<module:engine/model/range~Range>} ranges Ranges to be restored.\n   * @param {Boolean} isBackward A flag describing whether the restored range was selected forward or backward.\n   * @param {Array.<module:engine/model/operation/operation~Operation>} operations Operations which has been applied\n   * since selection has been stored.\n   */\n\n\n  _restoreSelection(ranges, isBackward, operations) {\n    const model = this.editor.model;\n    const document = model.document; // This will keep the transformed selection ranges.\n\n    const selectionRanges = []; // Transform all ranges from the restored selection.\n\n    for (const range of ranges) {\n      const transformed = transformSelectionRange(range, operations); // For each `range` from `ranges`, we take only one transformed range.\n      // This is because we want to prevent situation where single-range selection\n      // got transformed to multi-range selection. We will take the first range that\n      // is not in the graveyard.\n\n      const newRange = transformed.find(range => range.start.root != document.graveyard); // `transformedRange` might be `undefined` if transformed range ended up in graveyard.\n\n      if (newRange) {\n        selectionRanges.push(newRange);\n      }\n    } // `selectionRanges` may be empty if all ranges ended up in graveyard. If that is the case, do not restore selection.\n\n\n    if (selectionRanges.length) {\n      model.change(writer => {\n        writer.setSelection(selectionRanges, {\n          backward: isBackward\n        });\n      });\n    }\n  }\n  /**\n   * Undoes a batch by reversing that batch, transforming reversed batch and finally applying it.\n   * This is a helper method for {@link #execute}.\n   *\n   * @protected\n   * @param {module:engine/model/batch~Batch} batchToUndo The batch to be undone.\n   * @param {module:engine/model/batch~Batch} undoingBatch The batch that will contain undoing changes.\n   */\n\n\n  _undo(batchToUndo, undoingBatch) {\n    const model = this.editor.model;\n    const document = model.document; // All changes done by the command execution will be saved as one batch.\n\n    this._createdBatches.add(undoingBatch);\n\n    const operationsToUndo = batchToUndo.operations.slice().filter(operation => operation.isDocumentOperation);\n    operationsToUndo.reverse(); // We will process each operation from `batchToUndo`, in reverse order. If there were operations A, B and C in undone batch,\n    // we need to revert them in reverse order, so first C' (reversed C), then B', then A'.\n\n    for (const operationToUndo of operationsToUndo) {\n      const nextBaseVersion = operationToUndo.baseVersion + 1;\n      const historyOperations = Array.from(document.history.getOperations(nextBaseVersion));\n      const transformedSets = transformSets([operationToUndo.getReversed()], historyOperations, {\n        useRelations: true,\n        document: this.editor.model.document,\n        padWithNoOps: false,\n        forceWeakRemove: true\n      });\n      const reversedOperations = transformedSets.operationsA; // After reversed operation has been transformed by all history operations, apply it.\n\n      for (const operation of reversedOperations) {\n        // Before applying, add the operation to the `undoingBatch`.\n        undoingBatch.addOperation(operation);\n        model.applyOperation(operation);\n        document.history.setOperationAsUndone(operationToUndo, operation);\n      }\n    }\n  }\n\n} // Transforms given range `range` by given `operations`.\n// Returns an array containing one or more ranges, which are result of the transformation.\n\nfunction transformSelectionRange(range, operations) {\n  const transformed = range.getTransformedByOperations(operations); // After `range` got transformed, we have an array of ranges. Some of those\n  // ranges may be \"touching\" -- they can be next to each other and could be merged.\n  // First, we have to sort those ranges to assure that they are in order.\n\n  transformed.sort((a, b) => a.start.isBefore(b.start) ? -1 : 1); // Then, we check if two consecutive ranges are touching.\n\n  for (let i = 1; i < transformed.length; i++) {\n    const a = transformed[i - 1];\n    const b = transformed[i];\n\n    if (a.end.isTouching(b.start)) {\n      // And join them together if they are.\n      a.end = b.end;\n      transformed.splice(i, 1);\n      i--;\n    }\n  }\n\n  return transformed;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The undo command stores {@link module:engine/model/batch~Batch batches} applied to the\n * {@link module:engine/model/document~Document document} and is able to undo a batch by reversing it and transforming by\n * batches from {@link module:engine/model/document~Document#history history} that happened after the reversed batch.\n *\n * The undo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\n\nexport default class UndoCommand extends BaseCommand {\n  /**\n   * Executes the command. This method reverts a {@link module:engine/model/batch~Batch batch} added to the command's stack, transforms\n   * and applies the reverted version on the {@link module:engine/model/document~Document document} and removes the batch from the stack.\n   * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n   *\n   * @fires execute\n   * @fires revert\n   * @param {module:engine/model/batch~Batch} [batch] A batch that should be undone. If not set, the last added batch will be undone.\n   */\n  execute(batch = null) {\n    // If batch is not given, set `batchIndex` to the last index in command stack.\n    const batchIndex = batch ? this._stack.findIndex(a => a.batch == batch) : this._stack.length - 1;\n\n    const item = this._stack.splice(batchIndex, 1)[0];\n\n    const undoingBatch = this.editor.model.createBatch('transparent'); // All changes has to be done in one `enqueueChange` callback so other listeners will not\n    // step between consecutive operations, or won't do changes to the document before selection is properly restored.\n\n    this.editor.model.enqueueChange(undoingBatch, () => {\n      this._undo(item.batch, undoingBatch);\n\n      const operations = this.editor.model.document.history.getOperations(item.batch.baseVersion);\n\n      this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n\n      this.fire('revert', item.batch, undoingBatch);\n    });\n    this.refresh();\n  }\n\n}\n/**\n * Fired when execution of the command reverts some batch.\n *\n * @event revert\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/redocommand\n */\nimport BaseCommand from './basecommand';\n/**\n * The redo command stores {@link module:engine/model/batch~Batch batches} that were used to undo a batch by\n * {@link module:undo/undocommand~UndoCommand}. It is able to redo a previously undone batch by reversing the undoing\n * batches created by `UndoCommand`. The reversed batch is transformed by all the batches from\n * {@link module:engine/model/document~Document#history history} that happened after the reversed undo batch.\n *\n * The redo command also takes care of restoring the {@link module:engine/model/document~Document#selection document selection}.\n *\n * @extends module:undo/basecommand~BaseCommand\n */\n\nexport default class RedoCommand extends BaseCommand {\n  /**\n   * Executes the command. This method reverts the last {@link module:engine/model/batch~Batch batch} added to\n   * the command's stack, applies the reverted and transformed version on the\n   * {@link module:engine/model/document~Document document} and removes the batch from the stack.\n   * Then, it restores the {@link module:engine/model/document~Document#selection document selection}.\n   *\n   * @fires execute\n   */\n  execute() {\n    const item = this._stack.pop();\n\n    const redoingBatch = this.editor.model.createBatch('transparent'); // All changes have to be done in one `enqueueChange` callback so other listeners will not step between consecutive\n    // operations, or won't do changes to the document before selection is properly restored.\n\n    this.editor.model.enqueueChange(redoingBatch, () => {\n      const lastOperation = item.batch.operations[item.batch.operations.length - 1];\n      const nextBaseVersion = lastOperation.baseVersion + 1;\n      const operations = this.editor.model.document.history.getOperations(nextBaseVersion);\n\n      this._restoreSelection(item.selection.ranges, item.selection.isBackward, operations);\n\n      this._undo(item.batch, redoingBatch);\n    });\n    this.refresh();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undoediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoCommand from './undocommand';\nimport RedoCommand from './redocommand';\n/**\n * The undo engine feature.\n *\n * It introduces the `'undo'` and `'redo'` commands to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class UndoEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'UndoEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    /**\n     * The command that manages undo {@link module:engine/model/batch~Batch batches} stack (history).\n     * Created and registered during the {@link #init feature initialization}.\n     *\n     * @private\n     * @member {module:undo/undocommand~UndoCommand} #_undoCommand\n     */\n\n    /**\n     * The command that manages redo {@link module:engine/model/batch~Batch batches} stack (history).\n     * Created and registered during the {@link #init feature initialization}.\n     *\n     * @private\n     * @member {module:undo/undocommand~UndoCommand} #_redoCommand\n     */\n\n    /**\n     * Keeps track of which batches were registered in undo.\n     *\n     * @private\n     * @member {WeakSet.<module:engine/model/batch~Batch>}\n     */\n\n    this._batchRegistry = new WeakSet();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Create commands.\n\n    this._undoCommand = new UndoCommand(editor);\n    this._redoCommand = new RedoCommand(editor); // Register command to the editor.\n\n    editor.commands.add('undo', this._undoCommand);\n    editor.commands.add('redo', this._redoCommand);\n    this.listenTo(editor.model, 'applyOperation', (evt, args) => {\n      const operation = args[0]; // Do not register batch if the operation is not a document operation.\n      // This prevents from creating empty undo steps, where all operations where non-document operations.\n      // Non-document operations creates and alters content in detached tree fragments (for example, document fragments).\n      // Most of time this is preparing data before it is inserted into actual tree (for example during copy & paste).\n      // Such operations should not be reversed.\n\n      if (!operation.isDocumentOperation) {\n        return;\n      }\n\n      const batch = operation.batch;\n\n      const isRedoBatch = this._redoCommand._createdBatches.has(batch);\n\n      const isUndoBatch = this._undoCommand._createdBatches.has(batch);\n\n      const isRegisteredBatch = this._batchRegistry.has(batch); // If changes are not a part of a batch or this is not a new batch, omit those changes.\n\n\n      if (isRegisteredBatch || batch.type == 'transparent' && !isRedoBatch && !isUndoBatch) {\n        return;\n      } else {\n        if (isRedoBatch) {\n          // If this batch comes from `redoCommand`, add it to `undoCommand` stack.\n          this._undoCommand.addBatch(batch);\n        } else if (!isUndoBatch) {\n          // A default batch - these are new changes in the document, not introduced by undo feature.\n          // Add them to `undoCommand` stack and clear `redoCommand` stack.\n          this._undoCommand.addBatch(batch);\n\n          this._redoCommand.clearStack();\n        }\n      } // Add the batch to the registry so it will not be processed again.\n\n\n      this._batchRegistry.add(batch);\n    }, {\n      priority: 'highest'\n    });\n    this.listenTo(this._undoCommand, 'revert', (evt, undoneBatch, undoingBatch) => {\n      this._redoCommand.addBatch(undoingBatch);\n    });\n    editor.keystrokes.set('CTRL+Z', 'undo');\n    editor.keystrokes.set('CTRL+Y', 'redo');\n    editor.keystrokes.set('CTRL+SHIFT+Z', 'redo');\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module undo/undoui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport undoIcon from '../theme/icons/undo.svg';\nimport redoIcon from '../theme/icons/redo.svg';\n/**\n * The undo UI feature. It introduces the `'undo'` and `'redo'` buttons to the editor.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UndoUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedUndoIcon = locale.uiLanguageDirection == 'ltr' ? undoIcon : redoIcon;\n        const localizedRedoIcon = locale.uiLanguageDirection == 'ltr' ? redoIcon : undoIcon;\n        this._addButton('undo', t('de'), 'CTRL+Z', localizedUndoIcon);\n        this._addButton('redo', t('df'), 'CTRL+Y', localizedRedoIcon);\n    }\n    /**\n   * Creates a button for the specified command.\n   *\n   * @private\n   * @param {String} name Command name.\n   * @param {String} label Button label.\n   * @param {String} keystroke Command keystroke.\n   * @param {String} Icon Source of the icon.\n   */\n    _addButton(name, label, keystroke, Icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const command = editor.commands.get(name);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon: Icon,\n                keystroke,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(name));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module undo/undo\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UndoEditing from './undoediting';\nimport UndoUI from './undoui';\n/**\n * The undo feature.\n *\n * This is a \"glue\" plugin which loads the {@link module:undo/undoediting~UndoEditing undo editing feature}\n * and {@link module:undo/undoui~UndoUI undo UI feature}.\n *\n * Below is the explanation of the undo mechanism working together with {@link module:engine/model/history~History History}:\n *\n * Whenever a {@link module:engine/model/operation/operation~Operation operation} is applied to the\n * {@link module:engine/model/document~Document document}, it is saved to `History` as is.\n * The {@link module:engine/model/batch~Batch batch} that owns that operation is also saved, in\n * {@link module:undo/undocommand~UndoCommand}, together with the selection that was present in the document before the\n * operation was applied. A batch is saved instead of the operation because changes are undone batch-by-batch, not operation-by-operation\n * and a batch is seen as one undo step.\n *\n * After some changes happen to the document, the `History` and `UndoCommand` stack can be represented as follows:\n *\n *\t\t    History                            Undo stack\n *\t\t==============             ==================================\n *\t\t[operation A1]                         [batch A]\n *\t\t[operation B1]                         [batch B]\n *\t\t[operation B2]                         [batch C]\n *\t\t[operation C1]\n *\t\t[operation C2]\n *\t\t[operation B3]\n *\t\t[operation C3]\n *\n * Where operations starting with the same letter are from same batch.\n *\n * Undoing a batch means that a set of operations which will reverse the effects of that batch needs to be generated.\n * For example, if a batch added several letters, undoing the batch should remove them. It is important to apply undoing\n * operations in the reversed order, so if a batch has operation `X`, `Y`, `Z`, reversed operations `Zr`, `Yr` and `Xr`\n * need to be applied. Otherwise reversed operation `Xr` would operate on a wrong document state, because operation `X`\n * does not know that operations `Y` and `Z` happened.\n *\n * After operations from an undone batch got {@link module:engine/model/operation/operation~Operation#getReversed reversed},\n * one needs to make sure if they are ready to be applied. In the scenario above, operation `C3` is the last operation and `C3r`\n * bases on up-to-date document state, so it can be applied to the document.\n *\n *\t\t     History                             Undo stack\n *\t\t=================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]             [   processing undoing batch C   ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\n * Next is operation `C2`, reversed to `C2r`. `C2r` bases on `C2`, so it bases on the wrong document state. It needs to be\n * transformed by operations from history that happened after it, so it \"knows\" about them. Let us assume that `C2' = C2r * B3 * C3 * C3r`,\n * where `*` means \"transformed by\". Rest of operations from that batch are processed in the same fashion.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]                                    [ batch Cr ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\n * Selective undo works on the same basis, however, instead of undoing the last batch in the undo stack, any batch can be undone.\n * The same algorithm applies: operations from a batch (i.e. `A1`) are reversed and then transformed by operations stored in history.\n *\n * Redo also is very similar to undo. It has its own stack that is filled with undoing (reversed batches). Operations from\n * batch that is re-done are reversed-back, transformed in proper order and applied to the document.\n *\n *\t\t     History                             Undo stack                                      Redo stack\n *\t\t=================             ==================================             ==================================\n *\t\t[ operation A1  ]                      [  batch A  ]\n *\t\t[ operation B1  ]                      [  batch B  ]\n *\t\t[ operation B2  ]                      [ batch Crr ]\n *\t\t[ operation C1  ]\n *\t\t[ operation C2  ]\n *\t\t[ operation B3  ]\n *\t\t[ operation C3  ]\n *\t\t[ operation C3r ]\n *\t\t[ operation C2' ]\n *\t\t[ operation C1' ]\n *\t\t[ operation C1'r]\n *\t\t[ operation C2'r]\n *\t\t[ operation C3rr]\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Undo extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [UndoEditing, UndoUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Undo';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module core/pendingactions\n */\nimport Plugin from './plugin';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The list of pending editor actions.\n *\n * This plugin should be used to synchronise plugins that execute long-lasting actions\n * (e.g. file upload) with the editor integration. It gives the developer who integrates the editor\n * an easy way to check if there are any actions pending whenever such information is needed.\n * All plugins that register a pending action also provide a message about the action that is ongoing\n * which can be displayed to the user. This lets them decide if they want to interrupt the action or wait.\n *\n * Adding and updating a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Upload in progress: 0%.' );\n *\n *\t\t// You can update the message:\n * \t\taction.message = 'Upload in progress: 10%.';\n *\n * Removing a pending action:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n * \t\tconst action = pendingActions.add( 'Unsaved changes.' );\n *\n * \t\tpendingActions.remove( action );\n *\n * Getting pending actions:\n *\n * \t\tconst pendingActions = editor.plugins.get( 'PendingActions' );\n *\n * \t\tconst action1 = pendingActions.add( 'Action 1' );\n * \t\tconst action2 = pendingActions.add( 'Action 2' );\n *\n * \t\tpendingActions.first; // Returns action1\n * \t\tArray.from( pendingActions ); // Returns [ action1, action2 ]\n *\n * This plugin is used by features like {@link module:upload/filerepository~FileRepository} to register their ongoing actions\n * and by features like {@link module:autosave/autosave~Autosave} to detect whether there are any ongoing actions.\n * Read more about saving the data in the {@glink builds/guides/integration/saving-data Saving and getting data} guide.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class PendingActions extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'PendingActions';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    /**\n     * Defines whether there is any registered pending action.\n     *\n     * @readonly\n     * @observable\n     * @member {Boolean} #hasAny\n     */\n    this.set('hasAny', false);\n    /**\n     * A list of pending actions.\n     *\n     * @private\n     * @type {module:utils/collection~Collection}\n     */\n\n    this._actions = new Collection({\n      idProperty: '_id'\n    });\n\n    this._actions.delegate('add', 'remove').to(this);\n  }\n  /**\n   * Adds an action to the list of pending actions.\n   *\n   * This method returns an action object with an observable message property.\n   * The action object can be later used in the {@link #remove} method. It also allows you to change the message.\n   *\n   * @param {String} message The action message.\n   * @returns {Object} An observable object that represents a pending action.\n   */\n\n\n  add(message) {\n    if (typeof message !== 'string') {\n      /**\n       * The message must be a string.\n       *\n       * @error pendingactions-add-invalid-message\n       */\n      throw new CKEditorError('pendingactions-add-invalid-message: The message must be a string.', this);\n    }\n\n    const action = Object.create(ObservableMixin);\n    action.set('message', message);\n\n    this._actions.add(action);\n\n    this.hasAny = true;\n    return action;\n  }\n  /**\n   * Removes an action from the list of pending actions.\n   *\n   * @param {Object} action An action object.\n   */\n\n\n  remove(action) {\n    this._actions.remove(action);\n\n    this.hasAny = !!this._actions.length;\n  }\n  /**\n   * Returns the first action from the list or null when list is empty\n   *\n   * returns {Object|null} The pending action object.\n   */\n\n\n  get first() {\n    return this._actions.get(0);\n  }\n  /**\n   * Iterable interface.\n   *\n   * @returns {Iterable.<*>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this._actions[Symbol.iterator]();\n  }\n  /**\n   * Fired when an action is added to the list.\n   *\n   * @event add\n   * @param {Object} action The added action.\n   */\n\n  /**\n   * Fired when an action is removed from the list.\n   *\n   * @event remove\n   * @param {Object} action The removed action.\n   */\n\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/filereader\n */\n\n/* globals window */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Wrapper over the native `FileReader`.\n */\n\nexport default class FileReader {\n  /**\n   * Creates an instance of the FileReader.\n   */\n  constructor() {\n    const reader = new window.FileReader();\n    /**\n     * Instance of native FileReader.\n     *\n     * @private\n     * @member {FileReader} #_reader\n     */\n\n    this._reader = reader;\n    this._data = undefined;\n    /**\n     * Number of bytes loaded.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #loaded\n     */\n\n    this.set('loaded', 0);\n\n    reader.onprogress = evt => {\n      this.loaded = evt.loaded;\n    };\n  }\n  /**\n   * Returns error that occurred during file reading.\n   *\n   * @returns {Error}\n   */\n\n\n  get error() {\n    return this._reader.error;\n  }\n  /**\n   * Holds the data of an already loaded file. The file must be first loaded\n   * by using {@link module:upload/filereader~FileReader#read `read()`}.\n   *\n   * @type {File|undefined}\n   */\n\n\n  get data() {\n    return this._data;\n  }\n  /**\n   * Reads the provided file.\n   *\n   * @param {File} file Native File object.\n   * @returns {Promise.<String>} Returns a promise that will be resolved with file's content.\n   * The promise will be rejected in case of an error or when the reading process is aborted.\n   */\n\n\n  read(file) {\n    const reader = this._reader;\n    this.total = file.size;\n    return new Promise((resolve, reject) => {\n      reader.onload = () => {\n        const result = reader.result;\n        this._data = result;\n        resolve(result);\n      };\n\n      reader.onerror = () => {\n        reject('error');\n      };\n\n      reader.onabort = () => {\n        reject('aborted');\n      };\n\n      this._reader.readAsDataURL(file);\n    });\n  }\n  /**\n   * Aborts file reader.\n   */\n\n\n  abort() {\n    this._reader.abort();\n  }\n\n}\nmix(FileReader, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module upload/filerepository\n */\n/* globals console */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport PendingActions from '@ckeditor/ckeditor5-core/src/pendingactions';\nimport CKEditorError, { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport FileReader from './filereader.js';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid.js';\n/**\n * File repository plugin. A central point for managing file upload.\n *\n * To use it, first you need an upload adapter. Upload adapter's job is to handle communication with the server\n * (sending the file and handling server's response). You can use one of the existing plugins introducing upload adapters\n * (e.g. {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter} or\n * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}) or write your own one – see\n * the {@glink framework/guides/deep-dive/upload-adapter \"Custom image upload adapter\" deep dive guide}.\n *\n * Then, you can use {@link module:upload/filerepository~FileRepository#createLoader `createLoader()`} and the returned\n * {@link module:upload/filerepository~FileLoader} instance to load and upload files.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FileRepository extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'FileRepository';\n    }\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [PendingActions];\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        /**\n     * Collection of loaders associated with this repository.\n     *\n     * @member {module:utils/collection~Collection} #loaders\n     */\n        this.loaders = new Collection();\n        // Keeps upload in a sync with pending actions.\n        this.loaders.on('add', () => this._updatePendingAction());\n        this.loaders.on('remove', () => this._updatePendingAction());\n        /**\n     * Loaders mappings used to retrieve loaders references.\n     *\n     * @private\n     * @member {Map<File|Promise, FileLoader>} #_loadersMap\n     */\n        this._loadersMap = new Map();\n        /**\n     * Reference to a pending action registered in a {@link module:core/pendingactions~PendingActions} plugin\n     * while upload is in progress. When there is no upload then value is `null`.\n     *\n     * @private\n     * @member {Object} #_pendingAction\n     */\n        this._pendingAction = null;\n        /**\n     * A factory function which should be defined before using `FileRepository`.\n     *\n     * It should return a new instance of {@link module:upload/filerepository~UploadAdapter} that will be used to upload files.\n     * {@link module:upload/filerepository~FileLoader} instance associated with the adapter\n     * will be passed to that function.\n     *\n     * For more information and example see {@link module:upload/filerepository~UploadAdapter}.\n     *\n     * @member {Function} #createUploadAdapter\n     */\n        /**\n     * Number of bytes uploaded.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #uploaded\n     */\n        this.set('uploaded', 0);\n        /**\n     * Number of total bytes to upload.\n     *\n     * It might be different than the file size because of headers and additional data.\n     * It contains `null` if value is not available yet, so it's better to use {@link #uploadedPercent} to monitor\n     * the progress.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #uploadTotal\n     */\n        this.set('uploadTotal', null);\n        /**\n     * Upload progress in percents.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #uploadedPercent\n     */\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? uploaded / total * 100 : 0;\n        });\n    }\n    /**\n   * Returns the loader associated with specified file or promise.\n   *\n   * To get loader by id use `fileRepository.loaders.get( id )`.\n   *\n   * @param {File|Promise.<File>} fileOrPromise Native file or promise handle.\n   * @returns {module:upload/filerepository~FileLoader|null}\n   */\n    getLoader(fileOrPromise) {\n        return this._loadersMap.get(fileOrPromise) || null;\n    }\n    /**\n   * Creates a loader instance for the given file.\n   *\n   * Requires {@link #createUploadAdapter} factory to be defined.\n   *\n   * @param {File|Promise.<File>} fileOrPromise Native File object or native Promise object which resolves to a File.\n   * @returns {module:upload/filerepository~FileLoader|null}\n   */\n    createLoader(fileOrPromise) {\n        if (!this.createUploadAdapter) {\n            /**\n       * You need to enable an upload adapter in order to be able to upload files.\n       *\n       * This warning shows up when {@link module:upload/filerepository~FileRepository} is being used\n       * without {@link #createUploadAdapter definining an upload adapter}.\n       *\n       * **If you see this warning when using one of the {@glink builds/index CKEditor 5 Builds}**\n       * it means that you did not configure any of the upload adapters available by default in those builds.\n       *\n       * See the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn which upload\n       * adapters are available in the builds and how to configure them.\n       *\n       * **If you see this warning when using a custom build** there is a chance that you enabled\n       * a feature like {@link module:image/imageupload~ImageUpload},\n       * or {@link module:image/imageupload/imageuploadui~ImageUploadUI} but you did not enable any upload adapter.\n       * You can choose one of the existing upload adapters listed in the\n       * {@glink features/image-upload/image-upload \"Image upload overview\"}.\n       *\n       * You can also implement your {@glink framework/guides/deep-dive/upload-adapter own image upload adapter}.\n       *\n       * @error filerepository-no-upload-adapter\n       */\n            console.warn(attachLinkToDocumentation('filerepository-no-upload-adapter: Upload adapter is not defined.'));\n            return null;\n        }\n        const loader = new FileLoader(Promise.resolve(fileOrPromise), this.createUploadAdapter);\n        this.loaders.add(loader);\n        this._loadersMap.set(fileOrPromise, loader);\n        // Store also file => loader mapping so loader can be retrieved by file instance returned upon Promise resolution.\n        if (fileOrPromise instanceof Promise) {\n            loader.file.then(file => {\n                this._loadersMap.set(file, loader);\n            })    // Every then() must have a catch().\n                  // File loader state (and rejections) are handled in read() and upload().\n                  // Also, see the \"does not swallow the file promise rejection\" test.\n.catch(() => {\n            });\n        }\n        loader.on('change:uploaded', () => {\n            let aggregatedUploaded = 0;\n            for (const loader of this.loaders) {\n                aggregatedUploaded += loader.uploaded;\n            }\n            this.uploaded = aggregatedUploaded;\n        });\n        loader.on('change:uploadTotal', () => {\n            let aggregatedTotal = 0;\n            for (const loader of this.loaders) {\n                if (loader.uploadTotal) {\n                    aggregatedTotal += loader.uploadTotal;\n                }\n            }\n            this.uploadTotal = aggregatedTotal;\n        });\n        return loader;\n    }\n    /**\n   * Destroys the given loader.\n   *\n   * @param {File|Promise|module:upload/filerepository~FileLoader} fileOrPromiseOrLoader File or Promise associated\n   * with that loader or loader itself.\n   */\n    destroyLoader(fileOrPromiseOrLoader) {\n        const loader = fileOrPromiseOrLoader instanceof FileLoader ? fileOrPromiseOrLoader : this.getLoader(fileOrPromiseOrLoader);\n        loader._destroy();\n        this.loaders.remove(loader);\n        this._loadersMap.forEach((value, key) => {\n            if (value === loader) {\n                this._loadersMap.delete(key);\n            }\n        });\n    }\n    /**\n   * Registers or deregisters pending action bound with upload progress.\n   *\n   * @private\n   */\n    _updatePendingAction() {\n        const pendingActions = this.editor.plugins.get(PendingActions);\n        if (this.loaders.length) {\n            if (!this._pendingAction) {\n                const t = this.editor.t;\n                const getMessage = value => `${ t('ax') } ${ parseInt(value) }%.`;\n                this._pendingAction = pendingActions.add(getMessage(this.uploadedPercent));\n                this._pendingAction.bind('message').to(this, 'uploadedPercent', getMessage);\n            }\n        } else {\n            pendingActions.remove(this._pendingAction);\n            this._pendingAction = null;\n        }\n    }\n}\nmix(FileRepository, ObservableMixin);\n/**\n * File loader class.\n *\n * It is used to control the process of reading the file and uploading it using the specified upload adapter.\n */\nclass FileLoader {\n    /**\n   * Creates a new instance of `FileLoader`.\n   *\n   * @param {Promise.<File>} filePromise A promise which resolves to a file instance.\n   * @param {Function} uploadAdapterCreator The function which returns {@link module:upload/filerepository~UploadAdapter} instance.\n   */\n    constructor(filePromise, uploadAdapterCreator) {\n        /**\n     * Unique id of FileLoader instance.\n     *\n     * @readonly\n     * @member {Number}\n     */\n        this.id = uid();\n        /**\n     * Additional wrapper over the initial file promise passed to this loader.\n     *\n     * @protected\n     * @member {module:upload/filerepository~FilePromiseWrapper}\n     */\n        this._filePromiseWrapper = this._createFilePromiseWrapper(filePromise);\n        /**\n     * Adapter instance associated with this file loader.\n     *\n     * @private\n     * @member {module:upload/filerepository~UploadAdapter}\n     */\n        this._adapter = uploadAdapterCreator(this);\n        /**\n     * FileReader used by FileLoader.\n     *\n     * @protected\n     * @member {module:upload/filereader~FileReader}\n     */\n        this._reader = new FileReader();\n        /**\n     * Current status of FileLoader. It can be one of the following:\n     *\n     * * 'idle',\n     * * 'reading',\n     * * 'uploading',\n     * * 'aborted',\n     * * 'error'.\n     *\n     * When reading status can change in a following way:\n     *\n     * `idle` -> `reading` -> `idle`\n     * `idle` -> `reading -> `aborted`\n     * `idle` -> `reading -> `error`\n     *\n     * When uploading status can change in a following way:\n     *\n     * `idle` -> `uploading` -> `idle`\n     * `idle` -> `uploading` -> `aborted`\n     * `idle` -> `uploading` -> `error`\n     *\n     * @readonly\n     * @observable\n     * @member {String} #status\n     */\n        this.set('status', 'idle');\n        /**\n     * Number of bytes uploaded.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #uploaded\n     */\n        this.set('uploaded', 0);\n        /**\n     * Number of total bytes to upload.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #uploadTotal\n     */\n        this.set('uploadTotal', null);\n        /**\n     * Upload progress in percents.\n     *\n     * @readonly\n     * @observable\n     * @member {Number} #uploadedPercent\n     */\n        this.bind('uploadedPercent').to(this, 'uploaded', this, 'uploadTotal', (uploaded, total) => {\n            return total ? uploaded / total * 100 : 0;\n        });\n        /**\n     * Response of the upload.\n     *\n     * @readonly\n     * @observable\n     * @member {Object|null} #uploadResponse\n     */\n        this.set('uploadResponse', null);\n    }\n    /**\n   * A `Promise` which resolves to a `File` instance associated with this file loader.\n   *\n   * @type {Promise.<File|null>}\n   */\n    get file() {\n        if (!this._filePromiseWrapper) {\n            // Loader was destroyed, return promise which resolves to null.\n            return Promise.resolve(null);\n        } else {\n            // The `this._filePromiseWrapper.promise` is chained and not simply returned to handle a case when:\n            //\n            //\t\t* The `loader.file.then( ... )` is called by external code (returned promise is pending).\n            //\t\t* Then `loader._destroy()` is called (call is synchronous) which destroys the `loader`.\n            //\t\t* Promise returned by the first `loader.file.then( ... )` call is resolved.\n            //\n            // Returning `this._filePromiseWrapper.promise` will still resolve to a `File` instance so there\n            // is an additional check needed in the chain to see if `loader` was destroyed in the meantime.\n            return this._filePromiseWrapper.promise.then(file => this._filePromiseWrapper ? file : null);\n        }\n    }\n    /**\n   * Returns the file data. To read its data, you need for first load the file\n   * by using the {@link module:upload/filerepository~FileLoader#read `read()`} method.\n   *\n   * @type {File|undefined}\n   */\n    get data() {\n        return this._reader.data;\n    }\n    /**\n   * Reads file using {@link module:upload/filereader~FileReader}.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-read-wrong-status` when status\n   * is different than `idle`.\n   *\n   * Example usage:\n   *\n   *\tfileLoader.read()\n   *\t\t.then( data => { ... } )\n   *\t\t.catch( err => {\n   *\t\t\tif ( err === 'aborted' ) {\n   *\t\t\t\tconsole.log( 'Reading aborted.' );\n   *\t\t\t} else {\n   *\t\t\t\tconsole.log( 'Reading error.', err );\n   *\t\t\t}\n   *\t\t} );\n   *\n   * @returns {Promise.<String>} Returns promise that will be resolved with read data. Promise will be rejected if error\n   * occurs or if read process is aborted.\n   */\n    read() {\n        if (this.status != 'idle') {\n            throw new CKEditorError('filerepository-read-wrong-status: You cannot call read if the status is different than idle.', this);\n        }\n        this.status = 'reading';\n        return this.file.then(file => this._reader.read(file)).then(data => {\n            // Edge case: reader was aborted after file was read - double check for proper status.\n            if (this.status !== 'reading') {\n                throw this.status;\n            }\n            this.status = 'idle';\n            return data;\n        }).catch(err => {\n            if (err === 'aborted') {\n                this.status = 'aborted';\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw this._reader.error ? this._reader.error : err;\n        });\n    }\n    /**\n   * Reads file using the provided {@link module:upload/filerepository~UploadAdapter}.\n   *\n   * Throws {@link module:utils/ckeditorerror~CKEditorError CKEditorError} `filerepository-upload-wrong-status` when status\n   * is different than `idle`.\n   * Example usage:\n   *\n   *\tfileLoader.upload()\n   *\t\t.then( data => { ... } )\n   *\t\t.catch( e => {\n   *\t\t\tif ( e === 'aborted' ) {\n   *\t\t\t\tconsole.log( 'Uploading aborted.' );\n   *\t\t\t} else {\n   *\t\t\t\tconsole.log( 'Uploading error.', e );\n   *\t\t\t}\n   *\t\t} );\n   *\n   * @returns {Promise.<Object>} Returns promise that will be resolved with response data. Promise will be rejected if error\n   * occurs or if read process is aborted.\n   */\n    upload() {\n        if (this.status != 'idle') {\n            throw new CKEditorError('filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.', this);\n        }\n        this.status = 'uploading';\n        return this.file.then(() => this._adapter.upload()).then(data => {\n            this.uploadResponse = data;\n            this.status = 'idle';\n            return data;\n        }).catch(err => {\n            if (this.status === 'aborted') {\n                throw 'aborted';\n            }\n            this.status = 'error';\n            throw err;\n        });\n    }\n    /**\n   * Aborts loading process.\n   */\n    abort() {\n        const status = this.status;\n        this.status = 'aborted';\n        if (!this._filePromiseWrapper.isFulfilled) {\n            // Edge case: file loader is aborted before read() is called\n            // so it might happen that no one handled the rejection of this promise.\n            // See https://github.com/ckeditor/ckeditor5-upload/pull/100\n            this._filePromiseWrapper.promise.catch(() => {\n            });\n            this._filePromiseWrapper.rejecter('aborted');\n        } else if (status == 'reading') {\n            this._reader.abort();\n        } else if (status == 'uploading' && this._adapter.abort) {\n            this._adapter.abort();\n        }\n        this._destroy();\n    }\n    /**\n   * Performs cleanup.\n   *\n   * @private\n   */\n    _destroy() {\n        this._filePromiseWrapper = undefined;\n        this._reader = undefined;\n        this._adapter = undefined;\n        this.uploadResponse = undefined;\n    }\n    /**\n   * Wraps a given file promise into another promise giving additional\n   * control (resolving, rejecting, checking if fulfilled) over it.\n   *\n   * @private\n   * @param filePromise The initial file promise to be wrapped.\n   * @returns {module:upload/filerepository~FilePromiseWrapper}\n   */\n    _createFilePromiseWrapper(filePromise) {\n        const wrapper = {};\n        wrapper.promise = new Promise((resolve, reject) => {\n            wrapper.rejecter = reject;\n            wrapper.isFulfilled = false;\n            filePromise.then(file => {\n                wrapper.isFulfilled = true;\n                resolve(file);\n            }).catch(err => {\n                wrapper.isFulfilled = true;\n                reject(err);\n            });\n        });\n        return wrapper;\n    }\n}\nmix(FileLoader, ObservableMixin);    /**\n * Upload adapter interface used by the {@link module:upload/filerepository~FileRepository file repository}\n * to handle file upload. An upload adapter is a bridge between the editor and server that handles file uploads.\n * It should contain a logic necessary to initiate an upload process and monitor its progress.\n *\n * Learn how to develop your own upload adapter for CKEditor 5 in the\n * {@glink framework/guides/deep-dive/upload-adapter \"Custom upload adapter\" guide}.\n *\n * @interface UploadAdapter\n */\n                                     /**\n * Executes the upload process.\n * This method should return a promise that will resolve when data will be uploaded to server. Promise should be\n * resolved with an object containing information about uploaded file:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png'\n *\t\t}\n *\n * Additionally, other image sizes can be provided:\n *\n *\t\t{\n *\t\t\tdefault: 'http://server/default-size.image.png',\n *\t\t\t'160': 'http://server/size-160.image.png',\n *\t\t\t'500': 'http://server/size-500.image.png',\n *\t\t\t'1000': 'http://server/size-1000.image.png',\n *\t\t\t'1052': 'http://server/default-size.image.png'\n *\t\t}\n *\n * NOTE: When returning multiple images, the widest returned one should equal the default one. It is essential to\n * correctly set `width` attribute of the image. See this discussion:\n * https://github.com/ckeditor/ckeditor5-easy-image/issues/4 for more information.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#upload\n * @returns {Promise.<Object>} Promise that should be resolved when data is uploaded.\n */\n                                     /**\n * Aborts the upload process.\n * After aborting it should reject promise returned from {@link #upload upload()}.\n *\n * Take a look at {@link module:upload/filerepository~UploadAdapter example Adapter implementation} and\n * {@link module:upload/filerepository~FileRepository#createUploadAdapter createUploadAdapter method}.\n *\n * @method module:upload/filerepository~UploadAdapter#abort\n */\n                                     /**\n * Object returned by {@link module:upload/filerepository~FileLoader#_createFilePromiseWrapper} method\n * to add more control over the initial file promise passed to {@link module:upload/filerepository~FileLoader}.\n *\n * @protected\n * @typedef {Object} module:upload/filerepository~FilePromiseWrapper\n * @property {Promise.<File>} promise Wrapper promise which can be chained for further processing.\n * @property {Function} rejecter Rejects the promise when called.\n * @property {Boolean} isFulfilled Whether original promise is already fulfilled.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/* globals window, document */\n\n/**\n * @module adapter-ckfinder/utils\n */\nconst TOKEN_COOKIE_NAME = 'ckCsrfToken';\nconst TOKEN_LENGTH = 40;\nconst tokenCharset = 'abcdefghijklmnopqrstuvwxyz0123456789';\n/**\n * Returns the CSRF token value. The value is a hash stored in `document.cookie`\n * under the `ckCsrfToken` key. The CSRF token can be used to secure the communication\n * between the web browser and the CKFinder server.\n *\n * @returns {String}\n */\n\nexport function getCsrfToken() {\n  let token = getCookie(TOKEN_COOKIE_NAME);\n\n  if (!token || token.length != TOKEN_LENGTH) {\n    token = generateToken(TOKEN_LENGTH);\n    setCookie(TOKEN_COOKIE_NAME, token);\n  }\n\n  return token;\n}\n/**\n * Returns the value of the cookie with a given name or `null` if the cookie is not found.\n *\n * @param {String} name\n * @returns {String|null}\n */\n\nexport function getCookie(name) {\n  name = name.toLowerCase();\n  const parts = document.cookie.split(';');\n\n  for (const part of parts) {\n    const pair = part.split('=');\n    const key = decodeURIComponent(pair[0].trim().toLowerCase());\n\n    if (key === name) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n\n  return null;\n}\n/**\n * Sets the value of the cookie with a given name.\n *\n * @param {String} name\n * @param {String} value\n */\n\nexport function setCookie(name, value) {\n  document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';path=/';\n} // Generates the CSRF token with the given length.\n//\n// @private\n// @param {Number} length\n// @returns {string}\n\nfunction generateToken(length) {\n  let result = '';\n  const randValues = new Uint8Array(length);\n  window.crypto.getRandomValues(randValues);\n\n  for (let j = 0; j < randValues.length; j++) {\n    const character = tokenCharset.charAt(randValues[j] % tokenCharset.length);\n    result += Math.random() > 0.5 ? character.toUpperCase() : character;\n  }\n\n  return result;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* globals XMLHttpRequest, FormData */\n/**\n * @module adapter-ckfinder/uploadadapter\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport { getCsrfToken } from './utils';\n/**\n * A plugin that enables file uploads in CKEditor 5 using the CKFinder server–side connector.\n *\n * See the {@glink features/image-upload/ckfinder \"CKFinder file manager integration\" guide} to learn how to configure\n * and use this feature as well as find out more about the full integration with the file manager\n * provided by the {@link module:ckfinder/ckfinder~CKFinder} plugin.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload overview\"} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUploadAdapter extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [FileRepository];\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'CKFinderUploadAdapter';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const url = this.editor.config.get('ckfinder.uploadUrl');\n        if (!url) {\n            return;\n        }\n        // Register CKFinderAdapter\n        this.editor.plugins.get(FileRepository).createUploadAdapter = loader => new UploadAdapter(loader, url, this.editor.t);\n    }\n}\n/**\n * Upload adapter for CKFinder.\n *\n * @private\n * @implements module:upload/filerepository~UploadAdapter\n */\nclass UploadAdapter {\n    /**\n   * Creates a new adapter instance.\n   *\n   * @param {module:upload/filerepository~FileLoader} loader\n   * @param {String} url\n   * @param {module:utils/locale~Locale#t} t\n   */\n    constructor(loader, url, t) {\n        /**\n     * FileLoader instance to use during the upload.\n     *\n     * @member {module:upload/filerepository~FileLoader} #loader\n     */\n        this.loader = loader;\n        /**\n     * Upload URL.\n     *\n     * @member {String} #url\n     */\n        this.url = url;\n        /**\n     * Locale translation method.\n     *\n     * @member {module:utils/locale~Locale#t} #t\n     */\n        this.t = t;\n    }\n    /**\n   * Starts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#upload\n   * @returns {Promise.<Object>}\n   */\n    upload() {\n        return this.loader.file.then(file => {\n            return new Promise((resolve, reject) => {\n                this._initRequest();\n                this._initListeners(resolve, reject, file);\n                this._sendRequest(file);\n            });\n        });\n    }\n    /**\n   * Aborts the upload process.\n   *\n   * @see module:upload/filerepository~UploadAdapter#abort\n   */\n    abort() {\n        if (this.xhr) {\n            this.xhr.abort();\n        }\n    }\n    /**\n   * Initializes the XMLHttpRequest object.\n   *\n   * @private\n   */\n    _initRequest() {\n        const xhr = this.xhr = new XMLHttpRequest();\n        xhr.open('POST', this.url, true);\n        xhr.responseType = 'json';\n    }\n    /**\n   * Initializes XMLHttpRequest listeners.\n   *\n   * @private\n   * @param {Function} resolve Callback function to be called when the request is successful.\n   * @param {Function} reject Callback function to be called when the request cannot be completed.\n   * @param {File} file File instance to be uploaded.\n   */\n    _initListeners(resolve, reject, file) {\n        const xhr = this.xhr;\n        const loader = this.loader;\n        const t = this.t;\n        const genericError = t('a') + ` ${ file.name }.`;\n        xhr.addEventListener('error', () => reject(genericError));\n        xhr.addEventListener('abort', () => reject());\n        xhr.addEventListener('load', () => {\n            const response = xhr.response;\n            if (!response || !response.uploaded) {\n                return reject(response && response.error && response.error.message ? response.error.message : genericError);\n            }\n            resolve({ default: response.url });\n        });\n        // Upload progress when it's supported.\n        /* istanbul ignore else */\n        if (xhr.upload) {\n            xhr.upload.addEventListener('progress', evt => {\n                if (evt.lengthComputable) {\n                    loader.uploadTotal = evt.total;\n                    loader.uploaded = evt.loaded;\n                }\n            });\n        }\n    }\n    /**\n   * Prepares the data and sends the request.\n   *\n   * @private\n   * @param {File} file File instance to be uploaded.\n   */\n    _sendRequest(file) {\n        // Prepare form data.\n        const data = new FormData();\n        data.append('upload', file);\n        data.append('ckCsrfToken', getCsrfToken());\n        // Send request.\n        this.xhr.send(data);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/blockautoformatediting\n */\nimport LiveRange from '@ckeditor/ckeditor5-engine/src/model/liverange';\n/**\n * The block autoformatting engine. It allows to format various block patterns. For example,\n * it can be configured to turn a paragraph starting with `*` and followed by a space into a list item.\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\n\nexport default class BlockAutoformatEditing {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BlockAutoformatEditing';\n  }\n  /**\n   * Creates a listener triggered on `change` event in the document.\n   * Calls the callback when inserted text matches the regular expression or the command name\n   * if provided instead of the callback.\n   *\n   * Examples of usage:\n   *\n   * To convert a paragraph to heading 1 when `- ` is typed, using just the command name:\n   *\n   *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, 'heading1' );\n   *\n   * To convert a paragraph to heading 1 when `- ` is typed, using just the callback:\n   *\n   *\t\tnew BlockAutoformatEditing( editor, /^\\- $/, ( context ) => {\n   *\t\t\tconst { match } = context;\n   *\t\t\tconst headingLevel = match[ 1 ].length;\n   *\n   *\t\t\teditor.execute( 'heading', {\n   *\t\t\t\tformatId: `heading${ headingLevel }`\n   *\t\t\t} );\n   * \t\t} );\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {RegExp} pattern The regular expression to execute on just inserted text.\n   * @param {Function|String} callbackOrCommand The callback to execute or the command to run when the text is matched.\n   * In case of providing the callback, it receives the following parameter:\n   * * {Object} match RegExp.exec() result of matching the pattern to inserted text.\n   */\n\n\n  constructor(editor, pattern, callbackOrCommand) {\n    let callback;\n    let command = null;\n\n    if (typeof callbackOrCommand == 'function') {\n      callback = callbackOrCommand;\n    } else {\n      // We assume that the actual command name was provided.\n      command = editor.commands.get(callbackOrCommand);\n\n      callback = () => {\n        editor.execute(callbackOrCommand);\n      };\n    }\n\n    editor.model.document.on('change', (evt, batch) => {\n      if (command && !command.isEnabled) {\n        return;\n      }\n\n      if (batch.type == 'transparent') {\n        return;\n      }\n\n      const changes = Array.from(editor.model.document.differ.getChanges());\n      const entry = changes[0]; // Typing is represented by only a single change.\n\n      if (changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1) {\n        return;\n      }\n\n      const item = entry.position.textNode || entry.position.nodeAfter;\n\n      if (!item.parent.is('paragraph')) {\n        return;\n      }\n\n      const match = pattern.exec(item.data);\n\n      if (!match) {\n        return;\n      } // Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\n\n      editor.model.enqueueChange(writer => {\n        // Matched range.\n        const start = writer.createPositionAt(item.parent, 0);\n        const end = writer.createPositionAt(item.parent, match[0].length);\n        const range = new LiveRange(start, end);\n        const wasChanged = callback({\n          match\n        }); // Remove matched text.\n\n        if (wasChanged !== false) {\n          writer.remove(range);\n        }\n\n        range.detach();\n      });\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/inlineautoformatediting\n */\nimport getLastTextLine from '@ckeditor/ckeditor5-typing/src/utils/getlasttextline';\n/**\n * The inline autoformatting engine. It allows to format various inline patterns. For example,\n * it can be configured to make \"foo\" bold when typed `**foo**` (the `**` markers will be removed).\n *\n * The autoformatting operation is integrated with the undo manager,\n * so the autoformatting step can be undone if the user's intention was not to format the text.\n *\n * See the constructors documentation to learn how to create custom inline autoformatters. You can also use\n * the {@link module:autoformat/autoformat~Autoformat} feature which enables a set of default autoformatters\n * (lists, headings, bold and italic).\n */\n\nexport default class InlineAutoformatEditing {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'InlineAutoformatEditing';\n  }\n  /**\n   * Enables autoformatting mechanism for a given {@link module:core/editor/editor~Editor}.\n   *\n   * It formats the matched text by applying the given model attribute or by running the provided formatting callback.\n   * On every change applied to the model the autoformatting engine checks the text on the left of the selection\n   * and executes the provided action if the text matches given criteria (regular expression or callback).\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {Function|RegExp} testRegexpOrCallback The regular expression or callback to execute on text.\n   * Provided regular expression *must* have three capture groups. The first and the third capture group\n   * should match opening and closing delimiters. The second capture group should match the text to format.\n   *\n   *\t\t// Matches the `**bold text**` pattern.\n   *\t\t// There are three capturing groups:\n   *\t\t// - The first to match the starting `**` delimiter.\n   *\t\t// - The second to match the text to format.\n   *\t\t// - The third to match the ending `**` delimiter.\n   *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n   *\n   * When a function is provided instead of the regular expression, it will be executed with the text to match as a parameter.\n   * The function should return proper \"ranges\" to delete and format.\n   *\n   *\t\t{\n   *\t\t\tremove: [\n   *\t\t\t\t[ 0, 1 ],\t// Remove the first letter from the given text.\n   *\t\t\t\t[ 5, 6 ]\t// Remove the 6th letter from the given text.\n   *\t\t\t],\n   *\t\t\tformat: [\n   *\t\t\t\t[ 1, 5 ]\t// Format all letters from 2nd to 5th.\n   *\t\t\t]\n   *\t\t}\n   *\n   * @param {Function|String} attributeOrCallback The name of attribute to apply on matching text or a callback for manual\n   * formatting. If callback is passed it should return `false` if changes should not be applied (e.g. if a command is disabled).\n   *\n   *\t\t// Use attribute name:\n   *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, 'bold' );\n   *\n   *\t\t// Use formatting callback:\n   *\t\tnew InlineAutoformatEditing( editor, /(\\*\\*)([^\\*]+?)(\\*\\*)$/g, ( writer, rangesToFormat ) => {\n   *\t\t\tconst command = editor.commands.get( 'bold' );\n   *\n   *\t\t\tif ( !command.isEnabled ) {\n   *\t\t\t\treturn false;\n   *\t\t\t}\n   *\n   *\t\t\tconst validRanges = editor.model.schema.getValidRanges( rangesToFormat, 'bold' );\n   *\n   *\t\t\tfor ( let range of validRanges ) {\n   *\t\t\t\twriter.setAttribute( 'bold', true, range );\n   *\t\t\t}\n   *\t\t} );\n   */\n\n\n  constructor(editor, testRegexpOrCallback, attributeOrCallback) {\n    let regExp;\n    let attributeKey;\n    let testCallback;\n    let formatCallback;\n\n    if (testRegexpOrCallback instanceof RegExp) {\n      regExp = testRegexpOrCallback;\n    } else {\n      testCallback = testRegexpOrCallback;\n    }\n\n    if (typeof attributeOrCallback == 'string') {\n      attributeKey = attributeOrCallback;\n    } else {\n      formatCallback = attributeOrCallback;\n    } // A test callback run on changed text.\n\n\n    testCallback = testCallback || (text => {\n      let result;\n      const remove = [];\n      const format = [];\n\n      while ((result = regExp.exec(text)) !== null) {\n        // There should be full match and 3 capture groups.\n        if (result && result.length < 4) {\n          break;\n        }\n\n        let {\n          index,\n          '1': leftDel,\n          '2': content,\n          '3': rightDel\n        } = result; // Real matched string - there might be some non-capturing groups so we need to recalculate starting index.\n\n        const found = leftDel + content + rightDel;\n        index += result[0].length - found.length; // Start and End offsets of delimiters to remove.\n\n        const delStart = [index, index + leftDel.length];\n        const delEnd = [index + leftDel.length + content.length, index + leftDel.length + content.length + rightDel.length];\n        remove.push(delStart);\n        remove.push(delEnd);\n        format.push([index + leftDel.length, index + leftDel.length + content.length]);\n      }\n\n      return {\n        remove,\n        format\n      };\n    }); // A format callback run on matched text.\n\n\n    formatCallback = formatCallback || ((writer, rangesToFormat) => {\n      const validRanges = editor.model.schema.getValidRanges(rangesToFormat, attributeKey);\n\n      for (const range of validRanges) {\n        writer.setAttribute(attributeKey, true, range);\n      } // After applying attribute to the text, remove given attribute from the selection.\n      // This way user is able to type a text without attribute used by auto formatter.\n\n\n      writer.removeSelectionAttribute(attributeKey);\n    });\n\n    editor.model.document.on('change', (evt, batch) => {\n      if (batch.type == 'transparent') {\n        return;\n      }\n\n      const model = editor.model;\n      const selection = model.document.selection; // Do nothing if selection is not collapsed.\n\n      if (!selection.isCollapsed) {\n        return;\n      }\n\n      const changes = Array.from(model.document.differ.getChanges());\n      const entry = changes[0]; // Typing is represented by only a single change.\n\n      if (changes.length != 1 || entry.type !== 'insert' || entry.name != '$text' || entry.length != 1) {\n        return;\n      }\n\n      const focus = selection.focus;\n      const block = focus.parent;\n      const {\n        text,\n        range\n      } = getLastTextLine(model.createRange(model.createPositionAt(block, 0), focus), model);\n      const testOutput = testCallback(text);\n      const rangesToFormat = testOutputToRanges(range.start, testOutput.format, model);\n      const rangesToRemove = testOutputToRanges(range.start, testOutput.remove, model);\n\n      if (!(rangesToFormat.length && rangesToRemove.length)) {\n        return;\n      } // Use enqueueChange to create new batch to separate typing batch from the auto-format changes.\n\n\n      model.enqueueChange(writer => {\n        // Apply format.\n        const hasChanged = formatCallback(writer, rangesToFormat); // Strict check on `false` to have backward compatibility (when callbacks were returning `undefined`).\n\n        if (hasChanged === false) {\n          return;\n        } // Remove delimiters - use reversed order to not mix the offsets while removing.\n\n\n        for (const range of rangesToRemove.reverse()) {\n          writer.remove(range);\n        }\n      });\n    });\n  }\n\n} // Converts output of the test function provided to the InlineAutoformatEditing and converts it to the model ranges\n// inside provided block.\n//\n// @private\n// @param {module:engine/model/position~Position} start\n// @param {Array.<Array>} arrays\n// @param {module:engine/model/model~Model} model\n\nfunction testOutputToRanges(start, arrays, model) {\n  return arrays.filter(array => array[0] !== undefined && array[1] !== undefined).map(array => {\n    return model.createRange(start.getShiftedBy(array[0]), start.getShiftedBy(array[1]));\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module typing/utils/getlasttextline\n */\n\n/**\n * Returns the last text line from the given range.\n *\n * \"The last text line\" is understood as text (from one or more text nodes) which is limited either by a parent block\n * or by inline elements (e.g. `<softBreak>`).\n *\n *\t\tconst rangeToCheck = model.createRange(\n *\t\t\tmodel.createPositionAt( paragraph, 0 ),\n *\t\t\tmodel.createPositionAt( paragraph, 'end' )\n *\t\t);\n *\n *\t\tconst { text, range } = getLastTextLine( rangeToCheck, model );\n *\n * For model below, the returned `text` will be \"Foo bar baz\" and `range` will be set on whole `<paragraph>` content:\n *\n *\t\t<paragraph>Foo bar baz<paragraph>\n *\n * However, in below case, `text` will be set to \"baz\" and `range` will be set only on \"baz\".\n *\n *\t\t<paragraph>Foo<softBreak></softBreak>bar<softBreak></softBreak>baz<paragraph>\n *\n * @protected\n * @param {module:engine/model/range~Range} range\n * @param {module:engine/model/model~Model} model\n * @returns {module:typing/utils/getlasttextline~LastTextLineData}\n */\nexport default function getLastTextLine(range, model) {\n  let start = range.start;\n  const text = Array.from(range.getItems()).reduce((rangeText, node) => {\n    // Trim text to a last occurrence of an inline element and update range start.\n    if (!(node.is('text') || node.is('textProxy'))) {\n      start = model.createPositionAfter(node);\n      return '';\n    }\n\n    return rangeText + node.data;\n  }, '');\n  return {\n    text,\n    range: model.createRange(start, range.end)\n  };\n}\n/**\n * The value returned by {@link module:typing/utils/getlasttextline~getLastTextLine}.\n *\n * @typedef {Object} module:typing/utils/getlasttextline~LastTextLineData\n *\n * @property {String} text The text from the text nodes in the last text line.\n * @property {module:engine/model/range~Range} range The range set on the text nodes in the last text line.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module autoformat/autoformat\n */\nimport BlockAutoformatEditing from './blockautoformatediting';\nimport InlineAutoformatEditing from './inlineautoformatediting';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * Enables a set of predefined autoformatting actions.\n *\n * For a detailed overview, check the {@glink features/autoformat Autoformatting feature documentation}\n * and the {@glink api/autoformat package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Autoformat extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Autoformat';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    this._addListAutoformats();\n\n    this._addBasicStylesAutoformats();\n\n    this._addHeadingAutoformats();\n\n    this._addBlockQuoteAutoformats();\n  }\n  /**\n   * Adds autoformatting related to the {@link module:list/list~List}.\n   *\n   * When typed:\n   * - `* ` or `- ` &ndash; A paragraph will be changed to a bulleted list.\n   * - `1. ` or `1) ` &ndash; A paragraph will be changed to a numbered list (\"1\" can be any digit or a list of digits).\n   *\n   * @private\n   */\n\n\n  _addListAutoformats() {\n    const commands = this.editor.commands;\n\n    if (commands.get('bulletedList')) {\n      // eslint-disable-next-line no-new\n      new BlockAutoformatEditing(this.editor, /^[*-]\\s$/, 'bulletedList');\n    }\n\n    if (commands.get('numberedList')) {\n      // eslint-disable-next-line no-new\n      new BlockAutoformatEditing(this.editor, /^1[.|)]\\s$/, 'numberedList');\n    }\n  }\n  /**\n   * Adds autoformatting related to the {@link module:basic-styles/bold~Bold},\n   * {@link module:basic-styles/italic~Italic} and {@link module:basic-styles/code~Code}.\n   *\n   * When typed:\n   * - `**foobar**` &ndash; `**` characters are removed and `foobar` is set to bold,\n   * - `__foobar__` &ndash; `__` characters are removed and `foobar` is set to bold,\n   * - `*foobar*` &ndash; `*` characters are removed and `foobar` is set to italic,\n   * - `_foobar_` &ndash; `_` characters are removed and `foobar` is set to italic,\n   * - ``` `foobar` &ndash; ``` ` ``` characters are removed and `foobar` is set to code.\n   *\n   * @private\n   */\n\n\n  _addBasicStylesAutoformats() {\n    const commands = this.editor.commands;\n\n    if (commands.get('bold')) {\n      /* eslint-disable no-new */\n      const boldCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'bold');\n      new InlineAutoformatEditing(this.editor, /(\\*\\*)([^*]+)(\\*\\*)$/g, boldCallback);\n      new InlineAutoformatEditing(this.editor, /(__)([^_]+)(__)$/g, boldCallback);\n      /* eslint-enable no-new */\n    }\n\n    if (commands.get('italic')) {\n      /* eslint-disable no-new */\n      const italicCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'italic'); // The italic autoformatter cannot be triggered by the bold markers, so we need to check the\n      // text before the pattern (e.g. `(?:^|[^\\*])`).\n\n      new InlineAutoformatEditing(this.editor, /(?:^|[^*])(\\*)([^*_]+)(\\*)$/g, italicCallback);\n      new InlineAutoformatEditing(this.editor, /(?:^|[^_])(_)([^_]+)(_)$/g, italicCallback);\n      /* eslint-enable no-new */\n    }\n\n    if (commands.get('code')) {\n      /* eslint-disable no-new */\n      const codeCallback = getCallbackFunctionForInlineAutoformat(this.editor, 'code');\n      new InlineAutoformatEditing(this.editor, /(`)([^`]+)(`)$/g, codeCallback);\n      /* eslint-enable no-new */\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:heading/heading~Heading}.\n   *\n   * It is using a number at the end of the command name to associate it with the proper trigger:\n   *\n   * * `heading` with value `heading1` will be executed when typing `#`,\n   * * `heading` with value `heading2` will be executed when typing `##`,\n   * * ... up to `heading6` and `######`.\n   *\n   * @private\n   */\n\n\n  _addHeadingAutoformats() {\n    const command = this.editor.commands.get('heading');\n\n    if (command) {\n      command.modelElements.filter(name => name.match(/^heading[1-6]$/)).forEach(commandValue => {\n        const level = commandValue[7];\n        const pattern = new RegExp(`^(#{${level}})\\\\s$`); // eslint-disable-next-line no-new\n\n        new BlockAutoformatEditing(this.editor, pattern, () => {\n          if (!command.isEnabled) {\n            return false;\n          }\n\n          this.editor.execute('heading', {\n            value: commandValue\n          });\n        });\n      });\n    }\n  }\n  /**\n   * Adds autoformatting related to {@link module:block-quote/blockquote~BlockQuote}.\n   *\n   * When typed:\n   * * `> ` &ndash; A paragraph will be changed to a block quote.\n   *\n   * @private\n   */\n\n\n  _addBlockQuoteAutoformats() {\n    if (this.editor.commands.get('blockQuote')) {\n      // eslint-disable-next-line no-new\n      new BlockAutoformatEditing(this.editor, /^>\\s$/, 'blockQuote');\n    }\n  }\n\n} // Helper function for getting `InlineAutoformatEditing` callbacks that checks if command is enabled.\n//\n// @param {module:core/editor/editor~Editor} editor\n// @param {String} attributeKey\n// @returns {Function}\n\nfunction getCallbackFunctionForInlineAutoformat(editor, attributeKey) {\n  return (writer, rangesToFormat) => {\n    const command = editor.commands.get(attributeKey);\n\n    if (!command.isEnabled) {\n      return false;\n    }\n\n    const validRanges = editor.model.schema.getValidRanges(rangesToFormat, attributeKey);\n\n    for (const range of validRanges) {\n      writer.setAttribute(attributeKey, true, range);\n    } // After applying attribute to the text, remove given attribute from the selection.\n    // This way user is able to type a text without attribute used by auto formatter.\n\n\n    writer.removeSelectionAttribute(attributeKey);\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/first\n */\n\n/**\n * Returns first item of the given `iterable`.\n *\n * @param {Iterable.<*>} iterable\n * @returns {*}\n */\nexport default function first(iterable) {\n  const iteratorItem = iterable.next();\n\n  if (iteratorItem.done) {\n    return null;\n  }\n\n  return iteratorItem.value;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/utils\n */\n\n/**\n * The list of supported alignment options:\n *\n * * `'left'`,\n * * `'right'`,\n * * `'center'`,\n * * `'justify'`\n */\nexport const supportedOptions = ['left', 'right', 'center', 'justify'];\n/**\n * Checks whether the passed option is supported by {@link module:alignment/alignmentediting~AlignmentEditing}.\n *\n * @param {String} option The option value to check.\n * @returns {Boolean}\n */\n\nexport function isSupported(option) {\n  return supportedOptions.includes(option);\n}\n/**\n * Checks whether alignment is the default one considering the direction\n * of the editor content.\n *\n * @param {String} alignment The name of the alignment to check.\n * @param {module:utils/locale~Locale} locale The {@link module:core/editor/editor~Editor#locale} instance.\n * @returns {Boolean}\n */\n\nexport function isDefault(alignment, locale) {\n  // Right now only LTR is supported so the 'left' value is always the default one.\n  if (locale.contentLanguageDirection == 'rtl') {\n    return alignment === 'right';\n  } else {\n    return alignment === 'left';\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\nimport { isDefault } from './utils';\nconst ALIGNMENT = 'alignment';\n/**\n * The alignment command plugin.\n *\n * @extends module:core/command~Command\n */\n\nexport default class AlignmentCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const firstBlock = first(this.editor.model.document.selection.getSelectedBlocks()); // As first check whether to enable or disable the command as the value will always be false if the command cannot be enabled.\n\n    this.isEnabled = !!firstBlock && this._canBeAligned(firstBlock);\n    /**\n     * A value of the current block's alignment.\n     *\n     * @observable\n     * @readonly\n     * @member {String} #value\n     */\n\n    if (this.isEnabled && firstBlock.hasAttribute('alignment')) {\n      this.value = firstBlock.getAttribute('alignment');\n    } else {\n      this.value = locale.contentLanguageDirection === 'rtl' ? 'right' : 'left';\n    }\n  }\n  /**\n   * Executes the command. Applies the alignment `value` to the selected blocks.\n   * If no `value` is passed, the `value` is the default one or it is equal to the currently selected block's alignment attribute,\n   * the command will remove the attribute from the selected blocks.\n   *\n   * @param {Object} [options] Options for the executed command.\n   * @param {String} [options.value] The value to apply.\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const model = editor.model;\n    const doc = model.document;\n    const value = options.value;\n    model.change(writer => {\n      // Get only those blocks from selected that can have alignment set\n      const blocks = Array.from(doc.selection.getSelectedBlocks()).filter(block => this._canBeAligned(block));\n      const currentAlignment = blocks[0].getAttribute('alignment'); // Remove alignment attribute if current alignment is:\n      // - default (should not be stored in model as it will bloat model data)\n      // - equal to currently set\n      // - or no value is passed - denotes default alignment.\n\n      const removeAlignment = isDefault(value, locale) || currentAlignment === value || !value;\n\n      if (removeAlignment) {\n        removeAlignmentFromSelection(blocks, writer);\n      } else {\n        setAlignmentOnSelection(blocks, writer, value);\n      }\n    });\n  }\n  /**\n   * Checks whether a block can have alignment set.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} block The block to be checked.\n   * @returns {Boolean}\n   */\n\n\n  _canBeAligned(block) {\n    return this.editor.model.schema.checkAttribute(block, ALIGNMENT);\n  }\n\n} // Removes the alignment attribute from blocks.\n// @private\n\nfunction removeAlignmentFromSelection(blocks, writer) {\n  for (const block of blocks) {\n    writer.removeAttribute(ALIGNMENT, block);\n  }\n} // Sets the alignment attribute on blocks.\n// @private\n\n\nfunction setAlignmentOnSelection(blocks, writer, alignment) {\n  for (const block of blocks) {\n    writer.setAttribute(ALIGNMENT, alignment, block);\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignmentediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AlignmentCommand from './alignmentcommand';\nimport { isDefault, isSupported, supportedOptions } from './utils';\n/**\n * The alignment editing feature. It introduces the {@link module:alignment/alignmentcommand~AlignmentCommand command} and adds\n * the `alignment` attribute for block elements in the {@link module:engine/model/model~Model model}.\n * @extends module:core/plugin~Plugin\n */\n\nexport default class AlignmentEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'AlignmentEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('alignment', {\n      options: [...supportedOptions]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const locale = editor.locale;\n    const schema = editor.model.schema; // Filter out unsupported options.\n\n    const enabledOptions = editor.config.get('alignment.options').filter(isSupported); // Allow alignment attribute on all blocks.\n\n    schema.extend('$block', {\n      allowAttributes: 'alignment'\n    });\n    editor.model.schema.setAttributeProperties('alignment', {\n      isFormatting: true\n    });\n\n    const definition = _buildDefinition(enabledOptions.filter(option => !isDefault(option, locale)));\n\n    editor.conversion.attributeToAttribute(definition);\n    editor.commands.add('alignment', new AlignmentCommand(editor));\n  }\n\n} // Utility function responsible for building converter definition.\n// @private\n\nfunction _buildDefinition(options) {\n  const definition = {\n    model: {\n      key: 'alignment',\n      values: options.slice()\n    },\n    view: {}\n  };\n\n  for (const option of options) {\n    definition.view[option] = {\n      key: 'style',\n      value: {\n        'text-align': option\n      }\n    };\n  }\n\n  return definition;\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module alignment/alignmentui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport {\n    createDropdown,\n    addToolbarToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { isSupported } from './utils';\nimport alignLeftIcon from '../theme/icons/align-left.svg';\nimport alignRightIcon from '../theme/icons/align-right.svg';\nimport alignCenterIcon from '../theme/icons/align-center.svg';\nimport alignJustifyIcon from '../theme/icons/align-justify.svg';\nconst icons = new Map([\n    [\n        'left',\n        alignLeftIcon\n    ],\n    [\n        'right',\n        alignRightIcon\n    ],\n    [\n        'center',\n        alignCenterIcon\n    ],\n    [\n        'justify',\n        alignJustifyIcon\n    ]\n]);\n/**\n * The default alignment UI plugin.\n *\n * It introduces the `'alignment:left'`, `'alignment:right'`, `'alignment:center'` and `'alignment:justify'` buttons\n * and the `'alignment'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class AlignmentUI extends Plugin {\n    /**\n   * Returns the localized option titles provided by the plugin.\n   *\n   * The following localized titles corresponding with\n   * {@link module:alignment/alignment~AlignmentConfig#options} are available:\n   *\n   * * `'left'`,\n   * * `'right'`,\n   * * `'center'`,\n   * * `'justify'`.\n   *\n   * @readonly\n   * @type {Object.<String,String>}\n   */\n    get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'left': t('d'),\n            'right': t('e'),\n            'center': t('f'),\n            'justify': t('g')\n        };\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'AlignmentUI';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const componentFactory = editor.ui.componentFactory;\n        const t = editor.t;\n        const options = editor.config.get('alignment.options');\n        options.filter(isSupported).forEach(option => this._addButton(option));\n        componentFactory.add('alignment', locale => {\n            const dropdownView = createDropdown(locale);\n            // Add existing alignment buttons to dropdown's toolbar.\n            const buttons = options.map(option => componentFactory.create(`alignment:${ option }`));\n            addToolbarToDropdown(dropdownView, buttons);\n            // Configure dropdown properties an behavior.\n            dropdownView.buttonView.set({\n                label: t('h'),\n                tooltip: true\n            });\n            dropdownView.toolbarView.isVertical = true;\n            dropdownView.toolbarView.ariaLabel = t('i');\n            dropdownView.extendTemplate({ attributes: { class: 'ck-alignment-dropdown' } });\n            // The default icon depends on the direction of the content.\n            const defaultIcon = locale.contentLanguageDirection === 'rtl' ? alignRightIcon : alignLeftIcon;\n            // Change icon to reflect current selection's alignment.\n            dropdownView.buttonView.bind('icon').toMany(buttons, 'isOn', (...areActive) => {\n                // Get the index of an active button.\n                const index = areActive.findIndex(value => value);\n                // If none of the commands is active, display either defaultIcon or the first button's icon.\n                if (index < 0) {\n                    return defaultIcon;\n                }\n                // Return active button's icon.\n                return buttons[index].icon;\n            });\n            // Enable button if any of the buttons is enabled.\n            dropdownView.bind('isEnabled').toMany(buttons, 'isEnabled', (...areEnabled) => areEnabled.some(isEnabled => isEnabled));\n            return dropdownView;\n        });\n    }\n    /**\n   * Helper method for initializing the button and linking it with an appropriate command.\n   *\n   * @private\n   * @param {String} option The name of the alignment option for which the button is added.\n   */\n    _addButton(option) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(`alignment:${ option }`, locale => {\n            const command = editor.commands.get('alignment');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: this.localizedOptionTitles[option],\n                icon: icons.get(option),\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isEnabled').to(command);\n            buttonView.bind('isOn').to(command, 'value', value => value === option);\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => {\n                editor.execute('alignment', { value: option });\n                editor.editing.view.focus();\n            });\n            return buttonView;\n        });\n    }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * The base font command.\n *\n * @extends module:core/command~Command\n */\n\nexport default class FontCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor instance.\n   * @param {String} attributeKey The name of a model attribute on which this command operates.\n   */\n  constructor(editor, attributeKey) {\n    super(editor);\n    /**\n     * When set, it reflects the {@link #attributeKey} value of the selection.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} module:font/fontcommand~FontCommand#value\n     */\n\n    /**\n     * A model attribute on which this command operates.\n     *\n     * @readonly\n     * @member {Boolean} module:font/fontcommand~FontCommand#attributeKey\n     */\n\n    this.attributeKey = attributeKey;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.value = doc.selection.getAttribute(this.attributeKey);\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n  }\n  /**\n   * Executes the command. Applies the `value` of the {@link #attributeKey} to the selection.\n   * If no `value` is passed, it removes the attribute from the selection.\n   *\n   * @protected\n   * @param {Object} [options] Options for the executed command.\n   * @param {String} [options.value] The value to apply.\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const document = model.document;\n    const selection = document.selection;\n    const value = options.value;\n    model.change(writer => {\n      if (selection.isCollapsed) {\n        if (value) {\n          writer.setSelectionAttribute(this.attributeKey, value);\n        } else {\n          writer.removeSelectionAttribute(this.attributeKey);\n        }\n      } else {\n        const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n\n        for (const range of ranges) {\n          if (value) {\n            writer.setAttribute(this.attributeKey, value, range);\n          } else {\n            writer.removeAttribute(this.attributeKey, range);\n          }\n        }\n      }\n    });\n  }\n\n}","export default \"<svg width=\\\"20\\\" height=\\\"20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path class=\\\"ck-icon__fill\\\" d=\\\"M6.193 17.02l-.102-.121-2.553-3.536a2 2 0 0 1 .956-3.3c.699-.182 1.442.026 2.005.614L7.642 12.1l6.515-8.164.074-.083c.757-.756 1.652-.65 2.38-.081.77.6.869 1.79.159 2.573L9.203 16.896l-.105.124c-.385.386-.91.597-1.453.586-.543.01-1.067-.2-1.452-.586z\\\" fill-opacity=\\\".8\\\"/><path d=\\\"M7.645 16.606a.997.997 0 0 0 .745-.292l7.606-10.606c.391-.39.28-.93 0-1.148-.28-.219-.667-.39-1.058 0L7.645 13.7 5.72 11.304a1 1 0 1 0-1.414 1.414l2.596 3.596a.997.997 0 0 0 .744.292z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/colorgrid/colortile\n */\nimport ButtonView from '../button/buttonview';\nimport checkIcon from '../../theme/icons/color-tile-check.svg';\n/**\n * This class represents a single color tile in the {@link module:ui/colorgrid/colorgrid~ColorGridView}.\n *\n * @extends module:ui/button/buttonview~ButtonView\n */\n\nexport default class ColorTileView extends ButtonView {\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * String representing a color shown as tile's background.\n     *\n     * @type {String}\n     */\n\n    this.set('color');\n    /**\n     * A flag that toggles a special CSS class responsible for displaying\n     * a border around the button.\n     *\n     * @type {Boolean}\n     */\n\n    this.set('hasBorder');\n    this.icon = checkIcon;\n    this.extendTemplate({\n      attributes: {\n        style: {\n          backgroundColor: bind.to('color')\n        },\n        class: ['ck', 'ck-color-grid__tile', bind.if('hasBorder', 'ck-color-table__color-tile_bordered')]\n      }\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.iconView.fillColor = 'hsl(0, 0%, 100%)';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/colorgrid/colorgrid\n */\nimport View from '../view';\nimport ColorTileView from './colortileview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '../focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport '../../theme/components/colorgrid/colorgrid.css';\n/**\n * A grid of {@link module:ui/colorgrid/colortile~ColorTileView color tiles}.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ColorGridView extends View {\n  /**\n   * Creates an instance of a color grid containing {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} options Component configuration\n   * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} [options.colorDefinitions] Array with definitions\n   * required to create the {@link module:ui/colorgrid/colortile~ColorTileView tiles}.\n   * @param {Number} options.columns A number of columns to display the tiles.\n   */\n  constructor(locale, options) {\n    super(locale);\n    const colorDefinitions = options && options.colorDefinitions || [];\n    const viewStyleAttribute = {};\n\n    if (options && options.columns) {\n      viewStyleAttribute.gridTemplateColumns = `repeat( ${options.columns}, 1fr)`;\n    }\n    /**\n     * The color of the currently selected color tile in {@link #items}.\n     *\n     * @observable\n     * @type {String}\n     */\n\n\n    this.set('selectedColor');\n    /**\n     * Collection of the child tile views.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * Tracks information about DOM focus in the grid.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Helps cycling over focusable {@link #items} in the grid.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.items,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate grid items backwards using the arrowup key.\n        focusPrevious: 'arrowleft',\n        // Navigate grid items forwards using the arrowdown key.\n        focusNext: 'arrowright'\n      }\n    });\n    this.items.on('add', (evt, colorTile) => {\n      colorTile.isOn = colorTile.color === this.selectedColor;\n    });\n    colorDefinitions.forEach(item => {\n      const colorTile = new ColorTileView();\n      colorTile.set({\n        color: item.color,\n        label: item.label,\n        tooltip: true,\n        hasBorder: item.options.hasBorder\n      });\n      colorTile.on('execute', () => {\n        this.fire('execute', {\n          value: item.color,\n          hasBorder: item.options.hasBorder,\n          label: item.label\n        });\n      });\n      this.items.add(colorTile);\n    });\n    this.setTemplate({\n      tag: 'div',\n      children: this.items,\n      attributes: {\n        class: ['ck', 'ck-color-grid'],\n        style: viewStyleAttribute\n      }\n    });\n    this.on('change:selectedColor', (evt, name, selectedColor) => {\n      for (const item of this.items) {\n        item.isOn = item.color === selectedColor;\n      }\n    });\n  }\n  /**\n   * Focuses the first focusable in {@link #items}.\n   */\n\n\n  focus() {\n    if (this.items.length) {\n      this.items.first.focus();\n    }\n  }\n  /**\n   * Focuses the last focusable in {@link #items}.\n   */\n\n\n  focusLast() {\n    if (this.items.length) {\n      this.items.last.focus();\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Items added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    }\n\n    this.items.on('add', (evt, item) => {\n      this.focusTracker.add(item.element);\n    });\n    this.items.on('remove', (evt, item) => {\n      this.focusTracker.remove(item.element);\n    }); // Start listening for the keystrokes coming from #element.\n\n    this.keystrokes.listenTo(this.element);\n  }\n\n}\n/**\n * A color definition used to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n *\n *\t\t{\n *\t\t\tcolor: hsl(0, 0%, 75%),\n *\t\t\tlabel: 'Light Grey',\n *\t\t\toptions: {\n *\t\t\t\thasBorder: true\n *\t\t\t}\n *\t\t}\n *\n * @typedef {Object} module:ui/colorgrid/colorgrid~ColorDefinition\n * @type Object\n *\n * @property {String} color String representing a color.\n * It is used as value of background-color style in {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {String} label String used as label for {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Object} options Additional options passed to create a {@link module:ui/colorgrid/colortile~ColorTileView}.\n * @property {Boolean} options.hasBorder A flag that indicates if special a CSS class should be added\n * to {@link module:ui/colorgrid/colortile~ColorTileView}, which renders a border around it.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/label/labelview\n */\nimport View from '../view';\nimport '../../theme/components/label/label.css';\n/**\n * The label view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class LabelView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * The text of the label.\n     *\n     * @observable\n     * @member {String} #text\n     */\n\n    this.set('text');\n    /**\n     * The `for` attribute of the label (i.e. to pair with an `<input>` element).\n     *\n     * @observable\n     * @member {String} #for\n     */\n\n    this.set('for');\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'label',\n      attributes: {\n        class: ['ck', 'ck-label'],\n        for: bind.to('for')\n      },\n      children: [{\n        text: bind.to('text')\n      }]\n    });\n  }\n\n}","import Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * @module font/documentcolorcollection\n */\n\n/**\n * A collection to store document colors. It enforces colors to be unique.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n * @extends module:utils/collection~Collection\n */\n\nexport default class DocumentColorCollection extends Collection {\n  constructor(options) {\n    super(options);\n    /**\n     * Indicates whether the document color collection is empty.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #isEmpty\n     */\n\n    this.set('isEmpty', true);\n  }\n  /**\n   * Adds a color to the document color collection.\n   *\n   * This method ensures that no color duplicates are inserted (compared using\n   * the color value of the {@link module:ui/colorgrid/colorgrid~ColorDefinition}).\n   *\n   * If the item does not have an ID, it will be automatically generated and set on the item.\n   *\n   * @chainable\n   * @param {module:ui/colorgrid/colorgrid~ColorDefinition} item\n   * @param {Number} [index] The position of the item in the collection. The item\n   * is pushed to the collection when `index` is not specified.\n   * @fires add\n   */\n\n\n  add(item, index) {\n    if (this.find(element => element.color === item.color)) {\n      // No duplicates are allowed.\n      return;\n    }\n\n    super.add(item, index);\n    this.set('isEmpty', false);\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  remove(subject) {\n    const ret = super.remove(subject);\n\n    if (this.length === 0) {\n      this.set('isEmpty', true);\n    }\n\n    return ret;\n  }\n  /**\n   * Checks if an object with given colors is present in the document color collection.\n   *\n   * @param {String} color\n   * @returns {Boolean}\n   */\n\n\n  hasColor(color) {\n    return !!this.find(item => item.color === color);\n  }\n\n}\nmix(DocumentColorCollection, ObservableMixin);","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.636 9.531l-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z\\\"/><path d=\\\"M4 18h5.523v-1H4zm-2 0h1v-1H2z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/ui/colortableview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport ColorTileView from '@ckeditor/ckeditor5-ui/src/colorgrid/colortileview';\nimport ColorGridView from '@ckeditor/ckeditor5-ui/src/colorgrid/colorgridview';\nimport LabelView from '@ckeditor/ckeditor5-ui/src/label/labelview';\nimport DocumentColorCollection from '../documentcolorcollection';\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport removeButtonIcon from '@ckeditor/ckeditor5-core/theme/icons/eraser.svg';\nimport '../../theme/fontcolor.css';\n/**\n * A class which represents a view with the following sub–components:\n *\n * * A remove color button,\n * * A static {@link module:ui/colorgrid/colorgrid~ColorGridView} of colors defined in the configuration,\n * * A dynamic {@link module:ui/colorgrid/colorgrid~ColorGridView} of colors used in the document.\n *\n * @extends module:ui/view~View\n */\n\nexport default class ColorTableView extends View {\n  /**\n   * Creates a view to be inserted as a child of {@link module:ui/dropdown/dropdownview~DropdownView}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {Object} config The configuration object.\n   * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions of colors to\n   * be displayed in the table.\n   * @param {Number} config.columns The number of columns in the color grid.\n   * @param {String} config.removeButtonLabel The label of the button responsible for removing the color.\n   * @param {String} config.documentColorsLabel The label for the section with the document colors.\n   * @param {String} config.documentColorsCount The number of colors in the document colors section inside the color dropdown.\n   */\n  constructor(locale, {\n    colors,\n    columns,\n    removeButtonLabel,\n    documentColorsLabel,\n    documentColorsCount\n  }) {\n    super(locale);\n    /**\n     * A collection of the children of the table.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * An array with objects representing colors to be displayed in the grid.\n     *\n     * @type {Arrray.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n     */\n\n    this.colorDefinitions = colors;\n    /**\n     * Tracks information about the DOM focus in the list.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Keeps the value of the command associated with the table for the current selection.\n     *\n     * @type {String}\n     */\n\n    this.set('selectedColor');\n    /**\n     * The label of the button responsible for removing color attributes.\n     *\n     * @type {String}\n     */\n\n    this.removeButtonLabel = removeButtonLabel;\n    /**\n     * The number of columns in the color grid.\n     *\n     * @type {Number}\n     */\n\n    this.columns = columns;\n    /**\n     * A collection of definitions that store the document colors.\n     *\n     * @readonly\n     * @member {module:font/documentcolorcollection~DocumentColorCollection}\n     */\n\n    this.documentColors = new DocumentColorCollection();\n    /**\n     * The maximum number of colors in the document colors section.\n     * If it equals 0, the document colors section is not added.\n     *\n     * @readonly\n     * @type {Number}\n     */\n\n    this.documentColorsCount = documentColorsCount;\n    /**\n     * Preserves the reference to {@link module:ui/colorgrid/colorgrid~ColorGridView} used to create\n     * the default (static) color set.\n     *\n     * @readonly\n     * @member {module:ui/colorgrid/colorgrid~ColorGridView}\n     */\n\n    this.staticColorsGrid = this._createStaticColorsGrid();\n    /**\n     * Preserves the reference to {@link module:ui/colorgrid/colorgrid~ColorGridView} used to create\n     * the document colors. It remains undefined if the document colors feature is disabled.\n     *\n     * @readonly\n     * @member {module:ui/colorgrid/colorgrid~ColorGridView}\n     */\n\n    this.documentColorsGrid;\n    /**\n     * Helps cycling over focusable {@link #items} in the list.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n\n    this._focusCycler = new FocusCycler({\n      focusables: this.items,\n      focusTracker: this.focusTracker,\n      keystrokeHandler: this.keystrokes,\n      actions: {\n        // Navigate list items backwards using the Arrow Up key.\n        focusPrevious: 'arrowup',\n        // Navigate list items forwards using the Arrow Down key.\n        focusNext: 'arrowdown'\n      }\n    });\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-color-table']\n      },\n      children: this.items\n    });\n    this.items.add(this._removeColorButton());\n    this.items.add(this.staticColorsGrid);\n\n    if (documentColorsCount) {\n      // Create a label for document colors.\n      const bind = Template.bind(this.documentColors, this.documentColors);\n      const label = new LabelView(this.locale);\n      label.text = documentColorsLabel;\n      label.extendTemplate({\n        attributes: {\n          class: ['ck', 'ck-color-grid__label', bind.if('isEmpty', 'ck-hidden')]\n        }\n      });\n      this.items.add(label);\n      this.documentColorsGrid = this._createDocumentColorsGrid();\n      this.items.add(this.documentColorsGrid);\n    }\n  }\n  /**\n   * Scans through the editor model and searches for text node attributes with the given attribute name.\n   * Found entries are set as document colors.\n   *\n   * All the previously stored document colors will be lost in the process.\n   *\n   * @param {module:engine/model/model~Model} model The model used as a source to obtain the document colors.\n   * @param {String} attributeName Determines the name of the related model's attribute for a given dropdown.\n   */\n\n\n  updateDocumentColors(model, attributeName) {\n    const document = model.document;\n    const maxCount = this.documentColorsCount;\n    this.documentColors.clear();\n\n    for (const rootName of document.getRootNames()) {\n      const root = document.getRoot(rootName);\n      const range = model.createRangeIn(root);\n\n      for (const node of range.getItems()) {\n        if (node.is('textProxy') && node.hasAttribute(attributeName)) {\n          this._addColorToDocumentColors(node.getAttribute(attributeName));\n\n          if (this.documentColors.length >= maxCount) {\n            return;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Refreshes the state of the selected color in one or both {@link module:ui/colorgrid/colorgrid~ColorGridView}s\n   * available in the {@link module:font/ui/colortableview~ColorTableView}. It guarantees that the selection will occur only in one\n   * of them.\n   */\n\n\n  updateSelectedColors() {\n    const documentColorsGrid = this.documentColorsGrid;\n    const staticColorsGrid = this.staticColorsGrid;\n    const selectedColor = this.selectedColor;\n    staticColorsGrid.selectedColor = selectedColor;\n\n    if (documentColorsGrid) {\n      documentColorsGrid.selectedColor = selectedColor;\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render(); // Items added before rendering should be known to the #focusTracker.\n\n    for (const item of this.items) {\n      this.focusTracker.add(item.element);\n    } // Start listening for the keystrokes coming from #element.\n\n\n    this.keystrokes.listenTo(this.element);\n  }\n  /**\n   * Focuses the first focusable element in {@link #items}.\n   */\n\n\n  focus() {\n    this._focusCycler.focusFirst();\n  }\n  /**\n   * Focuses the last focusable element in {@link #items}.\n   */\n\n\n  focusLast() {\n    this._focusCycler.focusLast();\n  }\n  /**\n   * Adds the remove color button as a child of the current view.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _removeColorButton() {\n    const buttonView = new ButtonView();\n    buttonView.set({\n      withText: true,\n      icon: removeButtonIcon,\n      tooltip: true,\n      label: this.removeButtonLabel\n    });\n    buttonView.class = 'ck-color-table__remove-color';\n    buttonView.on('execute', () => {\n      this.fire('execute', {\n        value: null\n      });\n    });\n    return buttonView;\n  }\n  /**\n   * Creates a static color table grid based on the editor configuration.\n   *\n   * @private\n   * @returns {module:ui/colorgrid/colorgrid~ColorGridView}\n   */\n\n\n  _createStaticColorsGrid() {\n    const colorGrid = new ColorGridView(this.locale, {\n      colorDefinitions: this.colorDefinitions,\n      columns: this.columns\n    });\n    colorGrid.delegate('execute').to(this);\n    return colorGrid;\n  }\n  /**\n   * Creates the document colors section view and binds it to {@link #documentColors}.\n   *\n   * @private\n   * @returns {module:ui/colorgrid/colorgrid~ColorGridView}\n   */\n\n\n  _createDocumentColorsGrid() {\n    const bind = Template.bind(this.documentColors, this.documentColors);\n    const documentColorsGrid = new ColorGridView(this.locale, {\n      columns: this.columns\n    });\n    documentColorsGrid.delegate('execute').to(this);\n    documentColorsGrid.extendTemplate({\n      attributes: {\n        class: bind.if('isEmpty', 'ck-hidden')\n      }\n    });\n    documentColorsGrid.items.bindTo(this.documentColors).using(colorObj => {\n      const colorTile = new ColorTileView();\n      colorTile.set({\n        color: colorObj.color,\n        hasBorder: colorObj.options && colorObj.options.hasBorder\n      });\n\n      if (colorObj.label) {\n        colorTile.set({\n          label: colorObj.label,\n          tooltip: true\n        });\n      }\n\n      colorTile.on('execute', () => {\n        this.fire('execute', {\n          value: colorObj.color\n        });\n      });\n      return colorTile;\n    }); // Selected color should be cleared when document colors became empty.\n\n    this.documentColors.on('change:isEmpty', (evt, name, val) => {\n      if (val) {\n        documentColorsGrid.selectedColor = null;\n      }\n    });\n    return documentColorsGrid;\n  }\n  /**\n   * Adds a given color to the document colors list. If possible, the method will attempt to use\n   * data from the {@link #colorDefinitions} (label, color options).\n   *\n   * @private\n   * @param {String} color A string that stores the value of the recently applied color.\n   */\n\n\n  _addColorToDocumentColors(color) {\n    const predefinedColor = this.colorDefinitions.find(definition => definition.color === color);\n\n    if (!predefinedColor) {\n      this.documentColors.add({\n        color,\n        label: color,\n        options: {\n          hasBorder: false\n        }\n      });\n    } else {\n      this.documentColors.add(Object.assign({}, predefinedColor));\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/utils\n */\nimport ColorTableView from './ui/colortableview';\n/**\n * The name of the font size plugin.\n */\nexport const FONT_SIZE = 'fontSize';\n/**\n * The name of the font family plugin.\n */\nexport const FONT_FAMILY = 'fontFamily';\n/**\n * The name of the font color plugin.\n */\nexport const FONT_COLOR = 'fontColor';\n/**\n * The name of the font background color plugin.\n */\nexport const FONT_BACKGROUND_COLOR = 'fontBackgroundColor';\n/**\n * Builds a proper {@link module:engine/conversion/conversion~ConverterDefinition converter definition} out of input data.\n *\n * @param {String} modelAttributeKey Key\n * @param {Array.<module:font/fontfamily~FontFamilyOption>|Array.<module:font/fontsize~FontSizeOption>} options\n * @returns {module:engine/conversion/conversion~ConverterDefinition}\n */\nexport function buildDefinition(modelAttributeKey, options) {\n    const definition = {\n        model: {\n            key: modelAttributeKey,\n            values: []\n        },\n        view: {},\n        upcastAlso: {}\n    };\n    for (const option of options) {\n        definition.model.values.push(option.model);\n        definition.view[option.model] = option.view;\n        if (option.upcastAlso) {\n            definition.upcastAlso[option.model] = option.upcastAlso;\n        }\n    }\n    return definition;\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for upcasting data to the model.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n * @return {String}\n */\nexport function renderUpcastAttribute(styleAttr) {\n    return viewElement => normalizeColorCode(viewElement.getStyle(styleAttr));\n}\n/**\n * A {@link module:font/fontcolor~FontColor font color} and\n * {@link module:font/fontbackgroundcolor~FontBackgroundColor font background color} helper\n * responsible for downcasting a color attribute to a `<span>` element.\n *\n * **Note**: The `styleAttr` parameter should be either `'color'` or `'background-color'`.\n *\n * @param {String} styleAttr\n */\nexport function renderDowncastElement(styleAttr) {\n    return (modelAttributeValue, viewWriter) => viewWriter.createAttributeElement('span', { style: `${ styleAttr }:${ modelAttributeValue }` }, { priority: 7 });\n}\n/**\n * Creates a unified color definition object from color configuration options.\n * The object contains the information necessary to both render the UI and initialize the conversion.\n *\n * @param {module:ui/colorgrid/colorgrid~ColorDefinition} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}\n */\nexport function normalizeColorOptions(options) {\n    return options.map(normalizeSingleColorDefinition).filter(option => !!option);\n}\n/**\n * A helper that adds {@link module:font/ui/colortableview~ColorTableView} to the color dropdown with proper initial values.\n *\n * @param {Object} config The configuration object.\n * @param {module:ui/dropdown/dropdownview~DropdownView} config.dropdownView The dropdown view to which\n * a {@link module:font/ui/colortableview~ColorTableView} will be added.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} config.colors An array with definitions\n * representing colors to be displayed in the color table.\n * @param {String} config.removeButtonLabel The label for the button responsible for removing the color.\n * @param {String} config.documentColorsLabel The label for the section with document colors.\n * @param {String} config.documentColorsCount The number of document colors inside the dropdown.\n * @returns {module:font/ui/colortableview~ColorTableView} The new color table view.\n */\nexport function addColorTableToDropdown({dropdownView, colors, columns, removeButtonLabel, documentColorsLabel, documentColorsCount}) {\n    const locale = dropdownView.locale;\n    const colorTableView = new ColorTableView(locale, {\n        colors,\n        columns,\n        removeButtonLabel,\n        documentColorsLabel,\n        documentColorsCount\n    });\n    dropdownView.colorTableView = colorTableView;\n    dropdownView.panelView.children.add(colorTableView);\n    colorTableView.delegate('execute').to(dropdownView, 'execute');\n    return colorTableView;\n}\n/**\n * Returns color configuration options as defined in `editor.config.(fontColor|fontBackgroundColor).colors`\n * but processed to account for editor localization, i.e. to display {@link module:font/fontcolor~FontColorConfig}\n * or {@link module:font/fontbackgroundcolor~FontBackgroundColorConfig} in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor An editor instance.\n * @param {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>} options\n * @returns {Array.<module:ui/colorgrid/colorgrid~ColorDefinition>}.\n */\nexport function getLocalizedColorOptions(editor, options) {\n    const t = editor.t;\n    const localizedColorNames = {\n        Black: t('ch'),\n        'Dim grey': t('ci'),\n        Grey: t('cj'),\n        'Light grey': t('ck'),\n        White: t('cl'),\n        Red: t('cm'),\n        Orange: t('cn'),\n        Yellow: t('co'),\n        'Light green': t('cp'),\n        Green: t('cq'),\n        Aquamarine: t('cr'),\n        Turquoise: t('cs'),\n        'Light blue': t('ct'),\n        Blue: t('cu'),\n        Purple: t('cv')\n    };\n    return options.map(colorOption => {\n        const label = localizedColorNames[colorOption.label];\n        if (label && label != colorOption.label) {\n            colorOption.label = label;\n        }\n        return colorOption;\n    });\n}\n// Fixes the color value string.\n//\n// @param {String} value\n// @returns {String}\nfunction normalizeColorCode(value) {\n    return value.replace(/\\s/g, '');\n}\n// Creates a normalized color definition from the user-defined configuration.\n//\n// @param {String|module:ui/colorgrid/colorgrid~ColorDefinition}\n// @returns {module:ui/colorgrid/colorgrid~ColorDefinition}\nfunction normalizeSingleColorDefinition(color) {\n    if (typeof color === 'string') {\n        return {\n            model: color.replace(/ /g, ''),\n            label: color,\n            hasBorder: false,\n            view: {\n                name: 'span',\n                styles: { color }\n            }\n        };\n    } else {\n        return {\n            model: color.color.replace(/ /g, ''),\n            label: color.label || color.color,\n            hasBorder: color.hasBorder === undefined ? false : color.hasBorder,\n            view: {\n                name: 'span',\n                styles: { color: `${ color.color }` }\n            }\n        };\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilycommand\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_FAMILY } from '../utils';\n/**\n * The font family command. It is used by {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing}\n * to apply the font family.\n *\n *\t\teditor.execute( 'fontFamily', { value: 'Arial' } );\n *\n * **Note**: Executing the command without the value removes the attribute from the model.\n *\n * @extends module:font/fontcommand~FontCommand\n */\n\nexport default class FontFamilyCommand extends FontCommand {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor, FONT_FAMILY);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/utils\n */\n\n/**\n * Normalizes the {@link module:font/fontfamily~FontFamilyConfig#options configuration options}\n * to the {@link module:font/fontfamily~FontFamilyOption} format.\n *\n * @param {Array.<String|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontfamily~FontFamilyOption>}\n */\nexport function normalizeOptions(configuredOptions) {\n  // Convert options to objects.\n  return configuredOptions.map(getOptionDefinition) // Filter out undefined values that `getOptionDefinition` might return.\n  .filter(option => !!option);\n} // Returns an option definition either created from string shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Object} option\n// @returns {undefined|module:font/fontfamily~FontFamilyOption}\n\nfunction getOptionDefinition(option) {\n  // Treat any object as full item definition provided by user in configuration.\n  if (typeof option === 'object') {\n    return option;\n  } // Handle 'default' string as a special case. It will be used to remove the fontFamily attribute.\n\n\n  if (option === 'default') {\n    return {\n      title: 'Default',\n      model: undefined\n    };\n  } // Ignore values that we cannot parse to a definition.\n\n\n  if (typeof option !== 'string') {\n    return;\n  } // Return font family definition from font string.\n\n\n  return generateFontPreset(option);\n} // Creates a predefined preset for pixel size. It deconstructs font-family like string into full configuration option.\n// A font definition is passed as coma delimited set of font family names. Font names might be quoted.\n//\n// @param {String} A font definition form configuration.\n\n\nfunction generateFontPreset(fontDefinition) {\n  // Remove quotes from font names. They will be normalized later.\n  const fontNames = fontDefinition.replace(/\"|'/g, '').split(','); // The first matched font name will be used as dropdown list item title and as model value.\n\n  const firstFontName = fontNames[0]; // CSS-compatible font names.\n\n  const cssFontNames = fontNames.map(normalizeFontNameForCSS).join(', ');\n  return {\n    title: firstFontName,\n    model: firstFontName,\n    view: {\n      name: 'span',\n      styles: {\n        'font-family': cssFontNames\n      },\n      priority: 7\n    }\n  };\n} // Normalizes font name for the style attribute. It adds braces (') if font name contains spaces.\n//\n// @param {String} fontName\n// @returns {String}\n\n\nfunction normalizeFontNameForCSS(fontName) {\n  fontName = fontName.trim(); // Compound font names should be quoted.\n\n  if (fontName.indexOf(' ') > 0) {\n    fontName = `'${fontName}'`;\n  }\n\n  return fontName;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily/fontfamilyediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontFamilyCommand from './fontfamilycommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_FAMILY } from '../utils';\n/**\n * The font family editing feature.\n *\n * It introduces the {@link module:font/fontfamily/fontfamilycommand~FontFamilyCommand command} and\n * the `fontFamily` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as an inline `<span>` element (`<span style=\"font-family: Arial\">`),\n * depending on the {@link module:font/fontfamily~FontFamilyConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontFamilyEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontFamilyEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor); // Define default configuration using font families shortcuts.\n\n    editor.config.define(FONT_FAMILY, {\n      options: ['default', 'Arial, Helvetica, sans-serif', 'Courier New, Courier, monospace', 'Georgia, serif', 'Lucida Sans Unicode, Lucida Grande, sans-serif', 'Tahoma, Geneva, sans-serif', 'Times New Roman, Times, serif', 'Trebuchet MS, Helvetica, sans-serif', 'Verdana, Geneva, sans-serif']\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow fontFamily attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_FAMILY\n    });\n    editor.model.schema.setAttributeProperties(FONT_FAMILY, {\n      isFormatting: true,\n      copyOnEnter: true\n    }); // Get configured font family options without \"default\" option.\n\n    const options = normalizeOptions(editor.config.get('fontFamily.options')).filter(item => item.model);\n    const definition = buildDefinition(FONT_FAMILY, options); // Set-up the two-way conversion.\n\n    editor.conversion.attributeToElement(definition);\n    editor.commands.add(FONT_FAMILY, new FontFamilyCommand(editor));\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/model\n */\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport { extend } from 'lodash-es';\n/**\n * The base MVC model class.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Model {\n  /**\n   * Creates a new Model instance.\n   *\n   * @param {Object} [attributes] The model state attributes to be defined during the instance creation.\n   * @param {Object} [properties] The (out of state) properties to be appended to the instance during creation.\n   */\n  constructor(attributes, properties) {\n    // Extend this instance with the additional (out of state) properties.\n    if (properties) {\n      extend(this, properties);\n    } // Initialize the attributes.\n\n\n    if (attributes) {\n      this.set(attributes);\n    }\n  }\n\n}\nmix(Model, ObservableMixin);","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.03 3h6.149a.75.75 0 1 1 0 1.5h-5.514L11.03 3zm1.27 3h4.879a.75.75 0 1 1 0 1.5h-4.244L12.3 6zm1.27 3h3.609a.75.75 0 1 1 0 1.5h-2.973L13.57 9zm-2.754 2.5L8.038 4.785 5.261 11.5h5.555zm.62 1.5H4.641l-1.666 4.028H1.312l5.789-14h1.875l5.789 14h-1.663L11.436 13z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontfamily/fontfamilyui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { normalizeOptions } from './utils';\nimport { FONT_FAMILY } from '../utils';\nimport fontFamilyIcon from '../../theme/icons/font-family.svg';\n/**\n * The font family UI plugin. It introduces the `'fontFamily'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontFamilyUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const command = editor.commands.get(FONT_FAMILY);\n        // Register UI component.\n        editor.ui.componentFactory.add(FONT_FAMILY, locale => {\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, _prepareListOptions(options, command));\n            dropdownView.buttonView.set({\n                label: t('bi'),\n                icon: fontFamilyIcon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({ attributes: { class: 'ck-font-family-dropdown' } });\n            dropdownView.bind('isEnabled').to(command);\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, { value: evt.source.commandParam });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n   * Returns options as defined in `config.fontFamily.options` but processed to account for\n   * editor localization, i.e. to display {@link module:font/fontfamily~FontFamilyOption}\n   * in the correct language.\n   *\n   * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n   * when the user configuration is defined because the editor does not exist yet.\n   *\n   * @private\n   * @returns {Array.<module:font/fontfamily~FontFamilyOption>}.\n   */\n    _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = normalizeOptions(editor.config.get(FONT_FAMILY).options);\n        return options.map(option => {\n            // The only title to localize is \"Default\" others are font names.\n            if (option.title === 'Default') {\n                option.title = t('bj');\n            }\n            return option;\n        });\n    }\n}\n// Prepares FontFamily dropdown items.\n// @private\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\nfunction _prepareListOptions(options, command) {\n    const itemDefinitions = new Collection();\n    // Create dropdown items.\n    for (const option of options) {\n        const def = {\n            type: 'button',\n            model: new Model({\n                commandName: FONT_FAMILY,\n                commandParam: option.model,\n                label: option.title,\n                withText: true\n            })\n        };\n        def.model.bind('isOn').to(command, 'value', value => value === option.model);\n        // Try to set a dropdown list item style.\n        if (option.view && option.view.styles) {\n            def.model.set('labelStyle', `font-family: ${ option.view.styles['font-family'] }`);\n        }\n        itemDefinitions.add(def);\n    }\n    return itemDefinitions;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontfamily\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontFamilyEditing from './fontfamily/fontfamilyediting';\nimport FontFamilyUI from './fontfamily/fontfamilyui';\n/**\n * The font family plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentatiom\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} and\n * {@link module:font/fontfamily/fontfamilyui~FontFamilyUI} features in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontFamily extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FontFamilyEditing, FontFamilyUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'FontFamily';\n  }\n\n}\n/**\n * The font family option descriptor.\n *\n * @typedef {Object} module:font/fontfamily~FontFamilyOption\n *\n * @property {String} title The user-readable title of the option.\n * @property {String} model The attribute's unique value in the model.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view View element configuration.\n * @property {Array.<module:engine/view/elementdefinition~ElementDefinition>} [upcastAlso] An array with all matched elements that\n * the view-to-model conversion should also accept.\n */\n\n/**\n * The configuration of the font family feature.\n * It is introduced by the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} feature.\n *\n * Read more in {@link module:font/fontfamily~FontFamilyConfig}.\n *\n * @member {module:font/fontfamily~FontFamilyConfig} module:core/editor/editorconfig~EditorConfig#fontFamily\n */\n\n/**\n * The configuration of the font family feature.\n * This option is used by the {@link module:font/fontfamily/fontfamilyediting~FontFamilyEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\tfontFamily: ... // Font family feature configuration.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface module:font/fontfamily~FontFamilyConfig\n */\n\n/**\n * Available font family options defined as an array of strings. The default value is:\n *\n *\t\tconst fontFamilyConfig = {\n *\t\t\toptions: [\n *\t\t\t\t'default',\n *\t\t\t\t'Arial, Helvetica, sans-serif',\n *\t\t\t\t'Courier New, Courier, monospace',\n *\t\t\t\t'Georgia, serif',\n *\t\t\t\t'Lucida Sans Unicode, Lucida Grande, sans-serif',\n *\t\t\t\t'Tahoma, Geneva, sans-serif',\n *\t\t\t\t'Times New Roman, Times, serif',\n *\t\t\t\t'Trebuchet MS, Helvetica, sans-serif',\n *\t\t\t\t'Verdana, Geneva, sans-serif'\n *\t\t\t]\n *\t\t};\n *\n * which configures 8 font family options. Each option consists of one or more comma–separated font family names. The first font name is\n * used as the dropdown item description in the UI.\n *\n * **Note:** The family names that consist of spaces should not have quotes (as opposed to the CSS standard). The necessary quotes\n * will be added automatically in the view. For example, the `\"Lucida Sans Unicode\"` will render as follows:\n *\n * \t\t<span style=\"font-family:'Lucida Sans Unicode', 'Lucida Grande', sans-serif\">...</span>\n *\n * The \"default\" option removes the `fontFamily` attribute from the selection. In such case, the text will\n * be rendered in the view using the default font family defined in the styles of the web page.\n *\n * Font family can be applied using the command API. To do that, use the `fontFamily` command and pass the desired family as a `value`.\n * For example, the following code will apply the `fontFamily` attribute with the `'Arial'` `value` to the current selection:\n *\n *\t\teditor.execute( 'fontFamily', { value: 'Arial' } );\n *\n * Executing the `'fontFamily'` command without any value will remove the `fontFamily` attribute from the current selection.\n *\n * @member {Array.<String|module:font/fontfamily~FontFamilyOption>} module:font/fontfamily~FontFamilyConfig#options\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/fontsizecommand\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_SIZE } from '../utils';\n/**\n * The font size command. It is used by {@link module:font/fontsize/fontsizeediting~FontSizeEditing}\n * to apply the font size.\n *\n *\t\teditor.execute( 'fontSize', { value: 'small' } );\n *\n * **Note**: Executing the command without the value removes the attribute from the model.\n *\n * @extends module:font/fontcommand~FontCommand\n */\n\nexport default class FontSizeCommand extends FontCommand {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor, FONT_SIZE);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/utils\n */\n\n/**\n * Normalizes and translates the {@link module:font/fontsize~FontSizeConfig#options configuration options}\n * to the {@link module:font/fontsize~FontSizeOption} format.\n *\n * @param {Array.<String|Number|Object>} configuredOptions An array of options taken from the configuration.\n * @returns {Array.<module:font/fontsize~FontSizeOption>}\n */\nexport function normalizeOptions(configuredOptions) {\n  // Convert options to objects.\n  return configuredOptions.map(getOptionDefinition) // Filter out undefined values that `getOptionDefinition` might return.\n  .filter(option => !!option);\n} // Default named presets map.\n\nconst namedPresets = {\n  tiny: {\n    title: 'Tiny',\n    model: 'tiny',\n    view: {\n      name: 'span',\n      classes: 'text-tiny',\n      priority: 7\n    }\n  },\n  small: {\n    title: 'Small',\n    model: 'small',\n    view: {\n      name: 'span',\n      classes: 'text-small',\n      priority: 7\n    }\n  },\n  big: {\n    title: 'Big',\n    model: 'big',\n    view: {\n      name: 'span',\n      classes: 'text-big',\n      priority: 7\n    }\n  },\n  huge: {\n    title: 'Huge',\n    model: 'huge',\n    view: {\n      name: 'span',\n      classes: 'text-huge',\n      priority: 7\n    }\n  }\n}; // Returns an option definition either from preset or creates one from number shortcut.\n// If object is passed then this method will return it without alternating it. Returns undefined for item than cannot be parsed.\n//\n// @param {String|Number|Object} item\n// @returns {undefined|module:font/fontsize~FontSizeOption}\n\nfunction getOptionDefinition(option) {\n  // Treat any object as full item definition provided by user in configuration.\n  if (typeof option === 'object') {\n    return option;\n  } // Item is a named preset.\n\n\n  if (namedPresets[option]) {\n    return namedPresets[option];\n  } // 'Default' font size. It will be used to remove the fontSize attribute.\n\n\n  if (option === 'default') {\n    return {\n      model: undefined,\n      title: 'Default'\n    };\n  } // At this stage we probably have numerical value to generate a preset so parse it's value.\n\n\n  const sizePreset = parseFloat(option); // Discard any faulty values.\n\n  if (isNaN(sizePreset)) {\n    return;\n  } // Return font size definition from size value.\n\n\n  return generatePixelPreset(sizePreset);\n} // Creates a predefined preset for pixel size.\n//\n// @param {Number} size Font size in pixels.\n// @returns {module:font/fontsize~FontSizeOption}\n\n\nfunction generatePixelPreset(size) {\n  const sizeName = String(size);\n  return {\n    title: sizeName,\n    model: size,\n    view: {\n      name: 'span',\n      styles: {\n        'font-size': `${size}px`\n      },\n      priority: 7\n    }\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize/fontsizeediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontSizeCommand from './fontsizecommand';\nimport { normalizeOptions } from './utils';\nimport { buildDefinition, FONT_SIZE } from '../utils';\n/**\n * The font size editing feature.\n *\n * It introduces the {@link module:font/fontsize/fontsizecommand~FontSizeCommand command} and the `fontSize`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<span>` element with either:\n * * a style attribute (`<span style=\"font-size:12px\">...</span>`),\n * * or a class attribute (`<span class=\"text-small\">...</span>`)\n *\n * depending on the {@link module:font/fontsize~FontSizeConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontSizeEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontSizeEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor); // Define default configuration using named presets.\n\n    editor.config.define(FONT_SIZE, {\n      options: ['tiny', 'small', 'default', 'big', 'huge']\n    }); // Define view to model conversion.\n\n    const options = normalizeOptions(this.editor.config.get('fontSize.options')).filter(item => item.model);\n    const definition = buildDefinition(FONT_SIZE, options); // Set-up the two-way conversion.\n\n    editor.conversion.attributeToElement(definition); // Add FontSize command.\n\n    editor.commands.add(FONT_SIZE, new FontSizeCommand(editor));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow fontSize attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_SIZE\n    });\n    editor.model.schema.setAttributeProperties(FONT_SIZE, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.816 11.5L7.038 4.785 4.261 11.5h5.555zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13zm7.55 2.279l.779-.779.707.707-2.265 2.265-2.193-2.265.707-.707.765.765V4.825c0-.042 0-.083.002-.123l-.77.77-.707-.707L17.207 2.5l2.265 2.265-.707.707-.782-.782c.002.043.003.089.003.135v10.454z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontsize/fontsizeui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { normalizeOptions } from './utils';\nimport { FONT_SIZE } from '../utils';\nimport fontSizeIcon from '../../theme/icons/font-size.svg';\nimport '../../theme/fontsize.css';\n/**\n * The font size UI plugin. It introduces the `'fontSize'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontSizeUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = this._getLocalizedOptions();\n        const command = editor.commands.get(FONT_SIZE);\n        // Register UI component.\n        editor.ui.componentFactory.add(FONT_SIZE, locale => {\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, _prepareListOptions(options, command));\n            // Create dropdown model.\n            dropdownView.buttonView.set({\n                label: t('bo'),\n                icon: fontSizeIcon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-font-size-dropdown'] } });\n            dropdownView.bind('isEnabled').to(command);\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, { value: evt.source.commandParam });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n    /**\n   * Returns options as defined in `config.fontSize.options` but processed to account for\n   * editor localization, i.e. to display {@link module:font/fontsize~FontSizeOption}\n   * in the correct language.\n   *\n   * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n   * when the user configuration is defined because the editor does not exist yet.\n   *\n   * @private\n   * @returns {Array.<module:font/fontsize~FontSizeOption>}.\n   */\n    _getLocalizedOptions() {\n        const editor = this.editor;\n        const t = editor.t;\n        const localizedTitles = {\n            Default: t('bj'),\n            Tiny: t('bp'),\n            Small: t('bq'),\n            Big: t('br'),\n            Huge: t('bs')\n        };\n        const options = normalizeOptions(editor.config.get(FONT_SIZE).options);\n        return options.map(option => {\n            const title = localizedTitles[option.title];\n            if (title && title != option.title) {\n                // Clone the option to avoid altering the original `namedPresets` from `./utils.js`.\n                option = Object.assign({}, option, { title });\n            }\n            return option;\n        });\n    }\n}\n// Prepares FontSize dropdown items.\n// @private\n// @param {Array.<module:font/fontsize~FontSizeOption>} options\n// @param {module:font/fontsize/fontsizecommand~FontSizeCommand} command\nfunction _prepareListOptions(options, command) {\n    const itemDefinitions = new Collection();\n    for (const option of options) {\n        const def = {\n            type: 'button',\n            model: new Model({\n                commandName: FONT_SIZE,\n                commandParam: option.model,\n                label: option.title,\n                class: 'ck-fontsize-option',\n                withText: true\n            })\n        };\n        if (option.view && option.view.styles) {\n            def.model.set('labelStyle', `font-size:${ option.view.styles['font-size'] }`);\n        }\n        if (option.view && option.view.classes) {\n            def.model.set('class', `${ def.model.class } ${ option.view.classes }`);\n        }\n        def.model.bind('isOn').to(command, 'value', value => value === option.model);\n        // Add the option to the collection.\n        itemDefinitions.add(def);\n    }\n    return itemDefinitions;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontsize\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontSizeEditing from './fontsize/fontsizeediting';\nimport FontSizeUI from './fontsize/fontsizeui';\n/**\n * The font size plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} and\n * {@link module:font/fontsize/fontsizeui~FontSizeUI} features in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontSize extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FontSizeEditing, FontSizeUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'FontSize';\n  }\n\n}\n/**\n * The font size option descriptor.\n *\n * @typedef {Object} module:font/fontsize~FontSizeOption\n *\n * @property {String} title The user-readable title of the option.\n * @property {String} model The attribute's unique value in the model.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view View element configuration.\n * @property {Array.<module:engine/view/elementdefinition~ElementDefinition>} [upcastAlso] An array with all matched elements that\n * the view-to-model conversion should also accept.\n */\n\n/**\n * The configuration of the font size feature.\n * It is introduced by the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} feature.\n *\n * Read more in {@link module:font/fontsize~FontSizeConfig}.\n *\n * @member {module:font/fontsize~FontSizeConfig} module:core/editor/editorconfig~EditorConfig#fontSize\n */\n\n/**\n * The configuration of the font size feature.\n * This option is used by the {@link module:font/fontsize/fontsizeediting~FontSizeEditing} feature.\n *\n * \t\tClassicEditor\n * \t\t\t.create( {\n * \t\t\t\tfontSize: ... // Font size feature configuration.\n *\t\t\t} )\n * \t\t\t.then( ... )\n * \t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface module:font/fontsize~FontSizeConfig\n */\n\n/**\n * Available font size options. Expressed as predefined presets, numerical \"pixel\" values\n * or the {@link module:font/fontsize~FontSizeOption}.\n *\n * The default value is:\n *\n *\t\tconst fontSizeConfig = {\n *\t\t\toptions: [\n *\t\t\t\t'tiny',\n * \t\t\t\t'small',\n * \t\t\t\t'default',\n * \t\t\t\t'big',\n * \t\t\t\t'huge'\n *\t\t\t]\n *\t\t};\n *\n * It defines 4 sizes: **tiny**, **small**, **big**, and **huge**. These values will be rendered as `<span>` elements in the view.\n * The **default** defines a text without the `fontSize` attribute.\n *\n * Each `<span>` has the the `class` attribute set to the corresponding size name. For instance, this is what the **small** size looks\n * like in the view:\n *\n * \t\t<span class=\"text-small\">...</span>\n *\n * As an alternative, the font size might be defined using numerical values (either as a `Number` or as a `String`):\n *\n * \t\tconst fontSizeConfig = {\n * \t\t\toptions: [ 9, 10, 11, 12, 13, 14, 15 ]\n * \t\t};\n *\n * Font size can be applied using the command API. To do that, use the `'fontSize'` command and pass the desired font size as a `value`.\n * For example, the following code will apply the `fontSize` attribute with the **tiny** value to the current selection:\n *\n *\t\teditor.execute( 'fontSize', { value: 'tiny' } );\n *\n * Executing the `fontSize` command without value will remove the `fontSize` attribute from the current selection.\n *\n * @member {Array.<String|Number|module:font/fontsize~FontSizeOption>} module:font/fontsize~FontSizeConfig#options\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontcolor/fontcolorcommand\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_COLOR } from '../utils';\n/**\n * The font color command. It is used by {@link module:font/fontcolor/fontcolorediting~FontColorEditing}\n * to apply the font color.\n *\n *\t\teditor.execute( 'fontColor', { value: 'rgb(250, 20, 20)' } );\n *\n * **Note**: Executing the command with the `null` value removes the attribute from the model.\n *\n * @extends module:font/fontcommand~FontCommand\n */\n\nexport default class FontColorCommand extends FontCommand {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor, FONT_COLOR);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontcolor/fontcolorediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontColorCommand from './fontcolorcommand';\nimport { FONT_COLOR, renderDowncastElement, renderUpcastAttribute } from '../utils';\n/**\n * The font color editing feature.\n *\n * It introduces the {@link module:font/fontcolor/fontcolorcommand~FontColorCommand command} and\n * the `fontColor` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as a `<span>` element (`<span style=\"color: ...\">`),\n * depending on the {@link module:font/fontcolor~FontColorConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontColorEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontColorEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define(FONT_COLOR, {\n      colors: [{\n        color: 'hsl(0, 0%, 0%)',\n        label: 'Black'\n      }, {\n        color: 'hsl(0, 0%, 30%)',\n        label: 'Dim grey'\n      }, {\n        color: 'hsl(0, 0%, 60%)',\n        label: 'Grey'\n      }, {\n        color: 'hsl(0, 0%, 90%)',\n        label: 'Light grey'\n      }, {\n        color: 'hsl(0, 0%, 100%)',\n        label: 'White',\n        hasBorder: true\n      }, {\n        color: 'hsl(0, 75%, 60%)',\n        label: 'Red'\n      }, {\n        color: 'hsl(30, 75%, 60%)',\n        label: 'Orange'\n      }, {\n        color: 'hsl(60, 75%, 60%)',\n        label: 'Yellow'\n      }, {\n        color: 'hsl(90, 75%, 60%)',\n        label: 'Light green'\n      }, {\n        color: 'hsl(120, 75%, 60%)',\n        label: 'Green'\n      }, {\n        color: 'hsl(150, 75%, 60%)',\n        label: 'Aquamarine'\n      }, {\n        color: 'hsl(180, 75%, 60%)',\n        label: 'Turquoise'\n      }, {\n        color: 'hsl(210, 75%, 60%)',\n        label: 'Light blue'\n      }, {\n        color: 'hsl(240, 75%, 60%)',\n        label: 'Blue'\n      }, {\n        color: 'hsl(270, 75%, 60%)',\n        label: 'Purple'\n      }],\n      columns: 5\n    });\n    editor.conversion.for('upcast').elementToAttribute({\n      view: {\n        name: 'span',\n        styles: {\n          'color': /[\\s\\S]+/\n        }\n      },\n      model: {\n        key: FONT_COLOR,\n        value: renderUpcastAttribute('color')\n      }\n    });\n    editor.conversion.for('downcast').attributeToElement({\n      model: FONT_COLOR,\n      view: renderDowncastElement('color')\n    });\n    editor.commands.add(FONT_COLOR, new FontColorCommand(editor)); // Allow the font color attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_COLOR\n    });\n    editor.model.schema.setAttributeProperties(FONT_COLOR, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/ui/colorui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { createDropdown } from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport {\n    addColorTableToDropdown,\n    normalizeColorOptions,\n    getLocalizedColorOptions\n} from '../utils';\n/**\n * The color UI plugin which isolates the common logic responsible for displaying dropdowns with color grids.\n *\n * It is used to create the `'fontBackgroundColor'` and `'fontColor'` dropdowns, each hosting\n * a {@link module:font/ui/colortableview~ColorTableView}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ColorUI extends Plugin {\n    /**\n   * Creates a plugin which introduces a dropdown with a pre–configured {@link module:font/ui/colortableview~ColorTableView}.\n   *\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {Object} config The configuration object.\n   * @param {String} config.commandName The name of the command which will be executed when a color tile is clicked.\n   * @param {String} config.componentName The name of the dropdown in the {@link module:ui/componentfactory~ComponentFactory}\n   * and the configuration scope name in `editor.config`.\n   * @param {String} config.icon The SVG icon used by the dropdown.\n   * @param {String} config.dropdownLabel The label used by the dropdown.\n   */\n    constructor(editor, {commandName, icon, componentName, dropdownLabel}) {\n        super(editor);\n        /**\n     * The name of the command which will be executed when a color tile is clicked.\n     *\n     * @type {String}\n     */\n        this.commandName = commandName;\n        /**\n     * The name of this component in the {@link module:ui/componentfactory~ComponentFactory}.\n     * Also the configuration scope name in `editor.config`.\n     *\n     * @type {String}\n     */\n        this.componentName = componentName;\n        /**\n     * The SVG icon used by the dropdown.\n     * @type {String}\n     */\n        this.icon = icon;\n        /**\n     * The label used by the dropdown.\n     *\n     * @type {String}\n     */\n        this.dropdownLabel = dropdownLabel;\n        /**\n     * The number of columns in the color grid.\n     *\n     * @type {Number}\n     */\n        this.columns = editor.config.get(`${ this.componentName }.columns`);\n        /**\n     * Keeps a reference to {@link module:font/ui/colortableview~ColorTableView}.\n     *\n     * @member {module:font/ui/colortableview~ColorTableView}\n     */\n        this.colorTableView;\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const command = editor.commands.get(this.commandName);\n        const colorsConfig = normalizeColorOptions(editor.config.get(this.componentName).colors);\n        const localizedColors = getLocalizedColorOptions(editor, colorsConfig);\n        const documentColorsCount = editor.config.get(`${ this.componentName }.documentColors`);\n        // Register the UI component.\n        editor.ui.componentFactory.add(this.componentName, locale => {\n            const dropdownView = createDropdown(locale);\n            this.colorTableView = addColorTableToDropdown({\n                dropdownView,\n                colors: localizedColors.map(option => ({\n                    label: option.label,\n                    color: option.model,\n                    options: { hasBorder: option.hasBorder }\n                })),\n                columns: this.columns,\n                removeButtonLabel: t('cw'),\n                documentColorsLabel: documentColorsCount !== 0 ? t('cx') : undefined,\n                documentColorsCount: documentColorsCount === undefined ? this.columns : documentColorsCount\n            });\n            this.colorTableView.bind('selectedColor').to(command, 'value');\n            dropdownView.buttonView.set({\n                label: this.dropdownLabel,\n                icon: this.icon,\n                tooltip: true\n            });\n            dropdownView.extendTemplate({ attributes: { class: 'ck-color-ui-dropdown' } });\n            dropdownView.bind('isEnabled').to(command);\n            dropdownView.on('execute', (evt, data) => {\n                editor.execute(this.commandName, data);\n                editor.editing.view.focus();\n            });\n            dropdownView.on('change:isOpen', (evt, name, isVisible) => {\n                if (isVisible) {\n                    if (documentColorsCount !== 0) {\n                        this.colorTableView.updateDocumentColors(editor.model, this.componentName);\n                    }\n                    this.colorTableView.updateSelectedColors();\n                }\n            });\n            return dropdownView;\n        });\n    }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M12.4 10.3L10 4.5l-2.4 5.8h4.8zm.5 1.2H7.1L5.7 15H4.2l5-12h1.6l5 12h-1.5L13 11.5zM16 18.5H4a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontcolor/fontcolorui\n */\nimport ColorUI from '../ui/colorui';\nimport { FONT_COLOR } from '../utils';\nimport fontColorIcon from '../../theme/icons/font-color.svg';\n/**\n * The font color UI plugin. It introduces the `'fontColor'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontColorUI extends ColorUI {\n    /**\n   * @inheritDoc\n   */\n    constructor(editor) {\n        const t = editor.locale.t;\n        super(editor, {\n            commandName: FONT_COLOR,\n            componentName: FONT_COLOR,\n            icon: fontColorIcon,\n            dropdownLabel: t('bt')\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'FontColorUI';\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontcolor\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontColorEditing from './fontcolor/fontcolorediting';\nimport FontColorUI from './fontcolor/fontcolorui';\n/**\n * The font color plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:font/fontcolor/fontcolorediting~FontColorEditing} and\n * {@link module:font/fontcolor/fontcolorui~FontColorUI} features in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontColor extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FontColorEditing, FontColorUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'FontColor';\n  }\n\n}\n/**\n * The configuration of the font color feature.\n * It is introduced by the {@link module:font/fontcolor/fontcolorediting~FontColorEditing} feature.\n *\n * Read more in {@link module:font/fontcolor~FontColorConfig}.\n *\n * @member {module:font/fontcolor~FontColorConfig} module:core/editor/editorconfig~EditorConfig#fontColor\n */\n\n/**\n * The configuration of the font color feature.\n * This option is used by the {@link module:font/fontcolor/fontcolorediting~FontColorEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n *\t\t\t\tfontColor: ... // Font color feature configuration.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface module:font/fontcolor~FontColorConfig\n */\n\n/**\n * Available font colors defined as an array of strings or objects.\n *\n * The default value registers the following colors:\n *\n *\t\tconst fontColorConfig = {\n *\t\t\tcolors: [\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 0%)',\n *\t\t\t\t\tlabel: 'Black'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 30%)',\n *\t\t\t\t\tlabel: 'Dim grey'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 60%)',\n *\t\t\t\t\tlabel: 'Grey'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 90%)',\n *\t\t\t\t\tlabel: 'Light grey'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 100%)',\n *\t\t\t\t\tlabel: 'White',\n *\t\t\t\t\thasBorder: true\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Red'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(30, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Orange'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(60, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Yellow'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(90, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Light green'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(120, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Green'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(150, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Aquamarine'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(180, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Turquoise'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(210, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Light blue'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(240, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Blue'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(270, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Purple'\n *\t\t\t\t}\n *\t\t\t]\n *\t\t};\n *\n * *Note*: The colors are displayed in the `'fontColor'` dropdown.\n *\n * @member {Array.<String|Object>} module:font/fontcolor~FontColorConfig#colors\n */\n\n/**\n * Represents the number of columns in the font color dropdown.\n *\n * The default value is:\n *\n *\t\tconst fontColorConfig = {\n *\t\t\tcolumns: 5\n *\t\t}\n *\n * @member {Number} module:font/fontcolor~FontColorConfig#columns\n */\n\n/**\n * Determines the maximum number of available document colors.\n * Setting it to `0` will disable the document colors feature.\n *\n * By default it equals to the {@link module:font/fontcolor~FontColorConfig#columns} value.\n *\n * Examples:\n *\n * \t// 1) Neither document colors nor columns are defined in the configuration.\n * \t// Document colors will equal 5,\n * \t// because the value will be inherited from columns,\n * \t// which has a predefined value of 5.\n * \tconst fontColorConfig = {}\n *\n * \t// 2) Document colors will equal 8, because the value will be inherited from columns.\n * \tconst fontColorConfig = {\n * \t\tcolumns: 8\n * \t}\n *\n * \t// 3) Document colors will equal 24, because it has its own value defined.\n * \tconst fontColorConfig = {\n * \t\tcolumns: 8,\n * \t\tdocumentColors: 24\n * \t}\n *\n * \t// 4) The document colors feature will be disabled.\n * \tconst fontColorConfig = {\n * \t\tcolumns: 8,\n * \t\tdocumentColors: 0\n * \t}\n *\n * @member {Number} module:font/fontcolor~FontColorConfig#documentColors\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontbackgroundcolor/fontbackgroundcolorcommand\n */\nimport FontCommand from '../fontcommand';\nimport { FONT_BACKGROUND_COLOR } from '../utils';\n/**\n * The font background color command. It is used by\n * {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing}\n * to apply the font background color.\n *\n *\t\teditor.execute( 'fontBackgroundColor', { value: 'rgb(250, 20, 20)' } );\n *\n * **Note**: Executing the command with the `null` value removes the attribute from the model.\n *\n * @extends module:font/fontcommand~FontCommand\n */\n\nexport default class FontBackgroundColorCommand extends FontCommand {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor, FONT_BACKGROUND_COLOR);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontbackgroundcolor/fontbackgroundcolorediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontBackgroundColorCommand from './fontbackgroundcolorcommand';\nimport { FONT_BACKGROUND_COLOR, renderDowncastElement, renderUpcastAttribute } from '../utils';\n/**\n * The font background color editing feature.\n *\n * It introduces the {@link module:font/fontbackgroundcolor/fontbackgroundcolorcommand~FontBackgroundColorCommand command} and\n * the `fontBackgroundColor` attribute in the {@link module:engine/model/model~Model model} which renders\n * in the {@link module:engine/view/view view} as a `<span>` element (`<span style=\"background-color: ...\">`),\n * depending on the {@link module:font/fontbackgroundcolor~FontBackgroundColorConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontBackgroundColorEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'FontBackgroundColorEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define(FONT_BACKGROUND_COLOR, {\n      colors: [{\n        color: 'hsl(0, 0%, 0%)',\n        label: 'Black'\n      }, {\n        color: 'hsl(0, 0%, 30%)',\n        label: 'Dim grey'\n      }, {\n        color: 'hsl(0, 0%, 60%)',\n        label: 'Grey'\n      }, {\n        color: 'hsl(0, 0%, 90%)',\n        label: 'Light grey'\n      }, {\n        color: 'hsl(0, 0%, 100%)',\n        label: 'White',\n        hasBorder: true\n      }, {\n        color: 'hsl(0, 75%, 60%)',\n        label: 'Red'\n      }, {\n        color: 'hsl(30, 75%, 60%)',\n        label: 'Orange'\n      }, {\n        color: 'hsl(60, 75%, 60%)',\n        label: 'Yellow'\n      }, {\n        color: 'hsl(90, 75%, 60%)',\n        label: 'Light green'\n      }, {\n        color: 'hsl(120, 75%, 60%)',\n        label: 'Green'\n      }, {\n        color: 'hsl(150, 75%, 60%)',\n        label: 'Aquamarine'\n      }, {\n        color: 'hsl(180, 75%, 60%)',\n        label: 'Turquoise'\n      }, {\n        color: 'hsl(210, 75%, 60%)',\n        label: 'Light blue'\n      }, {\n        color: 'hsl(240, 75%, 60%)',\n        label: 'Blue'\n      }, {\n        color: 'hsl(270, 75%, 60%)',\n        label: 'Purple'\n      }],\n      columns: 5\n    });\n    editor.conversion.for('upcast').elementToAttribute({\n      view: {\n        name: 'span',\n        styles: {\n          'background-color': /[\\s\\S]+/\n        }\n      },\n      model: {\n        key: FONT_BACKGROUND_COLOR,\n        value: renderUpcastAttribute('background-color')\n      }\n    });\n    editor.conversion.for('downcast').attributeToElement({\n      model: FONT_BACKGROUND_COLOR,\n      view: renderDowncastElement('background-color')\n    });\n    editor.commands.add(FONT_BACKGROUND_COLOR, new FontBackgroundColorCommand(editor)); // Allow the font backgroundColor attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: FONT_BACKGROUND_COLOR\n    });\n    editor.model.schema.setAttributeProperties(FONT_BACKGROUND_COLOR, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm8.38 9.262H7.62L10 5.506l2.38 5.756zm.532 1.285L14.34 16h1.426L10.804 4H9.196L4.234 16H5.66l1.428-3.453h5.824z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module font/fontbackgroundcolor/fontbackgroundcolorui\n */\nimport ColorUI from '../ui/colorui';\nimport { FONT_BACKGROUND_COLOR } from '../utils';\nimport fontBackgroundColorIcon from '../../theme/icons/font-background.svg';\n/**\n * The font background color UI plugin. It introduces the `'fontBackgroundColor'` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class FontBackgroundColorUI extends ColorUI {\n    /**\n   * @inheritDoc\n   */\n    constructor(editor) {\n        const t = editor.locale.t;\n        super(editor, {\n            commandName: FONT_BACKGROUND_COLOR,\n            componentName: FONT_BACKGROUND_COLOR,\n            icon: fontBackgroundColorIcon,\n            dropdownLabel: t('bu')\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'FontBackgroundColorUI';\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/fontbackgroundcolor\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontBackgroundColorEditing from './fontbackgroundcolor/fontbackgroundcolorediting';\nimport FontBackgroundColorUI from './fontbackgroundcolor/fontbackgroundcolorui';\n/**\n * The font background color plugin.\n *\n * For a detailed overview, check the {@glink features/font font feature} documentation\n * and the {@glink api/font package page}.\n *\n * This is a \"glue\" plugin which loads\n * the {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing} and\n * {@link module:font/fontbackgroundcolor/fontbackgroundcolorui~FontBackgroundColorUI} features in the editor.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class FontBackgroundColor extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FontBackgroundColorEditing, FontBackgroundColorUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'FontBackgroundColor';\n  }\n\n}\n/**\n * The configuration of the font background color feature.\n * It is introduced by the {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing} feature.\n *\n * Read more in {@link module:font/fontbackgroundcolor~FontBackgroundColorConfig}.\n *\n * @member {module:font/fontbackgroundcolor~FontBackgroundColorConfig} module:core/editor/editorconfig~EditorConfig#fontBackgroundColor\n */\n\n/**\n * The configuration of the font background color feature.\n * This option is used by the {@link module:font/fontbackgroundcolor/fontbackgroundcolorediting~FontBackgroundColorEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n *\t\t\t\tfontBackgroundColor: ... // Font background color feature configuration.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface module:font/fontbackgroundcolor~FontBackgroundColorConfig\n */\n\n/**\n * Available font background colors defined as an array of strings or objects.\n *\n * The default value registers the following colors:\n *\n *\t\tconst fontBackgroundColorConfig = {\n *\t\t\tcolors: [\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 0%)',\n *\t\t\t\t\tlabel: 'Black'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 30%)',\n *\t\t\t\t\tlabel: 'Dim grey'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 60%)',\n *\t\t\t\t\tlabel: 'Grey'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 90%)',\n *\t\t\t\t\tlabel: 'Light grey'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 0%, 100%)',\n *\t\t\t\t\tlabel: 'White',\n *\t\t\t\t\thasBorder: true\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(0, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Red'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(30, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Orange'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(60, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Yellow'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(90, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Light green'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(120, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Green'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(150, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Aquamarine'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(180, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Turquoise'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(210, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Light blue'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(240, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Blue'\n *\t\t\t\t},\n *\t\t\t\t{\n *\t\t\t\t\tcolor: 'hsl(270, 75%, 60%)',\n *\t\t\t\t\tlabel: 'Purple'\n *\t\t\t\t}\n *\t\t\t]\n *\t\t};\n *\n * *Note*: The colors are displayed in the `'fontBackgroundColor'` dropdown.\n *\n * @member {Array.<String|Object>} module:font/fontbackgroundcolor~FontBackgroundColorConfig#colors\n */\n\n/**\n * Represents the number of columns in the font background color dropdown.\n *\n * The default value is:\n *\n *\t\tconst fontBackgroundColorConfig = {\n *\t\t\tcolumns: 5\n *\t\t}\n *\n * @member {Number} module:font/fontbackgroundcolor~FontBackgroundColorConfig#columns\n */\n\n/**\n * Determines the maximum number of available document colors.\n * Setting it to `0` will disable the document colors feature.\n *\n * By default it equals to the {@link module:font/fontbackgroundcolor~FontBackgroundColorConfig#columns} value.\n *\n * Examples:\n *\n * \t// 1) Neither document colors nor columns are defined in the configuration.\n * \t// Document colors will equal 5,\n * \t// because the value will be inherited from columns,\n * \t// which has a predefined value of 5.\n * \tconst fontBackgroundColorConfig = {}\n *\n * \t// 2) Document colors will equal 8, because the value will be inherited from columns.\n * \tconst fontBackgroundColorConfig = {\n * \t\tcolumns: 8\n * \t}\n *\n * \t// 3) Document colors will equal 24, because it has its own value defined.\n * \tconst fontBackgroundColorConfig = {\n * \t\tcolumns: 8,\n * \t\tdocumentColors: 24\n * \t}\n *\n * \t// 4) The document colors feature will be disabled.\n * \tconst fontBackgroundColorConfig = {\n * \t\tcolumns: 8,\n * \t\tdocumentColors: 0\n * \t}\n *\n * @member {Number} module:font/fontbackgroundcolor~FontBackgroundColorConfig#documentColors\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/attributecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * An extension of the base {@link module:core/command~Command} class, which provides utilities for a command\n * that toggles a single attribute on a text or an element.\n *\n * `AttributeCommand` uses {@link module:engine/model/document~Document#selection}\n * to decide which nodes (if any) should be changed, and applies or removes the attribute from them.\n *\n * The command checks the {@link module:engine/model/model~Model#schema} to decide if it can be enabled\n * for the current selection and to which nodes the attribute can be applied.\n *\n * @extends module:core/command~Command\n */\n\nexport default class AttributeCommand extends Command {\n  /**\n   * @param {module:core/editor/editor~Editor} editor\n   * @param {String} attributeKey Attribute that will be set by the command.\n   */\n  constructor(editor, attributeKey) {\n    super(editor);\n    /**\n     * The attribute that will be set by the command.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.attributeKey = attributeKey;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection#hasAttribute selection has the attribute} which means that:\n     *\n     * * If the selection is not empty &ndash; That the attribute is set on the first node in the selection that allows this attribute.\n     * * If the selection is empty &ndash; That the selection has the attribute itself (which means that newly typed\n     * text will have this attribute, too).\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n  }\n  /**\n   * Updates the command's {@link #value} and {@link #isEnabled} based on the current selection.\n   */\n\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.value = this._getValueFromFirstAllowedNode();\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, this.attributeKey);\n  }\n  /**\n   * Executes the command &mdash; applies the attribute to the selection or removes it from the selection.\n   *\n   * If the command is active (`value == true`), it will remove attributes. Otherwise, it will set attributes.\n   *\n   * The execution result differs, depending on the {@link module:engine/model/document~Document#selection}:\n   *\n   * * If the selection is on a range, the command applies the attribute to all nodes in that range\n   * (if they are allowed to have this attribute by the {@link module:engine/model/schema~Schema schema}).\n   * * If the selection is collapsed in a non-empty node, the command applies the attribute to the\n   * {@link module:engine/model/document~Document#selection} itself (note that typed characters copy attributes from the selection).\n   * * If the selection is collapsed in an empty node, the command applies the attribute to the parent node of the selection (note\n   * that the selection inherits all attributes from a node if it is in an empty node).\n   *\n   * @fires execute\n   * @param {Object} [options] Command options.\n   * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply the attribute,\n   * otherwise the command will remove the attribute.\n   * If not set, the command will look for its current value to decide what it should do.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const value = options.forceValue === undefined ? !this.value : options.forceValue;\n    model.change(writer => {\n      if (selection.isCollapsed) {\n        if (value) {\n          writer.setSelectionAttribute(this.attributeKey, true);\n        } else {\n          writer.removeSelectionAttribute(this.attributeKey);\n        }\n      } else {\n        const ranges = model.schema.getValidRanges(selection.getRanges(), this.attributeKey);\n\n        for (const range of ranges) {\n          if (value) {\n            writer.setAttribute(this.attributeKey, value, range);\n          } else {\n            writer.removeAttribute(this.attributeKey, range);\n          }\n        }\n      }\n    });\n  }\n  /**\n   * Checks the attribute value of the first node in the selection that allows the attribute.\n   * For the collapsed selection returns the selection attribute.\n   *\n   * @private\n   * @returns {Boolean} The attribute value.\n   */\n\n\n  _getValueFromFirstAllowedNode() {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const selection = model.document.selection;\n\n    if (selection.isCollapsed) {\n      return selection.hasAttribute(this.attributeKey);\n    }\n\n    for (const range of selection.getRanges()) {\n      for (const item of range.getItems()) {\n        if (schema.checkAttribute(item, this.attributeKey)) {\n          return item.hasAttribute(this.attributeKey);\n        }\n      }\n    }\n\n    return false;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold/boldediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\nconst BOLD = 'bold';\n/**\n * The bold editing feature.\n *\n * It registers the `'bold'` command and introduces the `bold` attribute in the model which renders to the view\n * as a `<strong>` element.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BoldEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BoldEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow bold attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: BOLD\n    });\n    editor.model.schema.setAttributeProperties(BOLD, {\n      isFormatting: true,\n      copyOnEnter: true\n    }); // Build converter from model to view for data and editing pipelines.\n\n    editor.conversion.attributeToElement({\n      model: BOLD,\n      view: 'strong',\n      upcastAlso: ['b', viewElement => {\n        const fontWeight = viewElement.getStyle('font-weight');\n\n        if (!fontWeight) {\n          return null;\n        } // Value of the `font-weight` attribute can be defined as a string or a number.\n\n\n        if (fontWeight == 'bold' || Number(fontWeight) >= 600) {\n          return {\n            name: true,\n            styles: ['font-weight']\n          };\n        }\n      }]\n    }); // Create bold command.\n\n    editor.commands.add(BOLD, new AttributeCommand(editor, BOLD)); // Set the Ctrl+B keystroke.\n\n    editor.keystrokes.set('CTRL+B', BOLD);\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/bold/boldui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport boldIcon from '../../theme/icons/bold.svg';\nconst BOLD = 'bold';\n/**\n * The bold UI feature. It introduces the Bold button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BoldUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(BOLD, locale => {\n            const command = editor.commands.get(BOLD);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('k'),\n                icon: boldIcon,\n                keystroke: 'CTRL+B',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(BOLD));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic/italicediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\nconst ITALIC = 'italic';\n/**\n * The italic editing feature.\n *\n * It registers the `'italic'` command, the <kbd>Ctrl+I</kbd> keystroke and introduces the `italic` attribute in the model\n * which renders to the view as an `<i>` element.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ItalicEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ItalicEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow italic attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: ITALIC\n    });\n    editor.model.schema.setAttributeProperties(ITALIC, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n    editor.conversion.attributeToElement({\n      model: ITALIC,\n      view: 'i',\n      upcastAlso: ['em', {\n        styles: {\n          'font-style': 'italic'\n        }\n      }]\n    }); // Create italic command.\n\n    editor.commands.add(ITALIC, new AttributeCommand(editor, ITALIC)); // Set the Ctrl+I keystroke.\n\n    editor.keystrokes.set('CTRL+I', ITALIC);\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/italic/italicui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport italicIcon from '../../theme/icons/italic.svg';\nconst ITALIC = 'italic';\n/**\n * The italic UI feature. It introduces the Italic button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ItalicUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(ITALIC, locale => {\n            const command = editor.commands.get(ITALIC);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('l'),\n                icon: italicIcon,\n                keystroke: 'CTRL+I',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(ITALIC));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquotecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The block quote command plugin.\n *\n * @extends module:core/command~Command\n */\n\nexport default class BlockQuoteCommand extends Command {\n  /**\n   * Whether the selection starts in a block quote.\n   *\n   * @observable\n   * @readonly\n   * @member {Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.value = this._getValue();\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Executes the command. When the command {@link #value is on}, all top-most block quotes within\n   * the selection will be removed. If it is off, all selected blocks will be wrapped with\n   * a block quote.\n   *\n   * @fires execute\n   * @param {Object} [options] Command options.\n   * @param {Boolean} [options.forceValue] If set, it will force the command behavior. If `true`, the command will apply a block quote,\n   * otherwise the command will remove the block quote. If not set, the command will act basing on its current value.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const selection = model.document.selection;\n    const blocks = Array.from(selection.getSelectedBlocks());\n    const value = options.forceValue === undefined ? !this.value : options.forceValue;\n    model.change(writer => {\n      if (!value) {\n        this._removeQuote(writer, blocks.filter(findQuote));\n      } else {\n        const blocksToQuote = blocks.filter(block => {\n          // Already quoted blocks needs to be considered while quoting too\n          // in order to reuse their <bQ> elements.\n          return findQuote(block) || checkCanBeQuoted(schema, block);\n        });\n\n        this._applyQuote(writer, blocksToQuote);\n      }\n    });\n  }\n  /**\n   * Checks the command's {@link #value}.\n   *\n   * @private\n   * @returns {Boolean} The current value.\n   */\n\n\n  _getValue() {\n    const selection = this.editor.model.document.selection;\n    const firstBlock = first(selection.getSelectedBlocks()); // In the current implementation, the block quote must be an immediate parent of a block element.\n\n    return !!(firstBlock && findQuote(firstBlock));\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    if (this.value) {\n      return true;\n    }\n\n    const selection = this.editor.model.document.selection;\n    const schema = this.editor.model.schema;\n    const firstBlock = first(selection.getSelectedBlocks());\n\n    if (!firstBlock) {\n      return false;\n    }\n\n    return checkCanBeQuoted(schema, firstBlock);\n  }\n  /**\n   * Removes the quote from given blocks.\n   *\n   * If blocks which are supposed to be \"unquoted\" are in the middle of a quote,\n   * start it or end it, then the quote will be split (if needed) and the blocks\n   * will be moved out of it, so other quoted blocks remained quoted.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer\n   * @param {Array.<module:engine/model/element~Element>} blocks\n   */\n\n\n  _removeQuote(writer, blocks) {\n    // Unquote all groups of block. Iterate in the reverse order to not break following ranges.\n    getRangesOfBlockGroups(writer, blocks).reverse().forEach(groupRange => {\n      if (groupRange.start.isAtStart && groupRange.end.isAtEnd) {\n        writer.unwrap(groupRange.start.parent);\n        return;\n      } // The group of blocks are at the beginning of an <bQ> so let's move them left (out of the <bQ>).\n\n\n      if (groupRange.start.isAtStart) {\n        const positionBefore = writer.createPositionBefore(groupRange.start.parent);\n        writer.move(groupRange, positionBefore);\n        return;\n      } // The blocks are in the middle of an <bQ> so we need to split the <bQ> after the last block\n      // so we move the items there.\n\n\n      if (!groupRange.end.isAtEnd) {\n        writer.split(groupRange.end);\n      } // Now we are sure that groupRange.end.isAtEnd is true, so let's move the blocks right.\n\n\n      const positionAfter = writer.createPositionAfter(groupRange.end.parent);\n      writer.move(groupRange, positionAfter);\n    });\n  }\n  /**\n   * Applies the quote to given blocks.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer\n   * @param {Array.<module:engine/model/element~Element>} blocks\n   */\n\n\n  _applyQuote(writer, blocks) {\n    const quotesToMerge = []; // Quote all groups of block. Iterate in the reverse order to not break following ranges.\n\n    getRangesOfBlockGroups(writer, blocks).reverse().forEach(groupRange => {\n      let quote = findQuote(groupRange.start);\n\n      if (!quote) {\n        quote = writer.createElement('blockQuote');\n        writer.wrap(groupRange, quote);\n      }\n\n      quotesToMerge.push(quote);\n    }); // Merge subsequent <bQ> elements. Reverse the order again because this time we want to go through\n    // the <bQ> elements in the source order (due to how merge works – it moves the right element's content\n    // to the first element and removes the right one. Since we may need to merge a couple of subsequent `<bQ>` elements\n    // we want to keep the reference to the first (furthest left) one.\n\n    quotesToMerge.reverse().reduce((currentQuote, nextQuote) => {\n      if (currentQuote.nextSibling == nextQuote) {\n        writer.merge(writer.createPositionAfter(currentQuote));\n        return currentQuote;\n      }\n\n      return nextQuote;\n    });\n  }\n\n}\n\nfunction findQuote(elementOrPosition) {\n  return elementOrPosition.parent.name == 'blockQuote' ? elementOrPosition.parent : null;\n} // Returns a minimal array of ranges containing groups of subsequent blocks.\n//\n// content:         abcdefgh\n// blocks:          [ a, b, d, f, g, h ]\n// output ranges:   [ab]c[d]e[fgh]\n//\n// @param {Array.<module:engine/model/element~Element>} blocks\n// @returns {Array.<module:engine/model/range~Range>}\n\n\nfunction getRangesOfBlockGroups(writer, blocks) {\n  let startPosition;\n  let i = 0;\n  const ranges = [];\n\n  while (i < blocks.length) {\n    const block = blocks[i];\n    const nextBlock = blocks[i + 1];\n\n    if (!startPosition) {\n      startPosition = writer.createPositionBefore(block);\n    }\n\n    if (!nextBlock || block.nextSibling != nextBlock) {\n      ranges.push(writer.createRange(startPosition, writer.createPositionAfter(block)));\n      startPosition = null;\n    }\n\n    i++;\n  }\n\n  return ranges;\n} // Checks whether <bQ> can wrap the block.\n\n\nfunction checkCanBeQuoted(schema, block) {\n  // TMP will be replaced with schema.checkWrap().\n  const isBQAllowed = schema.checkChild(block.parent, 'blockQuote');\n  const isBlockAllowedInBQ = schema.checkChild(['$root', 'blockQuote'], block);\n  return isBQAllowed && isBlockAllowedInBQ;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquoteediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockQuoteCommand from './blockquotecommand';\n/**\n * The block quote editing.\n *\n * Introduces the `'blockQuote'` command and the `'blockQuote'` model element.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BlockQuoteEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'BlockQuoteEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    editor.commands.add('blockQuote', new BlockQuoteCommand(editor));\n    schema.register('blockQuote', {\n      allowWhere: '$block',\n      allowContentOf: '$root'\n    }); // Disallow blockQuote in blockQuote.\n\n    schema.addChildCheck((ctx, childDef) => {\n      if (ctx.endsWith('blockQuote') && childDef.name == 'blockQuote') {\n        return false;\n      }\n    });\n    editor.conversion.elementToElement({\n      model: 'blockQuote',\n      view: 'blockquote'\n    }); // Postfixer which cleans incorrect model states connected with block quotes.\n\n    editor.model.document.registerPostFixer(writer => {\n      const changes = editor.model.document.differ.getChanges();\n\n      for (const entry of changes) {\n        if (entry.type == 'insert') {\n          const element = entry.position.nodeAfter;\n\n          if (!element) {\n            // We are inside a text node.\n            continue;\n          }\n\n          if (element.is('blockQuote') && element.isEmpty) {\n            // Added an empty blockQuote - remove it.\n            writer.remove(element);\n            return true;\n          } else if (element.is('blockQuote') && !schema.checkChild(entry.position, element)) {\n            // Added a blockQuote in incorrect place - most likely inside another blockQuote. Unwrap it\n            // so the content inside is not lost.\n            writer.unwrap(element);\n            return true;\n          } else if (element.is('element')) {\n            // Just added an element. Check its children to see if there are no nested blockQuotes somewhere inside.\n            const range = writer.createRangeIn(element);\n\n            for (const child of range.getItems()) {\n              if (child.is('blockQuote') && !schema.checkChild(writer.createPositionBefore(child), child)) {\n                writer.unwrap(child);\n                return true;\n              }\n            }\n          }\n        } else if (entry.type == 'remove') {\n          const parent = entry.position.parent;\n\n          if (parent.is('blockQuote') && parent.isEmpty) {\n            // Something got removed and now blockQuote is empty. Remove the blockQuote as well.\n            writer.remove(parent);\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const editor = this.editor;\n    const command = editor.commands.get('blockQuote'); // Overwrite default Enter key behavior.\n    // If Enter key is pressed with selection collapsed in empty block inside a quote, break the quote.\n    // This listener is added in afterInit in order to register it after list's feature listener.\n    // We can't use a priority for this, because 'low' is already used by the enter feature, unless\n    // we'd use numeric priority in this case.\n\n    this.listenTo(this.editor.editing.view.document, 'enter', (evt, data) => {\n      const doc = this.editor.model.document;\n      const positionParent = doc.selection.getLastPosition().parent;\n\n      if (doc.selection.isCollapsed && positionParent.isEmpty && command.value) {\n        this.editor.execute('blockQuote');\n        this.editor.editing.view.scrollToTheSelection();\n        data.preventDefault();\n        evt.stop();\n      }\n    });\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module block-quote/blockquoteui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport quoteIcon from '@ckeditor/ckeditor5-core/theme/icons/quote.svg';\nimport '../theme/blockquote.css';\n/**\n * The block quote UI plugin.\n *\n * It introduces the `'blockQuote'` button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class BlockQuoteUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('blockQuote', locale => {\n            const command = editor.commands.get('blockQuote');\n            const buttonView = new ButtonView(locale);\n            buttonView.set({\n                label: t('q'),\n                icon: quoteIcon,\n                tooltip: true,\n                isToggleable: true\n            });\n            // Bind button model to command.\n            buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(buttonView, 'execute', () => editor.execute('blockQuote'));\n            return buttonView;\n        });\n    }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.627 16.5zm5.873-.196zm0-7.001V8h-13v8.5h4.341c.191.54.457 1.044.785 1.5H2a1.5 1.5 0 0 1-1.5-1.5v-13A1.5 1.5 0 0 1 2 2h4.5a1.5 1.5 0 0 1 1.06.44L9.122 4H16a1.5 1.5 0 0 1 1.5 1.5v1A1.5 1.5 0 0 1 19 8v2.531a6.027 6.027 0 0 0-1.5-1.228zM16 6.5v-1H8.5l-2-2H2v13h1V8a1.5 1.5 0 0 1 1.5-1.5H16z\\\"/><path d=\\\"M14.5 19.5a5 5 0 1 1 0-10 5 5 0 0 1 0 10zM15 14v-2h-1v2h-2v1h2v2h1v-2h2v-1h-2z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ckfinder/ckfinderui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport browseFilesIcon from '../theme/icons/browse-files.svg';\n/**\n * The CKFinder UI plugin. It introduces the `'ckfinder'` toolbar button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class CKFinderUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'CKFinderUI';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const componentFactory = editor.ui.componentFactory;\n        const t = editor.t;\n        componentFactory.add('ckfinder', locale => {\n            const command = editor.commands.get('ckfinder');\n            const button = new ButtonView(locale);\n            button.set({\n                label: t('n'),\n                icon: browseFilesIcon,\n                tooltip: true\n            });\n            button.bind('isEnabled').to(command);\n            button.on('execute', () => {\n                editor.execute('ckfinder');\n                editor.editing.view.focus();\n            });\n            return button;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/imageloadobserver\n */\nimport Observer from '@ckeditor/ckeditor5-engine/src/view/observer/observer';\n/**\n * Observes all new images added to the {@link module:engine/view/document~Document},\n * fires {@link module:engine/view/document~Document#event:imageLoaded} and\n * {@link module:engine/view/document~Document#event:layoutChanged} event every time when the new image\n * has been loaded.\n *\n * **Note:** This event is not fired for images that has been added to the document and rendered as `complete` (already loaded).\n *\n * @extends module:engine/view/observer/observer~Observer\n */\n\nexport default class ImageLoadObserver extends Observer {\n  constructor(view) {\n    super(view);\n    /**\n     * List of img DOM elements that are observed by this observer.\n     *\n     * @private\n     * @type {Set.<HTMLElement>}\n     */\n\n    this._observedElements = new Set();\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  observe(domRoot, name) {\n    const viewRoot = this.document.getRoot(name); // When there is a change in one of the view element\n    // we need to check if there are any new `<img/>` elements to observe.\n\n    viewRoot.on('change:children', (evt, node) => {\n      // Wait for the render to be sure that `<img/>` elements are rendered in the DOM root.\n      this.view.once('render', () => this._updateObservedElements(domRoot, node));\n    });\n  }\n  /**\n   * Updates the list of observed `<img/>` elements.\n   *\n   * @private\n   * @param {HTMLElement} domRoot DOM root element.\n   * @param {module:engine/view/element~Element} viewNode View element where children have changed.\n   */\n\n\n  _updateObservedElements(domRoot, viewNode) {\n    if (!viewNode.is('element') || viewNode.is('attributeElement')) {\n      return;\n    }\n\n    const domNode = this.view.domConverter.mapViewToDom(viewNode); // If there is no `domNode` it means that it was removed from the DOM in the meanwhile.\n\n    if (!domNode) {\n      return;\n    }\n\n    for (const domElement of domNode.querySelectorAll('img')) {\n      if (!this._observedElements.has(domElement)) {\n        this.listenTo(domElement, 'load', (evt, domEvt) => this._fireEvents(domEvt));\n\n        this._observedElements.add(domElement);\n      }\n    } // Clean up the list of observed elements from elements that has been removed from the root.\n\n\n    for (const domElement of this._observedElements) {\n      if (!domRoot.contains(domElement)) {\n        this.stopListening(domElement);\n\n        this._observedElements.delete(domElement);\n      }\n    }\n  }\n  /**\n   * Fires {@link module:engine/view/document~Document#event:layoutChanged} and\n   * {@link module:engine/view/document~Document#event:imageLoaded}\n   * if observer {@link #isEnabled is enabled}.\n   *\n   * @protected\n   * @param {Event} domEvent The DOM event.\n   */\n\n\n  _fireEvents(domEvent) {\n    if (this.isEnabled) {\n      this.document.fire('layoutChanged');\n      this.document.fire('imageLoaded', domEvent);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  destroy() {\n    this._observedElements.clear();\n\n    super.destroy();\n  }\n\n}\n/**\n * Fired when an <img/> DOM element has been loaded in the DOM root.\n *\n * Introduced by {@link module:image/image/imageloadobserver~ImageLoadObserver}.\n *\n * @see module:image/image/imageloadobserver~ImageLoadObserver\n * @event module:engine/view/document~Document#event:imageLoaded\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/converters\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * Returns a function that converts the image view representation:\n *\n *\t\t<figure class=\"image\"><img src=\"...\" alt=\"...\"></img></figure>\n *\n * to the model representation:\n *\n *\t\t<image src=\"...\" alt=\"...\"></image>\n *\n * The entire content of the `<figure>` element except the first `<img>` is being converted as children\n * of the `<image>` model element.\n *\n * @returns {Function}\n */\n\nexport function viewFigureToModel() {\n  return dispatcher => {\n    dispatcher.on('element:figure', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    // Do not convert if this is not an \"image figure\".\n    if (!conversionApi.consumable.test(data.viewItem, {\n      name: true,\n      classes: 'image'\n    })) {\n      return;\n    } // Find an image element inside the figure element.\n\n\n    const viewImage = Array.from(data.viewItem.getChildren()).find(viewChild => viewChild.is('img')); // Do not convert if image element is absent, is missing src attribute or was already converted.\n\n    if (!viewImage || !viewImage.hasAttribute('src') || !conversionApi.consumable.test(viewImage, {\n      name: true\n    })) {\n      return;\n    } // Convert view image to model image.\n\n\n    const conversionResult = conversionApi.convertItem(viewImage, data.modelCursor); // Get image element from conversion result.\n\n    const modelImage = first(conversionResult.modelRange.getItems()); // When image wasn't successfully converted then finish conversion.\n\n    if (!modelImage) {\n      return;\n    } // Convert rest of the figure element's children as an image children.\n\n\n    conversionApi.convertChildren(data.viewItem, conversionApi.writer.createPositionAt(modelImage, 0)); // Set image range as conversion result.\n\n    data.modelRange = conversionResult.modelRange; // Continue conversion where image conversion ends.\n\n    data.modelCursor = conversionResult.modelCursor;\n  }\n}\n/**\n * Converter used to convert the `srcset` model image attribute to the `srcset`, `sizes` and `width` attributes in the view.\n *\n * @returns {Function}\n */\n\nexport function srcsetAttributeConverter() {\n  return dispatcher => {\n    dispatcher.on('attribute:srcset:image', converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const writer = conversionApi.writer;\n    const figure = conversionApi.mapper.toViewElement(data.item);\n    const img = figure.getChild(0);\n\n    if (data.attributeNewValue === null) {\n      const srcset = data.attributeOldValue;\n\n      if (srcset.data) {\n        writer.removeAttribute('srcset', img);\n        writer.removeAttribute('sizes', img);\n\n        if (srcset.width) {\n          writer.removeAttribute('width', img);\n        }\n      }\n    } else {\n      const srcset = data.attributeNewValue;\n\n      if (srcset.data) {\n        writer.setAttribute('srcset', srcset.data, img); // Always outputting `100vw`. See https://github.com/ckeditor/ckeditor5-image/issues/2.\n\n        writer.setAttribute('sizes', '100vw', img);\n\n        if (srcset.width) {\n          writer.setAttribute('width', srcset.width, img);\n        }\n      }\n    }\n  }\n}\nexport function modelToViewAttributeConverter(attributeKey) {\n  return dispatcher => {\n    dispatcher.on(`attribute:${attributeKey}:image`, converter);\n  };\n\n  function converter(evt, data, conversionApi) {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const viewWriter = conversionApi.writer;\n    const figure = conversionApi.mapper.toViewElement(data.item);\n    const img = figure.getChild(0);\n\n    if (data.attributeNewValue !== null) {\n      viewWriter.setAttribute(data.attributeKey, data.attributeNewValue, img);\n    } else {\n      viewWriter.removeAttribute(data.attributeKey, img);\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/highlightstack\n */\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Class used to handle correct order of highlights on elements.\n *\n * When different highlights are applied to same element correct order should be preserved:\n *\n * * highlight with highest priority should be applied,\n * * if two highlights have same priority - sort by CSS class provided in\n * {@link module:engine/conversion/downcasthelpers~HighlightDescriptor}.\n *\n * This way, highlight will be applied with the same rules it is applied on texts.\n */\n\nexport default class HighlightStack {\n  /**\n   * Creates class instance.\n   */\n  constructor() {\n    this._stack = [];\n  }\n  /**\n   * Adds highlight descriptor to the stack.\n   *\n   * @fires change:top\n   * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n\n\n  add(descriptor, writer) {\n    const stack = this._stack; // Save top descriptor and insert new one. If top is changed - fire event.\n\n    const oldTop = stack[0];\n\n    this._insertDescriptor(descriptor);\n\n    const newTop = stack[0]; // When new object is at the top and stores different information.\n\n    if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n      this.fire('change:top', {\n        oldDescriptor: oldTop,\n        newDescriptor: newTop,\n        writer\n      });\n    }\n  }\n  /**\n   * Removes highlight descriptor from the stack.\n   *\n   * @fires change:top\n   * @param {String} id Id of the descriptor to remove.\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n\n\n  remove(id, writer) {\n    const stack = this._stack;\n    const oldTop = stack[0];\n\n    this._removeDescriptor(id);\n\n    const newTop = stack[0]; // When new object is at the top and stores different information.\n\n    if (oldTop !== newTop && !compareDescriptors(oldTop, newTop)) {\n      this.fire('change:top', {\n        oldDescriptor: oldTop,\n        newDescriptor: newTop,\n        writer\n      });\n    }\n  }\n  /**\n   * Inserts given descriptor in correct place in the stack. It also takes care about updating information when\n   * descriptor with same id is already present.\n   *\n   * @private\n   * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} descriptor\n   */\n\n\n  _insertDescriptor(descriptor) {\n    const stack = this._stack;\n    const index = stack.findIndex(item => item.id === descriptor.id); // Inserting exact same descriptor - do nothing.\n\n    if (compareDescriptors(descriptor, stack[index])) {\n      return;\n    } // If descriptor with same id but with different information is on the stack - remove it.\n\n\n    if (index > -1) {\n      stack.splice(index, 1);\n    } // Find correct place to insert descriptor in the stack.\n    // It have different information (for example priority) so it must be re-inserted in correct place.\n\n\n    let i = 0;\n\n    while (stack[i] && shouldABeBeforeB(stack[i], descriptor)) {\n      i++;\n    }\n\n    stack.splice(i, 0, descriptor);\n  }\n  /**\n   * Removes descriptor with given id from the stack.\n   *\n   * @private\n   * @param {String} id Descriptor's id.\n   */\n\n\n  _removeDescriptor(id) {\n    const stack = this._stack;\n    const index = stack.findIndex(item => item.id === id); // If descriptor with same id is on the list - remove it.\n\n    if (index > -1) {\n      stack.splice(index, 1);\n    }\n  }\n\n}\nmix(HighlightStack, EmitterMixin); // Compares two descriptors by checking their priority and class list.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean} Returns true if both descriptors are defined and have same priority and classes.\n\nfunction compareDescriptors(a, b) {\n  return a && b && a.priority == b.priority && classesToString(a.classes) == classesToString(b.classes);\n} // Checks whenever first descriptor should be placed in the stack before second one.\n//\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} a\n// @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} b\n// @returns {Boolean}\n\n\nfunction shouldABeBeforeB(a, b) {\n  if (a.priority > b.priority) {\n    return true;\n  } else if (a.priority < b.priority) {\n    return false;\n  } // When priorities are equal and names are different - use classes to compare.\n\n\n  return classesToString(a.classes) > classesToString(b.classes);\n} // Converts CSS classes passed with {@link module:engine/conversion/downcasthelpers~HighlightDescriptor} to\n// sorted string.\n//\n// @param {String|Array<String>} descriptor\n// @returns {String}\n\n\nfunction classesToString(classes) {\n  return Array.isArray(classes) ? classes.sort().join(',') : classes;\n}\n/**\n * Fired when top element on {@link module:widget/highlightstack~HighlightStack} has been changed\n *\n * @event change:top\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.newDescriptor] New highlight\n * descriptor. It will be `undefined` when last descriptor is removed from the stack.\n * @param {module:engine/conversion/downcasthelpers~HighlightDescriptor} [data.oldDescriptor] Old highlight\n * descriptor. It will be `undefined` when first descriptor is added to the stack.\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer View writer that can be used to modify element.\n */","export default \"<svg viewBox=\\\"0 0 16 16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z\\\"/><path fill-opacity=\\\".256\\\" d=\\\"M1 1h14v14H1z\\\"/><g class=\\\"ck-icon__selected-indicator\\\"><path d=\\\"M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z\\\"/><path fill-opacity=\\\".254\\\" d=\\\"M1 1h14v14H1z\\\"/></g></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/utils\n */\nimport HighlightStack from './highlightstack';\nimport IconView from '@ckeditor/ckeditor5-ui/src/icon/iconview';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport dragHandleIcon from '../theme/icons/drag-handle.svg';\n/**\n * CSS class added to each widget element.\n *\n * @const {String}\n */\n\nexport const WIDGET_CLASS_NAME = 'ck-widget';\n/**\n * CSS class added to currently selected widget element.\n *\n * @const {String}\n */\n\nexport const WIDGET_SELECTED_CLASS_NAME = 'ck-widget_selected';\n/**\n * Returns `true` if given {@link module:engine/view/node~Node} is an {@link module:engine/view/element~Element} and a widget.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\n\nexport function isWidget(node) {\n  if (!node.is('element')) {\n    return false;\n  }\n\n  return !!node.getCustomProperty('widget');\n}\n/* eslint-disable max-len */\n\n/**\n * Converts the given {@link module:engine/view/element~Element} to a widget in the following way:\n *\n * * sets the `contenteditable` attribute to `\"true\"`,\n * * adds the `ck-widget` CSS class,\n * * adds a custom {@link module:engine/view/element~Element#getFillerOffset `getFillerOffset()`} method returning `null`,\n * * adds a custom property allowing to recognize widget elements by using {@link ~isWidget `isWidget()`},\n * * implements the {@link ~setHighlightHandling view highlight on widgets}.\n *\n * This function needs to be used in conjunction with\n * {@link module:engine/conversion/downcasthelpers~DowncastHelpers downcast conversion helpers}\n * like {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n * Moreover, typically you will want to use `toWidget()` only for `editingDowncast`, while keeping the `dataDowncast` clean.\n *\n * For example, in order to convert a `<widget>` model element to `<div class=\"widget\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createContainerElement( 'div', { class: 'widget' } );\n *\n *\t\t\t\t\treturn toWidget( div, writer, { label: 'some widget' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'widget',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'widget' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n * See the full source code of the widget (with a nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Object} [options={}]\n * @param {String|Function} [options.label] Element's label provided to the {@link ~setLabel} function. It can be passed as\n * a plain string or a function returning a string. It represents the widget for assistive technologies (like screen readers).\n * @param {Boolean} [options.hasSelectionHandle=false] If `true`, the widget will have a selection handle added.\n * @returns {module:engine/view/element~Element} Returns the same element.\n */\n\n/* eslint-enable max-len */\n\nexport function toWidget(element, writer, options = {}) {\n  // The selection on Edge behaves better when the whole editor contents is in a single contenteditable element.\n  // https://github.com/ckeditor/ckeditor5/issues/1079\n  if (!env.isEdge) {\n    writer.setAttribute('contenteditable', 'false', element);\n  }\n\n  writer.addClass(WIDGET_CLASS_NAME, element);\n  writer.setCustomProperty('widget', true, element);\n  element.getFillerOffset = getFillerOffset;\n\n  if (options.label) {\n    setLabel(element, options.label, writer);\n  }\n\n  if (options.hasSelectionHandle) {\n    addSelectionHandle(element, writer);\n  }\n\n  setHighlightHandling(element, writer, (element, descriptor, writer) => writer.addClass(normalizeToArray(descriptor.classes), element), (element, descriptor, writer) => writer.removeClass(normalizeToArray(descriptor.classes), element));\n  return element; // Normalizes CSS class in descriptor that can be provided in form of an array or a string.\n\n  function normalizeToArray(classes) {\n    return Array.isArray(classes) ? classes : [classes];\n  }\n}\n/**\n * Sets highlight handling methods. Uses {@link module:widget/highlightstack~HighlightStack} to\n * properly determine which highlight descriptor should be used at given time.\n *\n * @param {module:engine/view/element~Element} element\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @param {Function} add\n * @param {Function} remove\n */\n\nexport function setHighlightHandling(element, writer, add, remove) {\n  const stack = new HighlightStack();\n  stack.on('change:top', (evt, data) => {\n    if (data.oldDescriptor) {\n      remove(element, data.oldDescriptor, data.writer);\n    }\n\n    if (data.newDescriptor) {\n      add(element, data.newDescriptor, data.writer);\n    }\n  });\n  writer.setCustomProperty('addHighlight', (element, descriptor, writer) => stack.add(descriptor, writer), element);\n  writer.setCustomProperty('removeHighlight', (element, id, writer) => stack.remove(id, writer), element);\n}\n/**\n * Sets label for given element.\n * It can be passed as a plain string or a function returning a string. Function will be called each time label is retrieved by\n * {@link ~getLabel `getLabel()`}.\n *\n * @param {module:engine/view/element~Element} element\n * @param {String|Function} labelOrCreator\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n */\n\nexport function setLabel(element, labelOrCreator, writer) {\n  writer.setCustomProperty('widgetLabel', labelOrCreator, element);\n}\n/**\n * Returns the label of the provided element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {String}\n */\n\nexport function getLabel(element) {\n  const labelCreator = element.getCustomProperty('widgetLabel');\n\n  if (!labelCreator) {\n    return '';\n  }\n\n  return typeof labelCreator == 'function' ? labelCreator() : labelCreator;\n}\n/**\n * Adds functionality to the provided {@link module:engine/view/editableelement~EditableElement} to act as a widget's editable:\n *\n * * sets the `contenteditable` attribute to `true` when {@link module:engine/view/editableelement~EditableElement#isReadOnly} is `false`,\n * otherwise sets it to `false`,\n * * adds the `ck-editor__editable` and `ck-editor__nested-editable` CSS classes,\n * * adds the `ck-editor__nested-editable_focused` CSS class when the editable is focused and removes it when it is blurred.\n *\n * Similarly to {@link ~toWidget `toWidget()`} this function should be used in `dataDowncast` only and it is usually\n * used together with {@link module:engine/conversion/downcasthelpers~DowncastHelpers#elementToElement `elementToElement()`}.\n *\n * For example, in order to convert a `<nested>` model element to `<div class=\"nested\">` in the view, you can define\n * such converters:\n *\n *\t\teditor.conversion.for( 'editingDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\tconst div = writer.createEditableElement( 'div', { class: 'nested' } );\n *\n *\t\t\t\t\treturn toWidgetEditable( nested, writer );\n *\t\t\t\t}\n *\t\t\t} );\n *\n *\t\teditor.conversion.for( 'dataDowncast' )\n *\t\t\t.elementToElement( {\n *\t\t\t\tmodel: 'nested',\n *\t\t\t\tview: ( modelItem, writer ) => {\n *\t\t\t\t\treturn writer.createContainerElement( 'div', { class: 'nested' } );\n *\t\t\t\t}\n *\t\t\t} );\n *\n * See the full source code of the widget (with nested editable) schema definition and converters in\n * [this sample](https://github.com/ckeditor/ckeditor5-widget/blob/master/tests/manual/widget-with-nestededitable.js).\n *\n * @param {module:engine/view/editableelement~EditableElement} editable\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n * @returns {module:engine/view/editableelement~EditableElement} Returns the same element that was provided in the `editable` parameter\n */\n\nexport function toWidgetEditable(editable, writer) {\n  writer.addClass(['ck-editor__editable', 'ck-editor__nested-editable'], editable); // The selection on Edge behaves better when the whole editor contents is in a single contentedible element.\n  // https://github.com/ckeditor/ckeditor5/issues/1079\n\n  if (!env.isEdge) {\n    // Set initial contenteditable value.\n    writer.setAttribute('contenteditable', editable.isReadOnly ? 'false' : 'true', editable); // Bind the contenteditable property to element#isReadOnly.\n\n    editable.on('change:isReadOnly', (evt, property, is) => {\n      writer.setAttribute('contenteditable', is ? 'false' : 'true', editable);\n    });\n  }\n\n  editable.on('change:isFocused', (evt, property, is) => {\n    if (is) {\n      writer.addClass('ck-editor__nested-editable_focused', editable);\n    } else {\n      writer.removeClass('ck-editor__nested-editable_focused', editable);\n    }\n  });\n  return editable;\n}\n/**\n * Returns a model position which is optimal (in terms of UX) for inserting a widget block.\n *\n * For instance, if a selection is in the middle of a paragraph, the position before this paragraph\n * will be returned so that it is not split. If the selection is at the end of a paragraph,\n * the position after this paragraph will be returned.\n *\n * Note: If the selection is placed in an empty block, that block will be returned. If that position\n * is then passed to {@link module:engine/model/model~Model#insertContent},\n * the block will be fully replaced by the image.\n *\n * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} selection\n * The selection based on which the insertion position should be calculated.\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {module:engine/model/position~Position} The optimal position.\n */\n\nexport function findOptimalInsertionPosition(selection, model) {\n  const selectedElement = selection.getSelectedElement();\n\n  if (selectedElement && model.schema.isBlock(selectedElement)) {\n    return model.createPositionAfter(selectedElement);\n  }\n\n  const firstBlock = selection.getSelectedBlocks().next().value;\n\n  if (firstBlock) {\n    // If inserting into an empty block – return position in that block. It will get\n    // replaced with the image by insertContent(). #42.\n    if (firstBlock.isEmpty) {\n      return model.createPositionAt(firstBlock, 0);\n    }\n\n    const positionAfter = model.createPositionAfter(firstBlock); // If selection is at the end of the block - return position after the block.\n\n    if (selection.focus.isTouching(positionAfter)) {\n      return positionAfter;\n    } // Otherwise return position before the block.\n\n\n    return model.createPositionBefore(firstBlock);\n  }\n\n  return selection.focus;\n}\n/**\n * A util to be used in order to map view positions to correct model positions when implementing a widget\n * which renders non-empty view element for an empty model element.\n *\n * For example:\n *\n *\t\t// Model:\n *\t\t<placeholder type=\"name\"></placeholder>\n *\n *\t\t// View:\n *\t\t<span class=\"placeholder\">name</span>\n *\n * In such case, view positions inside `<span>` cannot be correct mapped to the model (because the model element is empty).\n * To handle mapping positions inside `<span class=\"placeholder\">` to the model use this util as follows:\n *\n *\t\teditor.editing.mapper.on(\n *\t\t\t'viewToModelPosition',\n *\t\t\tviewToModelPositionOutsideModelElement( model, viewElement => viewElement.hasClass( 'placeholder' ) )\n *\t\t);\n *\n * The callback will try to map the view offset of selection to an expected model position.\n *\n * 1. When the position is at the end (or in the middle) of the inline widget:\n *\n *\t\t// View:\n *\t\t<p>foo <span class=\"placeholder\">name|</span> bar</p>\n *\n *\t\t// Model:\n *\t\t<paragraph>foo <placeholder type=\"name\"></placeholder>| bar</paragraph>\n *\n * 2. When the position is at the beginning of the inline widget:\n *\n *\t\t// View:\n *\t\t<p>foo <span class=\"placeholder\">|name</span> bar</p>\n *\n *\t\t// Model:\n *\t\t<paragraph>foo |<placeholder type=\"name\"></placeholder> bar</paragraph>\n *\n * @param {module:engine/model/model~Model} model Model instance on which the callback operates.\n * @param {Function} viewElementMatcher Function that is passed a view element and should return `true` if the custom mapping\n * should be applied to the given view element.\n * @return {Function}\n */\n\nexport function viewToModelPositionOutsideModelElement(model, viewElementMatcher) {\n  return (evt, data) => {\n    const {\n      mapper,\n      viewPosition\n    } = data;\n    const viewParent = mapper.findMappedViewAncestor(viewPosition);\n\n    if (!viewElementMatcher(viewParent)) {\n      return;\n    }\n\n    const modelParent = mapper.toModelElement(viewParent);\n    data.modelPosition = model.createPositionAt(modelParent, viewPosition.isAtStart ? 'before' : 'after');\n  };\n} // Default filler offset function applied to all widget elements.\n//\n// @returns {null}\n\nfunction getFillerOffset() {\n  return null;\n} // Adds a drag handle to the widget.\n//\n// @param {module:engine/view/containerelement~ContainerElement}\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction addSelectionHandle(widgetElement, writer) {\n  const selectionHandle = writer.createUIElement('div', {\n    class: 'ck ck-widget__selection-handle'\n  }, function (domDocument) {\n    const domElement = this.toDomElement(domDocument); // Use the IconView from the ui library.\n\n    const icon = new IconView();\n    icon.set('content', dragHandleIcon); // Render the icon view right away to append its #element to the selectionHandle DOM element.\n\n    icon.render();\n    domElement.appendChild(icon.element);\n    return domElement;\n  }); // Append the selection handle into the widget wrapper.\n\n  writer.insert(writer.createPositionAt(widgetElement, 0), selectionHandle);\n  writer.addClass(['ck-widget_with-selection-handle'], widgetElement);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/utils\n */\nimport { findOptimalInsertionPosition, isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\n/**\n * Converts a given {@link module:engine/view/element~Element} to an image widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the image widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the image `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\n\nexport function toImageWidget(viewElement, writer, label) {\n  writer.setCustomProperty('image', true, viewElement);\n  return toWidget(viewElement, writer, {\n    label: labelCreator\n  });\n\n  function labelCreator() {\n    const imgElement = viewElement.getChild(0);\n    const altText = imgElement.getAttribute('alt');\n    return altText ? `${altText} ${label}` : label;\n  }\n}\n/**\n * Checks if a given view element is an image widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isImageWidget(viewElement) {\n  return !!viewElement.getCustomProperty('image') && isWidget(viewElement);\n}\n/**\n * Returns an image widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getSelectedImageWidget(selection) {\n  const viewElement = selection.getSelectedElement();\n\n  if (viewElement && isImageWidget(viewElement)) {\n    return viewElement;\n  }\n\n  return null;\n}\n/**\n * Checks if the provided model element is an `image`.\n *\n * @param {module:engine/model/element~Element} modelElement\n * @returns {Boolean}\n */\n\nexport function isImage(modelElement) {\n  return !!modelElement && modelElement.is('image');\n}\n/**\n * Handles inserting single file. This method unifies image insertion using {@link module:widget/utils~findOptimalInsertionPosition} method.\n *\n *\t\tmodel.change( writer => {\n *\t\t\tinsertImage( writer, model, { src: 'path/to/image.jpg' } );\n *\t\t} );\n *\n * @param {module:engine/model/writer~Writer} writer\n * @param {module:engine/model/model~Model} model\n * @param {Object} [attributes={}] Attributes of inserted image\n */\n\nexport function insertImage(writer, model, attributes = {}) {\n  const imageElement = writer.createElement('image', attributes);\n  const insertAtSelection = findOptimalInsertionPosition(model.document.selection, model);\n  model.insertContent(imageElement, insertAtSelection); // Inserting an image might've failed due to schema regulations.\n\n  if (imageElement.parent) {\n    writer.setSelection(imageElement, 'on');\n  }\n}\n/**\n * Checks if image can be inserted at current model selection.\n *\n * @param {module:engine/model/model~Model} model\n * @returns {Boolean}\n */\n\nexport function isImageAllowed(model) {\n  const schema = model.schema;\n  const selection = model.document.selection;\n  return isImageAllowedInParent(selection, schema, model) && !checkSelectionOnObject(selection, schema) && isInOtherImage(selection);\n} // Checks if image is allowed by schema in optimal insertion parent.\n//\n// @returns {Boolean}\n\nfunction isImageAllowedInParent(selection, schema, model) {\n  const parent = getInsertImageParent(selection, model);\n  return schema.checkChild(parent, 'image');\n} // Check if selection is on object.\n//\n// @returns {Boolean}\n\n\nfunction checkSelectionOnObject(selection, schema) {\n  const selectedElement = selection.getSelectedElement();\n  return selectedElement && schema.isObject(selectedElement);\n} // Checks if selection is placed in other image (ie. in caption).\n\n\nfunction isInOtherImage(selection) {\n  return [...selection.focus.getAncestors()].every(ancestor => !ancestor.is('image'));\n} // Returns a node that will be used to insert image with `model.insertContent` to check if image can be placed there.\n\n\nfunction getInsertImageParent(selection, model) {\n  const insertAt = findOptimalInsertionPosition(selection, model);\n  const parent = insertAt.parent;\n\n  if (parent.isEmpty && !parent.is('$root')) {\n    return parent.parent;\n  }\n\n  return parent;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from './utils';\n/**\n * @module image/image/imageinsertcommand\n */\n\n/**\n * Insert image command.\n *\n * The command is registered by the {@link module:image/image/imageediting~ImageEditing} plugin as `'imageInsert'`.\n *\n * In order to insert an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and specify the image source:\n *\n *\t\teditor.execute( 'imageInsert', { source: 'http://url.to.the/image' } );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageInsert', {\n *\t\t\tsource:  [\n *\t\t\t\t'path/to/image.jpg',\n *\t\t\t\t'path/to/other-image.jpg'\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageInsertCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.isEnabled = isImageAllowed(this.editor.model);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options Options for the executed command.\n   * @param {String|Array.<String>} options.source The image source or an array of image sources to insert.\n   */\n\n\n  execute(options) {\n    const model = this.editor.model;\n    model.change(writer => {\n      const sources = Array.isArray(options.source) ? options.source : [options.source];\n\n      for (const src of sources) {\n        insertImage(writer, model, {\n          src\n        });\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/image/imageediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageLoadObserver from './imageloadobserver';\nimport {\n    viewFigureToModel,\n    modelToViewAttributeConverter,\n    srcsetAttributeConverter\n} from './converters';\nimport { toImageWidget } from './utils';\nimport ImageInsertCommand from './imageinsertcommand';\n/**\n * The image engine plugin.\n *\n * It registers:\n *\n * * `<image>` as a block element in the document schema, and allows `alt`, `src` and `srcset` attributes.\n * * converters for editing and data pipelines.\n * * `'imageInsert'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageEditing extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'ImageEditing';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const schema = editor.model.schema;\n        const t = editor.t;\n        const conversion = editor.conversion;\n        // See https://github.com/ckeditor/ckeditor5-image/issues/142.\n        editor.editing.view.addObserver(ImageLoadObserver);\n        // Configure schema.\n        schema.register('image', {\n            isObject: true,\n            isBlock: true,\n            allowWhere: '$block',\n            allowAttributes: [\n                'alt',\n                'src',\n                'srcset'\n            ]\n        });\n        conversion.for('dataDowncast').elementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => createImageViewElement(viewWriter)\n        });\n        conversion.for('editingDowncast').elementToElement({\n            model: 'image',\n            view: (modelElement, viewWriter) => toImageWidget(createImageViewElement(viewWriter), viewWriter, t('t'))\n        });\n        conversion.for('downcast').add(modelToViewAttributeConverter('src')).add(modelToViewAttributeConverter('alt')).add(srcsetAttributeConverter());\n        conversion.for('upcast').elementToElement({\n            view: {\n                name: 'img',\n                attributes: { src: true }\n            },\n            model: (viewImage, modelWriter) => modelWriter.createElement('image', { src: viewImage.getAttribute('src') })\n        }).attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'alt'\n            },\n            model: 'alt'\n        }).attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'srcset'\n            },\n            model: {\n                key: 'srcset',\n                value: viewImage => {\n                    const value = { data: viewImage.getAttribute('srcset') };\n                    if (viewImage.hasAttribute('width')) {\n                        value.width = viewImage.getAttribute('width');\n                    }\n                    return value;\n                }\n            }\n        }).add(viewFigureToModel());\n        // Register imageUpload command.\n        editor.commands.add('imageInsert', new ImageInsertCommand(editor));\n    }\n}\n// Creates a view element representing the image.\n//\n//\t\t<figure class=\"image\"><img></img></figure>\n//\n// Note that `alt` and `src` attributes are converted separately, so they are not included.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/containerelement~ContainerElement}\nexport function createImageViewElement(writer) {\n    const emptyElement = writer.createEmptyElement('img');\n    const figure = writer.createContainerElement('figure', { class: 'image' });\n    writer.insert(writer.createPositionAt(figure, 0), emptyElement);\n    return figure;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/findlinkrange\n */\n\n/**\n * Returns a range containing the entire link in which the given `position` is placed.\n *\n * It can be used e.g. to get the entire range on which the `linkHref` attribute needs to be changed when having a\n * selection inside a link.\n *\n * @param {module:engine/model/position~Position} position The start position.\n * @param {String} value The `linkHref` attribute value.\n * @returns {module:engine/model/range~Range} The link range.\n */\nexport default function findLinkRange(position, value, model) {\n  return model.createRange(_findBound(position, value, true, model), _findBound(position, value, false, model));\n} // Walks forward or backward (depends on the `lookBack` flag), node by node, as long as they have the same `linkHref` attribute value\n// and returns a position just before or after (depends on the `lookBack` flag) the last matched node.\n//\n// @param {module:engine/model/position~Position} position The start position.\n// @param {String} value The `linkHref` attribute value.\n// @param {Boolean} lookBack Whether the walk direction is forward (`false`) or backward (`true`).\n// @returns {module:engine/model/position~Position} The position just before the last matched node.\n\nfunction _findBound(position, value, lookBack, model) {\n  // Get node before or after position (depends on `lookBack` flag).\n  // When position is inside text node then start searching from text node.\n  let node = position.textNode || (lookBack ? position.nodeBefore : position.nodeAfter);\n  let lastNode = null;\n\n  while (node && node.getAttribute('linkHref') == value) {\n    lastNode = node;\n    node = lookBack ? node.previousSibling : node.nextSibling;\n  }\n\n  return lastNode ? model.createPositionAt(lastNode, lookBack ? 'before' : 'after') : position;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\nimport toMap from '@ckeditor/ckeditor5-utils/src/tomap';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\n/**\n * The link command. It is used by the {@link module:link/link~Link link feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class LinkCommand extends Command {\n  /**\n   * The value of the `'linkHref'` attribute if the start of the selection is located in a node with this attribute.\n   *\n   * @observable\n   * @readonly\n   * @member {Object|undefined} #value\n   */\n  constructor(editor) {\n    super(editor);\n    /**\n     * A collection of {@link module:link/utils~ManualDecorator manual decorators}\n     * corresponding to the {@link module:link/link~LinkConfig#decorators decorator configuration}.\n     *\n     * You can consider it a model with states of manual decorators added to the currently selected link.\n     *\n     * @readonly\n     * @type {module:utils/collection~Collection}\n     */\n\n    this.manualDecorators = new Collection();\n  }\n  /**\n   * Synchronizes the state of {@link #manualDecorators} with the currently present elements in the model.\n   */\n\n\n  restoreManualDecoratorStates() {\n    for (const manualDecorator of this.manualDecorators) {\n      manualDecorator.value = this._getDecoratorStateFromModel(manualDecorator.id);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    this.value = doc.selection.getAttribute('linkHref');\n\n    for (const manualDecorator of this.manualDecorators) {\n      manualDecorator.value = this._getDecoratorStateFromModel(manualDecorator.id);\n    }\n\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'linkHref');\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is non-collapsed, the `linkHref` attribute will be applied to nodes inside the selection, but only to\n   * those nodes where the `linkHref` attribute is allowed (disallowed nodes will be omitted).\n   *\n   * When the selection is collapsed and is not inside the text with the `linkHref` attribute, a\n   * new {@link module:engine/model/text~Text text node} with the `linkHref` attribute will be inserted in place of the caret, but\n   * only if such element is allowed in this place. The `_data` of the inserted text will equal the `href` parameter.\n   * The selection will be updated to wrap the just inserted text node.\n   *\n   * When the selection is collapsed and inside the text with the `linkHref` attribute, the attribute value will be updated.\n   *\n   * # Decorators and model attribute management\n   *\n   * There is an optional argument to this command that applies or removes model\n   * {@glink framework/guides/architecture/editing-engine#text-attributes text attributes} brought by\n   * {@link module:link/utils~ManualDecorator manual link decorators}.\n   *\n   * Text attribute names in the model correspond to the entries in the {@link module:link/link~LinkConfig#decorators configuration}.\n   * For every decorator configured, a model text attribute exists with the \"link\" prefix. For example, a `'linkMyDecorator'` attribute\n   * corresponds to `'myDecorator'` in the configuration.\n   *\n   * To learn more about link decorators, check out the {@link module:link/link~LinkConfig#decorators `config.link.decorators`}\n   * documentation.\n   *\n   * Here is how to manage decorator attributes with the link command:\n   *\n   *\t\tconst linkCommand = editor.commands.get( 'link' );\n   *\n   *\t\t// Adding a new decorator attribute.\n   *\t\tlinkCommand.execute( 'http://example.com', {\n   *\t\t\tlinkIsExternal: true\n   *\t\t} );\n   *\n   *\t\t// Removing a decorator attribute from the selection.\n   *\t\tlinkCommand.execute( 'http://example.com', {\n   *\t\t\tlinkIsExternal: false\n   *\t\t} );\n   *\n   *\t\t// Adding multiple decorator attributes at the same time.\n   *\t\tlinkCommand.execute( 'http://example.com', {\n   *\t\t\tlinkIsExternal: true,\n   *\t\t\tlinkIsDownloadable: true,\n   *\t\t} );\n   *\n   *\t\t// Removing and adding decorator attributes at the same time.\n   *\t\tlinkCommand.execute( 'http://example.com', {\n   *\t\t\tlinkIsExternal: false,\n   *\t\t\tlinkFoo: true,\n   *\t\t\tlinkIsDownloadable: false,\n   *\t\t} );\n   *\n   * **Note**: If the decorator attribute name is not specified, its state remains untouched.\n   *\n   * **Note**: {@link module:link/unlinkcommand~UnlinkCommand#execute `UnlinkCommand#execute()`} removes all\n   * decorator attributes.\n   *\n   * @fires execute\n   * @param {String} href Link destination.\n   * @param {Object} [manualDecoratorIds={}] The information about manual decorator attributes to be applied or removed upon execution.\n   */\n\n\n  execute(href, manualDecoratorIds = {}) {\n    const model = this.editor.model;\n    const selection = model.document.selection; // Stores information about manual decorators to turn them on/off when command is applied.\n\n    const truthyManualDecorators = [];\n    const falsyManualDecorators = [];\n\n    for (const name in manualDecoratorIds) {\n      if (manualDecoratorIds[name]) {\n        truthyManualDecorators.push(name);\n      } else {\n        falsyManualDecorators.push(name);\n      }\n    }\n\n    model.change(writer => {\n      // If selection is collapsed then update selected link or insert new one at the place of caret.\n      if (selection.isCollapsed) {\n        const position = selection.getFirstPosition(); // When selection is inside text with `linkHref` attribute.\n\n        if (selection.hasAttribute('linkHref')) {\n          // Then update `linkHref` value.\n          const linkRange = findLinkRange(position, selection.getAttribute('linkHref'), model);\n          writer.setAttribute('linkHref', href, linkRange);\n          truthyManualDecorators.forEach(item => {\n            writer.setAttribute(item, true, linkRange);\n          });\n          falsyManualDecorators.forEach(item => {\n            writer.removeAttribute(item, linkRange);\n          }); // Create new range wrapping changed link.\n\n          writer.setSelection(linkRange);\n        } // If not then insert text node with `linkHref` attribute in place of caret.\n        // However, since selection in collapsed, attribute value will be used as data for text node.\n        // So, if `href` is empty, do not create text node.\n        else if (href !== '') {\n            const attributes = toMap(selection.getAttributes());\n            attributes.set('linkHref', href);\n            truthyManualDecorators.forEach(item => {\n              attributes.set(item, true);\n            });\n            const node = writer.createText(href, attributes);\n            model.insertContent(node, position); // Create new range wrapping created node.\n\n            writer.setSelection(writer.createRangeOn(node));\n          }\n      } else {\n        // If selection has non-collapsed ranges, we change attribute on nodes inside those ranges\n        // omitting nodes where `linkHref` attribute is disallowed.\n        const ranges = model.schema.getValidRanges(selection.getRanges(), 'linkHref');\n\n        for (const range of ranges) {\n          writer.setAttribute('linkHref', href, range);\n          truthyManualDecorators.forEach(item => {\n            writer.setAttribute(item, true, range);\n          });\n          falsyManualDecorators.forEach(item => {\n            writer.removeAttribute(item, range);\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Provides information whether a decorator with a given name is present in the currently processed selection.\n   *\n   * @private\n   * @param {String} decoratorName The name of the manual decorator used in the model\n   * @returns {Boolean} The information whether a given decorator is currently present in the selection.\n   */\n\n\n  _getDecoratorStateFromModel(decoratorName) {\n    const doc = this.editor.model.document;\n    return doc.selection.getAttribute(decoratorName) || false;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/unlinkcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport findLinkRange from './findlinkrange';\n/**\n * The unlink command. It is used by the {@link module:link/link~Link link plugin}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class UnlinkCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.isEnabled = this.editor.model.document.selection.hasAttribute('linkHref');\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is collapsed, it removes the `linkHref` attribute from each node with the same `linkHref` attribute value.\n   * When the selection is non-collapsed, it removes the `linkHref` attribute from each node in selected ranges.\n   *\n   * # Decorators\n   *\n   * If {@link module:link/link~LinkConfig#decorators `config.link.decorators`} is specified,\n   * all configured decorators are removed together with the `linkHref` attribute.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const editor = this.editor;\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const linkCommand = editor.commands.get('link');\n    model.change(writer => {\n      // Get ranges to unlink.\n      const rangesToUnlink = selection.isCollapsed ? [findLinkRange(selection.getFirstPosition(), selection.getAttribute('linkHref'), model)] : selection.getRanges(); // Remove `linkHref` attribute from specified ranges.\n\n      for (const range of rangesToUnlink) {\n        writer.removeAttribute('linkHref', range); // If there are registered custom attributes, then remove them during unlink.\n\n        if (linkCommand) {\n          for (const manualDecorator of linkCommand.manualDecorators) {\n            writer.removeAttribute(manualDecorator.id, range);\n          }\n        }\n      }\n    });\n  }\n\n}","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return (!start && end >= length) ? array : baseSlice(array, start, end);\n}\n\nexport default castSlice;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsZWJ = '\\\\u200d';\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\nexport default hasUnicode;\n","/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\nexport default asciiToArray;\n","/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n    rsComboMarksRange = '\\\\u0300-\\\\u036f',\n    reComboHalfMarksRange = '\\\\ufe20-\\\\ufe2f',\n    rsComboSymbolsRange = '\\\\u20d0-\\\\u20ff',\n    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,\n    rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/** Used to compose unicode capture groups. */\nvar rsAstral = '[' + rsAstralRange + ']',\n    rsCombo = '[' + rsComboRange + ']',\n    rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n    rsNonAstral = '[^' + rsAstralRange + ']',\n    rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n    rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n    rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar reOptMod = rsModifier + '?',\n    rsOptVar = '[' + rsVarRange + ']?',\n    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n    rsSeq = rsOptVar + reOptMod + rsOptJoin,\n    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\nexport default unicodeToArray;\n","import asciiToArray from './_asciiToArray.js';\nimport hasUnicode from './_hasUnicode.js';\nimport unicodeToArray from './_unicodeToArray.js';\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string)\n    ? unicodeToArray(string)\n    : asciiToArray(string);\n}\n\nexport default stringToArray;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nexport default arrayMap;\n","import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n","import baseToString from './_baseToString.js';\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nexport default toString;\n","import castSlice from './_castSlice.js';\nimport hasUnicode from './_hasUnicode.js';\nimport stringToArray from './_stringToArray.js';\nimport toString from './toString.js';\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function(string) {\n    string = toString(string);\n\n    var strSymbols = hasUnicode(string)\n      ? stringToArray(string)\n      : undefined;\n\n    var chr = strSymbols\n      ? strSymbols[0]\n      : string.charAt(0);\n\n    var trailing = strSymbols\n      ? castSlice(strSymbols, 1).join('')\n      : string.slice(1);\n\n    return chr[methodName]() + trailing;\n  };\n}\n\nexport default createCaseFirst;\n","import createCaseFirst from './_createCaseFirst.js';\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\nexport default upperFirst;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/utils\n */\nimport { upperFirst } from 'lodash-es';\nconst ATTRIBUTE_WHITESPACES = /[\\u0000-\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u2029\\u205f\\u3000]/g;\n// eslint-disable-line no-control-regex\nconst SAFE_URL = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i;\n/**\n * Returns `true` if a given view node is the link element.\n *\n * @param {module:engine/view/node~Node} node\n * @returns {Boolean}\n */\nexport function isLinkElement(node) {\n    return node.is('attributeElement') && !!node.getCustomProperty('link');\n}\n/**\n * Creates link {@link module:engine/view/attributeelement~AttributeElement} with the provided `href` attribute.\n *\n * @param {String} href\n * @returns {module:engine/view/attributeelement~AttributeElement}\n */\nexport function createLinkElement(href, writer) {\n    // Priority 5 - https://github.com/ckeditor/ckeditor5-link/issues/121.\n    const linkElement = writer.createAttributeElement('a', { href }, { priority: 5 });\n    writer.setCustomProperty('link', true, linkElement);\n    return linkElement;\n}\n/**\n * Returns a safe URL based on a given value.\n *\n * A URL is considered safe if it is safe for the user (does not contain any malicious code).\n *\n * If a URL is considered unsafe, a simple `\"#\"` is returned.\n *\n * @protected\n * @param {*} url\n * @returns {String} Safe URL.\n */\nexport function ensureSafeUrl(url) {\n    url = String(url);\n    return isSafeUrl(url) ? url : '#';\n}\n// Checks whether the given URL is safe for the user (does not contain any malicious code).\n//\n// @param {String} url URL to check.\nfunction isSafeUrl(url) {\n    const normalizedUrl = url.replace(ATTRIBUTE_WHITESPACES, '');\n    return normalizedUrl.match(SAFE_URL);\n}\n/**\n * Returns the {@link module:link/link~LinkConfig#decorators `config.link.decorators`} configuration processed\n * to respect the locale of the editor, i.e. to display the {@link module:link/link~LinkDecoratorManualDefinition label}\n * in the correct language.\n *\n * **Note**: Only the few most commonly used labels are translated automatically. Other labels should be manually\n * translated in the {@link module:link/link~LinkConfig#decorators `config.link.decorators`} configuration.\n *\n * @param {module:utils/locale~Locale#t} t shorthand for {@link module:utils/locale~Locale#t Locale#t}\n * @param {Array.<module:link/link~LinkDecoratorDefinition>} The decorator reference\n * where the label values should be localized.\n * @returns {Array.<module:link/link~LinkDecoratorDefinition>}\n */\nexport function getLocalizedDecorators(t, decorators) {\n    const localizedDecoratorsLabels = {\n        'Open in a new tab': t('dc'),\n        'Downloadable': t('dd')\n    };\n    decorators.forEach(decorator => {\n        if (decorator.label && localizedDecoratorsLabels[decorator.label]) {\n            decorator.label = localizedDecoratorsLabels[decorator.label];\n        }\n        return decorator;\n    });\n    return decorators;\n}\n/**\n * Converts an object with defined decorators to a normalized array of decorators. The `id` key is added for each decorator and\n * is used as the attribute's name in the model.\n *\n * @param {Object.<String, module:link/link~LinkDecoratorDefinition>} decorators\n * @returns {Array.<module:link/link~LinkDecoratorDefinition>}\n */\nexport function normalizeDecorators(decorators) {\n    const retArray = [];\n    if (decorators) {\n        for (const [key, value] of Object.entries(decorators)) {\n            const decorator = Object.assign({}, value, { id: `link${ upperFirst(key) }` });\n            retArray.push(decorator);\n        }\n    }\n    return retArray;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module link/utils\n */\n\n/**\n * Helper class that ties together all {@link module:link/link~LinkDecoratorAutomaticDefinition} and provides\n * a {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement downcast dispatcher} for them.\n */\nexport default class AutomaticDecorators {\n  constructor() {\n    /**\n     * Stores the definition of {@link module:link/link~LinkDecoratorAutomaticDefinition automatic decorators}.\n     * This data is used as a source for a downcast dispatcher to create a proper conversion to output data.\n     *\n     * @private\n     * @type {Set}\n     */\n    this._definitions = new Set();\n  }\n  /**\n   * Gives information about the number of decorators stored in the {@link module:link/utils~AutomaticDecorators} instance.\n   *\n   * @readonly\n   * @protected\n   * @type {Number}\n   */\n\n\n  get length() {\n    return this._definitions.size;\n  }\n  /**\n   * Adds automatic decorator objects or an array with them to be used during downcasting.\n   *\n   * @param {module:link/link~LinkDecoratorAutomaticDefinition|Array.<module:link/link~LinkDecoratorAutomaticDefinition>} item\n   * A configuration object of automatic rules for decorating links. It might also be an array of such objects.\n   */\n\n\n  add(item) {\n    if (Array.isArray(item)) {\n      item.forEach(item => this._definitions.add(item));\n    } else {\n      this._definitions.add(item);\n    }\n  }\n  /**\n   * Provides the conversion helper used in the {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add} method.\n   *\n   * @returns {Function} A dispatcher function used as conversion helper\n   * in {@link module:engine/conversion/downcasthelpers~DowncastHelpers#add}.\n   */\n\n\n  getDispatcher() {\n    return dispatcher => {\n      dispatcher.on('attribute:linkHref', (evt, data, conversionApi) => {\n        // There is only test as this behavior decorates links and\n        // it is run before dispatcher which actually consumes this node.\n        // This allows on writing own dispatcher with highest priority,\n        // which blocks both native converter and this additional decoration.\n        if (!conversionApi.consumable.test(data.item, 'attribute:linkHref')) {\n          return;\n        }\n\n        const viewWriter = conversionApi.writer;\n        const viewSelection = viewWriter.document.selection;\n\n        for (const item of this._definitions) {\n          const viewElement = viewWriter.createAttributeElement('a', item.attributes, {\n            priority: 5\n          });\n          viewWriter.setCustomProperty('link', true, viewElement);\n\n          if (item.callback(data.attributeNewValue)) {\n            if (data.item.is('selection')) {\n              viewWriter.wrap(viewSelection.getFirstRange(), viewElement);\n            } else {\n              viewWriter.wrap(conversionApi.mapper.toViewRange(data.range), viewElement);\n            }\n          } else {\n            viewWriter.unwrap(conversionApi.mapper.toViewRange(data.range), viewElement);\n          }\n        }\n      }, {\n        priority: 'high'\n      });\n    };\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/utils\n */\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Helper class that stores manual decorators with observable {@link module:link/utils~ManualDecorator#value}\n * to support integration with the UI state. An instance of this class is a model with the state of individual manual decorators.\n * These decorators are kept as collections in {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class ManualDecorator {\n  /**\n   * Creates a new instance of {@link module:link/utils~ManualDecorator}.\n   *\n   * @param {Object} config\n   * @param {String} config.id The name of the attribute used in the model that represents a given manual decorator.\n   * For example: `'linkIsExternal'`.\n   * @param {String} config.label The label used in the user interface to toggle the manual decorator.\n   * @param {Object} config.attributes A set of attributes added to output data when the decorator is active for a specific link.\n   * Attributes should keep the format of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n   */\n  constructor({\n    id,\n    label,\n    attributes\n  }) {\n    /**\n     * An ID of a manual decorator which is the name of the attribute in the model, for example: 'linkManualDecorator0'.\n     *\n     * @type {String}\n     */\n    this.id = id;\n    /**\n     * The value of the current manual decorator. It reflects its state from the UI.\n     *\n     * @observable\n     * @member {Boolean} module:link/utils~ManualDecorator#value\n     */\n\n    this.set('value');\n    /**\n     * The label used in the user interface to toggle the manual decorator.\n     *\n     * @type {String}\n     */\n\n    this.label = label;\n    /**\n     * A set of attributes added to downcasted data when the decorator is activated for a specific link.\n     * Attributes should be added in a form of attributes defined in {@link module:engine/view/elementdefinition~ElementDefinition}.\n     *\n     * @type {Object}\n     */\n\n    this.attributes = attributes;\n  }\n\n}\nmix(ManualDecorator, ObservableMixin);","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/utils/bindtwostepcarettoattribute\n */\nimport { keyCodes } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\n/**\n * This helper enables the two-step caret (phantom) movement behavior for the given {@link module:engine/model/model~Model}\n * attribute on arrow right (<kbd>→</kbd>) and left (<kbd>←</kbd>) key press.\n *\n * Thanks to this (phantom) caret movement the user is able to type before/after as well as at the\n * beginning/end of an attribute.\n *\n * **Note:** This helper support right–to–left (Arabic, Hebrew, etc.) content by mirroring its behavior\n * but for the sake of simplicity examples showcase only left–to–right use–cases.\n *\n * # Forward movement\n *\n * ## \"Entering\" an attribute:\n *\n * When this behavior is enabled for the `a` attribute and the selection is right before it\n * (at the attribute boundary), pressing the right arrow key will not move the selection but update its\n * attributes accordingly:\n *\n * * When enabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *    <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">{}bar</$text>\n *\n * * When disabled:\n *\n *   \t\tfoo{}<$text a=\"true\">bar</$text>\n *\n *   <kbd>→</kbd>\n *\n *   \t\tfoo<$text a=\"true\">b{}ar</$text>\n *\n *\n * ## \"Leaving\" an attribute:\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *    <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n *   <kbd>→</kbd>\n *\n *   \t\t<$text a=\"true\">bar</$text>b{}az\n *\n * # Backward movement\n *\n * * When enabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *    <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">bar{}</$text>baz\n *\n * * When disabled:\n *\n *   \t\t<$text a=\"true\">bar</$text>{}baz\n *\n *   <kbd>←</kbd>\n *\n *   \t\t<$text a=\"true\">ba{}r</$text>b{}az\n *\n * @param {Object} options Helper options.\n * @param {module:engine/view/view~View} options.view View controller instance.\n * @param {module:engine/model/model~Model} options.model Data model instance.\n * @param {module:utils/dom/emittermixin~Emitter} options.emitter The emitter to which this behavior should be added\n * (e.g. a plugin instance).\n * @param {String} options.attribute Attribute for which this behavior will be added.\n * @param {module:utils/locale~Locale} options.locale The {@link module:core/editor/editor~Editor#locale} instance.\n */\n\nexport default function bindTwoStepCaretToAttribute({\n  view,\n  model,\n  emitter,\n  attribute,\n  locale\n}) {\n  const twoStepCaretHandler = new TwoStepCaretHandler(model, emitter, attribute);\n  const modelSelection = model.document.selection; // Listen to keyboard events and handle the caret movement according to the 2-step caret logic.\n  //\n  // Note: This listener has the \"high+1\" priority:\n  // * \"high\" because of the filler logic implemented in the renderer which also engages on #keydown.\n  // When the gravity is overridden the attributes of the (model) selection attributes are reset.\n  // It may end up with the filler kicking in and breaking the selection.\n  // * \"+1\" because we would like to avoid collisions with other features (like Widgets), which\n  // take over the keydown events with the \"high\" priority. Two-step caret movement takes precedence\n  // over Widgets in that matter.\n  //\n  // Find out more in https://github.com/ckeditor/ckeditor5-engine/issues/1301.\n\n  emitter.listenTo(view.document, 'keydown', (evt, data) => {\n    // This implementation works only for collapsed selection.\n    if (!modelSelection.isCollapsed) {\n      return;\n    } // When user tries to expand the selection or jump over the whole word or to the beginning/end then\n    // two-steps movement is not necessary.\n\n\n    if (data.shiftKey || data.altKey || data.ctrlKey) {\n      return;\n    }\n\n    const arrowRightPressed = data.keyCode == keyCodes.arrowright;\n    const arrowLeftPressed = data.keyCode == keyCodes.arrowleft; // When neither left or right arrow has been pressed then do noting.\n\n    if (!arrowRightPressed && !arrowLeftPressed) {\n      return;\n    }\n\n    const position = modelSelection.getFirstPosition();\n    const contentDirection = locale.contentLanguageDirection;\n    let isMovementHandled;\n\n    if (contentDirection === 'ltr' && arrowRightPressed || contentDirection === 'rtl' && arrowLeftPressed) {\n      isMovementHandled = twoStepCaretHandler.handleForwardMovement(position, data);\n    } else {\n      isMovementHandled = twoStepCaretHandler.handleBackwardMovement(position, data);\n    } // Stop the keydown event if the two-step caret movement handled it. Avoid collisions\n    // with other features which may also take over the caret movement (e.g. Widget).\n\n\n    if (isMovementHandled) {\n      evt.stop();\n    }\n  }, {\n    priority: priorities.get('high') + 1\n  });\n}\n/**\n * This is a protected helper–class for {@link module:engine/utils/bindtwostepcarettoattribute}.\n * It handles the state of the 2-step caret movement for a single {@link module:engine/model/model~Model}\n * attribute upon the `keypress` in the {@link module:engine/view/view~View}.\n *\n * @protected\n */\n\nexport class TwoStepCaretHandler {\n  /*\n   * Creates two step handler instance.\n   *\n   * @param {module:engine/model/model~Model} model Data model instance.\n   * @param {module:utils/dom/emittermixin~Emitter} emitter The emitter to which this behavior should be added\n   * (e.g. a plugin instance).\n   * @param {String} attribute Attribute for which the behavior will be added.\n   */\n  constructor(model, emitter, attribute) {\n    /**\n     * The model instance this class instance operates on.\n     *\n     * @readonly\n     * @member {module:engine/model/model~Model#schema}\n     */\n    this.model = model;\n    /**\n     * The Attribute this class instance operates on.\n     *\n     * @readonly\n     * @member {String}\n     */\n\n    this.attribute = attribute;\n    /**\n     * A reference to the document selection.\n     *\n     * @private\n     * @member {module:engine/model/selection~Selection}\n     */\n\n    this._modelSelection = model.document.selection;\n    /**\n     * The current UID of the overridden gravity, as returned by\n     * {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._overrideUid = null;\n    /**\n     * A flag indicating that the automatic gravity restoration for this attribute\n     * should not happen upon the next\n     * {@link module:engine/model/selection~Selection#event:change:range} event.\n     *\n     * @private\n     * @member {String}\n     */\n\n    this._isNextGravityRestorationSkipped = false; // The automatic gravity restoration logic.\n\n    emitter.listenTo(this._modelSelection, 'change:range', (evt, data) => {\n      // Skipping the automatic restoration is needed if the selection should change\n      // but the gravity must remain overridden afterwards. See the #handleBackwardMovement\n      // to learn more.\n      if (this._isNextGravityRestorationSkipped) {\n        this._isNextGravityRestorationSkipped = false;\n        return;\n      } // Skip automatic restore when the gravity is not overridden — simply, there's nothing to restore\n      // at this moment.\n\n\n      if (!this._isGravityOverridden) {\n        return;\n      } // Skip automatic restore when the change is indirect AND the selection is at the attribute boundary.\n      // It means that e.g. if the change was external (collaboration) and the user had their\n      // selection around the link, its gravity should remain intact in this change:range event.\n\n\n      if (!data.directChange && isAtBoundary(this._modelSelection.getFirstPosition(), attribute)) {\n        return;\n      }\n\n      this._restoreGravity();\n    });\n  }\n  /**\n   * Updates the document selection and the view according to the two–step caret movement state\n   * when moving **forwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n   *\n   * @param {module:engine/model/position~Position} position The model position at the moment of the key press.\n   * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n   * @returns {Boolean} `true` when the handler prevented caret movement\n   */\n\n\n  handleForwardMovement(position, data) {\n    const attribute = this.attribute; // DON'T ENGAGE 2-SCM if gravity is already overridden. It means that we just entered\n    //\n    // \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n    //\n    // or left the attribute\n    //\n    // \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n    //\n    // and the gravity will be restored automatically.\n\n    if (this._isGravityOverridden) {\n      return;\n    } // DON'T ENGAGE 2-SCM when the selection is at the beginning of the block AND already has the\n    // attribute:\n    // * when the selection was initially set there using the mouse,\n    // * when the editor has just started\n    //\n    //\t\t<paragraph><$text attribute>{}bar</$text>baz</paragraph>\n    //\n\n\n    if (position.isAtStart && this._hasSelectionAttribute) {\n      return;\n    } // ENGAGE 2-SCM when about to leave one attribute value and enter another:\n    //\n    // \t\t<paragraph><$text attribute=\"1\">foo{}</$text><$text attribute=\"2\">bar</$text></paragraph>\n    //\n    // but DON'T when already in between of them (no attribute selection):\n    //\n    // \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n    //\n\n\n    if (isBetweenDifferentValues(position, attribute) && this._hasSelectionAttribute) {\n      this._preventCaretMovement(data);\n\n      this._removeSelectionAttribute();\n\n      return true;\n    } // ENGAGE 2-SCM when entering an attribute:\n    //\n    // \t\t<paragraph>foo{}<$text attribute>bar</$text>baz</paragraph>\n    //\n\n\n    if (isAtStartBoundary(position, attribute)) {\n      this._preventCaretMovement(data);\n\n      this._overrideGravity();\n\n      return true;\n    } // ENGAGE 2-SCM when leaving an attribute:\n    //\n    //\t\t<paragraph>foo<$text attribute>bar{}</$text>baz</paragraph>\n    //\n\n\n    if (isAtEndBoundary(position, attribute) && this._hasSelectionAttribute) {\n      this._preventCaretMovement(data);\n\n      this._overrideGravity();\n\n      return true;\n    }\n  }\n  /**\n   * Updates the document selection and the view according to the two–step caret movement state\n   * when moving **backwards**. Executed upon `keypress` in the {@link module:engine/view/view~View}.\n   *\n   * @param {module:engine/model/position~Position} position The model position at the moment of the key press.\n   * @param {module:engine/view/observer/domeventdata~DomEventData} data Data of the key press.\n   * @returns {Boolean} `true` when the handler prevented caret movement\n   */\n\n\n  handleBackwardMovement(position, data) {\n    const attribute = this.attribute; // When the gravity is already overridden...\n\n    if (this._isGravityOverridden) {\n      // ENGAGE 2-SCM & REMOVE SELECTION ATTRIBUTE\n      // when about to leave one attribute value and enter another:\n      //\n      // \t\t<paragraph><$text attribute=\"1\">foo</$text><$text attribute=\"2\">{}bar</$text></paragraph>\n      //\n      // but DON'T when already in between of them (no attribute selection):\n      //\n      // \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n      //\n      if (isBetweenDifferentValues(position, attribute) && this._hasSelectionAttribute) {\n        this._preventCaretMovement(data);\n\n        this._restoreGravity();\n\n        this._removeSelectionAttribute();\n\n        return true;\n      } // ENGAGE 2-SCM when at any boundary of the attribute:\n      //\n      // \t\t<paragraph>foo<$text attribute>bar</$text>{}baz</paragraph>\n      // \t\t<paragraph>foo<$text attribute>{}bar</$text>baz</paragraph>\n      //\n      else {\n          this._preventCaretMovement(data);\n\n          this._restoreGravity(); // REMOVE SELECTION ATRIBUTE at the beginning of the block.\n          // It's like restoring gravity but towards a non-existent content when\n          // the gravity is overridden:\n          //\n          // \t\t<paragraph><$text attribute>{}bar</$text></paragraph>\n          //\n          // becomes:\n          //\n          // \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n          //\n\n\n          if (position.isAtStart) {\n            this._removeSelectionAttribute();\n          }\n\n          return true;\n        }\n    } else {\n      // ENGAGE 2-SCM when between two different attribute values but selection has no attribute:\n      //\n      // \t\t<paragraph><$text attribute=\"1\">foo</$text>{}<$text attribute=\"2\">bar</$text></paragraph>\n      //\n      if (isBetweenDifferentValues(position, attribute) && !this._hasSelectionAttribute) {\n        this._preventCaretMovement(data);\n\n        this._setSelectionAttributeFromTheNodeBefore(position);\n\n        return true;\n      } // End of block boundary cases:\n      //\n      // \t\t<paragraph><$text attribute>bar{}</$text></paragraph>\n      // \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n      //\n\n\n      if (position.isAtEnd && isAtEndBoundary(position, attribute)) {\n        // DON'T ENGAGE 2-SCM if the selection has the attribute already.\n        // This is a common selection if set using the mouse.\n        //\n        // \t\t<paragraph><$text attribute>bar{}</$text></paragraph>\n        //\n        if (this._hasSelectionAttribute) {\n          // DON'T ENGAGE 2-SCM if the attribute at the end of the block which has length == 1.\n          // Make sure the selection will not the attribute after it moves backwards.\n          //\n          // \t\t<paragraph>foo<$text attribute>b{}</$text></paragraph>\n          //\n          if (isStepAfterTheAttributeBoundary(position, attribute)) {\n            // Skip the automatic gravity restore upon the next selection#change:range event.\n            // If not skipped, it would automatically restore the gravity, which should remain\n            // overridden.\n            this._skipNextAutomaticGravityRestoration();\n\n            this._overrideGravity(); // Don't return \"true\" here because we didn't call _preventCaretMovement.\n            // Returning here will destabilize the filler logic, which also listens to\n            // keydown (and the event would be stopped).\n\n          }\n\n          return;\n        } // ENGAGE 2-SCM if the selection has no attribute. This may happen when the user\n        // left the attribute using a FORWARD 2-SCM.\n        //\n        // \t\t<paragraph><$text attribute>bar</$text>{}</paragraph>\n        //\n        else {\n            this._preventCaretMovement(data);\n\n            this._setSelectionAttributeFromTheNodeBefore(position);\n\n            return true;\n          }\n      } // REMOVE SELECTION ATRIBUTE when restoring gravity towards a non-existent content at the\n      // beginning of the block.\n      //\n      // \t\t<paragraph>{}<$text attribute>bar</$text></paragraph>\n      //\n\n\n      if (position.isAtStart) {\n        if (this._hasSelectionAttribute) {\n          this._removeSelectionAttribute();\n\n          this._preventCaretMovement(data);\n\n          return true;\n        }\n\n        return;\n      } // DON'T ENGAGE 2-SCM when about to enter of leave an attribute.\n      // We need to check if the caret is a one position before the attribute boundary:\n      //\n      // \t\t<paragraph>foo<$text attribute>b{}ar</$text>baz</paragraph>\n      // \t\t<paragraph>foo<$text attribute>bar</$text>b{}az</paragraph>\n      //\n\n\n      if (isStepAfterTheAttributeBoundary(position, attribute)) {\n        // Skip the automatic gravity restore upon the next selection#change:range event.\n        // If not skipped, it would automatically restore the gravity, which should remain\n        // overridden.\n        this._skipNextAutomaticGravityRestoration();\n\n        this._overrideGravity(); // Don't return \"true\" here because we didn't call _preventCaretMovement.\n        // Returning here will destabilize the filler logic, which also listens to\n        // keydown (and the event would be stopped).\n\n      }\n    }\n  }\n  /**\n   * `true` when the gravity is overridden for the {@link #attribute}.\n   *\n   * @readonly\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _isGravityOverridden() {\n    return !!this._overrideUid;\n  }\n  /**\n   * `true` when the {@link module:engine/model/selection~Selection} has the {@link #attribute}.\n   *\n   * @readonly\n   * @private\n   * @type {Boolean}\n   */\n\n\n  get _hasSelectionAttribute() {\n    return this._modelSelection.hasAttribute(this.attribute);\n  }\n  /**\n   * Overrides the gravity using the {@link module:engine/model/writer~Writer model writer}\n   * and stores the information about this fact in the {@link #_overrideUid}.\n   *\n   * A shorthand for {@link module:engine/model/writer~Writer#overrideSelectionGravity}.\n   *\n   * @private\n   */\n\n\n  _overrideGravity() {\n    this._overrideUid = this.model.change(writer => writer.overrideSelectionGravity());\n  }\n  /**\n   * Restores the gravity using the {@link module:engine/model/writer~Writer model writer}.\n   *\n   * A shorthand for {@link module:engine/model/writer~Writer#restoreSelectionGravity}.\n   *\n   * @private\n   */\n\n\n  _restoreGravity() {\n    this.model.change(writer => {\n      writer.restoreSelectionGravity(this._overrideUid);\n      this._overrideUid = null;\n    });\n  }\n  /**\n   * Prevents the caret movement in the view by calling `preventDefault` on the event data.\n   *\n   * @private\n   */\n\n\n  _preventCaretMovement(data) {\n    data.preventDefault();\n  }\n  /**\n   * Removes the {@link #attribute} from the selection using using the\n   * {@link module:engine/model/writer~Writer model writer}.\n   *\n   * @private\n   */\n\n\n  _removeSelectionAttribute() {\n    this.model.change(writer => {\n      writer.removeSelectionAttribute(this.attribute);\n    });\n  }\n  /**\n   * Applies the {@link #attribute} to the current selection using using the\n   * value from the node before the current position. Uses\n   * the {@link module:engine/model/writer~Writer model writer}.\n   *\n   * @private\n   * @param {module:engine/model/position~Position} position\n   */\n\n\n  _setSelectionAttributeFromTheNodeBefore(position) {\n    const attribute = this.attribute;\n    this.model.change(writer => {\n      writer.setSelectionAttribute(this.attribute, position.nodeBefore.getAttribute(attribute));\n    });\n  }\n  /**\n   * Skips the next automatic selection gravity restoration upon the\n   * {@link module:engine/model/selection~Selection#event:change:range} event.\n   *\n   * See {@link #_isNextGravityRestorationSkipped}.\n   *\n   * @private\n   */\n\n\n  _skipNextAutomaticGravityRestoration() {\n    this._isNextGravityRestorationSkipped = true;\n  }\n\n} // @param {module:engine/model/position~Position} position\n// @param {String} attribute\n// @returns {Boolean} `true` when position between the nodes sticks to the bound of text with given attribute.\n\nfunction isAtBoundary(position, attribute) {\n  return isAtStartBoundary(position, attribute) || isAtEndBoundary(position, attribute);\n} // @param {module:engine/model/position~Position} position\n// @param {String} attribute\n\n\nfunction isAtStartBoundary(position, attribute) {\n  const {\n    nodeBefore,\n    nodeAfter\n  } = position;\n  const isAttrBefore = nodeBefore ? nodeBefore.hasAttribute(attribute) : false;\n  const isAttrAfter = nodeAfter ? nodeAfter.hasAttribute(attribute) : false;\n  return isAttrAfter && (!isAttrBefore || nodeBefore.getAttribute(attribute) !== nodeAfter.getAttribute(attribute));\n} // @param {module:engine/model/position~Position} position\n// @param {String} attribute\n\n\nfunction isAtEndBoundary(position, attribute) {\n  const {\n    nodeBefore,\n    nodeAfter\n  } = position;\n  const isAttrBefore = nodeBefore ? nodeBefore.hasAttribute(attribute) : false;\n  const isAttrAfter = nodeAfter ? nodeAfter.hasAttribute(attribute) : false;\n  return isAttrBefore && (!isAttrAfter || nodeBefore.getAttribute(attribute) !== nodeAfter.getAttribute(attribute));\n} // @param {module:engine/model/position~Position} position\n// @param {String} attribute\n\n\nfunction isBetweenDifferentValues(position, attribute) {\n  const {\n    nodeBefore,\n    nodeAfter\n  } = position;\n  const isAttrBefore = nodeBefore ? nodeBefore.hasAttribute(attribute) : false;\n  const isAttrAfter = nodeAfter ? nodeAfter.hasAttribute(attribute) : false;\n\n  if (!isAttrAfter || !isAttrBefore) {\n    return;\n  }\n\n  return nodeAfter.getAttribute(attribute) !== nodeBefore.getAttribute(attribute);\n} // @param {module:engine/model/position~Position} position\n// @param {String} attribute\n\n\nfunction isStepAfterTheAttributeBoundary(position, attribute) {\n  return isAtBoundary(position.getShiftedBy(-1), attribute);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/linkediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkCommand from './linkcommand';\nimport UnlinkCommand from './unlinkcommand';\nimport { createLinkElement, ensureSafeUrl, getLocalizedDecorators, normalizeDecorators } from './utils';\nimport AutomaticDecorators from './utils/automaticdecorators';\nimport ManualDecorator from './utils/manualdecorator';\nimport bindTwoStepCaretToAttribute from '@ckeditor/ckeditor5-engine/src/utils/bindtwostepcarettoattribute';\nimport findLinkRange from './findlinkrange';\nimport '../theme/link.css';\nconst HIGHLIGHT_CLASS = 'ck-link_selected';\nconst DECORATOR_AUTOMATIC = 'automatic';\nconst DECORATOR_MANUAL = 'manual';\nconst EXTERNAL_LINKS_REGEXP = /^(https?:)?\\/\\//;\n/**\n * The link engine feature.\n *\n * It introduces the `linkHref=\"url\"` attribute in the model which renders to the view as a `<a href=\"url\">` element\n * as well as `'link'` and `'unlink'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class LinkEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'LinkEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('link', {\n      addTargetToExternalLinks: false\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const locale = editor.locale; // Allow link attribute on all inline nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: 'linkHref'\n    });\n    editor.conversion.for('dataDowncast').attributeToElement({\n      model: 'linkHref',\n      view: createLinkElement\n    });\n    editor.conversion.for('editingDowncast').attributeToElement({\n      model: 'linkHref',\n      view: (href, writer) => {\n        return createLinkElement(ensureSafeUrl(href), writer);\n      }\n    });\n    editor.conversion.for('upcast').elementToAttribute({\n      view: {\n        name: 'a',\n        attributes: {\n          href: true\n        }\n      },\n      model: {\n        key: 'linkHref',\n        value: viewElement => viewElement.getAttribute('href')\n      }\n    }); // Create linking commands.\n\n    editor.commands.add('link', new LinkCommand(editor));\n    editor.commands.add('unlink', new UnlinkCommand(editor));\n    const linkDecorators = getLocalizedDecorators(editor.t, normalizeDecorators(editor.config.get('link.decorators')));\n\n    this._enableAutomaticDecorators(linkDecorators.filter(item => item.mode === DECORATOR_AUTOMATIC));\n\n    this._enableManualDecorators(linkDecorators.filter(item => item.mode === DECORATOR_MANUAL)); // Enable two-step caret movement for `linkHref` attribute.\n\n\n    bindTwoStepCaretToAttribute({\n      view: editor.editing.view,\n      model: editor.model,\n      emitter: this,\n      attribute: 'linkHref',\n      locale\n    }); // Setup highlight over selected link.\n\n    this._setupLinkHighlight();\n  }\n  /**\n   * Processes an array of configured {@link module:link/link~LinkDecoratorAutomaticDefinition automatic decorators}\n   * and registers a {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher downcast dispatcher}\n   * for each one of them. Downcast dispatchers are obtained using the\n   * {@link module:link/utils~AutomaticDecorators#getDispatcher} method.\n   *\n   * **Note**: This method also activates the automatic external link decorator if enabled with\n   * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}.\n   *\n   * @private\n   * @param {Array.<module:link/link~LinkDecoratorAutomaticDefinition>} automaticDecoratorDefinitions\n   */\n\n\n  _enableAutomaticDecorators(automaticDecoratorDefinitions) {\n    const editor = this.editor;\n    const automaticDecorators = new AutomaticDecorators(); // Adds a default decorator for external links.\n\n    if (editor.config.get('link.addTargetToExternalLinks')) {\n      automaticDecorators.add({\n        id: 'linkIsExternal',\n        mode: DECORATOR_AUTOMATIC,\n        callback: url => EXTERNAL_LINKS_REGEXP.test(url),\n        attributes: {\n          target: '_blank',\n          rel: 'noopener noreferrer'\n        }\n      });\n    }\n\n    automaticDecorators.add(automaticDecoratorDefinitions);\n\n    if (automaticDecorators.length) {\n      editor.conversion.for('downcast').add(automaticDecorators.getDispatcher());\n    }\n  }\n  /**\n   * Processes an array of configured {@link module:link/link~LinkDecoratorManualDefinition manual decorators},\n   * transforms them into {@link module:link/utils~ManualDecorator} instances and stores them in the\n   * {@link module:link/linkcommand~LinkCommand#manualDecorators} collection (a model for manual decorators state).\n   *\n   * Also registers an {@link module:engine/conversion/downcasthelpers~DowncastHelpers#attributeToElement attribute-to-element}\n   * converter for each manual decorator and extends the {@link module:engine/model/schema~Schema model's schema}\n   * with adequate model attributes.\n   *\n   * @private\n   * @param {Array.<module:link/link~LinkDecoratorManualDefinition>} manualDecoratorDefinitions\n   */\n\n\n  _enableManualDecorators(manualDecoratorDefinitions) {\n    if (!manualDecoratorDefinitions.length) {\n      return;\n    }\n\n    const editor = this.editor;\n    const command = editor.commands.get('link');\n    const manualDecorators = command.manualDecorators;\n    manualDecoratorDefinitions.forEach(decorator => {\n      editor.model.schema.extend('$text', {\n        allowAttributes: decorator.id\n      }); // Keeps reference to manual decorator to decode its name to attributes during downcast.\n\n      manualDecorators.add(new ManualDecorator(decorator));\n      editor.conversion.for('downcast').attributeToElement({\n        model: decorator.id,\n        view: (manualDecoratorName, writer) => {\n          if (manualDecoratorName) {\n            const attributes = manualDecorators.get(decorator.id).attributes;\n            const element = writer.createAttributeElement('a', attributes, {\n              priority: 5\n            });\n            writer.setCustomProperty('link', true, element);\n            return element;\n          }\n        }\n      });\n      editor.conversion.for('upcast').elementToAttribute({\n        view: {\n          name: 'a',\n          attributes: manualDecorators.get(decorator.id).attributes\n        },\n        model: {\n          key: decorator.id\n        }\n      });\n    });\n  }\n  /**\n   * Adds a visual highlight style to a link in which the selection is anchored.\n   * Together with two-step caret movement, they indicate that the user is typing inside the link.\n   *\n   * Highlight is turned on by adding the `.ck-link_selected` class to the link in the view:\n   *\n   * * The class is removed before the conversion has started, as callbacks added with the `'highest'` priority\n   * to {@link module:engine/conversion/downcastdispatcher~DowncastDispatcher} events.\n   * * The class is added in the view post fixer, after other changes in the model tree were converted to the view.\n   *\n   * This way, adding and removing the highlight does not interfere with conversion.\n   *\n   * @private\n   */\n\n\n  _setupLinkHighlight() {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const highlightedLinks = new Set(); // Adding the class.\n\n    view.document.registerPostFixer(writer => {\n      const selection = editor.model.document.selection;\n      let changed = false;\n\n      if (selection.hasAttribute('linkHref')) {\n        const modelRange = findLinkRange(selection.getFirstPosition(), selection.getAttribute('linkHref'), editor.model);\n        const viewRange = editor.editing.mapper.toViewRange(modelRange); // There might be multiple `a` elements in the `viewRange`, for example, when the `a` element is\n        // broken by a UIElement.\n\n        for (const item of viewRange.getItems()) {\n          if (item.is('a') && !item.hasClass(HIGHLIGHT_CLASS)) {\n            writer.addClass(HIGHLIGHT_CLASS, item);\n            highlightedLinks.add(item);\n            changed = true;\n          }\n        }\n      }\n\n      return changed;\n    }); // Removing the class.\n\n    editor.conversion.for('editingDowncast').add(dispatcher => {\n      // Make sure the highlight is removed on every possible event, before conversion is started.\n      dispatcher.on('insert', removeHighlight, {\n        priority: 'highest'\n      });\n      dispatcher.on('remove', removeHighlight, {\n        priority: 'highest'\n      });\n      dispatcher.on('attribute', removeHighlight, {\n        priority: 'highest'\n      });\n      dispatcher.on('selection', removeHighlight, {\n        priority: 'highest'\n      });\n\n      function removeHighlight() {\n        view.change(writer => {\n          for (const item of highlightedLinks.values()) {\n            writer.removeClass(HIGHLIGHT_CLASS, item);\n            highlightedLinks.delete(item);\n          }\n        });\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/notification/notification\n */\n\n/* globals window */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The Notification plugin.\n *\n * This plugin sends a few types of notifications: `success`, `info` and `warning`. The notifications need to be\n * handled and displayed by a plugin responsible for showing the UI of the notifications. Using this plugin for dispatching\n * notifications makes it possible to switch the notifications UI.\n *\n * Note that every unhandled and not stopped `warning` notification will be displayed as a system alert.\n * See {@link module:ui/notification/notification~Notification#showWarning}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Notification extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Notification';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    // Each unhandled and not stopped `show:warning` event is displayed as a system alert.\n    this.on('show:warning', (evt, data) => {\n      window.alert(data.message); // eslint-disable-line no-alert\n    }, {\n      priority: 'lowest'\n    });\n  }\n  /**\n   * Shows a success notification.\n   *\n   * By default, it fires the {@link #event:show:success `show:success` event} with the given `data`. The event namespace can be extended\n   * using the `data.namespace` option. For example:\n   *\n   * \t\tshowSuccess( 'Image is uploaded.', {\n   * \t\t\tnamespace: 'upload:image'\n   * \t\t} );\n   *\n   * will fire the `show:success:upload:image` event.\n   *\n   * You can provide the title of the notification:\n   *\n   *\t\tshowSuccess( 'Image is uploaded.', {\n   *\t\t\ttitle: 'Image upload success'\n   *\t\t} );\n   *\n   * @param {String} message The content of the notification.\n   * @param {Object} [data={}] Additional data.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title] The title of the notification.\n   */\n\n\n  showSuccess(message, data = {}) {\n    this._showNotification({\n      message,\n      type: 'success',\n      namespace: data.namespace,\n      title: data.title\n    });\n  }\n  /**\n   * Shows an information notification.\n   *\n   * By default, it fires the {@link #event:show:info `show:info` event} with the given `data`. The event namespace can be extended\n   * using the `data.namespace` option. For example:\n   *\n   * \t\tshowInfo( 'Editor is offline.', {\n   * \t\t\tnamespace: 'editor:status'\n   * \t\t} );\n   *\n   * will fire the `show:info:editor:status` event.\n   *\n   * You can provide the title of the notification:\n   *\n   *\t\tshowInfo( 'Editor is offline.', {\n   *\t\t\ttitle: 'Network information'\n   *\t\t} );\n   *\n   * @param {String} message The content of the notification.\n   * @param {Object} [data={}] Additional data.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title] The title of the notification.\n   */\n\n\n  showInfo(message, data = {}) {\n    this._showNotification({\n      message,\n      type: 'info',\n      namespace: data.namespace,\n      title: data.title\n    });\n  }\n  /**\n   * Shows a warning notification.\n   *\n   * By default, it fires the {@link #event:show:warning `show:warning` event}\n   * with the given `data`. The event namespace can be extended using the `data.namespace` option. For example:\n   *\n   * \t\tshowWarning( 'Image upload error.', {\n   * \t\t\tnamespace: 'upload:image'\n   * \t\t} );\n   *\n   * will fire the `show:warning:upload:image` event.\n   *\n   * You can provide the title of the notification:\n   *\n   *\t\tshowWarning( 'Image upload error.', {\n   *\t\t\ttitle: 'Upload failed'\n   *\t\t} );\n   *\n   * Note that each unhandled and not stopped `warning` notification will be displayed as a system alert.\n   * The plugin responsible for displaying warnings should `stop()` the event to prevent displaying it as an alert:\n   *\n   * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n   * \t\t\t// Do something with the data.\n   *\n   * \t\t\t// Stop this event to prevent displaying it as an alert.\n   * \t\t\tevt.stop();\n   * \t\t} );\n   *\n   * You can attach many listeners to the same event and `stop()` this event in a listener with a low priority:\n   *\n   * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n   * \t\t\t// Show the warning in the UI, but do not stop it.\n   * \t\t} );\n   *\n   * \t\tnotifications.on( 'show:warning', ( evt, data ) => {\n   * \t\t\t// Log the warning to some error tracker.\n   *\n   * \t\t\t// Stop this event to prevent displaying it as an alert.\n   * \t\t\tevt.stop();\n   * \t\t}, { priority: 'low' } );\n   *\n   * @param {String} message The content of the notification.\n   * @param {Object} [data={}] Additional data.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title] The title of the notification.\n   */\n\n\n  showWarning(message, data = {}) {\n    this._showNotification({\n      message,\n      type: 'warning',\n      namespace: data.namespace,\n      title: data.title\n    });\n  }\n  /**\n   * Fires the `show` event with the specified type, namespace and message.\n   *\n   * @private\n   * @param {Object} data The message data.\n   * @param {String} data.message The content of the notification.\n   * @param {'success'|'info'|'warning'} data.type The type of the message.\n   * @param {String} [data.namespace] Additional event namespace.\n   * @param {String} [data.title=''] The title of the notification.\n   */\n\n\n  _showNotification(data) {\n    const event = `show:${data.type}` + (data.namespace ? `:${data.namespace}` : '');\n    this.fire(event, {\n      message: data.message,\n      type: data.type,\n      title: data.title || ''\n    });\n  }\n  /**\n   * Fired when one of the `showSuccess()`, `showInfo()`, `showWarning()` methods is called.\n   *\n   * @event show\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'success'|'info'|'warning'} data.type The type of the notification.\n   */\n\n  /**\n   * Fired when the `showSuccess()` method is called.\n   *\n   * @event show:success\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'success'} data.type The type of the notification.\n   */\n\n  /**\n   * Fired when the `showInfo()` method is called.\n   *\n   * @event show:info\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'info'} data.type The type of the notification.\n   */\n\n  /**\n   * Fired when the `showWarning()` method is called.\n   *\n   * When this event is not handled or stopped by `event.stop()`, the `data.message` of this event will\n   * be automatically displayed as a system alert.\n   *\n   * @event show:warning\n   * @param {Object} data The notification data.\n   * @param {String} data.message The content of the notification.\n   * @param {String} data.title The title of the notification.\n   * @param {'warning'} data.type The type of the notification.\n   */\n\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/* global window */\n/**\n * @module ckfinder/ckfindercommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * The CKFinder command. It is used by the {@link module:ckfinder/ckfinderediting~CKFinderEditing CKFinder editing feature}\n * to open the CKFinder file manager to insert an image or a link to a file into the editor content.\n *\n *\t\teditor.execute( 'ckfinder' );\n *\n * **Note:** This command uses other features to perform tasks:\n * - To insert images the {@link module:image/image/imageinsertcommand~ImageInsertCommand 'imageInsert'} command\n * from the {@link module:image/image~Image Image feature}.\n * - To insert links to files the {@link module:link/linkcommand~LinkCommand 'link'} command\n * from the {@link module:link/link~Link Link feature}.\n *\n * @extends module:core/command~Command\n */\nexport default class CKFinderCommand extends Command {\n    /**\n   * @inheritDoc\n   */\n    constructor(editor) {\n        super(editor);\n        // Remove default document listener to lower its priority.\n        this.stopListening(this.editor.model.document, 'change');\n        // Lower this command listener priority to be sure that refresh() will be called after link & image refresh.\n        this.listenTo(this.editor.model.document, 'change', () => this.refresh(), { priority: 'low' });\n    }\n    /**\n   * @inheritDoc\n   */\n    refresh() {\n        const imageCommand = this.editor.commands.get('imageInsert');\n        const linkCommand = this.editor.commands.get('link');\n        // The CKFinder command is enabled when one of image or link command is enabled.\n        this.isEnabled = imageCommand.isEnabled || linkCommand.isEnabled;\n    }\n    /**\n   * @inheritDoc\n   */\n    execute() {\n        const editor = this.editor;\n        const openerMethod = this.editor.config.get('ckfinder.openerMethod') || 'modal';\n        if (openerMethod != 'popup' && openerMethod != 'modal') {\n            throw new CKEditorError('ckfinder-unknown-openerMethod: The openerMethod config option must by \"popup\" or \"modal\".', editor);\n        }\n        const options = this.editor.config.get('ckfinder.options') || {};\n        options.chooseFiles = true;\n        // Cache the user-defined onInit method\n        const originalOnInit = options.onInit;\n        // Pass the lang code to the CKFinder if not defined by user.\n        if (!options.language) {\n            options.language = editor.locale.uiLanguage;\n        }\n        // The onInit method allows to extend CKFinder's behavior. It is used to attach event listeners to file choosing related events.\n        options.onInit = finder => {\n            // Call original options.onInit if it was defined by user.\n            if (originalOnInit) {\n                originalOnInit(finder);\n            }\n            finder.on('files:choose', evt => {\n                const files = evt.data.files.toArray();\n                // Insert links\n                const links = files.filter(file => !file.isImage());\n                const images = files.filter(file => file.isImage());\n                for (const linkFile of links) {\n                    editor.execute('link', linkFile.getUrl());\n                }\n                const imagesUrls = [];\n                for (const image of images) {\n                    const url = image.getUrl();\n                    imagesUrls.push(url ? url : finder.request('file:getProxyUrl', { file: image }));\n                }\n                if (imagesUrls.length) {\n                    insertImages(editor, imagesUrls);\n                }\n            });\n            finder.on('file:choose:resizedImage', evt => {\n                const resizedUrl = evt.data.resizedUrl;\n                if (!resizedUrl) {\n                    const notification = editor.plugins.get('Notification');\n                    const t = editor.locale.t;\n                    notification.showWarning(t('bk'), {\n                        title: t('bl'),\n                        namespace: 'ckfinder'\n                    });\n                    return;\n                }\n                insertImages(editor, [resizedUrl]);\n            });\n        };\n        window.CKFinder[openerMethod](options);\n    }\n}\nfunction insertImages(editor, urls) {\n    const imageCommand = editor.commands.get('imageInsert');\n    // Check if inserting an image is actually possible - it might be possible to only insert a link.\n    if (!imageCommand.isEnabled) {\n        const notification = editor.plugins.get('Notification');\n        const t = editor.locale.t;\n        notification.showWarning(t('bm'), {\n            title: t('bn'),\n            namespace: 'ckfinder'\n        });\n        return;\n    }\n    editor.execute('imageInsert', { source: urls });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ckfinder/ckfinderediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageEditing from '@ckeditor/ckeditor5-image/src/image/imageediting';\nimport LinkEditing from '@ckeditor/ckeditor5-link/src/linkediting';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\nimport CKFinderCommand from './ckfindercommand';\n/**\n * The CKFinder editing feature. It introduces the {@link module:ckfinder/ckfindercommand~CKFinderCommand CKFinder command}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CKFinderEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'CKFinderEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Notification, ImageEditing, LinkEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    editor.commands.add('ckfinder', new CKFinderCommand(editor));\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module cloud-services-core/uploadgateway/fileuploader\n */\n\n/* globals XMLHttpRequest, FormData, Blob, atob */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport EmitterMixin from '@ckeditor/ckeditor5-utils/src/emittermixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nconst BASE64_HEADER_REG_EXP = /^data:(\\S*?);base64,/;\n\n/**\n * FileUploader class used to upload single file.\n */\nexport default class FileUploader {\n\t/**\n\t * Creates `FileUploader` instance.\n\t *\n\t * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\n\t * @param {module:cloud-services-core/token~Token} token Token used for authentication.\n\t * @param {String} apiAddress API address.\n\t */\n\tconstructor( fileOrData, token, apiAddress ) {\n\t\tif ( !fileOrData ) {\n\t\t\t/**\n\t\t\t * File must be provided as the first argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-file\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'fileuploader-missing-file: File must be provided as the first argument', null );\n\t\t}\n\n\t\tif ( !token ) {\n\t\t\t/**\n\t\t\t * Token must be provided as the second argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-token\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'fileuploader-missing-token: Token must be provided as the second argument.', null );\n\t\t}\n\n\t\tif ( !apiAddress ) {\n\t\t\t/**\n\t\t\t * Api address must be provided as the third argument.\n\t\t\t *\n\t\t\t * @error fileuploader-missing-api-address\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'fileuploader-missing-api-address: Api address must be provided as the third argument.', null );\n\t\t}\n\n\t\t/**\n\t\t * A file that is being uploaded.\n\t\t *\n\t\t * @type {Blob}\n\t\t */\n\t\tthis.file = _isBase64( fileOrData ) ? _base64ToBlob( fileOrData ) : fileOrData;\n\n\t\t/**\n\t\t * CKEditor Cloud Services access token.\n\t\t *\n\t\t * @type {module:cloud-services-core/token~Token}\n\t\t * @private\n\t\t */\n\t\tthis._token = token;\n\n\t\t/**\n\t\t * CKEditor Cloud Services API address.\n\t\t *\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._apiAddress = apiAddress;\n\t}\n\n\t/**\n\t * Registers callback on `progress` event.\n\t *\n\t * @chainable\n\t * @param {Function} callback\n\t * @returns {module:cloud-services-core/uploadgateway/fileuploader~FileUploader}\n\t */\n\tonProgress( callback ) {\n\t\tthis.on( 'progress', ( event, data ) => callback( data ) );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Registers callback on `error` event. Event is called once when error occurs.\n\t *\n\t * @chainable\n\t * @param {Function} callback\n\t * @returns {module:cloud-services-core/uploadgateway/fileuploader~FileUploader}\n\t */\n\tonError( callback ) {\n\t\tthis.once( 'error', ( event, data ) => callback( data ) );\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Aborts upload process.\n\t */\n\tabort() {\n\t\tthis.xhr.abort();\n\t}\n\n\t/**\n\t * Sends XHR request to API.\n\t *\n\t * @chainable\n\t * @returns {Promise.<Object>}\n\t */\n\tsend() {\n\t\tthis._prepareRequest();\n\t\tthis._attachXHRListeners();\n\n\t\treturn this._sendRequest();\n\t}\n\n\t/**\n\t * Prepares XHR request.\n\t *\n\t * @private\n\t */\n\t_prepareRequest() {\n\t\tconst xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'POST', this._apiAddress );\n\t\txhr.setRequestHeader( 'Authorization', this._token.value );\n\t\txhr.responseType = 'json';\n\n\t\tthis.xhr = xhr;\n\t}\n\n\t/**\n\t * Attaches listeners to the XHR.\n\t *\n\t * @private\n\t */\n\t_attachXHRListeners() {\n\t\tconst that = this;\n\t\tconst xhr = this.xhr;\n\n\t\txhr.addEventListener( 'error', onError( 'Network Error' ) );\n\t\txhr.addEventListener( 'abort', onError( 'Abort' ) );\n\n\t\t/* istanbul ignore else */\n\t\tif ( xhr.upload ) {\n\t\t\txhr.upload.addEventListener( 'progress', event => {\n\t\t\t\tif ( event.lengthComputable ) {\n\t\t\t\t\tthis.fire( 'progress', {\n\t\t\t\t\t\ttotal: event.total,\n\t\t\t\t\t\tuploaded: event.loaded\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst statusCode = xhr.status;\n\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\treturn this.fire( 'error', xhrResponse.message || xhrResponse.error );\n\t\t\t}\n\t\t} );\n\n\t\tfunction onError( message ) {\n\t\t\treturn () => that.fire( 'error', message );\n\t\t}\n\t}\n\n\t/**\n\t * Sends XHR request.\n\t *\n\t * @private\n\t */\n\t_sendRequest() {\n\t\tconst formData = new FormData();\n\t\tconst xhr = this.xhr;\n\n\t\tformData.append( 'file', this.file );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\txhr.addEventListener( 'load', () => {\n\t\t\t\tconst statusCode = xhr.status;\n\t\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\t\tif ( xhrResponse.message ) {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * Uploading file failed.\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @error fileuploader-uploading-data-failed\n\t\t\t\t\t\t */\n\t\t\t\t\t\treturn reject( new CKEditorError(\n\t\t\t\t\t\t\t'fileuploader-uploading-data-failed: Uploading file failed.',\n\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t{ message: xhrResponse.message }\n\t\t\t\t\t\t) );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn reject( xhrResponse.error );\n\t\t\t\t}\n\n\t\t\t\treturn resolve( xhrResponse );\n\t\t\t} );\n\n\t\t\txhr.addEventListener( 'error', () => reject( new Error( 'Network Error' ) ) );\n\t\t\txhr.addEventListener( 'abort', () => reject( new Error( 'Abort' ) ) );\n\n\t\t\txhr.send( formData );\n\t\t} );\n\t}\n\n\t/**\n\t * Fired when error occurs.\n\t *\n\t * @event error\n\t * @param {String} error Error message\n\t */\n\n\t/**\n\t * Fired on upload progress.\n\t *\n\t * @event progress\n\t * @param {Object} status Total and uploaded status\n\t */\n}\n\nmix( FileUploader, EmitterMixin );\n\n/**\n * Transforms Base64 string data into file.\n *\n * @param {String} base64 String data.\n * @param {Number} [sliceSize=512]\n * @returns {Blob}\n * @private\n */\nfunction _base64ToBlob( base64, sliceSize = 512 ) {\n\ttry {\n\t\tconst contentType = base64.match( BASE64_HEADER_REG_EXP )[ 1 ];\n\t\tconst base64Data = atob( base64.replace( BASE64_HEADER_REG_EXP, '' ) );\n\n\t\tconst byteArrays = [];\n\n\t\tfor ( let offset = 0; offset < base64Data.length; offset += sliceSize ) {\n\t\t\tconst slice = base64Data.slice( offset, offset + sliceSize );\n\t\t\tconst byteNumbers = new Array( slice.length );\n\n\t\t\tfor ( let i = 0; i < slice.length; i++ ) {\n\t\t\t\tbyteNumbers[ i ] = slice.charCodeAt( i );\n\t\t\t}\n\n\t\t\tbyteArrays.push( new Uint8Array( byteNumbers ) );\n\t\t}\n\n\t\treturn new Blob( byteArrays, { type: contentType } );\n\t} catch ( error ) {\n\t\t/**\n\t\t * Problem with decoding Base64 image data.\n\t\t *\n\t\t * @error fileuploader-decoding-image-data-error\n\t\t */\n\t\tthrow new CKEditorError( 'fileuploader-decoding-image-data-error: Problem with decoding Base64 image data.', null );\n\t}\n}\n\n/**\n * Checks that string is Base64.\n *\n * @param {String} string\n * @returns {Boolean}\n * @private\n */\nfunction _isBase64( string ) {\n\tif ( typeof string !== 'string' ) {\n\t\treturn false;\n\t}\n\n\tconst match = string.match( BASE64_HEADER_REG_EXP );\n\treturn !!( match && match.length );\n}\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module cloud-services-core/token\n */\n\n/* globals XMLHttpRequest, setInterval, clearInterval */\n\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\nconst DEFAULT_OPTIONS = { refreshInterval: 3600000, autoRefresh: true };\n\n/**\n * Class representing the token used for communication with CKEditor Cloud Services.\n * Value of the token is retrieving from the specified URL and is refreshed every 1 hour by default.\n *\n * @mixes ObservableMixin\n */\nclass Token {\n\t/**\n\t * Creates `Token` instance.\n\t * Method `init` should be called after using the constructor or use `create` method instead.\n\t *\n\t * @param {String|Function} tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link module:cloud-services-core/token~refreshToken} interface.\n\t * @param {Object} options\n\t * @param {String} [options.initValue] Initial value of the token.\n\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\n\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\n\t */\n\tconstructor( tokenUrlOrRefreshToken, options = DEFAULT_OPTIONS ) {\n\t\tif ( !tokenUrlOrRefreshToken ) {\n\t\t\t/**\n\t\t\t * A `tokenUrl` must be provided as the first constructor argument.\n\t\t\t *\n\t\t\t * @error token-missing-token-url\n\t\t\t */\n\t\t\tthrow new CKEditorError(\n\t\t\t\t'token-missing-token-url: A `tokenUrl` must be provided as the first constructor argument.',\n\t\t\t\tthis\n\t\t\t);\n\t\t}\n\n\t\t/**\n\t\t * Value of the token.\n\t\t * The value of the token is null if `initValue` is not provided or `init` method was not called.\n\t\t * `create` method creates token with initialized value from url.\n\t\t *\n\t\t * @name value\n\t\t * @member {String} #value\n\t\t * @observable\n\t\t * @readonly\n\t\t */\n\t\tthis.set( 'value', options.initValue );\n\n\t\t/**\n\t\t * Base refreshing function.\n\t\t *\n\t\t * @private\n\t\t * @member {String|Function} #_refresh\n\t\t */\n\t\tif ( typeof tokenUrlOrRefreshToken === 'function' ) {\n\t\t\tthis._refresh = tokenUrlOrRefreshToken;\n\t\t} else {\n\t\t\tthis._refresh = () => defaultRefreshToken( tokenUrlOrRefreshToken );\n\t\t}\n\n\t\t/**\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\tthis._options = Object.assign( {}, DEFAULT_OPTIONS, options );\n\t}\n\n\t/**\n\t * Initializes the token.\n\t *\n\t * @returns {Promise.<module:cloud-services-core/token~Token>}\n\t */\n\tinit() {\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\tif ( this._options.autoRefresh ) {\n\t\t\t\tthis._startRefreshing();\n\t\t\t}\n\n\t\t\tif ( !this.value ) {\n\t\t\t\tthis._refreshToken()\n\t\t\t\t\t.then( resolve )\n\t\t\t\t\t.catch( reject );\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresolve( this );\n\t\t} );\n\t}\n\n\t/**\n\t * Refresh token method. Useful in a method form as it can be override in tests.\n\t *\n\t * @protected\n\t */\n\t_refreshToken() {\n\t\treturn this._refresh()\n\t\t\t.then( value => this.set( 'value', value ) )\n\t\t\t.then( () => this );\n\t}\n\n\t/**\n\t * Destroys token instance. Stops refreshing.\n\t */\n\tdestroy() {\n\t\tthis._stopRefreshing();\n\t}\n\n\t/**\n\t * Starts value refreshing every `refreshInterval` time.\n\t *\n\t * @protected\n\t */\n\t_startRefreshing() {\n\t\tthis._refreshInterval = setInterval( () => this._refreshToken(), this._options.refreshInterval );\n\t}\n\n\t/**\n\t * Stops value refreshing.\n\t *\n\t * @protected\n\t */\n\t_stopRefreshing() {\n\t\tclearInterval( this._refreshInterval );\n\t}\n\n\t/**\n\t * Creates a initialized {@link module:cloud-services-core/token~Token} instance.\n\t *\n\t * @param {String|Function} tokenUrlOrRefreshToken Endpoint address to download the token or a callback that provides the token. If the\n\t * value is a function it has to match the {@link module:cloud-services-core/token~refreshToken} interface.\n\t * @param {Object} options\n\t * @param {String} [options.initValue] Initial value of the token.\n\t * @param {Number} [options.refreshInterval=3600000] Delay between refreshes. Default 1 hour.\n\t * @param {Boolean} [options.autoRefresh=true] Specifies whether to start the refresh automatically.\n\t * @returns {Promise.<module:cloud-services-core/token~Token>}\n\t */\n\tstatic create( tokenUrlOrRefreshToken, options = DEFAULT_OPTIONS ) {\n\t\tconst token = new Token( tokenUrlOrRefreshToken, options );\n\n\t\treturn token.init();\n\t}\n}\n\nmix( Token, ObservableMixin );\n\n/**\n * This function is called in a defined interval by the {@link ~Token} class.\n * It should return a promise, which resolves with the new token value.\n * If any error occurs it should return a rejected promise with an error message.\n *\n * @function refreshToken\n * @returns {Promise.<String>}\n */\n\n/**\n * @private\n * @param {String} tokenUrl\n */\nfunction defaultRefreshToken( tokenUrl ) {\n\treturn new Promise( ( resolve, reject ) => {\n\t\tconst xhr = new XMLHttpRequest();\n\n\t\txhr.open( 'GET', tokenUrl );\n\n\t\txhr.addEventListener( 'load', () => {\n\t\t\tconst statusCode = xhr.status;\n\t\t\tconst xhrResponse = xhr.response;\n\n\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n\t\t\t\t/**\n\t\t\t\t * Cannot download new token from the provided url.\n\t\t\t\t *\n\t\t\t\t * @error token-cannot-download-new-token\n\t\t\t\t */\n\t\t\t\treturn reject(\n\t\t\t\t\tnew CKEditorError( 'token-cannot-download-new-token: Cannot download new token from the provided url.', null )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn resolve( xhrResponse );\n\t\t} );\n\n\t\txhr.addEventListener( 'error', () => reject( new Error( 'Network Error' ) ) );\n\t\txhr.addEventListener( 'abort', () => reject( new Error( 'Abort' ) ) );\n\n\t\txhr.send();\n\t} );\n}\n\nexport default Token;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module cloud-services/cloudservices\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Token from '@ckeditor/ckeditor-cloud-services-core/src/token/token';\n/**\n * Plugin introducing integration between CKEditor 5 and CKEditor Cloud Services .\n *\n * It initializes the token provider based on\n * the {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudService`}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CloudServices extends Plugin {\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return 'CloudServices';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const config = editor.config;\n    const options = config.get('cloudServices') || {};\n\n    for (const optionName in options) {\n      this[optionName] = options[optionName];\n    }\n    /**\n     * The authentication token URL for CKEditor Cloud Services or a callback to the token value promise. See the\n     * {@link module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl} for more details.\n     *\n     * @readonly\n     * @member {String|Function|undefined} #tokenUrl\n     */\n\n    /**\n     * The URL to which the files should be uploaded.\n     *\n     * @readonly\n     * @member {String} #uploadUrl\n     */\n\n    /**\n     * Other plugins use this token for the authorization process. It handles token requesting and refreshing.\n     * Its value is `null` when {@link module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl} is not provided.\n     *\n     * @readonly\n     * @member {Object|null} #token\n     */\n\n\n    if (!this.tokenUrl) {\n      this.token = null;\n      return;\n    }\n\n    this.token = new CloudServices.Token(this.tokenUrl);\n    return this.token.init();\n  }\n\n}\nCloudServices.Token = Token;\n/**\n * The configuration of CKEditor Cloud Services. Introduced by the {@link module:cloud-services/cloudservices~CloudServices} plugin.\n *\n * Read more in {@link module:cloud-services/cloudservices~CloudServicesConfig}.\n *\n * @member {module:cloud-services/cloudservices~CloudServicesConfig} module:core/editor/editorconfig~EditorConfig#cloudServices\n */\n\n/**\n * The configuration for all plugins using CKEditor Cloud Services.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n *\t\t\t\t\tuploadUrl: 'https://your-organization-id.cke-cs.com/easyimage/upload/'\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CloudServicesConfig\n */\n\n/**\n * A token URL or a token request function.\n *\n * As a string, it should be a URL to the security token endpoint in your application. The role of this endpoint is to securely authorize\n * the end users of your application to use [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services) only\n * if they should have access e.g. to upload files with {@glink @cs guides/easy-image/quick-start Easy Image} or to use the\n * {@glink @cs guides/collaboration/quick-start Collaboration} service.\n *\n *\t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: 'https://example.com/cs-token-endpoint',\n *\t\t\t\t\t...\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * As a function, it should provide a promise to the token value, so you can highly customize the token and provide your token URL endpoint.\n * By using this approach you can set your own headers for the request.\n *\n * \t\tClassicEditor\n *\t\t\t.create( document.querySelector( '#editor' ), {\n *\t\t\t\tcloudServices: {\n *\t\t\t\t\ttokenUrl: () => new Promise( ( resolve, reject ) => {\n *\t\t\t\t\t\tconst xhr = new XMLHttpRequest();\n *\n *\t\t\t\t\t\txhr.open( 'GET', 'https://example.com/cs-token-endpoint' );\n *\n *\t\t\t\t\t\txhr.addEventListener( 'load', () => {\n *\t\t\t\t\t\t\tconst statusCode = xhr.status;\n *\t\t\t\t\t\t\tconst xhrResponse = xhr.response;\n *\n *\t\t\t\t\t\t\tif ( statusCode < 200 || statusCode > 299 ) {\n *\t\t\t\t\t\t\t\treturn reject( new Error( 'Cannot download new token!' ) );\n *\t\t\t\t\t\t\t}\n *\n *\t\t\t\t\t\t\treturn resolve( xhrResponse );\n *\t\t\t\t\t\t} );\n *\n *\t\t\t\t\t\txhr.addEventListener( 'error', () => reject( new Error( 'Network Error' ) ) );\n *\t\t\t\t\t\txhr.addEventListener( 'abort', () => reject( new Error( 'Abort' ) ) );\n *\n *\t\t\t\t\t\txhr.setRequestHeader( customHeader, customValue );\n *\n *\t\t\t\t\t\txhr.send();\n *\t\t\t\t\t} ),\n *\t\t\t\t\t...\n *\t\t\t\t}\n *\t\t\t} )\n *\n * You can find more information about token endpoints in the\n * {@glink @cs guides/easy-image/quick-start#create-token-endpoint Cloud Services - Quick start}\n * and {@glink @cs guides/security/token-endpoint Cloud Services - Token endpoint} documentation.\n *\n * Without a properly working token endpoint (token URL) CKEditor plugins will not be able to connect to CKEditor Cloud Services.\n *\n * @member {String|Function} module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl\n */\n\n/**\n * The endpoint URL for [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services) uploads.\n * This option must be set for Easy Image to work correctly.\n *\n * The upload URL is unique for each customer and can be found in the\n * [CKEditor Ecosystem customer dashboard](https://dashboard.ckeditor.com) after subscribing to the Easy Image service.\n * To learn how to start using Easy Image, check the {@glink @cs guides/easy-image/quick-start Easy Image - Quick start} documentation.\n *\n * Note: Make sure to also set the {@link module:cloud-services/cloudservices~CloudServicesConfig#tokenUrl} configuration option.\n *\n * @member {String} module:cloud-services/cloudservices~CloudServicesConfig#uploadUrl\n */\n\n/**\n * The URL for web socket communication, used by the `RealTimeCollaborativeEditing` plugin. Every customer (organization in the CKEditor\n * Ecosystem dashboard) has their own, unique URLs to communicate with CKEditor Cloud Services. The URL can be found in the\n * CKEditor Ecosystem customer dashboard.\n *\n * Note: Unlike most plugins, `RealTimeCollaborativeEditing` is not included in any CKEditor 5 build and needs to be installed manually.\n * Check [Collaboration overview](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/overview.html) for more details.\n *\n * @member {String} module:cloud-services/cloudservices~CloudServicesConfig#webSocketUrl\n */\n\n/**\n * Document ID, used by the `RealTimeCollaborativeEditing` plugin. All editor instances created with the same document ID will collaborate.\n * It means that each document needs a different document ID if you do not want to start collaboration between these documents.\n * The ID is usually a primary key of the document in the database, but you are free to provide whatever identifier fits your scenario.\n *\n * Note: Unlike most plugins, `RealTimeCollaborativeEditing` is not included in any CKEditor 5 build and needs to be installed manually.\n * Check [Collaboration overview](https://ckeditor.com/docs/ckeditor5/latest/features/collaboration/overview.html) for more details.\n *\n * @member {String} module:cloud-services/cloudservices~CloudServicesConfig#documentId\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n* @module easy-image/cloudservicesuploadadapter\n*/\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport UploadGateway from '@ckeditor/ckeditor-cloud-services-core/src/uploadgateway/uploadgateway';\nimport CloudServices from '@ckeditor/ckeditor5-cloud-services/src/cloudservices';\n/**\n * A plugin that enables upload to [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/).\n *\n * It is mainly used by the {@link module:easy-image/easyimage~EasyImage} feature.\n *\n * After enabling this adapter you need to configure the CKEditor Cloud Services integration through\n * {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CloudServicesUploadAdapter extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FileRepository, CloudServices];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const cloudServices = editor.plugins.get(CloudServices);\n    const token = cloudServices.token;\n    const uploadUrl = cloudServices.uploadUrl;\n\n    if (!token) {\n      return;\n    }\n\n    this._uploadGateway = new CloudServicesUploadAdapter._UploadGateway(token, uploadUrl);\n\n    editor.plugins.get(FileRepository).createUploadAdapter = loader => {\n      return new Adapter(this._uploadGateway, loader);\n    };\n  }\n\n}\n/**\n * @private\n */\n\nclass Adapter {\n  constructor(uploadGateway, loader) {\n    this.uploadGateway = uploadGateway;\n    this.loader = loader;\n  }\n\n  upload() {\n    return this.loader.file.then(file => {\n      this.fileUploader = this.uploadGateway.upload(file);\n      this.fileUploader.on('progress', (evt, data) => {\n        this.loader.uploadTotal = data.total;\n        this.loader.uploaded = data.uploaded;\n      });\n      return this.fileUploader.send();\n    });\n  }\n\n  abort() {\n    this.fileUploader.abort();\n  }\n\n} // Store the API in static property to easily overwrite it in tests.\n// Too bad dependency injection does not work in Webpack + ES 6 (const) + Babel.\n\n\nCloudServicesUploadAdapter._UploadGateway = UploadGateway;","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module cloud-services-core/uploadgateway/uploadgateway\n */\n\nimport FileUploader from './fileuploader';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n\n/**\n * UploadGateway abstracts file uploads to CKEditor Cloud Services.\n */\nexport default class UploadGateway {\n\t/**\n\t * Creates `UploadGateway` instance.\n\t *\n\t * @param {module:cloud-services-core/token~Token} token Token used for authentication.\n\t * @param {String} apiAddress API address.\n\t */\n\tconstructor( token, apiAddress ) {\n\t\tif ( !token ) {\n\t\t\t/**\n\t\t\t * Token must be provided.\n\t\t\t *\n\t\t\t * @error uploadgateway-missing-token\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'uploadgateway-missing-token: Token must be provided.', null );\n\t\t}\n\n\t\tif ( !apiAddress ) {\n\t\t\t/**\n\t\t\t * Api address must be provided.\n\t\t\t *\n\t\t\t * @error uploadgateway-missing-api-address\n\t\t\t */\n\t\t\tthrow new CKEditorError( 'uploadgateway-missing-api-address: Api address must be provided.', null );\n\t\t}\n\n\t\t/**\n\t\t * CKEditor Cloud Services access token.\n\t\t *\n\t\t * @type {module:cloud-services-core/token~Token}\n\t\t * @private\n\t\t */\n\t\tthis._token = token;\n\n\t\t/**\n\t\t * CKEditor Cloud Services API address.\n\t\t *\n\t\t * @type {String}\n\t\t * @private\n\t\t */\n\t\tthis._apiAddress = apiAddress;\n\t}\n\n\t/**\n\t * Creates a {@link module:cloud-services-core/uploadgateway/fileuploader~FileUploader} instance that wraps\n\t * file upload process. The file is being sent at a time when the\n\t * {@link module:cloud-services-core/uploadgateway/fileuploader~FileUploader#send} method is called.\n\t *\n\t *     const token = await Token.create( 'https://token-endpoint' );\n\t *     new UploadGateway( token, 'https://example.org' )\n\t *        .upload( 'FILE' )\n\t *        .onProgress( ( data ) => console.log( data ) )\n\t *        .send()\n\t *        .then( ( response ) => console.log( response ) );\n\t *\n\t * @param {Blob|String} fileOrData A blob object or a data string encoded with Base64.\n\t * @returns {module:cloud-services-core/uploadgateway/fileuploader~FileUploader} Returns `FileUploader` instance.\n\t */\n\tupload( fileOrData ) {\n\t\treturn new FileUploader( fileOrData, this._token, this._apiAddress );\n\t}\n}\n\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/mouseobserver\n */\nimport DomEventObserver from './domeventobserver';\n/**\n * Mouse events observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View} by {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class MouseObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = 'mousedown';\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n\n}\n/**\n * Fired when mouse button is pressed down on one of the editables.\n *\n * Introduced by {@link module:engine/view/observer/mouseobserver~MouseObserver}.\n *\n * Note that this event is not available by default. To make it available {@link module:engine/view/observer/mouseobserver~MouseObserver}\n * needs to be added to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/mouseobserver~MouseObserver\n * @event module:engine/view/document~Document#event:mousedown\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widget\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MouseObserver from '@ckeditor/ckeditor5-engine/src/view/observer/mouseobserver';\nimport { getLabel, isWidget, WIDGET_SELECTED_CLASS_NAME } from './utils';\nimport { getCode, keyCodes, parseKeystroke } from '@ckeditor/ckeditor5-utils/src/keyboard';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport '../theme/widget.css';\nconst selectAllKeystrokeCode = parseKeystroke('Ctrl+A');\n/**\n * The widget plugin. It enables base support for widgets.\n *\n * See {@glink api/widget package page} for more details and documentation.\n *\n * This plugin enables multiple behaviors required by widgets:\n *\n * * The model to view selection converter for the editing pipeline (it handles widget custom selection rendering).\n * If a converted selection wraps around a widget element, that selection is marked as\n * {@link module:engine/view/selection~Selection#isFake fake}. Additionally, the `ck-widget_selected` CSS class\n * is added to indicate that widget has been selected.\n * * The mouse and keyboard events handling on and around widget elements.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Widget extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Widget';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const view = this.editor.editing.view;\n    const viewDocument = view.document;\n    /**\n     * Holds previously selected widgets.\n     *\n     * @private\n     * @type {Set.<module:engine/view/element~Element>}\n     */\n\n    this._previouslySelected = new Set(); // Model to view selection converter.\n    // Converts selection placed over widget element to fake selection\n\n    this.editor.editing.downcastDispatcher.on('selection', (evt, data, conversionApi) => {\n      // Remove selected class from previously selected widgets.\n      this._clearPreviouslySelectedWidgets(conversionApi.writer);\n\n      const viewWriter = conversionApi.writer;\n      const viewSelection = viewWriter.document.selection;\n      const selectedElement = viewSelection.getSelectedElement();\n      let lastMarked = null;\n\n      for (const range of viewSelection.getRanges()) {\n        for (const value of range) {\n          const node = value.item; // Do not mark nested widgets in selected one. See: #57.\n\n          if (isWidget(node) && !isChild(node, lastMarked)) {\n            viewWriter.addClass(WIDGET_SELECTED_CLASS_NAME, node);\n\n            this._previouslySelected.add(node);\n\n            lastMarked = node; // Check if widget is a single element selected.\n\n            if (node == selectedElement) {\n              viewWriter.setSelection(viewSelection.getRanges(), {\n                fake: true,\n                label: getLabel(selectedElement)\n              });\n            }\n          }\n        }\n      }\n    }, {\n      priority: 'low'\n    }); // If mouse down is pressed on widget - create selection over whole widget.\n\n    view.addObserver(MouseObserver);\n    this.listenTo(viewDocument, 'mousedown', (...args) => this._onMousedown(...args)); // Handle custom keydown behaviour.\n\n    this.listenTo(viewDocument, 'keydown', (...args) => this._onKeydown(...args), {\n      priority: 'high'\n    }); // Handle custom delete behaviour.\n\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      if (this._handleDelete(data.direction == 'forward')) {\n        data.preventDefault();\n        evt.stop();\n      }\n    }, {\n      priority: 'high'\n    });\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:mousedown mousedown} events on widget elements.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _onMousedown(eventInfo, domEventData) {\n    const editor = this.editor;\n    const view = editor.editing.view;\n    const viewDocument = view.document;\n    let element = domEventData.target; // Do nothing for single or double click inside nested editable.\n\n    if (isInsideNestedEditable(element)) {\n      // But at least triple click inside nested editable causes broken selection in Safari.\n      // For such event, we select the entire nested editable element.\n      // See: https://github.com/ckeditor/ckeditor5/issues/1463.\n      if (env.isSafari && domEventData.domEvent.detail >= 3) {\n        const mapper = editor.editing.mapper;\n        const modelElement = mapper.toModelElement(element);\n        this.editor.model.change(writer => {\n          domEventData.preventDefault();\n          writer.setSelection(modelElement, 'in');\n        });\n      }\n\n      return;\n    } // If target is not a widget element - check if one of the ancestors is.\n\n\n    if (!isWidget(element)) {\n      element = element.findAncestor(isWidget);\n\n      if (!element) {\n        return;\n      }\n    }\n\n    domEventData.preventDefault(); // Focus editor if is not focused already.\n\n    if (!viewDocument.isFocused) {\n      view.focus();\n    } // Create model selection over widget.\n\n\n    const modelElement = editor.editing.mapper.toModelElement(element);\n\n    this._setSelectionOverElement(modelElement);\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _onKeydown(eventInfo, domEventData) {\n    const keyCode = domEventData.keyCode;\n    const isLtrContent = this.editor.locale.contentLanguageDirection === 'ltr';\n    const isForward = keyCode == keyCodes.arrowdown || keyCode == keyCodes[isLtrContent ? 'arrowright' : 'arrowleft'];\n    let wasHandled = false; // Checks if the keys were handled and then prevents the default event behaviour and stops\n    // the propagation.\n\n    if (isArrowKeyCode(keyCode)) {\n      wasHandled = this._handleArrowKeys(isForward);\n    } else if (isSelectAllKeyCode(domEventData)) {\n      wasHandled = this._selectAllNestedEditableContent() || this._selectAllContent();\n    } else if (keyCode === keyCodes.enter) {\n      wasHandled = this._handleEnterKey(domEventData.shiftKey);\n    }\n\n    if (wasHandled) {\n      domEventData.preventDefault();\n      eventInfo.stop();\n    }\n  }\n  /**\n   * Handles delete keys: backspace and delete.\n   *\n   * @private\n   * @param {Boolean} isForward Set to true if delete was performed in forward direction.\n   * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n   */\n\n\n  _handleDelete(isForward) {\n    // Do nothing when the read only mode is enabled.\n    if (this.editor.isReadOnly) {\n      return;\n    }\n\n    const modelDocument = this.editor.model.document;\n    const modelSelection = modelDocument.selection; // Do nothing on non-collapsed selection.\n\n    if (!modelSelection.isCollapsed) {\n      return;\n    }\n\n    const objectElement = this._getObjectElementNextToSelection(isForward);\n\n    if (objectElement) {\n      this.editor.model.change(writer => {\n        let previousNode = modelSelection.anchor.parent; // Remove previous element if empty.\n\n        while (previousNode.isEmpty) {\n          const nodeToRemove = previousNode;\n          previousNode = nodeToRemove.parent;\n          writer.remove(nodeToRemove);\n        }\n\n        this._setSelectionOverElement(objectElement);\n      });\n      return true;\n    }\n  }\n  /**\n   * Handles arrow keys.\n   *\n   * @private\n   * @param {Boolean} isForward Set to true if arrow key should be handled in forward direction.\n   * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n   */\n\n\n  _handleArrowKeys(isForward) {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const modelDocument = model.document;\n    const modelSelection = modelDocument.selection;\n    const objectElement = modelSelection.getSelectedElement(); // If object element is selected.\n\n    if (objectElement && schema.isObject(objectElement)) {\n      const position = isForward ? modelSelection.getLastPosition() : modelSelection.getFirstPosition();\n      const newRange = schema.getNearestSelectionRange(position, isForward ? 'forward' : 'backward');\n\n      if (newRange) {\n        model.change(writer => {\n          writer.setSelection(newRange);\n        });\n      }\n\n      return true;\n    } // If selection is next to object element.\n    // Return if not collapsed.\n\n\n    if (!modelSelection.isCollapsed) {\n      return;\n    }\n\n    const objectElement2 = this._getObjectElementNextToSelection(isForward);\n\n    if (!!objectElement2 && schema.isObject(objectElement2)) {\n      this._setSelectionOverElement(objectElement2);\n\n      return true;\n    }\n  }\n  /**\n   * Handles the enter key, giving users and access to positions in the editable directly before\n   * (<kbd>Shift</kbd>+<kbd>Enter</kbd>) or after (<kbd>Enter</kbd>) the selected widget.\n   * It improves the UX, mainly when the widget is the first or last child of the root editable\n   * and there's no other way to type after or before it.\n   *\n   * @private\n   * @param {Boolean} isBackwards Set to true if the new paragraph is to be inserted before\n   * the selected widget (<kbd>Shift</kbd>+<kbd>Enter</kbd>).\n   * @returns {Boolean|undefined} Returns `true` if keys were handled correctly.\n   */\n\n\n  _handleEnterKey(isBackwards) {\n    const model = this.editor.model;\n    const modelSelection = model.document.selection;\n    const selectedElement = modelSelection.getSelectedElement();\n\n    if (shouldInsertParagraph(selectedElement, model.schema)) {\n      model.change(writer => {\n        let position = writer.createPositionAt(selectedElement, isBackwards ? 'before' : 'after');\n        const paragraph = writer.createElement('paragraph'); // Split the parent when inside a block element.\n        // https://github.com/ckeditor/ckeditor5/issues/1529\n\n        if (model.schema.isBlock(selectedElement.parent)) {\n          const paragraphLimit = model.schema.findAllowedParent(position, paragraph);\n          position = writer.split(position, paragraphLimit).position;\n        }\n\n        writer.insert(paragraph, position);\n        writer.setSelection(paragraph, 'in');\n      });\n      return true;\n    }\n  }\n  /**\n   * Extends the {@link module:engine/model/selection~Selection document's selection} to span the entire\n   * content of the nested editable if already anchored in one.\n   *\n   * See: {@link module:engine/model/schema~Schema#getLimitElement}.\n   *\n   * @private\n   */\n\n\n  _selectAllNestedEditableContent() {\n    const model = this.editor.model;\n    const documentSelection = model.document.selection;\n    const limitElement = model.schema.getLimitElement(documentSelection);\n\n    if (documentSelection.getFirstRange().root == limitElement) {\n      return false;\n    }\n\n    model.change(writer => {\n      writer.setSelection(writer.createRangeIn(limitElement));\n    });\n    return true;\n  }\n  /**\n   * Handles <kbd>CTRL + A</kbd> when widget is selected.\n   *\n   * @private\n   * @returns {Boolean} Returns true if widget was selected and selecting all was handled by this method.\n   */\n\n\n  _selectAllContent() {\n    const model = this.editor.model;\n    const editing = this.editor.editing;\n    const view = editing.view;\n    const viewDocument = view.document;\n    const viewSelection = viewDocument.selection;\n    const selectedElement = viewSelection.getSelectedElement(); // Only widget is selected.\n    // https://github.com/ckeditor/ckeditor5-widget/issues/23\n\n    if (selectedElement && isWidget(selectedElement)) {\n      const widgetParent = editing.mapper.toModelElement(selectedElement.parent);\n      model.change(writer => {\n        writer.setSelection(writer.createRangeIn(widgetParent));\n      });\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Sets {@link module:engine/model/selection~Selection document's selection} over given element.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} element\n   */\n\n\n  _setSelectionOverElement(element) {\n    this.editor.model.change(writer => {\n      writer.setSelection(writer.createRangeOn(element));\n    });\n  }\n  /**\n   * Checks if {@link module:engine/model/element~Element element} placed next to the current\n   * {@link module:engine/model/selection~Selection model selection} exists and is marked in\n   * {@link module:engine/model/schema~Schema schema} as `object`.\n   *\n   * @private\n   * @param {Boolean} forward Direction of checking.\n   * @returns {module:engine/model/element~Element|null}\n   */\n\n\n  _getObjectElementNextToSelection(forward) {\n    const model = this.editor.model;\n    const schema = model.schema;\n    const modelSelection = model.document.selection; // Clone current selection to use it as a probe. We must leave default selection as it is so it can return\n    // to its current state after undo.\n\n    const probe = model.createSelection(modelSelection);\n    model.modifySelection(probe, {\n      direction: forward ? 'forward' : 'backward'\n    });\n    const objectElement = forward ? probe.focus.nodeBefore : probe.focus.nodeAfter;\n\n    if (!!objectElement && schema.isObject(objectElement)) {\n      return objectElement;\n    }\n\n    return null;\n  }\n  /**\n   * Removes CSS class from previously selected widgets.\n   *\n   * @private\n   * @param {module:engine/view/downcastwriter~DowncastWriter} writer\n   */\n\n\n  _clearPreviouslySelectedWidgets(writer) {\n    for (const widget of this._previouslySelected) {\n      writer.removeClass(WIDGET_SELECTED_CLASS_NAME, widget);\n    }\n\n    this._previouslySelected.clear();\n  }\n\n} // Returns 'true' if provided key code represents one of the arrow keys.\n//\n// @param {Number} keyCode\n// @returns {Boolean}\n\nfunction isArrowKeyCode(keyCode) {\n  return keyCode == keyCodes.arrowright || keyCode == keyCodes.arrowleft || keyCode == keyCodes.arrowup || keyCode == keyCodes.arrowdown;\n} // Returns 'true' if provided (DOM) key event data corresponds with the Ctrl+A keystroke.\n//\n// @param {module:engine/view/observer/keyobserver~KeyEventData} domEventData\n// @returns {Boolean}\n\n\nfunction isSelectAllKeyCode(domEventData) {\n  return getCode(domEventData) == selectAllKeystrokeCode;\n} // Returns `true` when element is a nested editable or is placed inside one.\n//\n// @param {module:engine/view/element~Element}\n// @returns {Boolean}\n\n\nfunction isInsideNestedEditable(element) {\n  while (element) {\n    if (element.is('editableElement') && !element.is('rootElement')) {\n      return true;\n    } // Click on nested widget should select it.\n\n\n    if (isWidget(element)) {\n      return false;\n    }\n\n    element = element.parent;\n  }\n\n  return false;\n} // Checks whether the specified `element` is a child of the `parent` element.\n//\n// @param {module:engine/view/element~Element} element An element to check.\n// @param {module:engine/view/element~Element|null} parent A parent for the element.\n// @returns {Boolean}\n\n\nfunction isChild(element, parent) {\n  if (!parent) {\n    return false;\n  }\n\n  return Array.from(element.getAncestors()).includes(parent);\n} // Checks if enter key should insert paragraph. This should be done only on elements of type object (excluding inline objects).\n//\n// @param {module:engine/model/element~Element} element And element to check.\n// @param {module:engine/model/schema~Schema} schema\n\n\nfunction shouldInsertParagraph(element, schema) {\n  return element && schema.isObject(element) && !schema.isInline(element);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n/**\n * The image text alternative command. It is used to change the `alt` attribute of `<image>` elements.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageTextAlternativeCommand extends Command {\n  /**\n   * The command value: `false` if there is no `alt` attribute, otherwise the value of the `alt` attribute.\n   *\n   * @readonly\n   * @observable\n   * @member {String|Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const element = this.editor.model.document.selection.getSelectedElement();\n    this.isEnabled = isImage(element);\n\n    if (isImage(element) && element.hasAttribute('alt')) {\n      this.value = element.getAttribute('alt');\n    } else {\n      this.value = false;\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options\n   * @param {String} options.newValue The new value of the `alt` attribute to set.\n   */\n\n\n  execute(options) {\n    const model = this.editor.model;\n    const imageElement = model.document.selection.getSelectedElement();\n    model.change(writer => {\n      writer.setAttribute('alt', options.newValue, imageElement);\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative/imagetextalternativeediting\n */\nimport ImageTextAlternativeCommand from './imagetextalternativecommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The image text alternative editing plugin.\n *\n * Registers the `'imageTextAlternative'` command.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageTextAlternativeEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageTextAlternativeEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    this.editor.commands.add('imageTextAlternative', new ImageTextAlternativeCommand(this.editor));\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/labeledinput/labeledinputview\n */\nimport View from '../view';\nimport uid from '@ckeditor/ckeditor5-utils/src/uid';\nimport LabelView from '../label/labelview';\nimport '../../theme/components/labeledinput/labeledinput.css';\n/**\n * The labeled input view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class LabeledInputView extends View {\n  /**\n   * Creates an instance of the labeled input view class.\n   *\n   * @param {module:utils/locale~Locale} locale The locale instance.\n   * @param {Function} InputView Constructor of the input view.\n   */\n  constructor(locale, InputView) {\n    super(locale);\n    const inputUid = `ck-input-${uid()}`;\n    const statusUid = `ck-status-${uid()}`;\n    /**\n     * The text of the label.\n     *\n     * @observable\n     * @member {String} #label\n     */\n\n    this.set('label');\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n\n    this.set('value');\n    /**\n     * Controls whether the component is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * The validation error text. When set, it will be displayed\n     * next to the {@link #inputView} as a typical validation error message.\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** Setting this property to anything but `null` will automatically\n     * make the {@link module:ui/inputtext/inputtextview~InputTextView#hasError `hasError`}\n     * of the {@link #inputView} `true`.\n     *\n     * **Note:** Typing in the {@link #inputView} which fires the\n     * {@link module:ui/inputtext/inputtextview~InputTextView#event:input `input` event}\n     * resets this property back to `null`, indicating that the input field can be re–validated.\n     *\n     * @observable\n     * @member {String|null} #errorText\n     */\n\n    this.set('errorText', null);\n    /**\n     * The additional information text displayed next to the {@link #inputView} which can\n     * be used to inform the user about the purpose of the input, provide help or hints.\n     *\n     * Set it to `null` to hide the message.\n     *\n     * **Note:** This text will be displayed in the same place as {@link #errorText} but the\n     * latter always takes precedence: if the {@link #errorText} is set, it replaces\n     * {@link #errorText} for as long as the value of the input is invalid.\n     *\n     * @observable\n     * @member {String|null} #infoText\n     */\n\n    this.set('infoText', null);\n    /**\n     * The label view.\n     *\n     * @member {module:ui/label/labelview~LabelView} #labelView\n     */\n\n    this.labelView = this._createLabelView(inputUid);\n    /**\n     * The input view.\n     *\n     * @member {module:ui/inputtext/inputtextview~InputTextView} #inputView\n     */\n\n    this.inputView = this._createInputView(InputView, inputUid, statusUid);\n    /**\n     * The status view for the {@link #inputView}. It displays {@link #errorText} and\n     * {@link #infoText}.\n     *\n     * @member {module:ui/view~View} #statusView\n     */\n\n    this.statusView = this._createStatusView(statusUid);\n    /**\n     * The combined status text made of {@link #errorText} and {@link #infoText}.\n     * Note that when present, {@link #errorText} always takes precedence in the\n     * status.\n     *\n     * @see #errorText\n     * @see #infoText\n     * @see #statusView\n     * @private\n     * @observable\n     * @member {String|null} #_statusText\n     */\n\n    this.bind('_statusText').to(this, 'errorText', this, 'infoText', (errorText, infoText) => errorText || infoText);\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-input', bind.if('isReadOnly', 'ck-disabled')]\n      },\n      children: [this.labelView, this.inputView, this.statusView]\n    });\n  }\n  /**\n   * Creates label view class instance and bind with view.\n   *\n   * @private\n   * @param {String} id Unique id to set as labelView#for attribute.\n   * @returns {module:ui/label/labelview~LabelView}\n   */\n\n\n  _createLabelView(id) {\n    const labelView = new LabelView(this.locale);\n    labelView.for = id;\n    labelView.bind('text').to(this, 'label');\n    return labelView;\n  }\n  /**\n   * Creates input view class instance and bind with view.\n   *\n   * @private\n   * @param {Function} InputView Input view constructor.\n   * @param {String} inputUid Unique id to set as inputView#id attribute.\n   * @param {String} statusUid Unique id of the status for the input's `aria-describedby` attribute.\n   * @returns {module:ui/inputtext/inputtextview~InputTextView}\n   */\n\n\n  _createInputView(InputView, inputUid, statusUid) {\n    const inputView = new InputView(this.locale, statusUid);\n    inputView.id = inputUid;\n    inputView.ariaDescribedById = statusUid;\n    inputView.bind('value').to(this);\n    inputView.bind('isReadOnly').to(this);\n    inputView.bind('hasError').to(this, 'errorText', value => !!value);\n    inputView.on('input', () => {\n      // UX: Make the error text disappear and disable the error indicator as the user\n      // starts fixing the errors.\n      this.errorText = null;\n    });\n    return inputView;\n  }\n  /**\n   * Creates the status view instance. It displays {@link #errorText} and {@link #infoText}\n   * next to the {@link #inputView}. See {@link #_statusText}.\n   *\n   * @private\n   * @param {String} statusUid Unique id of the status, shared with the input's `aria-describedby` attribute.\n   * @returns {module:ui/view~View}\n   */\n\n\n  _createStatusView(statusUid) {\n    const statusView = new View(this.locale);\n    const bind = this.bindTemplate;\n    statusView.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-labeled-input__status', bind.if('errorText', 'ck-labeled-input__status_error'), bind.if('_statusText', 'ck-hidden', value => !value)],\n        id: statusUid,\n        role: bind.if('errorText', 'alert')\n      },\n      children: [{\n        text: bind.to('_statusText')\n      }]\n    });\n    return statusView;\n  }\n  /**\n   * Moves the focus to the input and selects the value.\n   */\n\n\n  select() {\n    this.inputView.select();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    this.inputView.focus();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/inputtext/inputtextview\n */\nimport View from '../view';\nimport '../../theme/components/inputtext/inputtext.css';\n/**\n * The text input view class.\n *\n * @extends module:ui/view~View\n */\n\nexport default class InputTextView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * The value of the input.\n     *\n     * @observable\n     * @member {String} #value\n     */\n\n    this.set('value');\n    /**\n     * The `id` attribute of the input (i.e. to pair with a `<label>` element).\n     *\n     * @observable\n     * @member {String} #id\n     */\n\n    this.set('id');\n    /**\n     * The `placeholder` attribute of the input.\n     *\n     * @observable\n     * @member {String} #placeholder\n     */\n\n    this.set('placeholder');\n    /**\n     * Controls whether the input view is in read-only mode.\n     *\n     * @observable\n     * @member {Boolean} #isReadOnly\n     */\n\n    this.set('isReadOnly', false);\n    /**\n     * Set to `true` when the field has some error. Usually controlled via\n     * {@link module:ui/labeledinput/labeledinputview~LabeledInputView#errorText}.\n     *\n     * @observable\n     * @member {Boolean} #hasError\n     */\n\n    this.set('hasError', false);\n    /**\n     * The `id` of the element describing this field, e.g. when it has\n     * some error, it helps screen readers read the error text.\n     *\n     * @observable\n     * @member {Boolean} #ariaDescribedById\n     */\n\n    this.set('ariaDescribedById');\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'input',\n      attributes: {\n        type: 'text',\n        class: ['ck', 'ck-input', 'ck-input-text', bind.if('hasError', 'ck-error')],\n        id: bind.to('id'),\n        placeholder: bind.to('placeholder'),\n        readonly: bind.to('isReadOnly'),\n        'aria-invalid': bind.if('hasError', true),\n        'aria-describedby': bind.to('ariaDescribedById')\n      },\n      on: {\n        input: bind.to('input')\n      }\n    });\n    /**\n     * Fired when the user types in the input. Corresponds to the native\n     * DOM `input` event.\n     *\n     * @event input\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n\n    const setValue = value => {\n      this.element.value = !value && value !== 0 ? '' : value;\n    };\n\n    setValue(this.value); // Bind `this.value` to the DOM element's value.\n    // We cannot use `value` DOM attribute because removing it on Edge does not clear the DOM element's value property.\n\n    this.on('change:value', (evt, name, value) => {\n      setValue(value);\n    });\n  }\n  /**\n   * Moves the focus to the input and selects the value.\n   */\n\n\n  select() {\n    this.element.select();\n  }\n  /**\n   * Focuses the input.\n   */\n\n\n  focus() {\n    this.element.focus();\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/bindings/submithandler\n */\n\n/**\n * A handler useful for {@link module:ui/view~View views} working as HTML forms. It intercepts a native DOM\n * `submit` event, prevents the default web browser behavior (navigation and page reload) and\n * fires the `submit` event on a view instead. Such a custom event can be then used by any\n * {@link module:utils/dom/emittermixin~Emitter emitter}, e.g. to serialize the form data.\n *\n *\t\timport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\n *\n *\t\t// ...\n *\n *\t\tclass AnyFormView extends View {\n *\t\t\tconstructor() {\n *\t\t\t\tsuper();\n *\n *\t\t\t\t// ...\n *\n *\t\t\t\tsubmitHandler( {\n *\t\t\t\t\tview: this\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n *\n *\t\t// ...\n *\n *\t\tconst view = new AnyFormView();\n *\n *\t\t// A sample listener attached by an emitter working with the view.\n *\t\tthis.listenTo( view, 'submit', () => {\n *\t\t\tsaveTheFormData();\n *\t\t\thideTheForm();\n *\t\t} );\n *\n * @param {Object} [options] Configuration options.\n * @param {module:ui/view~View} options.view The view which DOM `submit` events should be handled.\n */\nexport default function submitHandler({\n  view\n}) {\n  view.listenTo(view.element, 'submit', (evt, domEvt) => {\n    domEvt.preventDefault();\n    view.fire('submit');\n  }, {\n    useCapture: true\n  });\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetextalternative/ui/textalternativeformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../../theme/textalternativeform.css';\n/**\n * The TextAlternativeFormView class.\n *\n * @extends module:ui/view~View\n */\nexport default class TextAlternativeFormView extends View {\n    /**\n   * @inheritDoc\n   */\n    constructor(locale) {\n        super(locale);\n        const t = this.locale.t;\n        /**\n     * Tracks information about the DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n        this.focusTracker = new FocusTracker();\n        /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n     * A textarea with a label.\n     *\n     * @member {module:ui/labeledinput/labeledinputview~LabeledInputView} #labeledTextarea\n     */\n        this.labeledInput = this._createLabeledInputView();\n        /**\n     * A button used to submit the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #saveButtonView\n     */\n        this.saveButtonView = this._createButton(t('bw'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n     * A button used to cancel the form.\n     *\n     * @member {module:ui/button/buttonview~ButtonView} #cancelButtonView\n     */\n        this.cancelButtonView = this._createButton(t('bx'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n     * A collection of views which can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this._focusables = new ViewCollection();\n        /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-text-alternative-form'\n                ],\n                // https://github.com/ckeditor/ckeditor5-image/issues/40\n                tabindex: '-1'\n            },\n            children: [\n                this.labeledInput,\n                this.saveButtonView,\n                this.cancelButtonView\n            ]\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n        super.render();\n        this.keystrokes.listenTo(this.element);\n        submitHandler({ view: this });\n        [\n            this.labeledInput,\n            this.saveButtonView,\n            this.cancelButtonView\n        ].forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n    }\n    /**\n   * Creates the button view.\n   *\n   * @private\n   * @param {String} label The button label\n   * @param {String} icon The button's icon.\n   * @param {String} className The additional button CSS class name.\n   * @param {String} [eventName] The event name that the ButtonView#execute event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n   * Creates an input with a label.\n   *\n   * @private\n   * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView}\n   */\n    _createLabeledInputView() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('cy');\n        labeledInput.inputView.placeholder = t('cy');\n        return labeledInput;\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module utils/dom/tounit\n */\n\n/**\n * Returns a helper function, which adds a desired trailing\n * `unit` to the passed value.\n *\n * @param {String} unit An unit like \"px\" or \"em\".\n * @returns {module:utils/dom/tounit~helper}\n */\nexport default function toUnit(unit) {\n  /**\n   * A function, which adds a pre–defined trailing `unit`\n   * to the passed `value`.\n   *\n   * @function helper\n  \t * @param {*} value A value to be given the unit.\n  \t * @returns {String} A value with the trailing unit.\n   */\n  return value => value + unit;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\n\n/**\n * @module ui/panel/balloon/balloonpanelview\n */\nimport View from '../../view';\nimport { getOptimalPosition } from '@ckeditor/ckeditor5-utils/src/dom/position';\nimport isRange from '@ckeditor/ckeditor5-utils/src/dom/isrange';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport { isElement } from 'lodash-es';\nimport '../../../theme/components/panel/balloonpanel.css';\nconst toPx = toUnit('px');\nconst defaultLimiterElement = global.document.body;\n/**\n * The balloon panel view class.\n *\n * A floating container which can\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#pin pin} to any\n * {@link module:utils/dom/position~Options#target target} in the DOM and remain in that position\n * e.g. when the web page is scrolled.\n *\n * The balloon panel can be used to display contextual, non-blocking UI like forms, toolbars and\n * the like in its {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#content} view\n * collection.\n *\n * There is a number of {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}\n * that the balloon can use, automatically switching from one to another when the viewport space becomes\n * scarce to keep the balloon visible to the user as long as it is possible. The balloon will also\n * accept any custom position set provided by the user compatible with the\n * {@link module:utils/dom/position~Options options}.\n *\n *\t\tconst panel = new BalloonPanelView( locale );\n *\t\tconst childView = new ChildView();\n *\t\tconst positions = BalloonPanelView.defaultPositions;\n *\n *\t\tpanel.render();\n *\n *\t\t// Add a child view to the panel's content collection.\n *\t\tpanel.content.add( childView );\n *\n *\t\t// Start pinning the panel to an element with the \"target\" id DOM.\n *\t\t// The balloon will remain pinned until unpin() is called.\n *\t\tpanel.pin( {\n *\t\t\ttarget: document.querySelector( '#target' ),\n *\t\t\tpositions: [\n *\t\t\t\tpositions.northArrowSouth,\n *\t\t\t\tpositions.southArrowNorth\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\n\nexport default class BalloonPanelView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * The absolute top position of the balloon panel in pixels.\n     *\n     * @observable\n     * @default 0\n     * @member {Number} #top\n     */\n\n    this.set('top', 0);\n    /**\n     * The absolute left position of the balloon panel in pixels.\n     *\n     * @observable\n     * @default 0\n     * @member {Number} #left\n     */\n\n    this.set('left', 0);\n    /**\n     * The balloon panel's current position. The position name is reflected in the CSS class set\n     * to the balloon, i.e. `.ck-balloon-panel_arrow_nw` for the \"arrow_nw\" position. The class\n     * controls the minor aspects of the balloon's visual appearance like the placement\n     * of an {@link #withArrow arrow}. To support a new position, an additional CSS must be created.\n     *\n     * Default position names correspond with\n     * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n     *\n     * See the {@link #attachTo} and {@link #pin} methods to learn about custom balloon positions.\n     *\n     * @observable\n     * @default 'arrow_nw'\n     * @member {'arrow_nw'|'arrow_ne'|'arrow_sw'|'arrow_se'} #position\n     */\n\n    this.set('position', 'arrow_nw');\n    /**\n     * Controls whether the balloon panel is visible or not.\n     *\n     * @observable\n     * @default false\n     * @member {Boolean} #isVisible\n     */\n\n    this.set('isVisible', false);\n    /**\n     * Controls whether the balloon panel has an arrow. The presence of the arrow\n     * is reflected in the `ck-balloon-panel_with-arrow` CSS class.\n     *\n     * @observable\n     * @default true\n     * @member {Boolean} #withArrow\n     */\n\n    this.set('withArrow', true);\n    /**\n     * An additional CSS class added to the {@link #element}.\n     *\n     * @observable\n     * @member {String} #class\n     */\n\n    this.set('class');\n    /**\n     * A callback that starts pinning the panel when {@link #isVisible} gets\n     * `true`. Used by {@link #pin}.\n     *\n     * @private\n     * @member {Function} #_pinWhenIsVisibleCallback\n     */\n\n    /**\n     * A collection of the child views that creates the balloon panel contents.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.content = this.createCollection();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-balloon-panel', bind.to('position', value => `ck-balloon-panel_${value}`), bind.if('isVisible', 'ck-balloon-panel_visible'), bind.if('withArrow', 'ck-balloon-panel_with-arrow'), bind.to('class')],\n        style: {\n          top: bind.to('top', toPx),\n          left: bind.to('left', toPx)\n        }\n      },\n      children: this.content\n    });\n  }\n  /**\n   * Shows the panel.\n   *\n   * See {@link #isVisible}.\n   */\n\n\n  show() {\n    this.isVisible = true;\n  }\n  /**\n   * Hides the panel.\n   *\n   * See {@link #isVisible}.\n   */\n\n\n  hide() {\n    this.isVisible = false;\n  }\n  /**\n   * Attaches the panel to a specified {@link module:utils/dom/position~Options#target} with a\n   * smart positioning heuristics that chooses from available positions to make sure the panel\n   * is visible to the user i.e. within the limits of the viewport.\n   *\n   * This method accepts configuration {@link module:utils/dom/position~Options options}\n   * to set the `target`, optional `limiter` and `positions` the balloon should choose from.\n   *\n   *\t\tconst panel = new BalloonPanelView( locale );\n   *\t\tconst positions = BalloonPanelView.defaultPositions;\n   *\n   *\t\tpanel.render();\n   *\n   *\t\t// Attach the panel to an element with the \"target\" id DOM.\n   *\t\tpanel.attachTo( {\n   *\t\t\ttarget: document.querySelector( '#target' ),\n   *\t\t\tpositions: [\n   *\t\t\t\tpositions.northArrowSouth,\n   *\t\t\t\tpositions.southArrowNorth\n   *\t\t\t]\n   *\t\t} );\n   *\n   * **Note**: Attaching the panel will also automatically {@link #show} it.\n   *\n   * **Note**: An attached panel will not follow its target when the window is scrolled or resized.\n   * See the {@link #pin} method for a more permanent positioning strategy.\n   *\n   * @param {module:utils/dom/position~Options} options Positioning options compatible with\n   * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n   * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n   */\n\n\n  attachTo(options) {\n    this.show();\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    const positionOptions = Object.assign({}, {\n      element: this.element,\n      positions: [defaultPositions.southArrowNorth, defaultPositions.southArrowNorthWest, defaultPositions.southArrowNorthEast, defaultPositions.northArrowSouth, defaultPositions.northArrowSouthWest, defaultPositions.northArrowSouthEast],\n      limiter: defaultLimiterElement,\n      fitInViewport: true\n    }, options);\n\n    const optimalPosition = BalloonPanelView._getOptimalPosition(positionOptions); // Usually browsers make some problems with super accurate values like 104.345px\n    // so it is better to use int values.\n\n\n    const left = parseInt(optimalPosition.left);\n    const top = parseInt(optimalPosition.top);\n    const position = optimalPosition.name;\n    Object.assign(this, {\n      top,\n      left,\n      position\n    });\n  }\n  /**\n   * Works the same way as the {@link #attachTo} method except that the position of the panel is\n   * continuously updated when:\n   *\n   * * any ancestor of the {@link module:utils/dom/position~Options#target}\n   * or {@link module:utils/dom/position~Options#limiter} is scrolled,\n   * * the browser window gets resized or scrolled.\n   *\n   * Thanks to that, the panel always sticks to the {@link module:utils/dom/position~Options#target}\n   * and is immune to the changing environment.\n   *\n   *\t\tconst panel = new BalloonPanelView( locale );\n   *\t\tconst positions = BalloonPanelView.defaultPositions;\n   *\n   *\t\tpanel.render();\n   *\n   *\t\t// Pin the panel to an element with the \"target\" id DOM.\n   *\t\tpanel.pin( {\n   *\t\t\ttarget: document.querySelector( '#target' ),\n   *\t\t\tpositions: [\n   *\t\t\t\tpositions.northArrowSouth,\n   *\t\t\t\tpositions.southArrowNorth\n   *\t\t\t]\n   *\t\t} );\n   *\n   * To leave the pinned state, use the {@link #unpin} method.\n   *\n   * **Note**: Pinning the panel will also automatically {@link #show} it.\n   *\n   * @param {module:utils/dom/position~Options} options Positioning options compatible with\n   * {@link module:utils/dom/position~getOptimalPosition}. Default `positions` array is\n   * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions}.\n   */\n\n\n  pin(options) {\n    this.unpin();\n\n    this._pinWhenIsVisibleCallback = () => {\n      if (this.isVisible) {\n        this._startPinning(options);\n      } else {\n        this._stopPinning();\n      }\n    };\n\n    this._startPinning(options); // Control the state of the listeners depending on whether the panel is visible\n    // or not.\n    // TODO: Use on() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\n\n    this.listenTo(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n  }\n  /**\n   * Stops pinning the panel, as set up by {@link #pin}.\n   */\n\n\n  unpin() {\n    if (this._pinWhenIsVisibleCallback) {\n      // Deactivate listeners attached by pin().\n      this._stopPinning(); // Deactivate the panel pin() control logic.\n      // TODO: Use off() (https://github.com/ckeditor/ckeditor5-utils/issues/144).\n\n\n      this.stopListening(this, 'change:isVisible', this._pinWhenIsVisibleCallback);\n      this._pinWhenIsVisibleCallback = null;\n      this.hide();\n    }\n  }\n  /**\n   * Starts managing the pinned state of the panel. See {@link #pin}.\n   *\n   * @private\n   * @param {module:utils/dom/position~Options} options Positioning options compatible with\n   * {@link module:utils/dom/position~getOptimalPosition}.\n   */\n\n\n  _startPinning(options) {\n    this.attachTo(options);\n    const targetElement = getDomElement(options.target);\n    const limiterElement = options.limiter ? getDomElement(options.limiter) : defaultLimiterElement; // Then we need to listen on scroll event of eny element in the document.\n\n    this.listenTo(global.document, 'scroll', (evt, domEvt) => {\n      const scrollTarget = domEvt.target; // The position needs to be updated if the positioning target is within the scrolled element.\n\n      const isWithinScrollTarget = targetElement && scrollTarget.contains(targetElement); // The position needs to be updated if the positioning limiter is within the scrolled element.\n\n      const isLimiterWithinScrollTarget = limiterElement && scrollTarget.contains(limiterElement); // The positioning target and/or limiter can be a Rect, object etc..\n      // There's no way to optimize the listener then.\n\n      if (isWithinScrollTarget || isLimiterWithinScrollTarget || !targetElement || !limiterElement) {\n        this.attachTo(options);\n      }\n    }, {\n      useCapture: true\n    }); // We need to listen on window resize event and update position.\n\n    this.listenTo(global.window, 'resize', () => {\n      this.attachTo(options);\n    });\n  }\n  /**\n   * Stops managing the pinned state of the panel. See {@link #pin}.\n   *\n   * @private\n   */\n\n\n  _stopPinning() {\n    this.stopListening(global.document, 'scroll');\n    this.stopListening(global.window, 'resize');\n  }\n\n} // Returns the DOM element for given object or null, if there is none,\n// e.g. when the passed object is a Rect instance or so.\n//\n// @private\n// @param {*} object\n// @returns {HTMLElement|null}\n\nfunction getDomElement(object) {\n  if (isElement(object)) {\n    return object;\n  }\n\n  if (isRange(object)) {\n    return object.commonAncestorContainer;\n  }\n\n  if (typeof object == 'function') {\n    return getDomElement(object());\n  }\n\n  return null;\n}\n/**\n * A horizontal offset of the arrow tip from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-----|---------...\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t |     |\n *\t\t +--+  |  +------...\n *\t\t     \\ | /\n *\t\t      \\|/\n *\t    >|-----|<---------------- horizontal offset\n *\n * @default 30\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowHorizontalOffset\n */\n\n\nBalloonPanelView.arrowHorizontalOffset = 25;\n/**\n * A vertical offset of the arrow from the edge of the balloon. Controlled by CSS.\n *\n *\t\t +-------------...\n *\t\t |\n *\t\t |\n *\t\t |                      /-- vertical offset\n *\t\t |                     V\n *\t\t +--+    +-----...    ---------\n *\t\t     \\  /              |\n *\t\t      \\/               |\n *\t\t-------------------------------\n *\t\t                       ^\n *\n * @default 15\n * @member {Number} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.arrowVerticalOffset\n */\n\nBalloonPanelView.arrowVerticalOffset = 10;\n/**\n * Function used to calculate the optimal position for the balloon.\n *\n * @protected\n * @member {Function} module:ui/panel/balloon/balloonpanelview~BalloonPanelView._getOptimalPosition\n */\n\nBalloonPanelView._getOptimalPosition = getOptimalPosition;\n/**\n * A default set of positioning functions used by the balloon panel view\n * when attaching using the {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo} method.\n *\n * The available positioning functions are as follows:\n *\n * **North**\n *\n * * `northArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t    [ Target ]\n *\n * * `northArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t          [ Target ]\n *\n * * `northArrowSouthWest`\n *\n * \t\t  +-----------------+\n * \t\t  |     Balloon     |\n * \t\t  +-----------------+\n * \t\t     V\n * \t\t[ Target ]\n *\n * **North west**\n *\n * * `northWestArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t         [ Target ]\n *\n * * `northWestArrowSouthWest`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t   V\n * \t\t   [ Target ]\n *\n * * `northWestArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t               [ Target ]\n *\n * **North east**\n *\n * * `northEastArrowSouth`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * * `northEastArrowSouthEast`\n *\n * \t\t+-----------------+\n * \t\t|     Balloon     |\n * \t\t+-----------------+\n * \t\t               V\n * \t\t      [ Target ]\n *\n * * `northEastArrowSouthWest`\n *\n * \t\t      +-----------------+\n * \t\t      |     Balloon     |\n * \t\t      +-----------------+\n * \t\t         V\n * \t\t[ Target ]\n *\n * **South**\n *\n * * `southArrowNorth`\n *\n *\t\t    [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthEast`\n *\n *\t\t          [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t     ^\n *\t\t   +-----------------+\n *\t\t   |     Balloon     |\n *\t\t   +-----------------+\n *\n * **South west**\n *\n * * `southWestArrowNorth`\n *\n *\t\t         [ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthWest`\n *\n *\t\t  [ Target ]\n *\t\t  ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southWestArrowNorthEast`\n *\n *\t\t               [ Target ]\n *\t\t               ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * **South east**\n *\n * * `southEastArrowNorth`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthEast`\n *\n *\t\t       [ Target ]\n *\t\t                ^\n *\t\t+-----------------+\n *\t\t|     Balloon     |\n *\t\t+-----------------+\n *\n * * `southEastArrowNorthWest`\n *\n *\t\t[ Target ]\n *\t\t         ^\n *\t\t       +-----------------+\n *\t\t       |     Balloon     |\n *\t\t       +-----------------+\n *\n * See {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView#attachTo}.\n *\n * Positioning functions must be compatible with {@link module:utils/dom/position~Position}.\n *\n * The name that the position function returns will be reflected in the balloon panel's class that\n * controls the placement of the \"arrow\". See {@link #position} to learn more.\n *\n * @member {Object} module:ui/panel/balloon/balloonpanelview~BalloonPanelView.defaultPositions\n */\n\nBalloonPanelView.defaultPositions = {\n  // ------- North\n  northArrowSouth: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n    name: 'arrow_s'\n  }),\n  northArrowSouthEast: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_se'\n  }),\n  northArrowSouthWest: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_sw'\n  }),\n  // ------- North west\n  northWestArrowSouth: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.left - balloonRect.width / 2,\n    name: 'arrow_s'\n  }),\n  northWestArrowSouthWest: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_sw'\n  }),\n  northWestArrowSouthEast: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_se'\n  }),\n  // ------- North east\n  northEastArrowSouth: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.right - balloonRect.width / 2,\n    name: 'arrow_s'\n  }),\n  northEastArrowSouthEast: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_se'\n  }),\n  northEastArrowSouthWest: (targetRect, balloonRect) => ({\n    top: getNorthTop(targetRect, balloonRect),\n    left: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_sw'\n  }),\n  // ------- South\n  southArrowNorth: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.left + targetRect.width / 2 - balloonRect.width / 2,\n    name: 'arrow_n'\n  }),\n  southArrowNorthEast: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.left + targetRect.width / 2 - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_ne'\n  }),\n  southArrowNorthWest: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.left + targetRect.width / 2 - BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_nw'\n  }),\n  // ------- South west\n  southWestArrowNorth: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.left - balloonRect.width / 2,\n    name: 'arrow_n'\n  }),\n  southWestArrowNorthWest: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.left - BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_nw'\n  }),\n  southWestArrowNorthEast: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.left - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_ne'\n  }),\n  // ------- South east\n  southEastArrowNorth: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.right - balloonRect.width / 2,\n    name: 'arrow_n'\n  }),\n  southEastArrowNorthEast: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.right - balloonRect.width + BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_ne'\n  }),\n  southEastArrowNorthWest: (targetRect, balloonRect) => ({\n    top: getSouthTop(targetRect, balloonRect),\n    left: targetRect.right - BalloonPanelView.arrowHorizontalOffset,\n    name: 'arrow_nw'\n  })\n}; // Returns the top coordinate for positions starting with `north*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\n\nfunction getNorthTop(targetRect, balloonRect) {\n  return targetRect.top - balloonRect.height - BalloonPanelView.arrowVerticalOffset;\n} // Returns the top coordinate for positions starting with `south*`.\n//\n// @private\n// @param {utils/dom/rect~Rect} targetRect A rect of the target.\n// @param {utils/dom/rect~Rect} elementRect A rect of the balloon.\n// @returns {Number}\n\n\nfunction getSouthTop(targetRect) {\n  return targetRect.bottom + BalloonPanelView.arrowVerticalOffset;\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z\\\" /></svg>\\n\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module ui/panel/balloon/contextualballoon\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BalloonPanelView from './balloonpanelview';\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport toUnit from '@ckeditor/ckeditor5-utils/src/dom/tounit';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport prevIcon from '../../../theme/icons/previous-arrow.svg';\nimport nextIcon from '../../../theme/icons/next-arrow.svg';\nimport '../../../theme/components/panel/balloonrotator.css';\nimport '../../../theme/components/panel/fakepanel.css';\nconst toPx = toUnit('px');\n/**\n * Provides the common contextual balloon for the editor.\n *\n * The role of this plugin is to unify the contextual balloons logic, simplify views management and help\n * avoid the unnecessary complexity of handling multiple {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n * instances in the editor.\n *\n * This plugin allows for creating single or multiple panel stacks.\n *\n * Each stack may have multiple views, with the one on the top being visible. When the visible view is removed from the stack,\n * the previous view becomes visible.\n *\n * It might be useful to implement nested navigation in a balloon. For instance, a toolbar view may contain a link button.\n * When you click it, a link view (which lets you set the URL) is created and put on top of the toolbar view, so the link panel\n * is displayed. When you finish editing the link and close (remove) the link view, the toolbar view is visible again.\n *\n * However, there are cases when there are multiple independent balloons to be displayed, for instance, if the selection\n * is inside two inline comments at the same time. For such cases, you can create two independent panel stacks.\n * The contextual balloon plugin will create a navigation bar to let the users switch between these panel stacks using the \"Next\"\n * and \"Previous\" buttons.\n *\n * If there are no views in the current stack, the balloon panel will try to switch to the next stack. If there are no\n * panels in any stack, the balloon panel will be hidden.\n *\n * **Note**: To force the balloon panel to show only one view, even if there are other stacks, use the `singleViewMode=true` option\n * when {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon#add adding} a view to a panel.\n *\n * From the implementation point of view, the contextual ballon plugin is reusing a single\n * {@link module:ui/panel/balloon/balloonpanelview~BalloonPanelView} instance to display multiple contextual balloon\n * panels in the editor. It also creates a special {@link module:ui/panel/balloon/contextualballoon~RotatorView rotator view},\n * used to manage multiple panel stacks. Rotator view is a child of the balloon panel view and the parent of the specific\n * view you want to display. If there is more than one panel stack to be displayed, the rotator view will add a\n * navigation bar. If there is only one stack, the rotator view is transparent (it does not add any UI elements).\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ContextualBalloon extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'ContextualBalloon';\n    }\n    /**\n   * @inheritDoc\n   */\n    constructor(editor) {\n        super(editor);\n        /**\n     * The {@link module:utils/dom/position~Options#limiter position limiter}\n     * for the {@link #view balloon}, used when no `limiter` has been passed into {@link #add}\n     * or {@link #updatePosition}.\n     *\n     * By default, a function that obtains the farthest DOM\n     * {@link module:engine/view/rooteditableelement~RootEditableElement}\n     * of the {@link module:engine/view/document~Document#selection}.\n     *\n     * @member {module:utils/dom/position~Options#limiter} #positionLimiter\n     */\n        this.positionLimiter = () => {\n            const view = this.editor.editing.view;\n            const viewDocument = view.document;\n            const editableElement = viewDocument.selection.editableElement;\n            if (editableElement) {\n                return view.domConverter.mapViewToDom(editableElement.root);\n            }\n            return null;\n        };\n        /**\n     * The currently visible view or `null` when there are no views in any stack.\n     *\n     * @readonly\n     * @observable\n     * @member {module:ui/view~View|null} #visibleView\n     */\n        this.set('visibleView', null);\n        /**\n     * The common balloon panel view.\n     *\n     * @readonly\n     * @member {module:ui/panel/balloon/balloonpanelview~BalloonPanelView} #view\n     */\n        this.view = new BalloonPanelView(editor.locale);\n        editor.ui.view.body.add(this.view);\n        editor.ui.focusTracker.add(this.view.element);\n        /**\n     * The map of views and their stacks.\n     *\n     * @private\n     * @type {Map.<module:ui/view~View,Set>}\n     */\n        this._viewToStack = new Map();\n        /**\n     * The map of IDs and stacks.\n     *\n     * @private\n     * @type {Map.<String,Set>}\n     */\n        this._idToStack = new Map();\n        /**\n     * A total number of all stacks in the balloon.\n     *\n     * @private\n     * @readonly\n     * @observable\n     * @member {Number} #_numberOfStacks\n     */\n        this.set('_numberOfStacks', 0);\n        /**\n     * A flag that controls the single view mode.\n     *\n     * @private\n     * @readonly\n     * @observable\n     * @member {Boolean} #_singleViewMode\n     */\n        this.set('_singleViewMode', false);\n        /**\n     * Rotator view embedded in the contextual balloon.\n     * Displays the currently visible view in the balloon and provides navigation for switching stacks.\n     *\n     * @private\n     * @type {module:ui/panel/balloon/contextualballoon~RotatorView}\n     */\n        this._rotatorView = this._createRotatorView();\n        /**\n     * Displays fake panels under the balloon panel view when multiple stacks are added to the balloon.\n     *\n     * @private\n     * @type {module:ui/view~View}\n     */\n        this._fakePanelsView = this._createFakePanelsView();\n    }\n    /**\n   * Returns `true` when the given view is in one of the stacks. Otherwise returns `false`.\n   *\n   * @param {module:ui/view~View} view\n   * @returns {Boolean}\n   */\n    hasView(view) {\n        return Array.from(this._viewToStack.keys()).includes(view);\n    }\n    /**\n   * Adds a new view to the stack and makes it visible if the current stack is visible\n   * or it is the first view in the balloon.\n   *\n   * @param {Object} data The configuration of the view.\n   * @param {String} [data.stackId='main'] The ID of the stack that the view is added to.\n   * @param {module:ui/view~View} [data.view] The content of the balloon.\n   * @param {module:utils/dom/position~Options} [data.position] Positioning options.\n   * @param {String} [data.balloonClassName] An additional CSS class added to the {@link #view balloon} when visible.\n   * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n   * @param {Boolean} [data.singleViewMode=false] Whether the view should be the only visible view even if other stacks were added.\n   */\n    add(data) {\n        if (this.hasView(data.view)) {\n            /**\n       * Trying to add configuration of the same view more than once.\n       *\n       * @error contextualballoon-add-view-exist\n       */\n            throw new CKEditorError('contextualballoon-add-view-exist: Cannot add configuration of the same view twice.', [\n                this,\n                data\n            ]);\n        }\n        const stackId = data.stackId || 'main';\n        // If new stack is added, creates it and show view from this stack.\n        if (!this._idToStack.has(stackId)) {\n            this._idToStack.set(stackId, new Map([[\n                    data.view,\n                    data\n                ]]));\n            this._viewToStack.set(data.view, this._idToStack.get(stackId));\n            this._numberOfStacks = this._idToStack.size;\n            if (!this._visibleStack || data.singleViewMode) {\n                this.showStack(stackId);\n            }\n            return;\n        }\n        const stack = this._idToStack.get(stackId);\n        if (data.singleViewMode) {\n            this.showStack(stackId);\n        }\n        // Add new view to the stack.\n        stack.set(data.view, data);\n        this._viewToStack.set(data.view, stack);\n        // And display it if is added to the currently visible stack.\n        if (stack === this._visibleStack) {\n            this._showView(data);\n        }\n    }\n    /**\n   * Removes the given view from the stack. If the removed view was visible,\n   * the view preceding it in the stack will become visible instead.\n   * When there is no view in the stack, the next stack will be displayed.\n   * When there are no more stacks, the balloon will hide.\n   *\n   * @param {module:ui/view~View} view A view to be removed from the balloon.\n   */\n    remove(view) {\n        if (!this.hasView(view)) {\n            /**\n       * Trying to remove the configuration of the view not defined in the stack.\n       *\n       * @error contextualballoon-remove-view-not-exist\n       */\n            throw new CKEditorError('contextualballoon-remove-view-not-exist: Cannot remove the configuration of a non-existent view.', [\n                this,\n                view\n            ]);\n        }\n        const stack = this._viewToStack.get(view);\n        if (this._singleViewMode && this.visibleView === view) {\n            this._singleViewMode = false;\n        }\n        // When visible view will be removed we need to show a preceding view or next stack\n        // if a view is the only view in the stack.\n        if (this.visibleView === view) {\n            if (stack.size === 1) {\n                if (this._idToStack.size > 1) {\n                    this._showNextStack();\n                } else {\n                    this.view.hide();\n                    this.visibleView = null;\n                    this._rotatorView.hideView();\n                }\n            } else {\n                this._showView(Array.from(stack.values())[stack.size - 2]);\n            }\n        }\n        if (stack.size === 1) {\n            this._idToStack.delete(this._getStackId(stack));\n            this._numberOfStacks = this._idToStack.size;\n        } else {\n            stack.delete(view);\n        }\n        this._viewToStack.delete(view);\n    }\n    /**\n   * Updates the position of the balloon using the position data of the first visible view in the stack.\n   * When new position data is given, the position data of the currently visible view will be updated.\n   *\n   * @param {module:utils/dom/position~Options} [position] position options.\n   */\n    updatePosition(position) {\n        if (position) {\n            this._visibleStack.get(this.visibleView).position = position;\n        }\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n    }\n    /**\n   * Shows the last view from the stack of a given ID.\n   *\n   * @param {String} id\n   */\n    showStack(id) {\n        this.visibleStack = id;\n        const stack = this._idToStack.get(id);\n        if (!stack) {\n            /**\n       * Trying to show a stack that does not exist.\n       *\n       * @error contextualballoon-showstack-stack-not-exist\n       */\n            throw new CKEditorError('contextualballoon-showstack-stack-not-exist: Cannot show a stack that does not exist.', this);\n        }\n        if (this._visibleStack === stack) {\n            return;\n        }\n        this._showView(Array.from(stack.values()).pop());\n    }\n    /**\n   * Returns the stack of the currently visible view.\n   *\n   * @private\n   * @type {Set}\n   */\n    get _visibleStack() {\n        return this._viewToStack.get(this.visibleView);\n    }\n    /**\n   * Returns the ID of the given stack.\n   *\n   * @private\n   * @param {Set} stack\n   * @returns {String}\n   */\n    _getStackId(stack) {\n        const entry = Array.from(this._idToStack.entries()).find(entry => entry[1] === stack);\n        return entry[0];\n    }\n    /**\n   * Shows the last view from the next stack.\n   *\n   * @private\n   */\n    _showNextStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) + 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = 0;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n   * Shows the last view from the previous stack.\n   *\n   * @private\n   */\n    _showPrevStack() {\n        const stacks = Array.from(this._idToStack.values());\n        let nextIndex = stacks.indexOf(this._visibleStack) - 1;\n        if (!stacks[nextIndex]) {\n            nextIndex = stacks.length - 1;\n        }\n        this.showStack(this._getStackId(stacks[nextIndex]));\n    }\n    /**\n   * Creates a rotator view.\n   *\n   * @private\n   * @returns {module:ui/panel/balloon/contextualballoon~RotatorView}\n   */\n    _createRotatorView() {\n        const view = new RotatorView(this.editor.locale);\n        const t = this.editor.locale.t;\n        this.view.content.add(view);\n        // Hide navigation when there is only a one stack & not in single view mode.\n        view.bind('isNavigationVisible').to(this, '_numberOfStacks', this, '_singleViewMode', (value, isSingleViewMode) => {\n            return !isSingleViewMode && value > 1;\n        });\n        // Update balloon position after toggling navigation.\n        view.on('change:isNavigationVisible', () => this.updatePosition(), { priority: 'low' });\n        // Update stacks counter value.\n        view.bind('counter').to(this, 'visibleView', this, '_numberOfStacks', (visibleView, numberOfStacks) => {\n            if (numberOfStacks < 2) {\n                return '';\n            }\n            const current = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;\n            return t('cz', [\n                current,\n                numberOfStacks\n            ]);\n        });\n        view.buttonNextView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showNextStack();\n        });\n        view.buttonPrevView.on('execute', () => {\n            // When current view has a focus then move focus to the editable before removing it,\n            // otherwise editor will lost focus.\n            if (view.focusTracker.isFocused) {\n                this.editor.editing.view.focus();\n            }\n            this._showPrevStack();\n        });\n        return view;\n    }\n    /**\n   * @returns {module:ui/view~View}\n   */\n    _createFakePanelsView() {\n        const view = new FakePanelsView(this.editor.locale, this.view);\n        view.bind('numberOfPanels').to(this, '_numberOfStacks', this, '_singleViewMode', (number, isSingleViewMode) => {\n            const showPanels = !isSingleViewMode && number >= 2;\n            return showPanels ? Math.min(number - 1, 2) : 0;\n        });\n        view.listenTo(this.view, 'change:top', () => view.updatePosition());\n        view.listenTo(this.view, 'change:left', () => view.updatePosition());\n        this.editor.ui.view.body.add(view);\n        return view;\n    }\n    /**\n   * Sets the view as the content of the balloon and attaches the balloon using position\n   * options of the first view.\n   *\n   * @private\n   * @param {Object} data Configuration.\n   * @param {module:ui/view~View} [data.view] The view to show in the balloon.\n   * @param {String} [data.balloonClassName=''] Additional class name which will be added to the {@link #view balloon}.\n   * @param {Boolean} [data.withArrow=true] Whether the {@link #view balloon} should be rendered with an arrow.\n   */\n    _showView({view, balloonClassName = '', withArrow = true, singleViewMode = false}) {\n        this.view.class = balloonClassName;\n        this.view.withArrow = withArrow;\n        this._rotatorView.showView(view);\n        this.visibleView = view;\n        this.view.pin(this._getBalloonPosition());\n        this._fakePanelsView.updatePosition();\n        if (singleViewMode) {\n            this._singleViewMode = true;\n        }\n    }\n    /**\n   * Returns position options of the last view in the stack.\n   * This keeps the balloon in the same position when the view is changed.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n    _getBalloonPosition() {\n        let position = Array.from(this._visibleStack.values()).pop().position;\n        // Use the default limiter if none has been specified.\n        if (position && !position.limiter) {\n            // Don't modify the original options object.\n            position = Object.assign({}, position, { limiter: this.positionLimiter });\n        }\n        return position;\n    }\n}\n/**\n * Rotator view is a helper class for the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon}.\n * It is used for displaying the last view from the current stack and providing navigation buttons for switching stacks.\n * See the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon ContextualBalloon} documentation to learn more.\n *\n * @extends module:ui/view~View\n */\nclass RotatorView extends View {\n    /**\n   * @inheritDoc\n   */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        const bind = this.bindTemplate;\n        /**\n     * Defines whether navigation is visible or not.\n     *\n     * @member {Boolean} #isNavigationVisible\n     */\n        this.set('isNavigationVisible', true);\n        /**\n     * Used for checking if a view is focused or not.\n     *\n     * @type {module:utils/focustracker~FocusTracker}\n     */\n        this.focusTracker = new FocusTracker();\n        /**\n     * Navigation button for switching the stack to the previous one.\n     *\n     * @type {module:ui/button/buttonview~ButtonView}\n     */\n        this.buttonPrevView = this._createButtonView(t('da'), prevIcon);\n        /**\n     * Navigation button for switching the stack to the next one.\n     *\n     * @type {module:ui/button/buttonview~ButtonView}\n     */\n        this.buttonNextView = this._createButtonView(t('db'), nextIcon);\n        /**\n     * A collection of the child views that creates the rotator content.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n        this.content = this.createCollection();\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-balloon-rotator'\n                ],\n                'z-index': '-1'\n            },\n            children: [\n                {\n                    tag: 'div',\n                    attributes: {\n                        class: [\n                            'ck-balloon-rotator__navigation',\n                            bind.to('isNavigationVisible', value => value ? '' : 'ck-hidden')\n                        ]\n                    },\n                    children: [\n                        this.buttonPrevView,\n                        {\n                            tag: 'span',\n                            attributes: { class: ['ck-balloon-rotator__counter'] },\n                            children: [{ text: bind.to('counter') }]\n                        },\n                        this.buttonNextView\n                    ]\n                },\n                {\n                    tag: 'div',\n                    attributes: { class: 'ck-balloon-rotator__content' },\n                    children: this.content\n                }\n            ]\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n        super.render();\n        this.focusTracker.add(this.element);\n    }\n    /**\n   * Shows a given view.\n   *\n   * @param {module:ui/view~View} view The view to show.\n   */\n    showView(view) {\n        this.hideView();\n        this.content.add(view);\n    }\n    /**\n   * Hides the currently displayed view.\n   */\n    hideView() {\n        this.content.clear();\n    }\n    /**\n   * Creates a navigation button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n    _createButtonView(label, icon) {\n        const view = new ButtonView(this.locale);\n        view.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        return view;\n    }\n}\n// Displays additional layers under the balloon when multiple stacks are added to the balloon.\n//\n// @private\n// @extends module:ui/view~View\nclass FakePanelsView extends View {\n    // @inheritDoc\n    constructor(locale, balloonPanelView) {\n        super(locale);\n        const bind = this.bindTemplate;\n        // Fake panels top offset.\n        //\n        // @observable\n        // @member {Number} #top\n        this.set('top', 0);\n        // Fake panels left offset.\n        //\n        // @observable\n        // @member {Number} #left\n        this.set('left', 0);\n        // Fake panels height.\n        //\n        // @observable\n        // @member {Number} #height\n        this.set('height', 0);\n        // Fake panels width.\n        //\n        // @observable\n        // @member {Number} #width\n        this.set('width', 0);\n        // Number of rendered fake panels.\n        //\n        // @observable\n        // @member {Number} #numberOfPanels\n        this.set('numberOfPanels', 0);\n        // Collection of the child views which creates fake panel content.\n        //\n        // @readonly\n        // @type {module:ui/viewcollection~ViewCollection}\n        this.content = this.createCollection();\n        // Context.\n        //\n        // @private\n        // @type {module:ui/panel/balloon/balloonpanelview~BalloonPanelView}\n        this._balloonPanelView = balloonPanelView;\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck-fake-panel',\n                    bind.to('numberOfPanels', number => number ? '' : 'ck-hidden')\n                ],\n                style: {\n                    top: bind.to('top', toPx),\n                    left: bind.to('left', toPx),\n                    width: bind.to('width', toPx),\n                    height: bind.to('height', toPx)\n                }\n            },\n            children: this.content\n        });\n        this.on('change:numberOfPanels', (evt, name, next, prev) => {\n            if (next > prev) {\n                this._addPanels(next - prev);\n            } else {\n                this._removePanels(prev - next);\n            }\n            this.updatePosition();\n        });\n    }\n    // @private\n    // @param {Number} number\n    _addPanels(number) {\n        while (number--) {\n            const view = new View();\n            view.setTemplate({ tag: 'div' });\n            this.content.add(view);\n            this.registerChild(view);\n        }\n    }\n    // @private\n    // @param {Number} number\n    _removePanels(number) {\n        while (number--) {\n            const view = this.content.last;\n            this.content.remove(view);\n            this.deregisterChild(view);\n            view.destroy();\n        }\n    }\n    // Updates coordinates of fake panels.\n    updatePosition() {\n        if (this.numberOfPanels) {\n            const {top, left} = this._balloonPanelView;\n            const {width, height} = new Rect(this._balloonPanelView.element);\n            Object.assign(this, {\n                top,\n                left,\n                width,\n                height\n            });\n        }\n    }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image/ui/utils\n */\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { getSelectedImageWidget } from '../utils';\n/**\n * A helper utility that positions the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} instance\n * with respect to the image in the editor content, if one is selected.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n */\n\nexport function repositionContextualBalloon(editor) {\n  const balloon = editor.plugins.get('ContextualBalloon');\n\n  if (getSelectedImageWidget(editor.editing.view.document.selection)) {\n    const position = getBalloonPositionData(editor);\n    balloon.updatePosition(position);\n  }\n}\n/**\n * Returns the positioning options that control the geometry of the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} with respect\n * to the selected element in the editor content.\n *\n * @param {module:core/editor/editor~Editor} editor The editor instance.\n * @returns {module:utils/dom/position~Options}\n */\n\nexport function getBalloonPositionData(editor) {\n  const editingView = editor.editing.view;\n  const defaultPositions = BalloonPanelView.defaultPositions;\n  return {\n    target: editingView.domConverter.viewToDom(editingView.document.selection.getSelectedElement()),\n    positions: [defaultPositions.northArrowSouth, defaultPositions.northArrowSouthWest, defaultPositions.northArrowSouthEast, defaultPositions.southArrowNorth, defaultPositions.southArrowNorthWest, defaultPositions.southArrowNorthEast]\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetextalternative/imagetextalternativeui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport TextAlternativeFormView from './ui/textalternativeformview';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport textAlternativeIcon from '@ckeditor/ckeditor5-core/theme/icons/low-vision.svg';\nimport {\n    repositionContextualBalloon,\n    getBalloonPositionData\n} from '../image/ui/utils';\nimport { getSelectedImageWidget } from '../image/utils';\n/**\n * The image text alternative UI plugin.\n *\n * The plugin uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageTextAlternativeUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'ImageTextAlternativeUI';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        this._createButton();\n        this._createForm();\n    }\n    /**\n   * @inheritDoc\n   */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this._form.destroy();\n    }\n    /**\n   * Creates a button showing the balloon panel for changing the image text alternative and\n   * registers it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n   *\n   * @private\n   */\n    _createButton() {\n        const editor = this.editor;\n        const t = editor.t;\n        editor.ui.componentFactory.add('imageTextAlternative', locale => {\n            const command = editor.commands.get('imageTextAlternative');\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('bv'),\n                icon: textAlternativeIcon,\n                tooltip: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            this.listenTo(view, 'execute', () => this._showForm());\n            return view;\n        });\n    }\n    /**\n   * Creates the {@link module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n   * form.\n   *\n   * @private\n   */\n    _createForm() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const viewDocument = view.document;\n        /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        /**\n     * A form containing a textarea and buttons, used to change the `alt` text value.\n     *\n     * @member {module:image/imagetextalternative/ui/textalternativeformview~TextAlternativeFormView}\n     */\n        this._form = new TextAlternativeFormView(editor.locale);\n        // Render the form so its #element is available for clickOutsideHandler.\n        this._form.render();\n        this.listenTo(this._form, 'submit', () => {\n            editor.execute('imageTextAlternative', { newValue: this._form.labeledInput.inputView.element.value });\n            this._hideForm(true);\n        });\n        this.listenTo(this._form, 'cancel', () => {\n            this._hideForm(true);\n        });\n        // Close the form on Esc key press.\n        this._form.keystrokes.set('Esc', (data, cancel) => {\n            this._hideForm(true);\n            cancel();\n        });\n        // Reposition the balloon or hide the form if an image widget is no longer selected.\n        this.listenTo(editor.ui, 'update', () => {\n            if (!getSelectedImageWidget(viewDocument.selection)) {\n                this._hideForm(true);\n            } else if (this._isVisible) {\n                repositionContextualBalloon(editor);\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this._form,\n            activator: () => this._isVisible,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideForm()\n        });\n    }\n    /**\n   * Shows the {@link #_form} in the {@link #_balloon}.\n   *\n   * @private\n   */\n    _showForm() {\n        if (this._isVisible) {\n            return;\n        }\n        const editor = this.editor;\n        const command = editor.commands.get('imageTextAlternative');\n        const labeledInput = this._form.labeledInput;\n        if (!this._isInBalloon) {\n            this._balloon.add({\n                view: this._form,\n                position: getBalloonPositionData(editor)\n            });\n        }\n        // Make sure that each time the panel shows up, the field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`labeledInput#value`\n        // stays unaltered) and re-opened it without changing the value of the command, they would see the\n        // old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-image/issues/114\n        labeledInput.value = labeledInput.inputView.element.value = command.value || '';\n        this._form.labeledInput.select();\n    }\n    /**\n   * Removes the {@link #_form} from the {@link #_balloon}.\n   *\n   * @param {Boolean} [focusEditable=false] Controls whether the editing view is focused afterwards.\n   * @private\n   */\n    _hideForm(focusEditable) {\n        if (!this._isInBalloon) {\n            return;\n        }\n        // Blur the input element before removing it from DOM to prevent issues in some browsers.\n        // See https://github.com/ckeditor/ckeditor5/issues/1501.\n        if (this._form.focusTracker.isFocused) {\n            this._form.saveButtonView.focus();\n        }\n        this._balloon.remove(this._form);\n        if (focusEditable) {\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n   * Returns `true` when the {@link #_form} is the visible view in the {@link #_balloon}.\n   *\n   * @private\n   * @type {Boolean}\n   */\n    get _isVisible() {\n        return this._balloon.visibleView === this._form;\n    }\n    /**\n   * Returns `true` when the {@link #_form} is in the {@link #_balloon}.\n   *\n   * @private\n   * @type {Boolean}\n   */\n    get _isInBalloon() {\n        return this._balloon.hasView(this._form);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagetextalternative\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageTextAlternativeEditing from './imagetextalternative/imagetextalternativeediting';\nimport ImageTextAlternativeUI from './imagetextalternative/imagetextalternativeui';\n/**\n * The image text alternative plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-styles image styles} documentation.\n *\n * This is a \"glue\" plugin which loads the\n *  {@link module:image/imagetextalternative/imagetextalternativeediting~ImageTextAlternativeEditing}\n * and {@link module:image/imagetextalternative/imagetextalternativeui~ImageTextAlternativeUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageTextAlternative extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageTextAlternativeEditing, ImageTextAlternativeUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageTextAlternative';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/image\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageEditing from '../src/image/imageediting';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\nimport ImageTextAlternative from './imagetextalternative';\nimport '../theme/image.css';\n/**\n * The image plugin.\n *\n * For a detailed overview, check the {@glink features/image image feature} documentation.\n *\n * This is a \"glue\" plugin which loads the following plugins:\n *\n * * {@link module:image/image/imageediting~ImageEditing},\n * * {@link module:image/imagetextalternative~ImageTextAlternative}.\n *\n * Usually, it is used in conjuction with other plugins from this package. See the {@glink api/image package page}\n * for more information.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Image extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageEditing, Widget, ImageTextAlternative];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Image';\n  }\n\n}\n/**\n * The configuration of the image features. Used by the image features in the `@ckeditor/ckeditor5-image` package.\n *\n * Read more in {@link module:image/image~ImageConfig}.\n *\n * @member {module:image/image~ImageConfig} module:core/editor/editorconfig~EditorConfig#image\n */\n\n/**\n * The configuration of the image features. Used by the image features in the `@ckeditor/ckeditor5-image` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\timage: ... // Image feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface ImageConfig\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module upload/ui/filedialogbuttonview\n */\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport View from '@ckeditor/ckeditor5-ui/src/view';\n/**\n * The file dialog button view.\n *\n * This component provides a button that opens the native file selection dialog.\n * It can be used to implement the UI of a file upload feature.\n *\n *\t\tconst view = new FileDialogButtonView( locale );\n *\n *\t\tview.set( {\n *\t\t\tacceptedType: 'image/*',\n *\t\t\tallowMultipleFiles: true\n *\t\t} );\n *\n *\t\tview.buttonView.set( {\n *\t\t\tlabel: t( 'Insert image' ),\n *\t\t\ticon: imageIcon,\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.on( 'done', ( evt, files ) => {\n *\t\t\tfor ( const file of Array.from( files ) ) {\n *\t\t\t\tconsole.log( 'Selected file', file );\n *\t\t\t}\n *\t\t} );\n *\n * @extends module:ui/view~View\n */\n\nexport default class FileDialogButtonView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * The button view of the component.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.buttonView = new ButtonView(locale);\n    /**\n     * A hidden `<input>` view used to execute file dialog.\n     *\n     * @protected\n     * @member {module:upload/ui/filedialogbuttonview~FileInputView}\n     */\n\n    this._fileInputView = new FileInputView(locale);\n    /**\n     * Accepted file types. Can be provided in form of file extensions, media type or one of:\n     * * `audio/*`,\n     * * `video/*`,\n     * * `image/*`.\n     *\n     * @observable\n     * @member {String} #acceptedType\n     */\n\n    this._fileInputView.bind('acceptedType').to(this);\n    /**\n     * Indicates if multiple files can be selected. Defaults to `true`.\n     *\n     * @observable\n     * @member {Boolean} #allowMultipleFiles\n     */\n\n\n    this._fileInputView.bind('allowMultipleFiles').to(this);\n    /**\n     * Fired when file dialog is closed with file selected.\n     *\n     *\t\tview.on( 'done', ( evt, files ) => {\n     *\t\t\tfor ( const file of files ) {\n     *\t\t\t\tconsole.log( 'Selected file', file );\n     *\t\t\t}\n     *\t\t}\n     *\n     * @event done\n     * @param {Array.<File>} files Array of selected files.\n     */\n\n\n    this._fileInputView.delegate('done').to(this);\n\n    this.setTemplate({\n      tag: 'span',\n      attributes: {\n        class: 'ck-file-dialog-button'\n      },\n      children: [this.buttonView, this._fileInputView]\n    });\n    this.buttonView.on('execute', () => {\n      this._fileInputView.open();\n    });\n  }\n  /**\n   * Focuses the {@link #buttonView}.\n   */\n\n\n  focus() {\n    this.buttonView.focus();\n  }\n\n}\n/**\n * The hidden file input view class.\n *\n * @private\n * @extends module:ui/view~View\n */\n\nclass FileInputView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    /**\n     * Accepted file types. Can be provided in form of file extensions, media type or one of:\n     * * `audio/*`,\n     * * `video/*`,\n     * * `image/*`.\n     *\n     * @observable\n     * @member {String} #acceptedType\n     */\n\n    this.set('acceptedType');\n    /**\n     * Indicates if multiple files can be selected. Defaults to `false`.\n     *\n     * @observable\n     * @member {Boolean} #allowMultipleFiles\n     */\n\n    this.set('allowMultipleFiles', false);\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'input',\n      attributes: {\n        class: ['ck-hidden'],\n        type: 'file',\n        tabindex: '-1',\n        accept: bind.to('acceptedType'),\n        multiple: bind.to('allowMultipleFiles')\n      },\n      on: {\n        // Removing from code coverage since we cannot programmatically set input element files.\n        change: bind.to(\n        /* istanbul ignore next */\n        () => {\n          if (this.element && this.element.files && this.element.files.length) {\n            this.fire('done', this.element.files);\n          }\n\n          this.element.value = '';\n        })\n      }\n    });\n  }\n  /**\n   * Opens file dialog.\n   */\n\n\n  open() {\n    this.element.click();\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/utils\n */\n\n/* global fetch, File */\n\n/**\n * Creates a regular expression used to test for image files.\n *\n *\t\tconst imageType = createImageTypeRegExp( [ 'png', 'jpeg', 'svg+xml', 'vnd.microsoft.icon' ] );\n *\n *\t\tconsole.log( 'is supported image', imageType.test( file.type ) );\n *\n * @param {Array.<String>} types\n * @returns {RegExp}\n */\nexport function createImageTypeRegExp(types) {\n  // Sanitize the MIME type name which may include: \"+\", \"-\" or \".\".\n  const regExpSafeNames = types.map(type => type.replace('+', '\\\\+'));\n  return new RegExp(`^image\\\\/(${regExpSafeNames.join('|')})$`);\n}\n/**\n * Creates a promise that fetches the image local source (Base64 or blob) and resolves with a `File` object.\n *\n * @param {module:engine/view/element~Element} image Image whose source to fetch.\n * @returns {Promise.<File>} A promise which resolves when an image source is fetched and converted to a `File` instance.\n * It resolves with a `File` object. If there were any errors during file processing, the promise will be rejected.\n */\n\nexport function fetchLocalImage(image) {\n  return new Promise((resolve, reject) => {\n    const imageSrc = image.getAttribute('src'); // Fetch works asynchronously and so does not block browser UI when processing data.\n\n    fetch(imageSrc).then(resource => resource.blob()).then(blob => {\n      const mimeType = getImageMimeType(blob, imageSrc);\n      const ext = mimeType.replace('image/', '');\n      const filename = `image.${ext}`;\n      const file = createFileFromBlob(blob, filename, mimeType);\n      file ? resolve(file) : reject();\n    }).catch(reject);\n  });\n}\n/**\n * Checks whether a given node is an image element with a local source (Base64 or blob).\n *\n * @param {module:engine/view/node~Node} node The node to check.\n * @returns {Boolean}\n */\n\nexport function isLocalImage(node) {\n  if (!node.is('element', 'img') || !node.getAttribute('src')) {\n    return false;\n  }\n\n  return node.getAttribute('src').match(/^data:image\\/\\w+;base64,/g) || node.getAttribute('src').match(/^blob:/g);\n} // Extracts an image type based on its blob representation or its source.\n//\n// @param {String} src Image `src` attribute value.\n// @param {Blob} blob Image blob representation.\n// @returns {String}\n\nfunction getImageMimeType(blob, src) {\n  if (blob.type) {\n    return blob.type;\n  } else if (src.match(/data:(image\\/\\w+);base64/)) {\n    return src.match(/data:(image\\/\\w+);base64/)[1].toLowerCase();\n  } else {\n    // Fallback to 'jpeg' as common extension.\n    return 'image/jpeg';\n  }\n} // Creates a `File` instance from the given `Blob` instance using the specified file name.\n//\n// @param {Blob} blob The `Blob` instance from which the file will be created.\n// @param {String} filename The file name used during the file creation.\n// @param {String} mimeType The file MIME type.\n// @returns {File|null} The `File` instance created from the given blob or `null` if `File API` is not available.\n\n\nfunction createFileFromBlob(blob, filename, mimeType) {\n  try {\n    return new File([blob], filename, {\n      type: mimeType\n    });\n  } catch (err) {\n    // Edge does not support `File` constructor ATM, see https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/9551546/.\n    // However, the `File` function is present (so cannot be checked with `!window.File` or `typeof File === 'function'`), but\n    // calling it with `new File( ... )` throws an error. This try-catch prevents that. Also when the function will\n    // be implemented correctly in Edge the code will start working without any changes (see #247).\n    return null;\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imageupload/imageuploadui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileDialogButtonView from '@ckeditor/ckeditor5-upload/src/ui/filedialogbuttonview';\nimport imageIcon from '@ckeditor/ckeditor5-core/theme/icons/image.svg';\nimport { createImageTypeRegExp } from './utils';\n/**\n * The image upload button plugin.\n *\n * For a detailed overview, check the {@glink features/image-upload/image-upload Image upload feature} documentation.\n *\n * Adds the `'imageUpload'` button to the {@link module:ui/componentfactory~ComponentFactory UI component factory}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Setup `imageUpload` button.\n        editor.ui.componentFactory.add('imageUpload', locale => {\n            const view = new FileDialogButtonView(locale);\n            const command = editor.commands.get('imageUpload');\n            const imageTypes = editor.config.get('image.upload.types');\n            const imageTypesRegExp = createImageTypeRegExp(imageTypes);\n            view.set({\n                acceptedType: imageTypes.map(type => `image/${ type }`).join(','),\n                allowMultipleFiles: true\n            });\n            view.buttonView.set({\n                label: t('z'),\n                icon: imageIcon,\n                tooltip: true\n            });\n            view.buttonView.bind('isEnabled').to(command);\n            view.on('done', (evt, files) => {\n                const imagesToUpload = Array.from(files).filter(file => imageTypesRegExp.test(file.type));\n                if (imagesToUpload.length) {\n                    editor.execute('imageUpload', { file: imagesToUpload });\n                }\n            });\n            return view;\n        });\n    }\n}","export default \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 700 250\\\"><rect rx=\\\"4\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload/imageuploadprogress\n */\n\n/* globals setTimeout */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport uploadingPlaceholder from '../../theme/icons/image_placeholder.svg';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport '../../theme/imageuploadprogress.css';\nimport '../../theme/imageuploadicon.css';\nimport '../../theme/imageuploadloader.css';\n/**\n * The image upload progress plugin.\n * It shows a placeholder when the image is read from the disk and a progress bar while the image is uploading.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageUploadProgress extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    /**\n     * The image placeholder that is displayed before real image data can be accessed.\n     *\n     * @protected\n     * @member {String} #placeholder\n     */\n\n    this.placeholder = 'data:image/svg+xml;utf8,' + encodeURIComponent(uploadingPlaceholder);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Upload status change - update image's view according to that status.\n\n    editor.editing.downcastDispatcher.on('attribute:uploadStatus:image', (...args) => this.uploadStatusChange(...args));\n  }\n  /**\n   * This method is called each time the image `uploadStatus` attribute is changed.\n   *\n   * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n   * @param {Object} data Additional information about the change.\n   * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n   */\n\n\n  uploadStatusChange(evt, data, conversionApi) {\n    const editor = this.editor;\n    const modelImage = data.item;\n    const uploadId = modelImage.getAttribute('uploadId');\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const fileRepository = editor.plugins.get(FileRepository);\n    const status = uploadId ? data.attributeNewValue : null;\n    const placeholder = this.placeholder;\n    const viewFigure = editor.editing.mapper.toViewElement(modelImage);\n    const viewWriter = conversionApi.writer;\n\n    if (status == 'reading') {\n      // Start \"appearing\" effect and show placeholder with infinite progress bar on the top\n      // while image is read from disk.\n      _startAppearEffect(viewFigure, viewWriter);\n\n      _showPlaceholder(placeholder, viewFigure, viewWriter);\n\n      return;\n    } // Show progress bar on the top of the image when image is uploading.\n\n\n    if (status == 'uploading') {\n      const loader = fileRepository.loaders.get(uploadId); // Start appear effect if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n\n      _startAppearEffect(viewFigure, viewWriter);\n\n      if (!loader) {\n        // There is no loader associated with uploadId - this means that image came from external changes.\n        // In such cases we still want to show the placeholder until image is fully uploaded.\n        // Show placeholder if needed - see https://github.com/ckeditor/ckeditor5-image/issues/191.\n        _showPlaceholder(placeholder, viewFigure, viewWriter);\n      } else {\n        // Hide placeholder and initialize progress bar showing upload progress.\n        _hidePlaceholder(viewFigure, viewWriter);\n\n        _showProgressBar(viewFigure, viewWriter, loader, editor.editing.view);\n\n        _displayLocalImage(viewFigure, viewWriter, loader);\n      }\n\n      return;\n    } // Because in Edge there is no way to show fancy animation of completeIcon we need to skip it.\n\n\n    if (status == 'complete' && fileRepository.loaders.get(uploadId) && !env.isEdge) {\n      _showCompleteIcon(viewFigure, viewWriter, editor.editing.view);\n    } // Clean up.\n\n\n    _hideProgressBar(viewFigure, viewWriter);\n\n    _hidePlaceholder(viewFigure, viewWriter);\n\n    _stopAppearEffect(viewFigure, viewWriter);\n  }\n\n} // Adds ck-appear class to the image figure if one is not already applied.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\nfunction _startAppearEffect(viewFigure, writer) {\n  if (!viewFigure.hasClass('ck-appear')) {\n    writer.addClass('ck-appear', viewFigure);\n  }\n} // Removes ck-appear class to the image figure if one is not already removed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _stopAppearEffect(viewFigure, writer) {\n  writer.removeClass('ck-appear', viewFigure);\n} // Shows placeholder together with infinite progress bar on given image figure.\n//\n// @param {String} Data-uri with a svg placeholder.\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _showPlaceholder(placeholder, viewFigure, writer) {\n  if (!viewFigure.hasClass('ck-image-upload-placeholder')) {\n    writer.addClass('ck-image-upload-placeholder', viewFigure);\n  }\n\n  const viewImg = viewFigure.getChild(0);\n\n  if (viewImg.getAttribute('src') !== placeholder) {\n    writer.setAttribute('src', placeholder, viewImg);\n  }\n\n  if (!_getUIElement(viewFigure, 'placeholder')) {\n    writer.insert(writer.createPositionAfter(viewImg), _createPlaceholder(writer));\n  }\n} // Removes placeholder together with infinite progress bar on given image figure.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _hidePlaceholder(viewFigure, writer) {\n  if (viewFigure.hasClass('ck-image-upload-placeholder')) {\n    writer.removeClass('ck-image-upload-placeholder', viewFigure);\n  }\n\n  _removeUIElement(viewFigure, writer, 'placeholder');\n} // Shows progress bar displaying upload progress.\n// Attaches it to the file loader to update when upload percentace is changed.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n// @param {module:engine/view/view~View} view\n\n\nfunction _showProgressBar(viewFigure, writer, loader, view) {\n  const progressBar = _createProgressBar(writer);\n\n  writer.insert(writer.createPositionAt(viewFigure, 'end'), progressBar); // Update progress bar width when uploadedPercent is changed.\n\n  loader.on('change:uploadedPercent', (evt, name, value) => {\n    view.change(writer => {\n      writer.setStyle('width', value + '%', progressBar);\n    });\n  });\n} // Hides upload progress bar.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n\n\nfunction _hideProgressBar(viewFigure, writer) {\n  _removeUIElement(viewFigure, writer, 'progressBar');\n} // Shows complete icon and hides after a certain amount of time.\n//\n// @param {module:engine/view/containerelement~ContainerElement} viewFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:engine/view/view~View} view\n\n\nfunction _showCompleteIcon(viewFigure, writer, view) {\n  const completeIcon = writer.createUIElement('div', {\n    class: 'ck-image-upload-complete-icon'\n  });\n  writer.insert(writer.createPositionAt(viewFigure, 'end'), completeIcon);\n  setTimeout(() => {\n    view.change(writer => writer.remove(writer.createRangeOn(completeIcon)));\n  }, 3000);\n} // Create progress bar element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\n\n\nfunction _createProgressBar(writer) {\n  const progressBar = writer.createUIElement('div', {\n    class: 'ck-progress-bar'\n  });\n  writer.setCustomProperty('progressBar', true, progressBar);\n  return progressBar;\n} // Create placeholder element using {@link module:engine/view/uielement~UIElement}.\n//\n// @private\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @returns {module:engine/view/uielement~UIElement}\n\n\nfunction _createPlaceholder(writer) {\n  const placeholder = writer.createUIElement('div', {\n    class: 'ck-upload-placeholder-loader'\n  });\n  writer.setCustomProperty('placeholder', true, placeholder);\n  return placeholder;\n} // Returns {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n// Returns `undefined` if element is not found.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {String} uniqueProperty\n// @returns {module:engine/view/uielement~UIElement|undefined}\n\n\nfunction _getUIElement(imageFigure, uniqueProperty) {\n  for (const child of imageFigure.getChildren()) {\n    if (child.getCustomProperty(uniqueProperty)) {\n      return child;\n    }\n  }\n} // Removes {@link module:engine/view/uielement~UIElement} of given unique property from image figure element.\n//\n// @private\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {String} uniqueProperty\n\n\nfunction _removeUIElement(viewFigure, writer, uniqueProperty) {\n  const element = _getUIElement(viewFigure, uniqueProperty);\n\n  if (element) {\n    writer.remove(writer.createRangeOn(element));\n  }\n} // Displays local data from file loader.\n//\n// @param {module:engine/view/element~Element} imageFigure\n// @param {module:engine/view/downcastwriter~DowncastWriter} writer\n// @param {module:upload/filerepository~FileLoader} loader\n\n\nfunction _displayLocalImage(viewFigure, writer, loader) {\n  if (loader.data) {\n    const viewImg = viewFigure.getChild(0);\n    writer.setAttribute('src', loader.data, viewImg);\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module module:engine/view/upcastwriter\n */\nimport DocumentFragment from './documentfragment';\nimport Element from './element';\nimport Text from './text';\nimport { isPlainObject } from 'lodash-es';\nimport Position from './position';\nimport Range from './range';\nimport Selection from './selection';\n/**\n * View upcast writer. It provides a set of methods used to manipulate non-semantic view trees.\n *\n * It should be used only while working on a non-semantic view\n * (e.g. a view created from HTML string on paste).\n * To manipulate a view which was or is being downcasted from the the model use the\n * {@link module:engine/view/downcastwriter~DowncastWriter downcast writer}.\n *\n * Read more about changing the view in the {@glink framework/guides/architecture/editing-engine#changing-the-view Changing the view}\n * section of the {@glink framework/guides/architecture/editing-engine Editing engine architecture} guide.\n *\n * Unlike `DowncastWriter`, which is available in the {@link module:engine/view/view~View#change `View#change()`} block,\n * `UpcastWriter` can be created wherever you need it:\n *\n *\t\tconst writer = new UpcastWriter();\n *\t\tconst text = writer.createText( 'foo!' );\n *\n *\t\twriter.appendChild( text, someViewElement );\n */\n\nexport default class UpcastWriter {\n  /**\n   * Creates a new {@link module:engine/view/documentfragment~DocumentFragment} instance.\n   *\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into the created document fragment.\n   * @returns {module:engine/view/documentfragment~DocumentFragment} The created document fragment.\n   */\n  createDocumentFragment(children) {\n    return new DocumentFragment(children);\n  }\n  /**\n   * Creates a new {@link module:engine/view/element~Element} instance.\n   *\n   * Attributes can be passed in various formats:\n   *\n   *\t\tupcastWriter.createElement( 'div', { class: 'editor', contentEditable: 'true' } ); // object\n   *\t\tupcastWriter.createElement( 'div', [ [ 'class', 'editor' ], [ 'contentEditable', 'true' ] ] ); // map-like iterator\n   *\t\tupcastWriter.createElement( 'div', mapOfAttributes ); // map\n   *\n   * @param {String} name Node name.\n   * @param {Object|Iterable} [attrs] Collection of attributes.\n   * @param {module:engine/view/node~Node|Iterable.<module:engine/view/node~Node>} [children]\n   * A list of nodes to be inserted into created element.\n   * @returns {module:engine/view/element~Element} Created element.\n   */\n\n\n  createElement(name, attrs, children) {\n    return new Element(name, attrs, children);\n  }\n  /**\n   * Creates a new {@link module:engine/view/text~Text} instance.\n   *\n   * @param {String} data The text's data.\n   * @returns {module:engine/view/text~Text} The created text node.\n   */\n\n\n  createText(data) {\n    return new Text(data);\n  }\n  /**\n   * Clones the provided element.\n   *\n   * @see module:engine/view/element~Element#_clone\n   * @param {module:engine/view/element~Element} element Element to be cloned.\n   * @param {Boolean} [deep=false] If set to `true` clones element and all its children recursively. When set to `false`,\n   * element will be cloned without any children.\n   * @returns {module:engine/view/element~Element} Clone of this element.\n   */\n\n\n  clone(element, deep = false) {\n    return element._clone(deep);\n  }\n  /**\n   * Appends a child node or a list of child nodes at the end of this node\n   * and sets the parent of these nodes to this element.\n   *\n   * @see module:engine/view/element~Element#_appendChild\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n   * to which items will be appended.\n   * @fires module:engine/view/node~Node#event:change\n   * @returns {Number} Number of appended nodes.\n   */\n\n\n  appendChild(items, element) {\n    return element._appendChild(items);\n  }\n  /**\n   * Inserts a child node or a list of child nodes on the given index and sets the parent of these nodes to\n   * this element.\n   *\n   * @see module:engine/view/element~Element#_insertChild\n   * @param {Number} index Offset at which nodes should be inserted.\n   * @param {module:engine/view/item~Item|Iterable.<module:engine/view/item~Item>} items Items to be inserted.\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n   * to which items will be inserted.\n   * @fires module:engine/view/node~Node#event:change\n   * @returns {Number} Number of inserted nodes.\n   */\n\n\n  insertChild(index, items, element) {\n    return element._insertChild(index, items);\n  }\n  /**\n   * Removes the given number of child nodes starting at the given index and set the parent of these nodes to `null`.\n   *\n   * @see module:engine/view/element~Element#_removeChildren\n   * @param {Number} index Offset from which nodes will be removed.\n   * @param {Number} howMany Number of nodes to remove.\n   * @param {module:engine/view/element~Element|module:engine/view/documentfragment~DocumentFragment} element Element\n   * which children will be removed.\n   * @fires module:engine/view/node~Node#event:change\n   * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n   */\n\n\n  removeChildren(index, howMany, element) {\n    return element._removeChildren(index, howMany);\n  }\n  /**\n   * Removes given element from the view structure. Will not have effect on detached elements.\n   *\n   * @param {module:engine/view/element~Element} element Element which will be removed.\n   * @returns {Array.<module:engine/view/node~Node>} The array containing removed nodes.\n   */\n\n\n  remove(element) {\n    const parent = element.parent;\n\n    if (parent) {\n      return this.removeChildren(parent.getChildIndex(element), 1, parent);\n    }\n\n    return [];\n  }\n  /**\n   * Replaces given element with the new one in the view structure. Will not have effect on detached elements.\n   *\n   * @param {module:engine/view/element~Element} oldElement Element which will be replaced.\n   * @param {module:engine/view/element~Element} newElement Element which will be inserted in the place of the old element.\n   * @returns {Boolean} Whether old element was successfully replaced.\n   */\n\n\n  replace(oldElement, newElement) {\n    const parent = oldElement.parent;\n\n    if (parent) {\n      const index = parent.getChildIndex(oldElement);\n      this.removeChildren(index, 1, parent);\n      this.insertChild(index, newElement, parent);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Removes given element from view structure and places its children in its position.\n   * It does nothing if element has no parent.\n   *\n   * @param {module:engine/view/element~Element} element Element to unwrap.\n   */\n\n\n  unwrapElement(element) {\n    const parent = element.parent;\n\n    if (parent) {\n      const index = parent.getChildIndex(element);\n      this.remove(element);\n      this.insertChild(index, element.getChildren(), parent);\n    }\n  }\n  /**\n   * Renames element by creating a copy of a given element but with its name changed and then moving contents of the\n   * old element to the new one.\n   *\n   * Since this function creates a new element and removes the given one, the new element is returned to keep reference.\n   *\n   * @param {String} newName New element name.\n   * @param {module:engine/view/element~Element} element Element to be renamed.\n   * @returns {module:engine/view/element~Element|null} New element or null if the old element\n   * was not replaced (happens for detached elements).\n   */\n\n\n  rename(newName, element) {\n    const newElement = new Element(newName, element.getAttributes(), element.getChildren());\n    return this.replace(element, newElement) ? newElement : null;\n  }\n  /**\n   * Adds or overwrites element's attribute with a specified key and value.\n   *\n   *\t\twriter.setAttribute( linkElement, 'href', 'http://ckeditor.com' );\n   *\n   * @see module:engine/view/element~Element#_setAttribute\n   * @param {String} key Attribute key.\n   * @param {String} value Attribute value.\n   * @param {module:engine/view/element~Element} element Element for which attribute will be set.\n   */\n\n\n  setAttribute(key, value, element) {\n    element._setAttribute(key, value);\n  }\n  /**\n   * Removes attribute from the element.\n   *\n   *\t\twriter.removeAttribute( linkElement, 'href' );\n   *\n   * @see module:engine/view/element~Element#_removeAttribute\n   * @param {String} key Attribute key.\n   * @param {module:engine/view/element~Element} element Element from which attribute will be removed.\n   */\n\n\n  removeAttribute(key, element) {\n    element._removeAttribute(key);\n  }\n  /**\n   * Adds specified class to the element.\n   *\n   *\t\twriter.addClass( linkElement, 'foo' );\n   *\t\twriter.addClass( linkElement, [ 'foo', 'bar' ] );\n   *\n   * @see module:engine/view/element~Element#_addClass\n   * @param {Array.<String>|String} className Single class name or array of class names which will be added.\n   * @param {module:engine/view/element~Element} element Element for which class will be added.\n   */\n\n\n  addClass(className, element) {\n    element._addClass(className);\n  }\n  /**\n   * Removes specified class from the element.\n   *\n   *\t\twriter.removeClass( linkElement, 'foo' );\n   *\t\twriter.removeClass( linkElement, [ 'foo', 'bar' ] );\n   *\n   * @see module:engine/view/element~Element#_removeClass\n   * @param {Array.<String>|String} className Single class name or array of class names which will be removed.\n   * @param {module:engine/view/element~Element} element Element from which class will be removed.\n   */\n\n\n  removeClass(className, element) {\n    element._removeClass(className);\n  }\n  /**\n   * Adds style to the element.\n   *\n   *\t\twriter.setStyle( element, 'color', 'red' );\n   *\t\twriter.setStyle( element, {\n   *\t\t\tcolor: 'red',\n   *\t\t\tposition: 'fixed'\n   *\t\t} );\n   *\n   * @see module:engine/view/element~Element#_setStyle\n   * @param {String|Object} property Property name or object with key - value pairs.\n   * @param {String} [value] Value to set. This parameter is ignored if object is provided as the first parameter.\n   * @param {module:engine/view/element~Element} element Element for which style will be added.\n   */\n\n\n  setStyle(property, value, element) {\n    if (isPlainObject(property) && element === undefined) {\n      element = value;\n    }\n\n    element._setStyle(property, value);\n  }\n  /**\n   * Removes specified style from the element.\n   *\n   *\t\twriter.removeStyle( element, 'color' );  // Removes 'color' style.\n   *\t\twriter.removeStyle( element, [ 'color', 'border-top' ] ); // Removes both 'color' and 'border-top' styles.\n   *\n   * @see module:engine/view/element~Element#_removeStyle\n   * @param {Array.<String>|String} property Style property name or names to be removed.\n   * @param {module:engine/view/element~Element} element Element from which style will be removed.\n   */\n\n\n  removeStyle(property, element) {\n    element._removeStyle(property);\n  }\n  /**\n   * Sets a custom property on element. Unlike attributes, custom properties are not rendered to the DOM,\n   * so they can be used to add special data to elements.\n   *\n   * @see module:engine/view/element~Element#_setCustomProperty\n   * @param {String|Symbol} key Custom property name/key.\n   * @param {*} value Custom property value to be stored.\n   * @param {module:engine/view/element~Element} element Element for which custom property will be set.\n   */\n\n\n  setCustomProperty(key, value, element) {\n    element._setCustomProperty(key, value);\n  }\n  /**\n   * Removes a custom property stored under the given key.\n   *\n   * @see module:engine/view/element~Element#_removeCustomProperty\n   * @param {String|Symbol} key Name/key of the custom property to be removed.\n   * @param {module:engine/view/element~Element} element Element from which the custom property will be removed.\n   * @returns {Boolean} Returns true if property was removed.\n   */\n\n\n  removeCustomProperty(key, element) {\n    return element._removeCustomProperty(key);\n  }\n  /**\n   * Creates position at the given location. The location can be specified as:\n   *\n   * * a {@link module:engine/view/position~Position position},\n   * * parent element and offset (offset defaults to `0`),\n   * * parent element and `'end'` (sets position at the end of that element),\n   * * {@link module:engine/view/item~Item view item} and `'before'` or `'after'` (sets position before or after given view item).\n   *\n   * This method is a shortcut to other constructors such as:\n   *\n   * * {@link #createPositionBefore},\n   * * {@link #createPositionAfter},\n   *\n   * @param {module:engine/view/item~Item|module:engine/model/position~Position} itemOrPosition\n   * @param {Number|'end'|'before'|'after'} [offset] Offset or one of the flags. Used only when\n   * first parameter is a {@link module:engine/view/item~Item view item}.\n   */\n\n\n  createPositionAt(itemOrPosition, offset) {\n    return Position._createAt(itemOrPosition, offset);\n  }\n  /**\n   * Creates a new position after given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item after which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionAfter(item) {\n    return Position._createAfter(item);\n  }\n  /**\n   * Creates a new position before given view item.\n   *\n   * @param {module:engine/view/item~Item} item View item before which the position should be located.\n   * @returns {module:engine/view/position~Position}\n   */\n\n\n  createPositionBefore(item) {\n    return Position._createBefore(item);\n  }\n  /**\n   * Creates a range spanning from `start` position to `end` position.\n   *\n   * **Note:** This factory method creates it's own {@link module:engine/view/position~Position} instances basing on passed values.\n   *\n   * @param {module:engine/view/position~Position} start Start position.\n   * @param {module:engine/view/position~Position} [end] End position. If not set, range will be collapsed at `start` position.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRange(start, end) {\n    return new Range(start, end);\n  }\n  /**\n   * Creates a range that starts before given {@link module:engine/view/item~Item view item} and ends after it.\n   *\n   * @param {module:engine/view/item~Item} item\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeOn(item) {\n    return Range._createOn(item);\n  }\n  /**\n   * Creates a range inside an {@link module:engine/view/element~Element element} which starts before the first child of\n   * that element and ends after the last child of that element.\n   *\n   * @param {module:engine/view/element~Element} element Element which is a parent for the range.\n   * @returns {module:engine/view/range~Range}\n   */\n\n\n  createRangeIn(element) {\n    return Range._createIn(element);\n  }\n  /**\n   * Creates a new {@link module:engine/view/selection~Selection} instance.\n   *\n   * \t\t// Creates empty selection without ranges.\n   *\t\tconst selection = writer.createSelection();\n   *\n   *\t\t// Creates selection at the given range.\n   *\t\tconst range = writer.createRange( start, end );\n   *\t\tconst selection = writer.createSelection( range );\n   *\n   *\t\t// Creates selection at the given ranges\n   * \t\tconst ranges = [ writer.createRange( start1, end2 ), writer.createRange( star2, end2 ) ];\n   *\t\tconst selection = writer.createSelection( ranges );\n   *\n   *\t\t// Creates selection from the other selection.\n   *\t\tconst otherSelection = writer.createSelection();\n   *\t\tconst selection = writer.createSelection( otherSelection );\n   *\n   *\t\t// Creates selection from the document selection.\n   *\t\tconst selection = writer.createSelection( editor.editing.view.document.selection );\n   *\n   * \t\t// Creates selection at the given position.\n   *\t\tconst position = writer.createPositionFromPath( root, path );\n   *\t\tconst selection = writer.createSelection( position );\n   *\n   *\t\t// Creates collapsed selection at the position of given item and offset.\n   *\t\tconst paragraph = writer.createContainerElement( 'paragraph' );\n   *\t\tconst selection = writer.createSelection( paragraph, offset );\n   *\n   *\t\t// Creates a range inside an {@link module:engine/view/element~Element element} which starts before the\n   *\t\t// first child of that element and ends after the last child of that element.\n   *\t\tconst selection = writer.createSelection( paragraph, 'in' );\n   *\n   *\t\t// Creates a range on an {@link module:engine/view/item~Item item} which starts before the item and ends\n   *\t\t// just after the item.\n   *\t\tconst selection = writer.createSelection( paragraph, 'on' );\n   *\n   * `Selection`'s constructor allow passing additional options (`backward`, `fake` and `label`) as the last argument.\n   *\n   *\t\t// Creates backward selection.\n   *\t\tconst selection = writer.createSelection( range, { backward: true } );\n   *\n   * Fake selection does not render as browser native selection over selected elements and is hidden to the user.\n   * This way, no native selection UI artifacts are displayed to the user and selection over elements can be\n   * represented in other way, for example by applying proper CSS class.\n   *\n   * Additionally fake's selection label can be provided. It will be used to describe fake selection in DOM\n   * (and be  properly handled by screen readers).\n   *\n   *\t\t// Creates fake selection with label.\n   *\t\tconst selection = writer.createSelection( range, { fake: true, label: 'foo' } );\n   *\n   * @param {module:engine/view/selection~Selectable} [selectable=null]\n   * @param {Number|'before'|'end'|'after'|'on'|'in'} [placeOrOffset] Offset or place when selectable is an `Item`.\n   * @param {Object} [options]\n   * @param {Boolean} [options.backward] Sets this selection instance to be backward.\n   * @param {Boolean} [options.fake] Sets this selection instance to be marked as `fake`.\n   * @param {String} [options.label] Label for the fake selection.\n   * @returns {module:engine/view/selection~Selection}\n   */\n\n\n  createSelection(selectable, placeOrOffset, options) {\n    return new Selection(selectable, placeOrOffset, options);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { insertImage, isImageAllowed } from '../image/utils';\n/**\n * @module image/imageupload/imageuploadcommand\n */\n\n/**\n * The image upload command.\n *\n * The command is registered by the {@link module:image/imageupload/imageuploadediting~ImageUploadEditing} plugin as `'imageUpload'`.\n *\n * In order to upload an image at the current selection position\n * (according to the {@link module:widget/utils~findOptimalInsertionPosition} algorithm),\n * execute the command and pass the native image file instance:\n *\n *\t\tthis.listenTo( editor.editing.view.document, 'clipboardInput', ( evt, data ) => {\n *\t\t\t// Assuming that only images were pasted:\n *\t\t\tconst images = Array.from( data.dataTransfer.files );\n *\n *\t\t\t// Upload the first image:\n *\t\t\teditor.execute( 'imageUpload', { file: images[ 0 ] } );\n *\t\t} );\n *\n * It is also possible to insert multiple images at once:\n *\n *\t\teditor.execute( 'imageUpload', {\n *\t\t\tfile: [\n *\t\t\t\tfile1,\n *\t\t\t\tfile2\n *\t\t\t]\n *\t\t} );\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageUploadCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    this.isEnabled = isImageAllowed(this.editor.model);\n  }\n  /**\n   * Executes the command.\n   *\n   * @fires execute\n   * @param {Object} options Options for the executed command.\n   * @param {File|Array.<File>} options.file The image file or an array of image files to upload.\n   */\n\n\n  execute(options) {\n    const editor = this.editor;\n    const model = editor.model;\n    const fileRepository = editor.plugins.get(FileRepository);\n    model.change(writer => {\n      const filesToUpload = Array.isArray(options.file) ? options.file : [options.file];\n\n      for (const file of filesToUpload) {\n        uploadImage(writer, model, fileRepository, file);\n      }\n    });\n  }\n\n} // Handles uploading single file.\n//\n// @param {module:engine/model/writer~writer} writer\n// @param {module:engine/model/model~Model} model\n// @param {File} file\n\nfunction uploadImage(writer, model, fileRepository, file) {\n  const loader = fileRepository.createLoader(file); // Do not throw when upload adapter is not set. FileRepository will log an error anyway.\n\n  if (!loader) {\n    return;\n  }\n\n  insertImage(writer, model, {\n    uploadId: loader.id\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imageupload/imageuploadediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FileRepository from '@ckeditor/ckeditor5-upload/src/filerepository';\nimport Notification from '@ckeditor/ckeditor5-ui/src/notification/notification';\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\nimport env from '@ckeditor/ckeditor5-utils/src/env';\nimport ImageUploadCommand from '../../src/imageupload/imageuploadcommand';\nimport {\n    fetchLocalImage,\n    isLocalImage\n} from '../../src/imageupload/utils';\nimport { createImageTypeRegExp } from './utils';\n/**\n * The editing part of the image upload feature. It registers the `'imageUpload'` command.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageUploadEditing extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [\n            FileRepository,\n            Notification,\n            Clipboard\n        ];\n    }\n    static get pluginName() {\n        return 'ImageUploadEditing';\n    }\n    /**\n   * @inheritDoc\n   */\n    constructor(editor) {\n        super(editor);\n        editor.config.define('image', {\n            upload: {\n                types: [\n                    'jpeg',\n                    'png',\n                    'gif',\n                    'bmp',\n                    'webp',\n                    'tiff'\n                ]\n            }\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const doc = editor.model.document;\n        const schema = editor.model.schema;\n        const conversion = editor.conversion;\n        const fileRepository = editor.plugins.get(FileRepository);\n        const imageTypes = createImageTypeRegExp(editor.config.get('image.upload.types'));\n        // Setup schema to allow uploadId and uploadStatus for images.\n        schema.extend('image', {\n            allowAttributes: [\n                'uploadId',\n                'uploadStatus'\n            ]\n        });\n        // Register imageUpload command.\n        editor.commands.add('imageUpload', new ImageUploadCommand(editor));\n        // Register upcast converter for uploadId.\n        conversion.for('upcast').attributeToAttribute({\n            view: {\n                name: 'img',\n                key: 'uploadId'\n            },\n            model: 'uploadId'\n        });\n        // Handle pasted images.\n        // For every image file, a new file loader is created and a placeholder image is\n        // inserted into the content. Then, those images are uploaded once they appear in the model\n        // (see Document#change listener below).\n        this.listenTo(editor.editing.view.document, 'clipboardInput', (evt, data) => {\n            // Skip if non empty HTML data is included.\n            // https://github.com/ckeditor/ckeditor5-upload/issues/68\n            if (isHtmlIncluded(data.dataTransfer)) {\n                return;\n            }\n            const images = Array.from(data.dataTransfer.files).filter(file => {\n                // See https://github.com/ckeditor/ckeditor5-image/pull/254.\n                if (!file) {\n                    return false;\n                }\n                return imageTypes.test(file.type);\n            });\n            const ranges = data.targetRanges.map(viewRange => editor.editing.mapper.toModelRange(viewRange));\n            editor.model.change(writer => {\n                // Set selection to paste target.\n                writer.setSelection(ranges);\n                if (images.length) {\n                    evt.stop();\n                    // Upload images after the selection has changed in order to ensure the command's state is refreshed.\n                    editor.model.enqueueChange('default', () => {\n                        editor.execute('imageUpload', { file: images });\n                    });\n                }\n            });\n        });\n        // Handle HTML pasted with images with base64 or blob sources.\n        // For every image file, a new file loader is created and a placeholder image is\n        // inserted into the content. Then, those images are uploaded once they appear in the model\n        // (see Document#change listener below).\n        this.listenTo(editor.plugins.get(Clipboard), 'inputTransformation', (evt, data) => {\n            const fetchableImages = Array.from(editor.editing.view.createRangeIn(data.content)).filter(value => isLocalImage(value.item) && !value.item.getAttribute('uploadProcessed')).map(value => {\n                return {\n                    promise: fetchLocalImage(value.item),\n                    imageElement: value.item\n                };\n            });\n            if (!fetchableImages.length) {\n                return;\n            }\n            const writer = new UpcastWriter();\n            for (const fetchableImage of fetchableImages) {\n                // Set attribute marking that the image was processed already.\n                writer.setAttribute('uploadProcessed', true, fetchableImage.imageElement);\n                const loader = fileRepository.createLoader(fetchableImage.promise);\n                if (loader) {\n                    writer.setAttribute('src', '', fetchableImage.imageElement);\n                    writer.setAttribute('uploadId', loader.id, fetchableImage.imageElement);\n                }\n            }\n        });\n        // Prevents from the browser redirecting to the dropped image.\n        editor.editing.view.document.on('dragover', (evt, data) => {\n            data.preventDefault();\n        });\n        // Upload placeholder images that appeared in the model.\n        doc.on('change', () => {\n            const changes = doc.differ.getChanges({ includeChangesInGraveyard: true });\n            for (const entry of changes) {\n                if (entry.type == 'insert' && entry.name != '$text') {\n                    const item = entry.position.nodeAfter;\n                    const isInGraveyard = entry.position.root.rootName == '$graveyard';\n                    for (const image of getImagesFromChangeItem(editor, item)) {\n                        // Check if the image element still has upload id.\n                        const uploadId = image.getAttribute('uploadId');\n                        if (!uploadId) {\n                            continue;\n                        }\n                        // Check if the image is loaded on this client.\n                        const loader = fileRepository.loaders.get(uploadId);\n                        if (!loader) {\n                            continue;\n                        }\n                        if (isInGraveyard) {\n                            // If the image was inserted to the graveyard - abort the loading process.\n                            loader.abort();\n                        } else if (loader.status == 'idle') {\n                            // If the image was inserted into content and has not been loaded yet, start loading it.\n                            this._readAndUpload(loader, image);\n                        }\n                    }\n                }\n            }\n        });\n    }\n    /**\n   * Reads and uploads an image.\n   *\n   * The image is read from the disk and as a Base64-encoded string it is set temporarily to\n   * `image[src]`. When the image is successfully uploaded, the temporary data is replaced with the target\n   * image's URL (the URL to the uploaded image on the server).\n   *\n   * @protected\n   * @param {module:upload/filerepository~FileLoader} loader\n   * @param {module:engine/model/element~Element} imageElement\n   * @returns {Promise}\n   */\n    _readAndUpload(loader, imageElement) {\n        const editor = this.editor;\n        const model = editor.model;\n        const t = editor.locale.t;\n        const fileRepository = editor.plugins.get(FileRepository);\n        const notification = editor.plugins.get(Notification);\n        model.enqueueChange('transparent', writer => {\n            writer.setAttribute('uploadStatus', 'reading', imageElement);\n        });\n        return loader.read().then(() => {\n            const promise = loader.upload();\n            // Force re–paint in Safari. Without it, the image will display with a wrong size.\n            // https://github.com/ckeditor/ckeditor5/issues/1975\n            /* istanbul ignore next */\n            if (env.isSafari) {\n                const viewFigure = editor.editing.mapper.toViewElement(imageElement);\n                const viewImg = viewFigure.getChild(0);\n                editor.editing.view.once('render', () => {\n                    // Early returns just to be safe. There might be some code ran\n                    // in between the outer scope and this callback.\n                    if (!viewImg.parent) {\n                        return;\n                    }\n                    const domFigure = editor.editing.view.domConverter.mapViewToDom(viewImg.parent);\n                    if (!domFigure) {\n                        return;\n                    }\n                    const originalDisplay = domFigure.style.display;\n                    domFigure.style.display = 'none';\n                    // Make sure this line will never be removed during minification for having \"no effect\".\n                    domFigure._ckHack = domFigure.offsetHeight;\n                    domFigure.style.display = originalDisplay;\n                });\n            }\n            model.enqueueChange('transparent', writer => {\n                writer.setAttribute('uploadStatus', 'uploading', imageElement);\n            });\n            return promise;\n        }).then(data => {\n            model.enqueueChange('transparent', writer => {\n                writer.setAttributes({\n                    uploadStatus: 'complete',\n                    src: data.default\n                }, imageElement);\n                this._parseAndSetSrcsetAttributeOnImage(data, imageElement, writer);\n            });\n            clean();\n        }).catch(error => {\n            // If status is not 'error' nor 'aborted' - throw error because it means that something else went wrong,\n            // it might be generic error and it would be real pain to find what is going on.\n            if (loader.status !== 'error' && loader.status !== 'aborted') {\n                throw error;\n            }\n            // Might be 'aborted'.\n            if (loader.status == 'error' && error) {\n                notification.showWarning(error, {\n                    title: t('ab'),\n                    namespace: 'upload'\n                });\n            }\n            clean();\n            // Permanently remove image from insertion batch.\n            model.enqueueChange('transparent', writer => {\n                writer.remove(imageElement);\n            });\n        });\n        function clean() {\n            model.enqueueChange('transparent', writer => {\n                writer.removeAttribute('uploadId', imageElement);\n                writer.removeAttribute('uploadStatus', imageElement);\n            });\n            fileRepository.destroyLoader(loader);\n        }\n    }\n    /**\n   * Creates the `srcset` attribute based on a given file upload response and sets it as an attribute to a specific image element.\n   *\n   * @protected\n   * @param {Object} data Data object from which `srcset` will be created.\n   * @param {module:engine/model/element~Element} image The image element on which the `srcset` attribute will be set.\n   * @param {module:engine/model/writer~Writer} writer\n   */\n    _parseAndSetSrcsetAttributeOnImage(data, image, writer) {\n        // Srcset attribute for responsive images support.\n        let maxWidth = 0;\n        const srcsetAttribute = Object.keys(data)    // Filter out keys that are not integers.\n.filter(key => {\n            const width = parseInt(key, 10);\n            if (!isNaN(width)) {\n                maxWidth = Math.max(maxWidth, width);\n                return true;\n            }\n        })    // Convert each key to srcset entry.\n.map(key => `${ data[key] } ${ key }w`)    // Join all entries.\n.join(', ');\n        if (srcsetAttribute != '') {\n            writer.setAttribute('srcset', {\n                data: srcsetAttribute,\n                width: maxWidth\n            }, image);\n        }\n    }\n}\n// Returns `true` if non-empty `text/html` is included in the data transfer.\n//\n// @param {module:clipboard/datatransfer~DataTransfer} dataTransfer\n// @returns {Boolean}\nexport function isHtmlIncluded(dataTransfer) {\n    return Array.from(dataTransfer.types).includes('text/html') && dataTransfer.getData('text/html') !== '';\n}\nfunction getImagesFromChangeItem(editor, item) {\n    return Array.from(editor.model.createRangeOn(item)).filter(value => value.item.is('image')).map(value => value.item);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageupload\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageUploadUI from './imageupload/imageuploadui';\nimport ImageUploadProgress from './imageupload/imageuploadprogress';\nimport ImageUploadEditing from './imageupload/imageuploadediting';\n/**\n * The image upload plugin.\n *\n * For a detailed overview, check the {@glink features/image-upload/image-upload image upload feature} documentation.\n *\n * This plugin does not do anything directly, but it loads a set of specific plugins to enable image uploading:\n *\n * * {@link module:image/imageupload/imageuploadediting~ImageUploadEditing},\n * * {@link module:image/imageupload/imageuploadui~ImageUploadUI},\n * * {@link module:image/imageupload/imageuploadprogress~ImageUploadProgress}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageUpload extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageUpload';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [ImageUploadEditing, ImageUploadUI, ImageUploadProgress];\n  }\n\n}\n/**\n * Image upload configuration.\n *\n * @member {module:image/imageupload~ImageUploadConfig} module:image/image~ImageConfig#upload\n */\n\n/**\n * The configuration of the image upload feature. Used by the image upload feature in the `@ckeditor/ckeditor5-image` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\timage: {\n * \t\t\t\t\tupload:  ... // Image upload feature options.\n * \t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface module:image/imageupload~ImageUploadConfig\n */\n\n/**\n * The list of accepted image types.\n *\n * The accepted types of images can be customized to allow only certain types of images:\n *\n *\t\t// Allow only JPEG and PNG images:\n *\t\tconst imageUploadConfig = {\n *\t\t\ttypes: [ 'png', 'jpeg' ]\n *\t\t};\n *\n * The type string should match [one of the sub-types](https://www.iana.org/assignments/media-types/media-types.xhtml#image)\n * of the image MIME type. E.g. for the `image/jpeg` MIME type, add `'jpeg'` to your image upload configuration.\n *\n * **Note:** This setting only restricts some image types to be selected and uploaded through the CKEditor UI and commands. Image type\n * recognition and filtering should also be implemented on the server which accepts image uploads.\n *\n * @member {Array.<String>} module:image/imageupload~ImageUploadConfig#types\n * @default [ 'jpeg', 'png', 'gif', 'bmp', 'webp', 'tiff' ]\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraphcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The paragraph command.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ParagraphCommand extends Command {\n  /**\n   * The value of the command. Indicates whether the selection start is placed in a paragraph.\n   *\n   * @readonly\n   * @observable\n   * @member {Boolean} #value\n   */\n\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const document = model.document;\n    const block = first(document.selection.getSelectedBlocks());\n    this.value = !!block && block.is('paragraph');\n    this.isEnabled = !!block && checkCanBecomeParagraph(block, model.schema);\n  }\n  /**\n   * Executes the command. All the blocks (see {@link module:engine/model/schema~Schema}) in the selection\n   * will be turned to paragraphs.\n   *\n   * @fires execute\n   * @param {Object} [options] Options for the executed command.\n   * @param {module:engine/model/selection~Selection|module:engine/model/documentselection~DocumentSelection} [options.selection]\n   * The selection that the command should be applied to.\n   * By default, if not provided, the command is applied to the {@link module:engine/model/document~Document#selection}.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const document = model.document;\n    model.change(writer => {\n      const blocks = (options.selection || document.selection).getSelectedBlocks();\n\n      for (const block of blocks) {\n        if (!block.is('paragraph') && checkCanBecomeParagraph(block, model.schema)) {\n          writer.rename(block, 'paragraph');\n        }\n      }\n    });\n  }\n\n} // Checks whether the given block can be replaced by a paragraph.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\n\nfunction checkCanBecomeParagraph(block, schema) {\n  return schema.checkChild(block.parent, 'paragraph') && !schema.isObject(block);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paragraph/paragraph\n */\nimport ParagraphCommand from './paragraphcommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The paragraph feature for the editor.\n *\n * It introduces the `<paragraph>` element in the model which renders as a `<p>` element in the DOM and data.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Paragraph extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Paragraph';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    const data = editor.data;\n    editor.commands.add('paragraph', new ParagraphCommand(editor)); // Schema.\n\n    model.schema.register('paragraph', {\n      inheritAllFrom: '$block'\n    });\n    editor.conversion.elementToElement({\n      model: 'paragraph',\n      view: 'p'\n    }); // Content autoparagraphing. --------------------------------------------------\n    // Handles element which has not been converted by any plugin and checks if it would be converted if\n    // we wrap it in a paragraph or change it to a paragraph.\n\n    editor.conversion.for('upcast').elementToElement({\n      model: (viewElement, modelWriter) => {\n        if (!Paragraph.paragraphLikeElements.has(viewElement.name)) {\n          return null;\n        } // Do not auto-paragraph empty elements.\n\n\n        if (viewElement.isEmpty) {\n          return null;\n        }\n\n        return modelWriter.createElement('paragraph');\n      },\n      converterPriority: 'low'\n    });\n    data.upcastDispatcher.on('element', (evt, data, conversionApi) => {\n      // Do not try auto-paragraphing if the element was already converted.\n      if (!conversionApi.consumable.test(data.viewItem, {\n        name: data.viewItem.name\n      })) {\n        return;\n      } // If the element is not paragraph-like try wrapping it in a paragraph.\n\n\n      if (isParagraphable(data.viewItem, data.modelCursor, conversionApi.schema)) {\n        Object.assign(data, wrapInParagraph(data.viewItem, data.modelCursor, conversionApi));\n      }\n    }, {\n      priority: 'low'\n    }); // Handles not converted text nodes and checks if would be converted if we wraps then by a paragraph.\n\n    data.upcastDispatcher.on('text', (evt, data, conversionApi) => {\n      // When node is already converted then do nothing.\n      if (data.modelRange) {\n        return;\n      }\n\n      if (isParagraphable(data.viewItem, data.modelCursor, conversionApi.schema)) {\n        Object.assign(data, wrapInParagraph(data.viewItem, data.modelCursor, conversionApi));\n      }\n    }, {\n      priority: 'lowest'\n    }); // Empty roots autoparagraphing. -----------------------------------------------\n    // Post-fixer which takes care of adding empty paragraph elements to empty roots.\n    // Besides fixing content on #changesDone we also need to handle editor.data#ready event because\n    // if initial data is empty or setData() wasn't even called there will be no #change fired.\n\n    model.document.registerPostFixer(writer => this._autoparagraphEmptyRoots(writer));\n    editor.data.on('ready', () => {\n      model.enqueueChange('transparent', writer => this._autoparagraphEmptyRoots(writer));\n    }, {\n      priority: 'lowest'\n    });\n  }\n  /**\n   * Fixes all empty roots.\n   *\n   * @private\n   * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n   */\n\n\n  _autoparagraphEmptyRoots(writer) {\n    const model = this.editor.model;\n\n    for (const rootName of model.document.getRootNames()) {\n      const root = model.document.getRoot(rootName);\n\n      if (root.isEmpty && root.rootName != '$graveyard') {\n        // If paragraph element is allowed in the root, create paragraph element.\n        if (model.schema.checkChild(root, 'paragraph')) {\n          writer.insertElement('paragraph', root);\n          return true;\n        }\n      }\n    }\n  }\n\n}\n/**\n * A list of element names which should be treated by the autoparagraphing algorithms as\n * paragraph-like. This means that e.g. the following content:\n *\n *\t\t<h1>Foo</h1>\n *\t\t<table>\n *\t\t\t<tr>\n *\t\t\t\t<td>X</td>\n *\t\t\t\t<td>\n *\t\t\t\t\t<ul>\n *\t\t\t\t\t\t<li>Y</li>\n *\t\t\t\t\t\t<li>Z</li>\n *\t\t\t\t\t</ul>\n *\t\t\t\t</td>\n *\t\t\t</tr>\n *\t\t</table>\n *\n * contains five paragraph-like elements: `<h1>`, two `<td>`s and two `<li>`s.\n * Hence, if none of the features is going to convert those elements the above content will be automatically handled\n * by the paragraph feature and converted to:\n *\n *\t\t<p>Foo</p>\n *\t\t<p>X</p>\n *\t\t<p>Y</p>\n *\t\t<p>Z</p>\n *\n * Note: The `<td>` containing two `<li>` elements was ignored as the innermost paragraph-like elements\n * have a priority upon conversion.\n *\n * @member {Set.<String>} module:paragraph/paragraph~Paragraph.paragraphLikeElements\n */\n\nParagraph.paragraphLikeElements = new Set(['blockquote', 'dd', 'div', 'dt', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'li', 'p', 'td']);\n\nfunction wrapInParagraph(input, position, conversionApi) {\n  const paragraph = conversionApi.writer.createElement('paragraph');\n  conversionApi.writer.insert(paragraph, position);\n  return conversionApi.convertItem(input, conversionApi.writer.createPositionAt(paragraph, 0));\n}\n\nfunction isParagraphable(node, position, schema) {\n  const context = schema.createContext(position); // When paragraph is allowed in this context...\n\n  if (!schema.checkChild(context, 'paragraph')) {\n    return false;\n  } // And a node would be allowed in this paragraph...\n\n\n  if (!schema.checkChild(context.push('paragraph'), node)) {\n    return false;\n  }\n\n  return true;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The heading command. It is used by the {@link module:heading/heading~Heading heading feature} to apply headings.\n *\n * @extends module:core/command~Command\n */\n\nexport default class HeadingCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor Editor instance.\n   * @param {Array.<String>} modelElements Names of the element which this command can apply in the model.\n   */\n  constructor(editor, modelElements) {\n    super(editor);\n    /**\n     * If the selection starts in a heading (which {@link #modelElements is supported by this command})\n     * the value is set to the name of that heading model element.\n     * It is  set to `false` otherwise.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean|String} #value\n     */\n\n    /**\n     * Set of defined model's elements names that this command support.\n     * See {@link module:heading/heading~HeadingOption}.\n     *\n     * @readonly\n     * @member {Array.<String>}\n     */\n\n    this.modelElements = modelElements;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const block = first(this.editor.model.document.selection.getSelectedBlocks());\n    this.value = !!block && this.modelElements.includes(block.name) && block.name;\n    this.isEnabled = !!block && this.modelElements.some(heading => checkCanBecomeHeading(block, heading, this.editor.model.schema));\n  }\n  /**\n   * Executes the command. Applies the heading to the selected blocks or, if the first selected\n   * block is a heading already, turns selected headings (of this level only) to paragraphs.\n   *\n   * @param {Object} options\n   * @param {String} options.value Name of the element which this command will apply in the model.\n   * @fires execute\n   */\n\n\n  execute(options) {\n    const model = this.editor.model;\n    const document = model.document;\n    const modelElement = options.value;\n    model.change(writer => {\n      const blocks = Array.from(document.selection.getSelectedBlocks()).filter(block => {\n        return checkCanBecomeHeading(block, modelElement, model.schema);\n      });\n\n      for (const block of blocks) {\n        if (!block.is(modelElement)) {\n          writer.rename(block, modelElement);\n        }\n      }\n    });\n  }\n\n} // Checks whether the given block can be replaced by a specific heading.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:heading/headingcommand~HeadingCommand#modelElement} heading Command element name in the model.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\n\nfunction checkCanBecomeHeading(block, heading, schema) {\n  return schema.checkChild(block.parent, heading) && !schema.isObject(block);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/headingediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport HeadingCommand from './headingcommand';\nimport priorities from '@ckeditor/ckeditor5-utils/src/priorities';\nconst defaultModelElement = 'paragraph';\n/**\n * The headings engine feature. It handles switching between block formats &ndash; headings and paragraph.\n * This class represents the engine part of the heading feature. See also {@link module:heading/heading~Heading}.\n * It introduces `heading1`-`headingN` commands which allow to convert paragraphs into headings.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class HeadingEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'HeadingEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('heading', {\n      options: [{\n        model: 'paragraph',\n        title: 'Paragraph',\n        class: 'ck-heading_paragraph'\n      }, {\n        model: 'heading1',\n        view: 'h2',\n        title: 'Heading 1',\n        class: 'ck-heading_heading1'\n      }, {\n        model: 'heading2',\n        view: 'h3',\n        title: 'Heading 2',\n        class: 'ck-heading_heading2'\n      }, {\n        model: 'heading3',\n        view: 'h4',\n        title: 'Heading 3',\n        class: 'ck-heading_heading3'\n      }]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Paragraph];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const options = editor.config.get('heading.options');\n    const modelElements = [];\n\n    for (const option of options) {\n      // Skip paragraph - it is defined in required Paragraph feature.\n      if (option.model !== defaultModelElement) {\n        // Schema.\n        editor.model.schema.register(option.model, {\n          inheritAllFrom: '$block'\n        });\n        editor.conversion.elementToElement(option);\n        modelElements.push(option.model);\n      }\n    }\n\n    this._addDefaultH1Conversion(editor); // Register the heading command for this option.\n\n\n    editor.commands.add('heading', new HeadingCommand(editor, modelElements));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    // If the enter command is added to the editor, alter its behavior.\n    // Enter at the end of a heading element should create a paragraph.\n    const editor = this.editor;\n    const enterCommand = editor.commands.get('enter');\n    const options = editor.config.get('heading.options');\n\n    if (enterCommand) {\n      this.listenTo(enterCommand, 'afterExecute', (evt, data) => {\n        const positionParent = editor.model.document.selection.getFirstPosition().parent;\n        const isHeading = options.some(option => positionParent.is(option.model));\n\n        if (isHeading && !positionParent.is(defaultModelElement) && positionParent.childCount === 0) {\n          data.writer.rename(positionParent, defaultModelElement);\n        }\n      });\n    }\n  }\n  /**\n   * Adds default conversion for `h1` -> `heading1` with a low priority.\n   *\n   * @private\n   * @param {module:core/editor/editor~Editor} editor Editor instance on which to add the `h1` conversion.\n   */\n\n\n  _addDefaultH1Conversion(editor) {\n    editor.conversion.for('upcast').elementToElement({\n      model: 'heading1',\n      view: 'h1',\n      // With a `low` priority, `paragraph` plugin autoparagraphing mechanism is executed. Make sure\n      // this listener is called before it. If not, `h1` will be transformed into a paragraph.\n      converterPriority: priorities.get('low') + 1\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/headingui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport {\n    createDropdown,\n    addListToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport { getLocalizedOptions } from './utils';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport '../theme/heading.css';\n/**\n * The headings UI feature. It introduces the `headings` dropdown.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HeadingUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        const options = getLocalizedOptions(editor);\n        const defaultTitle = t('r');\n        const dropdownTooltip = t('s');\n        // Register UI component.\n        editor.ui.componentFactory.add('heading', locale => {\n            const titles = {};\n            const itemDefinitions = new Collection();\n            const headingCommand = editor.commands.get('heading');\n            const paragraphCommand = editor.commands.get('paragraph');\n            const commands = [headingCommand];\n            for (const option of options) {\n                const def = {\n                    type: 'button',\n                    model: new Model({\n                        label: option.title,\n                        class: option.class,\n                        withText: true\n                    })\n                };\n                if (option.model === 'paragraph') {\n                    def.model.bind('isOn').to(paragraphCommand, 'value');\n                    def.model.set('commandName', 'paragraph');\n                    commands.push(paragraphCommand);\n                } else {\n                    def.model.bind('isOn').to(headingCommand, 'value', value => value === option.model);\n                    def.model.set({\n                        commandName: 'heading',\n                        commandValue: option.model\n                    });\n                }\n                // Add the option to the collection.\n                itemDefinitions.add(def);\n                titles[option.model] = option.title;\n            }\n            const dropdownView = createDropdown(locale);\n            addListToDropdown(dropdownView, itemDefinitions);\n            dropdownView.buttonView.set({\n                isOn: false,\n                withText: true,\n                tooltip: dropdownTooltip\n            });\n            dropdownView.extendTemplate({ attributes: { class: ['ck-heading-dropdown'] } });\n            dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n                return areEnabled.some(isEnabled => isEnabled);\n            });\n            dropdownView.buttonView.bind('label').to(headingCommand, 'value', paragraphCommand, 'value', (value, para) => {\n                const whichModel = value || para && 'paragraph';\n                // If none of the commands is active, display default title.\n                return titles[whichModel] ? titles[whichModel] : defaultTitle;\n            });\n            // Execute command when an item from the dropdown is selected.\n            this.listenTo(dropdownView, 'execute', evt => {\n                editor.execute(evt.source.commandName, evt.source.commandValue ? { value: evt.source.commandValue } : undefined);\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module heading/utils\n */\n/**\n * Returns heading options as defined in `config.heading.options` but processed to consider\n * the editor localization, i.e. to display {@link module:heading/heading~HeadingOption}\n * in the correct language.\n *\n * Note: The reason behind this method is that there is no way to use {@link module:utils/locale~Locale#t}\n * when the user configuration is defined because the editor does not exist yet.\n *\n * @param {module:core/editor/editor~Editor} editor\n * @returns {Array.<module:heading/heading~HeadingOption>}.\n */\nexport function getLocalizedOptions(editor) {\n    const t = editor.t;\n    const localizedTitles = {\n        Paragraph: t('dg'),\n        'Heading 1': t('dh'),\n        'Heading 2': t('di'),\n        'Heading 3': t('dj'),\n        'Heading 4': t('dk'),\n        'Heading 5': t('dl'),\n        'Heading 6': t('dm')\n    };\n    return editor.config.get('heading.options').map(option => {\n        const title = localizedTitles[option.title];\n        if (title && title != option.title) {\n            option.title = title;\n        }\n        return option;\n    });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption/utils\n */\nimport { enablePlaceholder } from '@ckeditor/ckeditor5-engine/src/view/placeholder';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\n/**\n * Returns a function that creates a caption editable element for the given {@link module:engine/view/document~Document}.\n *\n * @param {module:engine/view/view~View} view\n * @param {String} placeholderText The text to be displayed when the caption is empty.\n * @returns {Function}\n */\n\nexport function captionElementCreator(view, placeholderText) {\n  return writer => {\n    const editable = writer.createEditableElement('figcaption');\n    writer.setCustomProperty('imageCaption', true, editable);\n    enablePlaceholder({\n      view,\n      element: editable,\n      text: placeholderText\n    });\n    return toWidgetEditable(editable, writer);\n  };\n}\n/**\n * Returns `true` if a given view element is the image caption editable.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isCaption(viewElement) {\n  return !!viewElement.getCustomProperty('imageCaption');\n}\n/**\n * Returns the caption model element from a given image element. Returns `null` if no caption is found.\n *\n * @param {module:engine/model/element~Element} imageModelElement\n * @returns {module:engine/model/element~Element|null}\n */\n\nexport function getCaptionFromImage(imageModelElement) {\n  for (const node of imageModelElement.getChildren()) {\n    if (!!node && node.is('caption')) {\n      return node;\n    }\n  }\n\n  return null;\n}\n/**\n * {@link module:engine/view/matcher~Matcher} pattern. Checks if a given element is a `<figcaption>` element that is placed\n * inside the image `<figure>` element.\n *\n * @param {module:engine/view/element~Element} element\n * @returns {Object|null} Returns the object accepted by {@link module:engine/view/matcher~Matcher} or `null` if the element\n * cannot be matched.\n */\n\nexport function matchImageCaption(element) {\n  const parent = element.parent; // Convert only captions for images.\n\n  if (element.name == 'figcaption' && parent && parent.name == 'figure' && parent.hasClass('image')) {\n    return {\n      name: true\n    };\n  }\n\n  return null;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagecaption/imagecaptionediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { isImage } from '../image/utils';\nimport {\n    captionElementCreator,\n    getCaptionFromImage,\n    matchImageCaption\n} from './utils';\n/**\n * The image caption engine plugin.\n *\n * It registers proper converters. It takes care of adding a caption element if the image without it is inserted\n * to the model document.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageCaptionEditing extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'ImageCaptionEditing';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const view = editor.editing.view;\n        const schema = editor.model.schema;\n        const data = editor.data;\n        const editing = editor.editing;\n        const t = editor.t;\n        /**\n     * The last selected caption editable.\n     * It is used for hiding the editable when it is empty and the image widget is no longer selected.\n     *\n     * @private\n     * @member {module:engine/view/editableelement~EditableElement} #_lastSelectedCaption\n     */\n        // Schema configuration.\n        schema.register('caption', {\n            allowIn: 'image',\n            allowContentOf: '$block',\n            isLimit: true\n        });\n        // Add caption element to each image inserted without it.\n        editor.model.document.registerPostFixer(writer => this._insertMissingModelCaptionElement(writer));\n        // View to model converter for the data pipeline.\n        editor.conversion.for('upcast').elementToElement({\n            view: matchImageCaption,\n            model: 'caption'\n        });\n        // Model to view converter for the data pipeline.\n        const createCaptionForData = writer => writer.createContainerElement('figcaption');\n        data.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForData, false));\n        // Model to view converter for the editing pipeline.\n        const createCaptionForEditing = captionElementCreator(view, t('aa'));\n        editing.downcastDispatcher.on('insert:caption', captionModelToView(createCaptionForEditing));\n        // Always show caption in view when something is inserted in model.\n        editing.downcastDispatcher.on('insert', this._fixCaptionVisibility(data => data.item), { priority: 'high' });\n        // Hide caption when everything is removed from it.\n        editing.downcastDispatcher.on('remove', this._fixCaptionVisibility(data => data.position.parent), { priority: 'high' });\n        // Update caption visibility on view in post fixer.\n        view.document.registerPostFixer(writer => this._updateCaptionVisibility(writer));\n    }\n    /**\n   * Updates the view before each rendering, making sure that empty captions (so unnecessary ones) are hidden\n   * and then visible when the image is selected.\n   *\n   * @private\n   * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n   * @returns {Boolean} Returns `true` when the view is updated.\n   */\n    _updateCaptionVisibility(viewWriter) {\n        const mapper = this.editor.editing.mapper;\n        const lastCaption = this._lastSelectedCaption;\n        let viewCaption;\n        // If whole image is selected.\n        const modelSelection = this.editor.model.document.selection;\n        const selectedElement = modelSelection.getSelectedElement();\n        if (selectedElement && selectedElement.is('image')) {\n            const modelCaption = getCaptionFromImage(selectedElement);\n            viewCaption = mapper.toViewElement(modelCaption);\n        }\n        // If selection is placed inside caption.\n        const position = modelSelection.getFirstPosition();\n        const modelCaption = getParentCaption(position.parent);\n        if (modelCaption) {\n            viewCaption = mapper.toViewElement(modelCaption);\n        }\n        // Is currently any caption selected?\n        if (viewCaption) {\n            // Was any caption selected before?\n            if (lastCaption) {\n                // Same caption as before?\n                if (lastCaption === viewCaption) {\n                    return showCaption(viewCaption, viewWriter);\n                } else {\n                    hideCaptionIfEmpty(lastCaption, viewWriter);\n                    this._lastSelectedCaption = viewCaption;\n                    return showCaption(viewCaption, viewWriter);\n                }\n            } else {\n                this._lastSelectedCaption = viewCaption;\n                return showCaption(viewCaption, viewWriter);\n            }\n        } else {\n            // Was any caption selected before?\n            if (lastCaption) {\n                const viewModified = hideCaptionIfEmpty(lastCaption, viewWriter);\n                this._lastSelectedCaption = null;\n                return viewModified;\n            } else {\n                return false;\n            }\n        }\n    }\n    /**\n   * Returns a converter that fixes caption visibility during the model-to-view conversion.\n   * Checks if the changed node is placed inside the caption element and fixes its visibility in the view.\n   *\n   * @private\n   * @param {Function} nodeFinder\n   * @returns {Function}\n   */\n    _fixCaptionVisibility(nodeFinder) {\n        return (evt, data, conversionApi) => {\n            const node = nodeFinder(data);\n            const modelCaption = getParentCaption(node);\n            const mapper = this.editor.editing.mapper;\n            const viewWriter = conversionApi.writer;\n            if (modelCaption) {\n                const viewCaption = mapper.toViewElement(modelCaption);\n                if (viewCaption) {\n                    if (modelCaption.childCount) {\n                        viewWriter.removeClass('ck-hidden', viewCaption);\n                    } else {\n                        viewWriter.addClass('ck-hidden', viewCaption);\n                    }\n                }\n            }\n        };\n    }\n    /**\n   * Checks whether the data inserted to the model document have an image element that has no caption element inside it.\n   * If there is none, it adds it to the image element.\n   *\n   * @private\n   * @param {module:engine/model/writer~Writer} writer The writer to make changes with.\n   * @returns {Boolean} `true` if any change was applied, `false` otherwise.\n   */\n    _insertMissingModelCaptionElement(writer) {\n        const model = this.editor.model;\n        const changes = model.document.differ.getChanges();\n        const imagesWithoutCaption = [];\n        for (const entry of changes) {\n            if (entry.type == 'insert' && entry.name != '$text') {\n                const item = entry.position.nodeAfter;\n                if (item.is('image') && !getCaptionFromImage(item)) {\n                    imagesWithoutCaption.push(item);\n                }\n                // Check elements with children for nested images.\n                if (!item.is('image') && item.childCount) {\n                    for (const nestedItem of model.createRangeIn(item).getItems()) {\n                        if (nestedItem.is('image') && !getCaptionFromImage(nestedItem)) {\n                            imagesWithoutCaption.push(nestedItem);\n                        }\n                    }\n                }\n            }\n        }\n        for (const image of imagesWithoutCaption) {\n            writer.appendElement('caption', image);\n        }\n        return !!imagesWithoutCaption.length;\n    }\n}\n// Creates a converter that converts image caption model element to view element.\n//\n// @private\n// @param {Function} elementCreator\n// @param {Boolean} [hide=true] When set to `false` view element will not be inserted when it's empty.\n// @returns {Function}\nfunction captionModelToView(elementCreator, hide = true) {\n    return (evt, data, conversionApi) => {\n        const captionElement = data.item;\n        // Return if element shouldn't be present when empty.\n        if (!captionElement.childCount && !hide) {\n            return;\n        }\n        if (isImage(captionElement.parent)) {\n            if (!conversionApi.consumable.consume(data.item, 'insert')) {\n                return;\n            }\n            const viewImage = conversionApi.mapper.toViewElement(data.range.start.parent);\n            const viewCaption = elementCreator(conversionApi.writer);\n            const viewWriter = conversionApi.writer;\n            // Hide if empty.\n            if (!captionElement.childCount) {\n                viewWriter.addClass('ck-hidden', viewCaption);\n            }\n            insertViewCaptionAndBind(viewCaption, data.item, viewImage, conversionApi);\n        }\n    };\n}\n// Inserts `viewCaption` at the end of `viewImage` and binds it to `modelCaption`.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} viewCaption\n// @param {module:engine/model/element~Element} modelCaption\n// @param {module:engine/view/containerelement~ContainerElement} viewImage\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\nfunction insertViewCaptionAndBind(viewCaption, modelCaption, viewImage, conversionApi) {\n    const viewPosition = conversionApi.writer.createPositionAt(viewImage, 'end');\n    conversionApi.writer.insert(viewPosition, viewCaption);\n    conversionApi.mapper.bindElements(modelCaption, viewCaption);\n}\n// Checks if the provided node or one of its ancestors is a caption element, and returns it.\n//\n// @private\n// @param {module:engine/model/node~Node} node\n// @returns {module:engine/model/element~Element|null}\nfunction getParentCaption(node) {\n    const ancestors = node.getAncestors({ includeSelf: true });\n    const caption = ancestors.find(ancestor => ancestor.name == 'caption');\n    if (caption && caption.parent && caption.parent.name == 'image') {\n        return caption;\n    }\n    return null;\n}\n// Hides a given caption in the view if it is empty.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\nfunction hideCaptionIfEmpty(caption, viewWriter) {\n    if (!caption.childCount && !caption.hasClass('ck-hidden')) {\n        viewWriter.addClass('ck-hidden', caption);\n        return true;\n    }\n    return false;\n}\n// Shows the caption.\n//\n// @private\n// @param {module:engine/view/containerelement~ContainerElement} caption\n// @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter\n// @returns {Boolean} Returns `true` if the view was modified.\nfunction showCaption(caption, viewWriter) {\n    if (caption.hasClass('ck-hidden')) {\n        viewWriter.removeClass('ck-hidden', caption);\n        return true;\n    }\n    return false;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestylecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n/**\n * The image style command. It is used to apply different image styles.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageStyleCommand extends Command {\n  /**\n   * Creates an instance of the image style command. Each command instance is handling one style.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles that this command supports.\n   */\n  constructor(editor, styles) {\n    super(editor);\n    /**\n     * The name of the default style, if it is present. If there is no default style, it defaults to `false`.\n     *\n     * @readonly\n     * @type {Boolean|String}\n     */\n\n    this.defaultStyle = false;\n    /**\n     * A style handled by this command.\n     *\n     * @readonly\n     * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} #styles\n     */\n\n    this.styles = styles.reduce((styles, style) => {\n      styles[style.name] = style;\n\n      if (style.isDefault) {\n        this.defaultStyle = style.name;\n      }\n\n      return styles;\n    }, {});\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const element = this.editor.model.document.selection.getSelectedElement();\n    this.isEnabled = isImage(element);\n\n    if (!element) {\n      this.value = false;\n    } else if (element.hasAttribute('imageStyle')) {\n      const attributeValue = element.getAttribute('imageStyle');\n      this.value = this.styles[attributeValue] ? attributeValue : false;\n    } else {\n      this.value = this.defaultStyle;\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   *\t\teditor.execute( 'imageStyle', { value: 'side' } );\n   *\n   * @param {Object} options\n   * @param {String} options.value The name of the style (based on the\n   * {@link module:image/image~ImageConfig#styles `image.styles`} configuration option).\n   * @fires execute\n   */\n\n\n  execute(options) {\n    const styleName = options.value;\n    const model = this.editor.model;\n    const imageElement = model.document.selection.getSelectedElement();\n    model.change(writer => {\n      // Default style means that there is no `imageStyle` attribute in the model.\n      // https://github.com/ckeditor/ckeditor5-image/issues/147\n      if (this.styles[styleName].isDefault) {\n        writer.removeAttribute('imageStyle', imageElement);\n      } else {\n        writer.setAttribute('imageStyle', styleName, imageElement);\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * @module image/imagestyle/converters\n */\n\n/**\n * Returns a converter for the `imageStyle` attribute. It can be used for adding, changing and removing the attribute.\n *\n * @param {Object} styles An object containing available styles. See {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n * for more details.\n * @returns {Function} A model-to-view attribute converter.\n */\n\nexport function modelToViewStyleAttribute(styles) {\n  return (evt, data, conversionApi) => {\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    } // Check if there is class name associated with given value.\n\n\n    const newStyle = getStyleByName(data.attributeNewValue, styles);\n    const oldStyle = getStyleByName(data.attributeOldValue, styles);\n    const viewElement = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer;\n\n    if (oldStyle) {\n      viewWriter.removeClass(oldStyle.className, viewElement);\n    }\n\n    if (newStyle) {\n      viewWriter.addClass(newStyle.className, viewElement);\n    }\n  };\n}\n/**\n * Returns a view-to-model converter converting image CSS classes to a proper value in the model.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles The styles for which the converter is created.\n * @returns {Function} A view-to-model converter.\n */\n\nexport function viewToModelStyleAttribute(styles) {\n  // Convert only non–default styles.\n  const filteredStyles = styles.filter(style => !style.isDefault);\n  return (evt, data, conversionApi) => {\n    if (!data.modelRange) {\n      return;\n    }\n\n    const viewFigureElement = data.viewItem;\n    const modelImageElement = first(data.modelRange.getItems()); // Check if `imageStyle` attribute is allowed for current element.\n\n    if (!conversionApi.schema.checkAttribute(modelImageElement, 'imageStyle')) {\n      return;\n    } // Convert style one by one.\n\n\n    for (const style of filteredStyles) {\n      // Try to consume class corresponding with style.\n      if (conversionApi.consumable.consume(viewFigureElement, {\n        classes: style.className\n      })) {\n        // And convert this style to model attribute.\n        conversionApi.writer.setAttribute('imageStyle', style.name, modelImageElement);\n      }\n    }\n  };\n} // Returns the style with a given `name` from an array of styles.\n//\n// @param {String} name\n// @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat> } styles\n// @returns {module:image/imagestyle/imagestyleediting~ImageStyleFormat|undefined}\n\nfunction getStyleByName(name, styles) {\n  for (const style of styles) {\n    if (style.name === name) {\n      return style;\n    }\n  }\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm2.5 3V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06c-.585 0-1.06-.407-1.06-.91V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" clip-rule=\\\"evenodd\\\" stroke-linejoin=\\\"round\\\" stroke-miterlimit=\\\"1.414\\\"><path d=\\\"M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm4.5 3V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 4.5V3h16v1.5zm0 3V6h5.674v1.5zm0 3V9h5.674v1.5zm0 3V12h5.674v1.5zm8.5-6V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/utils\n */\n\n/* globals console */\nimport fullWidthIcon from '@ckeditor/ckeditor5-core/theme/icons/object-full-width.svg';\nimport leftIcon from '@ckeditor/ckeditor5-core/theme/icons/object-left.svg';\nimport centerIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\nimport rightIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\nimport { attachLinkToDocumentation } from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Default image styles provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * Among them, 2 default semantic content styles are available:\n *\n * * `full` is a full–width image without any CSS class,\n * * `side` is a side image styled with the `image-style-side` CSS class.\n *\n * There are also 3 styles focused on formatting:\n *\n * * `alignLeft` aligns the image to the left using the `image-style-align-left` class,\n * * `alignCenter` centers the image using the `image-style-align-center` class,\n * * `alignRight` aligns the image to the right using the `image-style-align-right` class,\n *\n * @member {Object.<String,Object>}\n */\n\nconst defaultStyles = {\n  // This option is equal to the situation when no style is applied.\n  full: {\n    name: 'full',\n    title: 'Full size image',\n    icon: fullWidthIcon,\n    isDefault: true\n  },\n  // This represents a side image.\n  side: {\n    name: 'side',\n    title: 'Side image',\n    icon: rightIcon,\n    className: 'image-style-side'\n  },\n  // This style represents an image aligned to the left.\n  alignLeft: {\n    name: 'alignLeft',\n    title: 'Left aligned image',\n    icon: leftIcon,\n    className: 'image-style-align-left'\n  },\n  // This style represents a centered image.\n  alignCenter: {\n    name: 'alignCenter',\n    title: 'Centered image',\n    icon: centerIcon,\n    className: 'image-style-align-center'\n  },\n  // This style represents an image aligned to the right.\n  alignRight: {\n    name: 'alignRight',\n    title: 'Right aligned image',\n    icon: rightIcon,\n    className: 'image-style-align-right'\n  }\n};\n/**\n * Default image style icons provided by the plugin that can be referred in the\n * {@link module:image/image~ImageConfig#styles} configuration.\n *\n * There are 4 icons available: `'full'`, `'left'`, `'center'` and `'right'`.\n *\n * @member {Object.<String, String>}\n */\n\nconst defaultIcons = {\n  full: fullWidthIcon,\n  left: leftIcon,\n  right: rightIcon,\n  center: centerIcon\n};\n/**\n * Returns a {@link module:image/image~ImageConfig#styles} array with items normalized in the\n * {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat} format and a complete `icon` markup for each style.\n *\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\n\nexport function normalizeImageStyles(configuredStyles = []) {\n  return configuredStyles.map(_normalizeStyle);\n} // Normalizes an image style provided in the {@link module:image/image~ImageConfig#styles}\n// and returns it in a {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}.\n//\n// @param {Object} style\n// @returns {@link module:image/imagestyle/imagestyleediting~ImageStyleFormat}\n\nfunction _normalizeStyle(style) {\n  // Just the name of the style has been passed.\n  if (typeof style == 'string') {\n    const styleName = style; // If it's one of the defaults, just use it.\n\n    if (defaultStyles[styleName]) {\n      // Clone the style to avoid overriding defaults.\n      style = Object.assign({}, defaultStyles[styleName]);\n    } // If it's just a name but none of the defaults, warn because probably it's a mistake.\n    else {\n        console.warn(attachLinkToDocumentation('image-style-not-found: There is no such image style of given name.'), {\n          name: styleName\n        }); // Normalize the style anyway to prevent errors.\n\n        style = {\n          name: styleName\n        };\n      }\n  } // If an object style has been passed and if the name matches one of the defaults,\n  // extend it with defaults – the user wants to customize a default style.\n  // Note: Don't override the user–defined style object, clone it instead.\n  else if (defaultStyles[style.name]) {\n      const defaultStyle = defaultStyles[style.name];\n      const extendedStyle = Object.assign({}, style);\n\n      for (const prop in defaultStyle) {\n        if (!style.hasOwnProperty(prop)) {\n          extendedStyle[prop] = defaultStyle[prop];\n        }\n      }\n\n      style = extendedStyle;\n    } // If an icon is defined as a string and correspond with a name\n  // in default icons, use the default icon provided by the plugin.\n\n\n  if (typeof style.icon == 'string' && defaultIcons[style.icon]) {\n    style.icon = defaultIcons[style.icon];\n  }\n\n  return style;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle/imagestyleediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleCommand from './imagestylecommand';\nimport { viewToModelStyleAttribute, modelToViewStyleAttribute } from './converters';\nimport { normalizeImageStyles } from './utils';\n/**\n * The image style engine plugin. It sets the default configuration, creates converters and registers\n * {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand ImageStyleCommand}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageStyleEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ImageStyleEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const schema = editor.model.schema;\n    const data = editor.data;\n    const editing = editor.editing; // Define default configuration.\n\n    editor.config.define('image.styles', ['full', 'side']); // Get configuration.\n\n    const styles = normalizeImageStyles(editor.config.get('image.styles')); // Allow imageStyle attribute in image.\n    // We could call it 'style' but https://github.com/ckeditor/ckeditor5-engine/issues/559.\n\n    schema.extend('image', {\n      allowAttributes: 'imageStyle'\n    }); // Converters for imageStyle attribute from model to view.\n\n    const modelToViewConverter = modelToViewStyleAttribute(styles);\n    editing.downcastDispatcher.on('attribute:imageStyle:image', modelToViewConverter);\n    data.downcastDispatcher.on('attribute:imageStyle:image', modelToViewConverter); // Converter for figure element from view to model.\n\n    data.upcastDispatcher.on('element:figure', viewToModelStyleAttribute(styles), {\n      priority: 'low'\n    }); // Register imageStyle command.\n\n    editor.commands.add('imageStyle', new ImageStyleCommand(editor, styles));\n  }\n\n}\n/**\n * The image style format descriptor.\n *\n *\t\timport fullSizeIcon from 'path/to/icon.svg';\n *\n *\t\tconst imageStyleFormat = {\n *\t\t\tname: 'fullSize',\n *\t\t\ticon: fullSizeIcon,\n *\t\t\ttitle: 'Full size image',\n *\t\t\tclassName: 'image-full-size'\n *\t\t}\n *\n * @typedef {Object} module:image/imagestyle/imagestyleediting~ImageStyleFormat\n *\n * @property {String} name The unique name of the style. It will be used to:\n *\n * * Store the chosen style in the model by setting the `imageStyle` attribute of the `<image>` element.\n * * As a value of the {@link module:image/imagestyle/imagestylecommand~ImageStyleCommand#execute `imageStyle` command},\n * * when registering a button for each of the styles (`'imageStyle:{name}'`) in the\n * {@link module:ui/componentfactory~ComponentFactory UI components factory} (this functionality is provided by the\n * {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugin).\n *\n * @property {Boolean} [isDefault] When set, the style will be used as the default one.\n * A default style does not apply any CSS class to the view element.\n *\n * @property {String} icon One of the following to be used when creating the style's button:\n *\n * * An SVG icon source (as an XML string).\n * * One of {@link module:image/imagestyle/utils~defaultIcons} to use a default icon provided by the plugin.\n *\n * @property {String} title The style's title.\n *\n * @property {String} className The CSS class used to represent the style in the view.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagestyle/imagestyleui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport { normalizeImageStyles } from './utils';\nimport '../../theme/imagestyle.css';\n/**\n * The image style UI plugin.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageStyleUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'ImageStyleUI';\n    }\n    /**\n   * Returns the default localized style titles provided by the plugin.\n   *\n   * The following localized titles corresponding with\n   * {@link module:image/imagestyle/utils~defaultStyles} are available:\n   *\n   * * `'Full size image'`,\n   * * `'Side image'`,\n   * * `'Left aligned image'`,\n   * * `'Centered image'`,\n   * * `'Right aligned image'`\n   *\n   * @returns {Object.<String,String>}\n   */\n    get localizedDefaultStylesTitles() {\n        const t = this.editor.t;\n        return {\n            'Full size image': t('u'),\n            'Side image': t('v'),\n            'Left aligned image': t('w'),\n            'Centered image': t('x'),\n            'Right aligned image': t('y')\n        };\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const configuredStyles = editor.config.get('image.styles');\n        const translatedStyles = translateStyles(normalizeImageStyles(configuredStyles), this.localizedDefaultStylesTitles);\n        for (const style of translatedStyles) {\n            this._createButton(style);\n        }\n    }\n    /**\n   * Creates a button for each style and stores it in the editor {@link module:ui/componentfactory~ComponentFactory ComponentFactory}.\n   *\n   * @private\n   * @param {module:image/imagestyle/imagestyleediting~ImageStyleFormat} style\n   */\n    _createButton(style) {\n        const editor = this.editor;\n        const componentName = `imageStyle:${ style.name }`;\n        editor.ui.componentFactory.add(componentName, locale => {\n            const command = editor.commands.get('imageStyle');\n            const view = new ButtonView(locale);\n            view.set({\n                label: style.title,\n                icon: style.icon,\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isEnabled').to(command, 'isEnabled');\n            view.bind('isOn').to(command, 'value', value => value === style.name);\n            this.listenTo(view, 'execute', () => editor.execute('imageStyle', { value: style.name }));\n            return view;\n        });\n    }\n}\n/**\n * Returns the translated `title` from the passed styles array.\n *\n * @param {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} styles\n * @param titles\n * @returns {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>}\n */\nfunction translateStyles(styles, titles) {\n    for (const style of styles) {\n        // Localize the titles of the styles, if a title corresponds with\n        // a localized default provided by the plugin.\n        if (titles[style.title]) {\n            style.title = titles[style.title];\n        }\n    }\n    return styles;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module widget/widgettoolbarrepository\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport ToolbarView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarview';\nimport BalloonPanelView from '@ckeditor/ckeditor5-ui/src/panel/balloon/balloonpanelview';\nimport { isWidget } from './utils';\nimport CKEditorError from '@ckeditor/ckeditor5-utils/src/ckeditorerror';\n/**\n * Widget toolbar repository plugin. A central point for registering widget toolbars. This plugin handles the whole\n * toolbar rendering process and exposes a concise API.\n *\n * To add a toolbar for your widget use the {@link ~WidgetToolbarRepository#register `WidgetToolbarRepository#register()`} method.\n *\n * The following example comes from the {@link module:image/imagetoolbar~ImageToolbar} plugin:\n *\n * \t\tclass ImageToolbar extends Plugin {\n *\t\t\tstatic get requires() {\n *\t\t\t\treturn [ WidgetToolbarRepository ];\n *\t\t\t}\n *\n *\t\t\tafterInit() {\n *\t\t\t\tconst editor = this.editor;\n *\t\t\t\tconst widgetToolbarRepository = editor.plugins.get( WidgetToolbarRepository );\n *\n *\t\t\t\twidgetToolbarRepository.register( 'image', {\n *\t\t\t\t\titems: editor.config.get( 'image.toolbar' ),\n *\t\t\t\t\tgetRelatedElement: getSelectedImageWidget\n *\t\t\t\t} );\n *\t\t\t}\n *\t\t}\n */\nexport default class WidgetToolbarRepository extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'WidgetToolbarRepository';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        // Disables the default balloon toolbar for all widgets.\n        if (editor.plugins.has('BalloonToolbar')) {\n            const balloonToolbar = editor.plugins.get('BalloonToolbar');\n            this.listenTo(balloonToolbar, 'show', evt => {\n                if (isWidgetSelected(editor.editing.view.document.selection)) {\n                    evt.stop();\n                }\n            }, { priority: 'high' });\n        }\n        /**\n     * A map of toolbar definitions.\n     *\n     * @protected\n     * @member {Map.<String,module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition>} #_toolbarDefinitions\n     */\n        this._toolbarDefinitions = new Map();\n        /**\n     * @private\n     */\n        this._balloon = this.editor.plugins.get('ContextualBalloon');\n        this.listenTo(editor.ui, 'update', () => {\n            this._updateToolbarsVisibility();\n        });\n        // UI#update is not fired after focus is back in editor, we need to check if balloon panel should be visible.\n        this.listenTo(editor.ui.focusTracker, 'change:isFocused', () => {\n            this._updateToolbarsVisibility();\n        }, { priority: 'low' });\n    }\n    destroy() {\n        super.destroy();\n        for (const toolbarConfig of this._toolbarDefinitions.values()) {\n            toolbarConfig.view.destroy();\n        }\n    }\n    /**\n   * Registers toolbar in the WidgetToolbarRepository. It renders it in the `ContextualBalloon` based on the value of the invoked\n   * `getRelatedElement` function. Toolbar items are gathered from `items` array.\n   * The balloon's CSS class is by default `ck-toolbar-container` and may be override with the `balloonClassName` option.\n   *\n   * Note: This method should be called in the {@link module:core/plugin~PluginInterface#afterInit `Plugin#afterInit()`}\n   * callback (or later) to make sure that the given toolbar items were already registered by other plugins.\n   *\n   * @param {String} toolbarId An id for the toolbar. Used to\n   * @param {Object} options\n   * @param {String} [options.ariaLabel] Label used by assistive technologies to describe this toolbar element.\n   * @param {Array.<String>} options.items Array of toolbar items.\n   * @param {Function} options.getRelatedElement Callback which returns an element the toolbar should be attached to.\n   * @param {String} [options.balloonClassName='ck-toolbar-container'] CSS class for the widget balloon.\n   */\n    register(toolbarId, {ariaLabel, items, getRelatedElement, balloonClassName = 'ck-toolbar-container'}) {\n        const editor = this.editor;\n        const t = editor.t;\n        const toolbarView = new ToolbarView(editor.locale);\n        toolbarView.ariaLabel = ariaLabel || t('ay');\n        if (this._toolbarDefinitions.has(toolbarId)) {\n            /**\n       * Toolbar with the given id was already added.\n       *\n       * @error widget-toolbar-duplicated\n       * @param toolbarId Toolbar id.\n       */\n            throw new CKEditorError('widget-toolbar-duplicated: Toolbar with the given id was already added.', this, { toolbarId });\n        }\n        toolbarView.fillFromConfig(items, editor.ui.componentFactory);\n        this._toolbarDefinitions.set(toolbarId, {\n            view: toolbarView,\n            getRelatedElement,\n            balloonClassName\n        });\n    }\n    /**\n   * Iterates over stored toolbars and makes them visible or hidden.\n   *\n   * @private\n   */\n    _updateToolbarsVisibility() {\n        let maxRelatedElementDepth = 0;\n        let deepestRelatedElement = null;\n        let deepestToolbarDefinition = null;\n        for (const definition of this._toolbarDefinitions.values()) {\n            const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n            if (!this.editor.ui.focusTracker.isFocused) {\n                if (this._isToolbarVisible(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else if (!relatedElement) {\n                if (this._isToolbarInBalloon(definition)) {\n                    this._hideToolbar(definition);\n                }\n            } else {\n                const relatedElementDepth = relatedElement.getAncestors().length;\n                // Many toolbars can express willingness to be displayed but they do not know about\n                // each other. Figure out which toolbar is deepest in the view tree to decide which\n                // should be displayed. For instance, if a selected image is inside a table cell, display\n                // the ImageToolbar rather than the TableToolbar (#60).\n                if (relatedElementDepth > maxRelatedElementDepth) {\n                    maxRelatedElementDepth = relatedElementDepth;\n                    deepestRelatedElement = relatedElement;\n                    deepestToolbarDefinition = definition;\n                }\n            }\n        }\n        if (deepestToolbarDefinition) {\n            this._showToolbar(deepestToolbarDefinition, deepestRelatedElement);\n        }\n    }\n    /**\n   * Hides the given toolbar.\n   *\n   * @private\n   * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n   */\n    _hideToolbar(toolbarDefinition) {\n        this._balloon.remove(toolbarDefinition.view);\n        this.stopListening(this._balloon, 'change:visibleView');\n    }\n    /**\n   * Shows up the toolbar if the toolbar is not visible.\n   * Otherwise, repositions the toolbar's balloon when toolbar's view is the most top view in balloon stack.\n   *\n   * It might happen here that the toolbar's view is under another view. Then do nothing as the other toolbar view\n   * should be still visible after the {@link module:core/editor/editorui~EditorUI#event:update}.\n   *\n   * @private\n   * @param {module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition} toolbarDefinition\n   * @param {module:engine/view/element~Element} relatedElement\n   */\n    _showToolbar(toolbarDefinition, relatedElement) {\n        if (this._isToolbarVisible(toolbarDefinition)) {\n            repositionContextualBalloon(this.editor, relatedElement);\n        } else if (!this._isToolbarInBalloon(toolbarDefinition)) {\n            this._balloon.add({\n                view: toolbarDefinition.view,\n                position: getBalloonPositionData(this.editor, relatedElement),\n                balloonClassName: toolbarDefinition.balloonClassName\n            });\n            // Update toolbar position each time stack with toolbar view is switched to visible.\n            // This is in a case target element has changed when toolbar was in invisible stack\n            // e.g. target image was wrapped by a block quote.\n            // See https://github.com/ckeditor/ckeditor5-widget/issues/92.\n            this.listenTo(this._balloon, 'change:visibleView', () => {\n                for (const definition of this._toolbarDefinitions.values()) {\n                    if (this._isToolbarVisible(definition)) {\n                        const relatedElement = definition.getRelatedElement(this.editor.editing.view.document.selection);\n                        repositionContextualBalloon(this.editor, relatedElement);\n                    }\n                }\n            });\n        }\n    }\n    /**\n   * @private\n   * @param {Object} toolbar\n   * @returns {Boolean}\n   */\n    _isToolbarVisible(toolbar) {\n        return this._balloon.visibleView === toolbar.view;\n    }\n    /**\n   * @private\n   * @param {Object} toolbar\n   * @returns {Boolean}\n   */\n    _isToolbarInBalloon(toolbar) {\n        return this._balloon.hasView(toolbar.view);\n    }\n}\nfunction repositionContextualBalloon(editor, relatedElement) {\n    const balloon = editor.plugins.get('ContextualBalloon');\n    const position = getBalloonPositionData(editor, relatedElement);\n    balloon.updatePosition(position);\n}\nfunction getBalloonPositionData(editor, relatedElement) {\n    const editingView = editor.editing.view;\n    const defaultPositions = BalloonPanelView.defaultPositions;\n    return {\n        target: editingView.domConverter.mapViewToDom(relatedElement),\n        positions: [\n            defaultPositions.northArrowSouth,\n            defaultPositions.northArrowSouthWest,\n            defaultPositions.northArrowSouthEast,\n            defaultPositions.southArrowNorth,\n            defaultPositions.southArrowNorthWest,\n            defaultPositions.southArrowNorthEast\n        ]\n    };\n}\nfunction isWidgetSelected(selection) {\n    const viewElement = selection.getSelectedElement();\n    return !!(viewElement && isWidget(viewElement));\n}    /**\n * The toolbar definition object used by the toolbar repository to manage toolbars.\n * It contains information necessary to display the toolbar in the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon} and\n * update it during its life (display) cycle.\n *\n * @typedef {Object} module:widget/widgettoolbarrepository~WidgetRepositoryToolbarDefinition\n *\n * @property {module:ui/view~View} view The UI view of the toolbar.\n * @property {Function} getRelatedElement A function that returns an engine {@link module:engine/view/view~View}\n * element the toolbar is to be attached to. For instance, an image widget or a table widget (or `null` when\n * there is no such element). The function accepts an instance of {@link module:engine/view/selection~Selection}.\n * @property {String} balloonClassName CSS class for the widget balloon when a toolbar is displayed.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizerstate\n */\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\n/**\n * Stores the internal state of a single resizable object.\n *\n */\n\nexport default class ResizeState {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  constructor(options) {\n    /**\n     * The original width (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidth\n     */\n\n    /**\n     * The original height (pixels) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalHeight\n     */\n\n    /**\n     * The original width (percents) of the resized object when the resize process was started.\n     *\n     * @readonly\n     * @member {Number} #originalWidthPercents\n     */\n\n    /**\n     * The position of the handle that initiated the resizing. E.g. `\"top-left\"`, `\"bottom-right\"` etc. or `null`\n     * if unknown.\n     *\n     * @readonly\n     * @observable\n     * @member {String|null} #activeHandlePosition\n     */\n    this.set('activeHandlePosition', null);\n    /**\n     * The width (percents) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPercents\n     */\n\n    this.set('proposedWidthPercents', null);\n    /**\n     * The width (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedWidthPixels\n     */\n\n    this.set('proposedWidth', null);\n    /**\n     * The height (pixels) proposed, but not committed yet, in the current resize process.\n     *\n     * @readonly\n     * @observable\n     * @member {Number|null} #proposedHeightPixels\n     */\n\n    this.set('proposedHeight', null);\n    this.set('proposedHandleHostWidth', null);\n    this.set('proposedHandleHostHeight', null);\n    /**\n     * A width to height ratio of the resized image.\n     *\n     * @readonly\n     * @member {Number} #aspectRatio\n     */\n\n    /**\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n\n    this._options = options;\n    /**\n     * The reference point of the resizer where the dragging started. It is used to measure the distance the user cursor\n     * traveled, so how much the image should be enlarged.\n     * This information is only known after the DOM was rendered, so it will be updated later.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this._referenceCoordinates = null;\n  }\n  /**\n   *\n   * @param {HTMLElement} domResizeHandle The handle used to calculate the reference point.\n   * @param {HTMLElement} domHandleHost\n   * @param {HTMLElement} domResizeHost\n   */\n\n\n  begin(domResizeHandle, domHandleHost, domResizeHost) {\n    const clientRect = new Rect(domHandleHost);\n    this.activeHandlePosition = getHandlePosition(domResizeHandle);\n    this._referenceCoordinates = getAbsoluteBoundaryPoint(domHandleHost, getOppositePosition(this.activeHandlePosition));\n    this.originalWidth = clientRect.width;\n    this.originalHeight = clientRect.height;\n    this.aspectRatio = clientRect.width / clientRect.height;\n    const widthStyle = domResizeHost.style.width;\n\n    if (widthStyle && widthStyle.match(/^\\d+\\.?\\d*%$/)) {\n      this.originalWidthPercents = parseFloat(widthStyle);\n    } else {\n      this.originalWidthPercents = calculateHostPercentageWidth(domResizeHost, clientRect);\n    }\n  }\n\n  update(newSize) {\n    this.proposedWidth = newSize.width;\n    this.proposedHeight = newSize.height;\n    this.proposedWidthPercents = newSize.widthPercents;\n    this.proposedHandleHostWidth = newSize.handleHostWidth;\n    this.proposedHandleHostHeight = newSize.handleHostHeight;\n  }\n\n}\nmix(ResizeState, ObservableMixin); // Calculates a relative width of a `domResizeHost` compared to it's parent in percents.\n//\n// @private\n// @param {HTMLElement} domResizeHost\n// @param {module:utils/dom/rect~Rect} resizeHostRect\n// @returns {Number}\n\nfunction calculateHostPercentageWidth(domResizeHost, resizeHostRect) {\n  const domResizeHostParent = domResizeHost.parentElement; // Need to use computed style as it properly excludes parent's paddings from the returned value.\n\n  const parentWidth = parseFloat(domResizeHostParent.ownerDocument.defaultView.getComputedStyle(domResizeHostParent).width);\n  return resizeHostRect.width / parentWidth * 100;\n} // Returns coordinates of the top-left corner of an element, relative to the document's top-left corner.\n//\n// @private\n// @param {HTMLElement} element\n// @param {String} resizerPosition The position of the resize handle, e.g. `\"top-left\"`, `\"bottom-right\"`.\n// @returns {Object} return\n// @returns {Number} return.x\n// @returns {Number} return.y\n\n\nfunction getAbsoluteBoundaryPoint(element, resizerPosition) {\n  const elementRect = new Rect(element);\n  const positionParts = resizerPosition.split('-');\n  const ret = {\n    x: positionParts[1] == 'right' ? elementRect.right : elementRect.left,\n    y: positionParts[0] == 'bottom' ? elementRect.bottom : elementRect.top\n  };\n  ret.x += element.ownerDocument.defaultView.scrollX;\n  ret.y += element.ownerDocument.defaultView.scrollY;\n  return ret;\n} // @private\n// @param {String} resizerPosition The expected resizer position, like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element.\n\n\nfunction getResizerHandleClass(resizerPosition) {\n  return `ck-widget__resizer__handle-${resizerPosition}`;\n} // Determines the position of a given resize handle.\n//\n// @private\n// @param {HTMLElement} domHandle Handle used to calculate the reference point.\n// @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\n\n\nfunction getHandlePosition(domHandle) {\n  const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n\n  for (const position of resizerPositions) {\n    if (domHandle.classList.contains(getResizerHandleClass(position))) {\n      return position;\n    }\n  }\n} // @private\n// @param {String} position Like `\"top-left\"`.\n// @returns {String} Inverted `position`, e.g. it returns `\"bottom-right\"` if `\"top-left\"` was given as `position`.\n\n\nfunction getOppositePosition(position) {\n  const parts = position.split('-');\n  const replacements = {\n    top: 'bottom',\n    bottom: 'top',\n    left: 'right',\n    right: 'left'\n  };\n  return `${replacements[parts[0]]}-${replacements[parts[1]]}`;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize/resizer\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport Template from '@ckeditor/ckeditor5-ui/src/template';\nimport Rect from '@ckeditor/ckeditor5-utils/src/dom/rect';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport ResizeState from './resizerstate';\n/**\n * Represents a resizer for a single resizable object.\n *\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class Resizer {\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} options Resizer options.\n   */\n  constructor(options) {\n    /**\n     * Stores the state of the resizable host geometry, such as the original width, the currently proposed height, etc.\n     *\n     * Note that a new state is created for each resize transaction.\n     *\n     * @readonly\n     * @member {module:widget/widgetresize/resizerstate~ResizerState} #state\n     */\n\n    /**\n     * A view displaying the proposed new element size during the resizing.\n     *\n     * @protected\n     * @readonly\n     * @member {module:widget/widgetresize/resizer~SizeView} #_sizeUI\n     */\n\n    /**\n     * Options passed to the {@link #constructor}.\n     *\n     * @private\n     * @type {module:widget/widgetresize~ResizerOptions}\n     */\n    this._options = options;\n    /**\n     * Container of the entire resize UI.\n     *\n     * Note that this property is initialized only after the element bound with the resizer is drawn\n     * so it will be a `null` when uninitialized.\n     *\n     * @private\n     * @type {HTMLElement|null}\n     */\n\n    this._domResizerWrapper = null;\n    /**\n     * @observable\n     */\n\n    this.set('isEnabled', true);\n    this.decorate('begin');\n    this.decorate('cancel');\n    this.decorate('commit');\n    this.decorate('updateSize');\n  }\n  /**\n   * Attaches the resizer to the DOM.\n   */\n\n\n  attach() {\n    const that = this;\n    const widgetElement = this._options.viewElement;\n    const writer = this._options.downcastWriter;\n    const viewResizerWrapper = writer.createUIElement('div', {\n      class: 'ck ck-reset_all ck-widget__resizer'\n    }, function (domDocument) {\n      const domElement = this.toDomElement(domDocument);\n\n      that._appendHandles(domElement);\n\n      that._appendSizeUI(domElement);\n\n      that._domResizerWrapper = domElement;\n      that.on('change:isEnabled', (evt, propName, newValue) => {\n        domElement.style.display = newValue ? '' : 'none';\n      });\n      domElement.style.display = that.isEnabled ? '' : 'none';\n      return domElement;\n    }); // Append the resizer wrapper to the widget's wrapper.\n\n    writer.insert(writer.createPositionAt(widgetElement, 'end'), viewResizerWrapper);\n    writer.addClass('ck-widget_with-resizer', widgetElement);\n  }\n  /**\n   * Starts the resizing process.\n   *\n   * Creates a new {@link #state} for the current process.\n   *\n   * @fires begin\n   * @param {HTMLElement} domResizeHandle Clicked handle.\n   */\n\n\n  begin(domResizeHandle) {\n    this.state = new ResizeState(this._options);\n\n    this._sizeUI.bindToState(this._options, this.state);\n\n    this.state.begin(domResizeHandle, this._getHandleHost(), this._getResizeHost());\n  }\n  /**\n   * Updates the proposed size based on `domEventData`.\n   *\n   * @fires updateSize\n   * @param {Event} domEventData\n   */\n\n\n  updateSize(domEventData) {\n    const domHandleHost = this._getHandleHost();\n\n    const domResizeHost = this._getResizeHost();\n\n    const unit = this._options.unit;\n\n    const newSize = this._proposeNewSize(domEventData);\n\n    domResizeHost.style.width = (unit === '%' ? newSize.widthPercents : newSize.width) + this._options.unit;\n    const domHandleHostRect = new Rect(domHandleHost);\n    newSize.handleHostWidth = Math.round(domHandleHostRect.width);\n    newSize.handleHostHeight = Math.round(domHandleHostRect.height); // Handle max-width limitation.\n\n    const domResizeHostRect = new Rect(domHandleHost);\n    newSize.width = Math.round(domResizeHostRect.width);\n    newSize.height = Math.round(domResizeHostRect.height);\n    this.redraw(domHandleHostRect);\n    this.state.update(newSize);\n  }\n  /**\n   * Applies the geometry proposed with the resizer.\n   *\n   * @fires commit\n   */\n\n\n  commit() {\n    const unit = this._options.unit;\n    const newValue = (unit === '%' ? this.state.proposedWidthPercents : this.state.proposedWidth) + this._options.unit;\n\n    this._options.onCommit(newValue);\n\n    this._cleanup();\n  }\n  /**\n   * Cancels and rejects the proposed resize dimensions, hiding the UI.\n   *\n   * @fires cancel\n   */\n\n\n  cancel() {\n    this._cleanup();\n  }\n  /**\n   * Destroys the resizer.\n   */\n\n\n  destroy() {\n    this.cancel();\n  }\n  /**\n   * Redraws the resizer.\n   *\n   * @param {module:utils/dom/rect~Rect} [handleHostRect] Handle host rectangle might be given to improve performance.\n   */\n\n\n  redraw(handleHostRect) {\n    // TODO review this\n    const domWrapper = this._domResizerWrapper;\n\n    if (existsInDom(domWrapper)) {\n      // Refresh only if resizer exists in the DOM.\n      const widgetWrapper = domWrapper.parentElement;\n\n      const handleHost = this._getHandleHost();\n\n      const clientRect = handleHostRect || new Rect(handleHost);\n      domWrapper.style.width = clientRect.width + 'px';\n      domWrapper.style.height = clientRect.height + 'px';\n      const offsets = {\n        left: handleHost.offsetLeft,\n        top: handleHost.offsetTop,\n        height: handleHost.offsetHeight,\n        width: handleHost.offsetWidth\n      }; // In case a resizing host is not a widget wrapper, we need to compensate\n      // for any additional offsets the resize host might have. E.g. wrapper padding\n      // or simply another editable. By doing that the border and resizers are shown\n      // only around the resize host.\n\n      if (!widgetWrapper.isSameNode(handleHost)) {\n        domWrapper.style.left = offsets.left + 'px';\n        domWrapper.style.top = offsets.top + 'px';\n        domWrapper.style.height = offsets.height + 'px';\n        domWrapper.style.width = offsets.width + 'px';\n      }\n    }\n\n    function existsInDom(element) {\n      return element && element.ownerDocument && element.ownerDocument.contains(element);\n    }\n  }\n\n  containsHandle(domElement) {\n    return this._domResizerWrapper.contains(domElement);\n  }\n\n  static isResizeHandle(domElement) {\n    return domElement.classList.contains('ck-widget__resizer__handle');\n  }\n  /**\n   * Cleans up the context state.\n   *\n   * @protected\n   */\n\n\n  _cleanup() {\n    this._sizeUI.dismiss();\n\n    this._sizeUI.isVisible = false;\n  }\n  /**\n   * Calculates the proposed size as the resize handles are dragged.\n   *\n   * @private\n   * @param {Event} domEventData Event data that caused the size update request. It should be used to calculate the proposed size.\n   * @returns {Object} return\n   * @returns {Number} return.width Proposed width.\n   * @returns {Number} return.height Proposed height.\n   */\n\n\n  _proposeNewSize(domEventData) {\n    const state = this.state;\n    const currentCoordinates = extractCoordinates(domEventData);\n    const isCentered = this._options.isCentered ? this._options.isCentered(this) : true; // Enlargement defines how much the resize host has changed in a given axis. Naturally it could be a negative number\n    // meaning that it has been shrunk.\n    //\n    // +----------------+--+\n    // |                |  |\n    // |       img      |  |\n    // |  /handle host  |  |\n    // +----------------+  | ^\n    // |                   | | - enlarge y\n    // +-------------------+ v\n    // \t\t\t\t\t<-->\n    // \t\t\t\t\t enlarge x\n\n    const enlargement = {\n      x: state._referenceCoordinates.x - (currentCoordinates.x + state.originalWidth),\n      y: currentCoordinates.y - state.originalHeight - state._referenceCoordinates.y\n    };\n\n    if (isCentered && state.activeHandlePosition.endsWith('-right')) {\n      enlargement.x = currentCoordinates.x - (state._referenceCoordinates.x + state.originalWidth);\n    } // Objects needs to be resized twice as much in horizontal axis if centered, since enlargement is counted from\n    // one resized corner to your cursor. It needs to be duplicated to compensate for the other side too.\n\n\n    if (isCentered) {\n      enlargement.x *= 2;\n    } // const resizeHost = this._getResizeHost();\n    // The size proposed by the user. It does not consider the aspect ratio.\n\n\n    const proposedSize = {\n      width: Math.abs(state.originalWidth + enlargement.x),\n      height: Math.abs(state.originalHeight + enlargement.y)\n    }; // Dominant determination must take the ratio into account.\n\n    proposedSize.dominant = proposedSize.width / state.aspectRatio > proposedSize.height ? 'width' : 'height';\n    proposedSize.max = proposedSize[proposedSize.dominant]; // Proposed size, respecting the aspect ratio.\n\n    const targetSize = {\n      width: proposedSize.width,\n      height: proposedSize.height\n    };\n\n    if (proposedSize.dominant == 'width') {\n      targetSize.height = targetSize.width / state.aspectRatio;\n    } else {\n      targetSize.width = targetSize.height * state.aspectRatio;\n    }\n\n    return {\n      width: Math.round(targetSize.width),\n      height: Math.round(targetSize.height),\n      widthPercents: Math.min(Math.round(state.originalWidthPercents / state.originalWidth * targetSize.width * 100) / 100, 100)\n    };\n  }\n  /**\n   * Obtains the resize host.\n   *\n   * Resize host is an object that receives dimensions which are the result of resizing.\n   *\n   * @protected\n   * @returns {HTMLElement}\n   */\n\n\n  _getResizeHost() {\n    const widgetWrapper = this._domResizerWrapper.parentElement;\n    return this._options.getResizeHost(widgetWrapper);\n  }\n  /**\n   * Obtains the handle host.\n   *\n   * Handle host is an object that the handles are aligned to.\n   *\n   * Handle host will not always be an entire widget itself. Take an image as an example. The image widget\n   * contains an image and a caption. Only the image should be surrounded with handles.\n   *\n   * @protected\n   * @returns {HTMLElement}\n   */\n\n\n  _getHandleHost() {\n    const widgetWrapper = this._domResizerWrapper.parentElement;\n    return this._options.getHandleHost(widgetWrapper);\n  }\n  /**\n   * Renders the resize handles in the DOM.\n   *\n   * @private\n   * @param {HTMLElement} domElement The resizer wrapper.\n   */\n\n\n  _appendHandles(domElement) {\n    const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n\n    for (const currentPosition of resizerPositions) {\n      domElement.appendChild(new Template({\n        tag: 'div',\n        attributes: {\n          class: `ck-widget__resizer__handle ${getResizerClass(currentPosition)}`\n        }\n      }).render());\n    }\n  }\n  /**\n   * Sets up the {@link #_sizeUI} property and adds it to the passed `domElement`.\n   *\n   * @private\n   * @param {HTMLElement} domElement\n   */\n\n\n  _appendSizeUI(domElement) {\n    const sizeUI = new SizeView(); // Make sure icon#element is rendered before passing to appendChild().\n\n    sizeUI.render();\n    this._sizeUI = sizeUI;\n    domElement.appendChild(sizeUI.element);\n  }\n  /**\n   * Determines the position of a given resize handle.\n   *\n   * @private\n   * @param {HTMLElement} domHandle Handle used to calculate the reference point.\n   * @returns {String|undefined} Returns a string like `\"top-left\"` or `undefined` if not matched.\n   */\n\n\n  _getHandlePosition(domHandle) {\n    const resizerPositions = ['top-left', 'top-right', 'bottom-right', 'bottom-left'];\n\n    for (const position of resizerPositions) {\n      if (domHandle.classList.contains(getResizerClass(position))) {\n        return position;\n      }\n    }\n  }\n  /**\n   * @event begin\n   */\n\n  /**\n   * @event updateSize\n   */\n\n  /**\n   * @event commit\n   */\n\n  /**\n   * @event cancel\n   */\n\n\n}\nmix(Resizer, ObservableMixin);\n/**\n * A view displaying the proposed new element size during the resizing.\n *\n * @extends {module:ui/view~View}\n */\n\nclass SizeView extends View {\n  constructor() {\n    super();\n    const bind = this.bindTemplate;\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-size-view', bind.to('activeHandlePosition', value => value ? `ck-orientation-${value}` : '')],\n        style: {\n          display: bind.if('isVisible', 'none', visible => !visible)\n        }\n      },\n      children: [{\n        text: bind.to('label')\n      }]\n    });\n  }\n\n  bindToState(options, resizerState) {\n    this.bind('isVisible').to(resizerState, 'proposedWidth', resizerState, 'proposedHeight', (width, height) => width !== null && height !== null);\n    this.bind('label').to(resizerState, 'proposedHandleHostWidth', resizerState, 'proposedHandleHostHeight', resizerState, 'proposedWidthPercents', (width, height, widthPercents) => {\n      if (options.unit === 'px') {\n        return `${width}×${height}`;\n      } else {\n        return `${widthPercents}%`;\n      }\n    });\n    this.bind('activeHandlePosition').to(resizerState);\n  }\n\n  dismiss() {\n    this.unbind();\n    this.isVisible = false;\n  }\n\n} // @private\n// @param {String} resizerPosition Expected resizer position like `\"top-left\"`, `\"bottom-right\"`.\n// @returns {String} A prefixed HTML class name for the resizer element\n\n\nfunction getResizerClass(resizerPosition) {\n  return `ck-widget__resizer__handle-${resizerPosition}`;\n}\n\nfunction extractCoordinates(event) {\n  return {\n    x: event.pageX,\n    y: event.pageY\n  };\n}","import debounce from './debounce.js';\nimport isObject from './isObject.js';\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\nexport default throttle;\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module widget/widgetresize\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Resizer from './widgetresize/resizer';\nimport DomEmitterMixin from '@ckeditor/ckeditor5-utils/src/dom/emittermixin';\nimport global from '@ckeditor/ckeditor5-utils/src/dom/global';\nimport ObservableMixin from '@ckeditor/ckeditor5-utils/src/observablemixin';\nimport mix from '@ckeditor/ckeditor5-utils/src/mix';\nimport { throttle } from 'lodash-es';\nimport '../theme/widgetresize.css';\n/**\n * The widget resize feature plugin.\n *\n * Use the {@link module:widget/widgetresize~WidgetResize#attachTo} method to create a resizer for the specified widget.\n *\n * @extends module:core/plugin~Plugin\n * @mixes module:utils/observablemixin~ObservableMixin\n */\n\nexport default class WidgetResize extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'WidgetResize';\n  }\n\n  init() {\n    /**\n     * The currently visible resizer.\n     *\n     * @protected\n     * @observable\n     * @member {module:widget/widgetresize/resizer~Resizer|null} #_visibleResizer\n     */\n    this.set('_visibleResizer', null);\n    /**\n     * References an active resizer.\n     *\n     * Active resizer means a resizer which handle is actively used by the end user.\n     *\n     * @protected\n     * @observable\n     * @member {module:widget/widgetresize/resizer~Resizer|null} #_activeResizer\n     */\n\n    this.set('_activeResizer', null);\n    /**\n     * A map of resizers created using this plugin instance.\n     *\n     * @private\n     * @type {Map.<module:engine/view/containerelement~ContainerElement, module:widget/widgetresize/resizer~Resizer>}\n     */\n\n    this._resizers = new Map();\n    const domDocument = global.window.document;\n    this.editor.model.schema.setAttributeProperties('width', {\n      isFormatting: true\n    });\n    this._observer = Object.create(DomEmitterMixin);\n\n    this._observer.listenTo(domDocument, 'mousedown', (event, domEventData) => {\n      if (!Resizer.isResizeHandle(domEventData.target)) {\n        return;\n      }\n\n      const resizeHandle = domEventData.target;\n      this._activeResizer = this._getResizerByHandle(resizeHandle);\n\n      if (this._activeResizer) {\n        this._activeResizer.begin(resizeHandle);\n      }\n    });\n\n    this._observer.listenTo(domDocument, 'mousemove', (event, domEventData) => {\n      if (this._activeResizer) {\n        this._activeResizer.updateSize(domEventData);\n      }\n    });\n\n    this._observer.listenTo(domDocument, 'mouseup', () => {\n      if (this._activeResizer) {\n        this._activeResizer.commit();\n\n        this._activeResizer = null;\n      }\n    });\n\n    const redrawFocusedResizer = () => {\n      if (this._visibleResizer) {\n        this._visibleResizer.redraw();\n      }\n    };\n\n    const redrawFocusedResizerThrottled = throttle(redrawFocusedResizer, 200); // 5fps\n    // Redraws occurring upon a change of visible resizer must not be throttled, as it is crucial for the initial\n    // render. Without it the resizer frame would be misaligned with resizing host for a fraction of second.\n\n    this.on('change:_visibleResizer', redrawFocusedResizer); // Redrawing on any change of the UI of the editor (including content changes).\n\n    this.editor.ui.on('update', redrawFocusedResizerThrottled); // Resizers need to be redrawn upon window resize, because new window might shrink resize host.\n\n    this._observer.listenTo(global.window, 'resize', redrawFocusedResizerThrottled);\n\n    const viewSelection = this.editor.editing.view.document.selection;\n    viewSelection.on('change', () => {\n      const selectedElement = viewSelection.getSelectedElement();\n      this._visibleResizer = this._getResizerByViewElement(selectedElement) || null;\n    });\n  }\n\n  destroy() {\n    this._observer.stopListening();\n  }\n  /**\n   * @param {module:widget/widgetresize~ResizerOptions} [options] Resizer options.\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n\n\n  attachTo(options) {\n    const resizer = new Resizer(options);\n    resizer.attach();\n\n    this._resizers.set(options.viewElement, resizer);\n\n    return resizer;\n  }\n  /**\n   * Returns a resizer that contains a given resize handle.\n   *\n   * @protected\n   * @param {HTMLElement} domResizeHandle\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n\n\n  _getResizerByHandle(domResizeHandle) {\n    for (const resizer of this._resizers.values()) {\n      if (resizer.containsHandle(domResizeHandle)) {\n        return resizer;\n      }\n    }\n  }\n  /**\n   * Returns a resizer created for a given view element (widget element).\n   *\n   * @protected\n   * @param {module:engine/view/containerelement~ContainerElement} viewElement\n   * @returns {module:widget/widgetresize/resizer~Resizer}\n   */\n\n\n  _getResizerByViewElement(viewElement) {\n    return this._resizers.get(viewElement);\n  }\n\n}\nmix(WidgetResize, ObservableMixin);\n/**\n * Interface describing a resizer. It allows to specify the resizing host, custom logic for calculating aspect ratio, etc.\n *\n * @interface ResizerOptions\n */\n\n/**\n * @member {module:engine/model/element~Element} module:widget/widgetresize~ResizerOptions#modelElement\n */\n\n/**\n * @member {module:engine/view/containerelement~ContainerElement} module:widget/widgetresize~ResizerOptions#viewElement\n */\n\n/**\n * @member {module:engine/view/downcastwriter~DowncastWriter} module:widget/widgetresize~ResizerOptions#downcastWriter\n */\n\n/**\n * A callback to be executed once the resizing process is done.\n *\n * It receives a `Number` (`newValue`) as a parameter.\n *\n * For example, {@link module:image/imageresize~ImageResize} uses it to execute the image resize command\n * which puts the new value into the model.\n *\n * ```js\n * {\n *\tmodelElement: data.item,\n *\tviewElement: widget,\n *\tdowncastWriter: conversionApi.writer,\n *\n *\tonCommit( newValue ) {\n *\t\teditor.execute( 'imageResize', { width: newValue } );\n *\t}\n * };\n * ```\n *\n *\n * @member {Function} module:widget/widgetresize~ResizerOptions#onCommit\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#getResizeHost\n */\n\n/**\n * @member {Function} module:widget/widgetresize~ResizerOptions#isCentered\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize/imageresizecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { isImage } from '../image/utils';\n/**\n * The image resize command. Currently, it supports only the width attribute.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ImageResizeCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const element = this.editor.model.document.selection.getSelectedElement();\n    this.isEnabled = isImage(element);\n\n    if (!element || !element.hasAttribute('width')) {\n      this.value = null;\n    } else {\n      this.value = {\n        width: element.getAttribute('width'),\n        height: null\n      };\n    }\n  }\n  /**\n   * Executes the command.\n   *\n   *\t\t// Sets the width to 50%:\n   *\t\teditor.execute( 'imageResize', { width: '50%' } );\n   *\n   *\t\t// Removes the width attribute:\n   *\t\teditor.execute( 'imageResize', { width: null } );\n   *\n   * @param {Object} options\n   * @param {String|null} options.width The new width of the image.\n   * @fires execute\n   */\n\n\n  execute(options) {\n    const model = this.editor.model;\n    const imageElement = model.document.selection.getSelectedElement();\n    model.change(writer => {\n      writer.setAttribute('width', options.width, imageElement);\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\nimport Command from './command';\n/**\n * @module core/multicommand\n */\n\n/**\n * A CKEditor command that aggregates other commands.\n *\n * This command is used to proxy multiple commands. The multi-command is enabled when\n * at least one of its registered child commands is enabled.\n * When executing a multi-command the first command that is enabled will be executed.\n *\n *\t\tconst multiCommand = new MultiCommand( editor );\n *\n *\t\tconst commandFoo = new Command( editor );\n *\t\tconst commandBar = new Command( editor );\n *\n *\t\t// Register child commands.\n *\t\tmultiCommand.registerChildCommand( commandFoo );\n *\t\tmultiCommand.registerChildCommand( commandBar );\n *\n *\t\t// Enable one of the commands.\n *\t\tcommandBar.isEnabled = true;\n *\n *\t\tmultiCommand.execute(); // Will execute commandBar.\n *\n * @extends module:core/command~Command\n */\n\nexport default class MultiCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  constructor(editor) {\n    super(editor);\n    /**\n     * Registered child commands.\n     *\n     * @type {Array.<module:core/command~Command>}\n     * @private\n     */\n\n    this._childCommands = [];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {} // Override base command refresh(): the command's state is changed when one of child commands changes states.\n\n  /**\n   * Executes the first of it registered child commands.\n   */\n\n\n  execute(...args) {\n    const command = this._getFirstEnabledCommand();\n\n    command.execute(args);\n  }\n  /**\n   * Registers a child command.\n   *\n   * @param {module:core/command~Command} command\n   */\n\n\n  registerChildCommand(command) {\n    this._childCommands.push(command); // Change multi command enabled state when one of registered commands changes state.\n\n\n    command.on('change:isEnabled', () => this._checkEnabled());\n\n    this._checkEnabled();\n  }\n  /**\n   * Checks if any of child commands is enabled.\n   *\n   * @private\n   */\n\n\n  _checkEnabled() {\n    this.isEnabled = !!this._getFirstEnabledCommand();\n  }\n  /**\n   * Returns a first enabled command or undefined if none of them is enabled.\n   *\n   * @returns {module:core/command~Command|undefined}\n   * @private\n   */\n\n\n  _getFirstEnabledCommand() {\n    return this._childCommands.find(command => command.isEnabled);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indentediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport MultiCommand from '@ckeditor/ckeditor5-core/src/multicommand';\n/**\n * The indent editing feature.\n *\n * This plugin registers the `'indent'` and `'outdent'` commands.\n *\n * **Note**: In order for the commands to work, at least one of the compatible features is required. Read more in the\n * {@link module:indent/indent~Indent indent feature} API documentation.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class IndentEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'IndentEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    editor.commands.add('indent', new MultiCommand(editor));\n    editor.commands.add('outdent', new MultiCommand(editor));\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5z\\\"/><path d=\\\"M1.632 6.95L5.02 9.358a.4.4 0 0 1-.013.661l-3.39 2.207A.4.4 0 0 1 1 11.892V7.275a.4.4 0 0 1 .632-.326z\\\"/></svg>\\n\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5z\\\"/><path d=\\\"M4.368 6.95L.98 9.358a.4.4 0 0 0 .013.661l3.39 2.207A.4.4 0 0 0 5 11.892V7.275a.4.4 0 0 0-.632-.326z\\\"/></svg>\\n\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module indent/indentui\n */\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport indentIcon from '../theme/icons/indent.svg';\nimport outdentIcon from '../theme/icons/outdent.svg';\n/**\n * The indent UI feature.\n *\n * This plugin registers the `'indent'` and `'outdent'` buttons.\n *\n * **Note**: In order for the commands to work, at least one of the compatible features is required. Read more in\n * the {@link module:indent/indent~Indent indent feature} API documentation.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class IndentUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'IndentUI';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const locale = editor.locale;\n        const t = editor.t;\n        const localizedIndentIcon = locale.uiLanguageDirection == 'ltr' ? indentIcon : outdentIcon;\n        const localizedOutdentIcon = locale.uiLanguageDirection == 'ltr' ? outdentIcon : indentIcon;\n        this._defineButton('indent', t('o'), localizedIndentIcon);\n        this._defineButton('outdent', t('p'), localizedOutdentIcon);\n    }\n    /**\n   * Defines a UI button.\n   *\n   * @param {String} commandName\n   * @param {String} label\n   * @param {String} icon\n   * @private\n   */\n    _defineButton(commandName, label, icon) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(commandName, locale => {\n            const command = editor.commands.get(commandName);\n            const view = new ButtonView(locale);\n            view.set({\n                label,\n                icon,\n                tooltip: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            this.listenTo(view, 'execute', () => editor.execute(commandName));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module engine/view/observer/clickobserver\n */\nimport DomEventObserver from './domeventobserver';\n/**\n * {@link module:engine/view/document~Document#event:click Click} event observer.\n *\n * Note that this observer is not available by default. To make it available it needs to be added to\n * {@link module:engine/view/view~View view controller}\n * by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @extends module:engine/view/observer/domeventobserver~DomEventObserver\n */\n\nexport default class ClickObserver extends DomEventObserver {\n  constructor(view) {\n    super(view);\n    this.domEventType = 'click';\n  }\n\n  onDomEvent(domEvent) {\n    this.fire(domEvent.type, domEvent);\n  }\n\n}\n/**\n * Fired when one of the editables has been clicked.\n *\n * Introduced by {@link module:engine/view/observer/clickobserver~ClickObserver}.\n *\n * Note that this event is not available by default. To make it available\n * {@link module:engine/view/observer/clickobserver~ClickObserver} needs to be added\n * to {@link module:engine/view/view~View} by a {@link module:engine/view/view~View#addObserver} method.\n *\n * @see module:engine/view/observer/clickobserver~ClickObserver\n * @event module:engine/view/document~Document#event:click\n * @param {module:engine/view/observer/domeventdata~DomEventData} data Event data.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/ui/linkformview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport SwitchButtonView from '@ckeditor/ckeditor5-ui/src/button/switchbuttonview';\nimport LabeledInputView from '@ckeditor/ckeditor5-ui/src/labeledinput/labeledinputview';\nimport InputTextView from '@ckeditor/ckeditor5-ui/src/inputtext/inputtextview';\nimport submitHandler from '@ckeditor/ckeditor5-ui/src/bindings/submithandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport checkIcon from '@ckeditor/ckeditor5-core/theme/icons/check.svg';\nimport cancelIcon from '@ckeditor/ckeditor5-core/theme/icons/cancel.svg';\nimport '../../theme/linkform.css';\n/**\n * The link form view controller class.\n *\n * See {@link module:link/ui/linkformview~LinkFormView}.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkFormView extends View {\n    /**\n   * Creates an instance of the {@link module:link/ui/linkformview~LinkFormView} class.\n   *\n   * Also see {@link #render}.\n   *\n   * @param {module:utils/locale~Locale} [locale] The localization services instance.\n   * @param {module:utils/collection~Collection} [manualDecorators] Reference to manual decorators in\n   * {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n   */\n    constructor(locale, manualDecorators = []) {\n        super(locale);\n        const t = locale.t;\n        /**\n     * Tracks information about DOM focus in the form.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n        this.focusTracker = new FocusTracker();\n        /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n     * The URL input view.\n     *\n     * @member {module:ui/labeledinput/labeledinputview~LabeledInputView}\n     */\n        this.urlInputView = this._createUrlInput();\n        /**\n     * The Save button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n        this.saveButtonView = this._createButton(t('bw'), checkIcon, 'ck-button-save');\n        this.saveButtonView.type = 'submit';\n        /**\n     * The Cancel button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n        this.cancelButtonView = this._createButton(t('bx'), cancelIcon, 'ck-button-cancel', 'cancel');\n        /**\n     * A collection of {@link module:ui/button/switchbuttonview~SwitchButtonView},\n     * which corresponds to {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators}\n     * configured in the editor.\n     *\n     * @private\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n        this._manualDecoratorSwitches = this._createManualDecoratorSwitches(manualDecorators);\n        /**\n     * A collection of child views in the form.\n     *\n     * @readonly\n     * @type {module:ui/viewcollection~ViewCollection}\n     */\n        this.children = this._createFormChildren(manualDecorators);\n        /**\n     * A collection of views that can be focused in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this._focusables = new ViewCollection();\n        /**\n     * Helps cycling over {@link #_focusables} in the form.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate form fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate form fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        const classList = [\n            'ck',\n            'ck-link-form'\n        ];\n        if (manualDecorators.length) {\n            classList.push('ck-link-form_layout-vertical');\n        }\n        this.setTemplate({\n            tag: 'form',\n            attributes: {\n                class: classList,\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: this.children\n        });\n    }\n    /**\n   * Obtains the state of the {@link module:ui/button/switchbuttonview~SwitchButtonView switch buttons} representing\n   * {@link module:link/linkcommand~LinkCommand#manualDecorators manual link decorators}\n   * in the {@link module:link/ui/linkformview~LinkFormView}.\n   *\n   * @returns {Object.<String,Boolean>} Key-value pairs, where the key is the name of the decorator and the value is\n   * its state.\n   */\n    getDecoratorSwitchesState() {\n        return Array.from(this._manualDecoratorSwitches).reduce((accumulator, switchButton) => {\n            accumulator[switchButton.name] = switchButton.isOn;\n            return accumulator;\n        }, {});\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n        super.render();\n        submitHandler({ view: this });\n        const childViews = [\n            this.urlInputView,\n            ...this._manualDecoratorSwitches,\n            this.saveButtonView,\n            this.cancelButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n   * Focuses the fist {@link #_focusables} in the form.\n   */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n   * Creates a labeled input view.\n   *\n   * @private\n   * @returns {module:ui/labeledinput/labeledinputview~LabeledInputView} Labeled input view instance.\n   */\n    _createUrlInput() {\n        const t = this.locale.t;\n        const labeledInput = new LabeledInputView(this.locale, InputTextView);\n        labeledInput.label = t('by');\n        labeledInput.inputView.placeholder = 'https://example.com';\n        return labeledInput;\n    }\n    /**\n   * Creates a button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @param {String} className The additional button CSS class name.\n   * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n    _createButton(label, icon, className, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.extendTemplate({ attributes: { class: className } });\n        if (eventName) {\n            button.delegate('execute').to(this, eventName);\n        }\n        return button;\n    }\n    /**\n   * Populates {@link module:ui/viewcollection~ViewCollection} of {@link module:ui/button/switchbuttonview~SwitchButtonView}\n   * made based on {@link module:link/linkcommand~LinkCommand#manualDecorators}.\n   *\n   * @private\n   * @param {module:utils/collection~Collection} manualDecorators A reference to the\n   * collection of manual decorators stored in the link command.\n   * @returns {module:ui/viewcollection~ViewCollection} of switch buttons.\n   */\n    _createManualDecoratorSwitches(manualDecorators) {\n        const switches = this.createCollection();\n        for (const manualDecorator of manualDecorators) {\n            const switchButton = new SwitchButtonView(this.locale);\n            switchButton.set({\n                name: manualDecorator.id,\n                label: manualDecorator.label,\n                withText: true\n            });\n            switchButton.bind('isOn').to(manualDecorator, 'value');\n            switchButton.on('execute', () => {\n                manualDecorator.set('value', !switchButton.isOn);\n            });\n            switches.add(switchButton);\n        }\n        return switches;\n    }\n    /**\n   * Populates the {@link #children} collection of the form.\n   *\n   * If {@link module:link/linkcommand~LinkCommand#manualDecorators manual decorators} are configured in the editor, it creates an\n   * additional `View` wrapping all {@link #_manualDecoratorSwitches} switch buttons corresponding\n   * to these decorators.\n   *\n   * @private\n   * @param {module:utils/collection~Collection} manualDecorators A reference to\n   * the collection of manual decorators stored in the link command.\n   * @returns {module:ui/viewcollection~ViewCollection} The children of link form view.\n   */\n    _createFormChildren(manualDecorators) {\n        const children = this.createCollection();\n        children.add(this.urlInputView);\n        if (manualDecorators.length) {\n            const additionalButtonsView = new View();\n            additionalButtonsView.setTemplate({\n                tag: 'ul',\n                children: this._manualDecoratorSwitches.map(switchButton => ({\n                    tag: 'li',\n                    children: [switchButton],\n                    attributes: {\n                        class: [\n                            'ck',\n                            'ck-list__item'\n                        ]\n                    }\n                })),\n                attributes: {\n                    class: [\n                        'ck',\n                        'ck-reset',\n                        'ck-list'\n                    ]\n                }\n            });\n            children.add(additionalButtonsView);\n        }\n        children.add(this.saveButtonView);\n        children.add(this.cancelButtonView);\n        return children;\n    }\n}    /**\n * Fired when the form view is submitted (when one of the children triggered the submit event),\n * for example with a click on {@link #saveButtonView}.\n *\n * @event submit\n */\n     /**\n * Fired when the form view is canceled, for example with a click on {@link #cancelButtonView}.\n *\n * @event cancel\n */","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/ui/linkactionsview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport ViewCollection from '@ckeditor/ckeditor5-ui/src/viewcollection';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport FocusCycler from '@ckeditor/ckeditor5-ui/src/focuscycler';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport { ensureSafeUrl } from '../utils';\nimport unlinkIcon from '../../theme/icons/unlink.svg';\nimport pencilIcon from '@ckeditor/ckeditor5-core/theme/icons/pencil.svg';\nimport '../../theme/linkactions.css';\n/**\n * The link actions view class. This view displays the link preview, allows\n * unlinking or editing the link.\n *\n * @extends module:ui/view~View\n */\nexport default class LinkActionsView extends View {\n    /**\n   * @inheritDoc\n   */\n    constructor(locale) {\n        super(locale);\n        const t = locale.t;\n        /**\n     * Tracks information about DOM focus in the actions.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n        this.focusTracker = new FocusTracker();\n        /**\n     * An instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n        this.keystrokes = new KeystrokeHandler();\n        /**\n     * The href preview view.\n     *\n     * @member {module:ui/view~View}\n     */\n        this.previewButtonView = this._createPreviewButton();\n        /**\n     * The unlink button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n        this.unlinkButtonView = this._createButton(t('bz'), unlinkIcon, 'unlink');\n        /**\n     * The edit link button view.\n     *\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n        this.editButtonView = this._createButton(t('ca'), pencilIcon, 'edit');\n        /**\n     * The value of the \"href\" attribute of the link to use in the {@link #previewButtonView}.\n     *\n     * @observable\n     * @member {String}\n     */\n        this.set('href');\n        /**\n     * A collection of views that can be focused in the view.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n        this._focusables = new ViewCollection();\n        /**\n     * Helps cycling over {@link #_focusables} in the view.\n     *\n     * @readonly\n     * @protected\n     * @member {module:ui/focuscycler~FocusCycler}\n     */\n        this._focusCycler = new FocusCycler({\n            focusables: this._focusables,\n            focusTracker: this.focusTracker,\n            keystrokeHandler: this.keystrokes,\n            actions: {\n                // Navigate fields backwards using the Shift + Tab keystroke.\n                focusPrevious: 'shift + tab',\n                // Navigate fields forwards using the Tab key.\n                focusNext: 'tab'\n            }\n        });\n        this.setTemplate({\n            tag: 'div',\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions'\n                ],\n                // https://github.com/ckeditor/ckeditor5-link/issues/90\n                tabindex: '-1'\n            },\n            children: [\n                this.previewButtonView,\n                this.editButtonView,\n                this.unlinkButtonView\n            ]\n        });\n    }\n    /**\n   * @inheritDoc\n   */\n    render() {\n        super.render();\n        const childViews = [\n            this.previewButtonView,\n            this.editButtonView,\n            this.unlinkButtonView\n        ];\n        childViews.forEach(v => {\n            // Register the view as focusable.\n            this._focusables.add(v);\n            // Register the view in the focus tracker.\n            this.focusTracker.add(v.element);\n        });\n        // Start listening for the keystrokes coming from #element.\n        this.keystrokes.listenTo(this.element);\n    }\n    /**\n   * Focuses the fist {@link #_focusables} in the actions.\n   */\n    focus() {\n        this._focusCycler.focusFirst();\n    }\n    /**\n   * Creates a button view.\n   *\n   * @private\n   * @param {String} label The button label.\n   * @param {String} icon The button icon.\n   * @param {String} [eventName] An event name that the `ButtonView#execute` event will be delegated to.\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n    _createButton(label, icon, eventName) {\n        const button = new ButtonView(this.locale);\n        button.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        button.delegate('execute').to(this, eventName);\n        return button;\n    }\n    /**\n   * Creates a link href preview button.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView} The button view instance.\n   */\n    _createPreviewButton() {\n        const button = new ButtonView(this.locale);\n        const bind = this.bindTemplate;\n        const t = this.t;\n        button.set({\n            withText: true,\n            tooltip: t('cb')\n        });\n        button.extendTemplate({\n            attributes: {\n                class: [\n                    'ck',\n                    'ck-link-actions__preview'\n                ],\n                href: bind.to('href', href => href && ensureSafeUrl(href)),\n                target: '_blank'\n            }\n        });\n        button.bind('label').to(this, 'href', href => {\n            return href || t('cc');\n        });\n        button.bind('isEnabled').to(this, 'href', href => !!href);\n        button.template.tag = 'a';\n        button.template.eventListeners = {};\n        return button;\n    }\n}    /**\n * Fired when the {@link #editButtonView} is clicked.\n *\n * @event edit\n */\n     /**\n * Fired when the {@link #unlinkButtonView} is clicked.\n *\n * @event unlink\n */","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module link/linkui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ClickObserver from '@ckeditor/ckeditor5-engine/src/view/observer/clickobserver';\nimport { isLinkElement } from './utils';\nimport ContextualBalloon from '@ckeditor/ckeditor5-ui/src/panel/balloon/contextualballoon';\nimport clickOutsideHandler from '@ckeditor/ckeditor5-ui/src/bindings/clickoutsidehandler';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport LinkFormView from './ui/linkformview';\nimport LinkActionsView from './ui/linkactionsview';\nimport linkIcon from '../theme/icons/link.svg';\nconst linkKeystroke = 'Ctrl+K';\n/**\n * The link UI plugin. It introduces the `'link'` and `'unlink'` buttons and support for the <kbd>Ctrl+K</kbd> keystroke.\n *\n * It uses the\n * {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon contextual balloon plugin}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class LinkUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [ContextualBalloon];\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'LinkUI';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        editor.editing.view.addObserver(ClickObserver);\n        /**\n     * The actions view displayed inside of the balloon.\n     *\n     * @member {module:link/ui/linkactionsview~LinkActionsView}\n     */\n        this.actionsView = this._createActionsView();\n        /**\n     * The form view displayed inside the balloon.\n     *\n     * @member {module:link/ui/linkformview~LinkFormView}\n     */\n        this.formView = this._createFormView();\n        /**\n     * The contextual balloon plugin instance.\n     *\n     * @private\n     * @member {module:ui/panel/balloon/contextualballoon~ContextualBalloon}\n     */\n        this._balloon = editor.plugins.get(ContextualBalloon);\n        // Create toolbar buttons.\n        this._createToolbarLinkButton();\n        // Attach lifecycle actions to the the balloon.\n        this._enableUserBalloonInteractions();\n    }\n    /**\n   * @inheritDoc\n   */\n    destroy() {\n        super.destroy();\n        // Destroy created UI components as they are not automatically destroyed (see ckeditor5#1341).\n        this.formView.destroy();\n    }\n    /**\n   * Creates the {@link module:link/ui/linkactionsview~LinkActionsView} instance.\n   *\n   * @private\n   * @returns {module:link/ui/linkactionsview~LinkActionsView} The link actions view instance.\n   */\n    _createActionsView() {\n        const editor = this.editor;\n        const actionsView = new LinkActionsView(editor.locale);\n        const linkCommand = editor.commands.get('link');\n        const unlinkCommand = editor.commands.get('unlink');\n        actionsView.bind('href').to(linkCommand, 'value');\n        actionsView.editButtonView.bind('isEnabled').to(linkCommand);\n        actionsView.unlinkButtonView.bind('isEnabled').to(unlinkCommand);\n        // Execute unlink command after clicking on the \"Edit\" button.\n        this.listenTo(actionsView, 'edit', () => {\n            this._addFormView();\n        });\n        // Execute unlink command after clicking on the \"Unlink\" button.\n        this.listenTo(actionsView, 'unlink', () => {\n            editor.execute('unlink');\n            this._hideUI();\n        });\n        // Close the panel on esc key press when the **actions have focus**.\n        actionsView.keystrokes.set('Esc', (data, cancel) => {\n            this._hideUI();\n            cancel();\n        });\n        // Open the form view on Ctrl+K when the **actions have focus**..\n        actionsView.keystrokes.set(linkKeystroke, (data, cancel) => {\n            this._addFormView();\n            cancel();\n        });\n        return actionsView;\n    }\n    /**\n   * Creates the {@link module:link/ui/linkformview~LinkFormView} instance.\n   *\n   * @private\n   * @returns {module:link/ui/linkformview~LinkFormView} The link form view instance.\n   */\n    _createFormView() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const formView = new LinkFormView(editor.locale, linkCommand.manualDecorators);\n        formView.urlInputView.bind('value').to(linkCommand, 'value');\n        // Form elements should be read-only when corresponding commands are disabled.\n        formView.urlInputView.bind('isReadOnly').to(linkCommand, 'isEnabled', value => !value);\n        formView.saveButtonView.bind('isEnabled').to(linkCommand);\n        // Execute link command after clicking the \"Save\" button.\n        this.listenTo(formView, 'submit', () => {\n            editor.execute('link', formView.urlInputView.inputView.element.value, formView.getDecoratorSwitchesState());\n            this._closeFormView();\n        });\n        // Hide the panel after clicking the \"Cancel\" button.\n        this.listenTo(formView, 'cancel', () => {\n            this._closeFormView();\n        });\n        // Close the panel on esc key press when the **form has focus**.\n        formView.keystrokes.set('Esc', (data, cancel) => {\n            this._closeFormView();\n            cancel();\n        });\n        return formView;\n    }\n    /**\n   * Creates a toolbar Link button. Clicking this button will show\n   * a {@link #_balloon} attached to the selection.\n   *\n   * @private\n   */\n    _createToolbarLinkButton() {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        const t = editor.t;\n        // Handle the `Ctrl+K` keystroke and show the panel.\n        editor.keystrokes.set(linkKeystroke, (keyEvtData, cancel) => {\n            // Prevent focusing the search bar in FF and opening new tab in Edge. #153, #154.\n            cancel();\n            if (linkCommand.isEnabled) {\n                this._showUI(true);\n            }\n        });\n        editor.ui.componentFactory.add('link', locale => {\n            const button = new ButtonView(locale);\n            button.isEnabled = true;\n            button.label = t('ac');\n            button.icon = linkIcon;\n            button.keystroke = linkKeystroke;\n            button.tooltip = true;\n            button.isToggleable = true;\n            // Bind button to the command.\n            button.bind('isEnabled').to(linkCommand, 'isEnabled');\n            button.bind('isOn').to(linkCommand, 'value', value => !!value);\n            // Show the panel on button click.\n            this.listenTo(button, 'execute', () => this._showUI(true));\n            return button;\n        });\n    }\n    /**\n   * Attaches actions that control whether the balloon panel containing the\n   * {@link #formView} is visible or not.\n   *\n   * @private\n   */\n    _enableUserBalloonInteractions() {\n        const viewDocument = this.editor.editing.view.document;\n        // Handle click on view document and show panel when selection is placed inside the link element.\n        // Keep panel open until selection will be inside the same link element.\n        this.listenTo(viewDocument, 'click', () => {\n            const parentLink = this._getSelectedLinkElement();\n            if (parentLink) {\n                // Then show panel but keep focus inside editor editable.\n                this._showUI();\n            }\n        });\n        // Focus the form if the balloon is visible and the Tab key has been pressed.\n        this.editor.keystrokes.set('Tab', (data, cancel) => {\n            if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {\n                this.actionsView.focus();\n                cancel();\n            }\n        }, {\n            // Use the high priority because the link UI navigation is more important\n            // than other feature's actions, e.g. list indentation.\n            // https://github.com/ckeditor/ckeditor5-link/issues/146\n            priority: 'high'\n        });\n        // Close the panel on the Esc key press when the editable has focus and the balloon is visible.\n        this.editor.keystrokes.set('Esc', (data, cancel) => {\n            if (this._isUIVisible) {\n                this._hideUI();\n                cancel();\n            }\n        });\n        // Close on click outside of balloon panel element.\n        clickOutsideHandler({\n            emitter: this.formView,\n            activator: () => this._isUIInPanel,\n            contextElements: [this._balloon.view.element],\n            callback: () => this._hideUI()\n        });\n    }\n    /**\n   * Adds the {@link #actionsView} to the {@link #_balloon}.\n   *\n   * @protected\n   */\n    _addActionsView() {\n        if (this._areActionsInPanel) {\n            return;\n        }\n        this._balloon.add({\n            view: this.actionsView,\n            position: this._getBalloonPositionData()\n        });\n    }\n    /**\n   * Adds the {@link #formView} to the {@link #_balloon}.\n   *\n   * @protected\n   */\n    _addFormView() {\n        if (this._isFormInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        this._balloon.add({\n            view: this.formView,\n            position: this._getBalloonPositionData()\n        });\n        // Select input when form view is currently visible.\n        if (this._balloon.visibleView === this.formView) {\n            this.formView.urlInputView.select();\n        }\n        // Make sure that each time the panel shows up, the URL field remains in sync with the value of\n        // the command. If the user typed in the input, then canceled the balloon (`urlInputView#value` stays\n        // unaltered) and re-opened it without changing the value of the link command (e.g. because they\n        // clicked the same link), they would see the old value instead of the actual value of the command.\n        // https://github.com/ckeditor/ckeditor5-link/issues/78\n        // https://github.com/ckeditor/ckeditor5-link/issues/123\n        this.formView.urlInputView.inputView.element.value = linkCommand.value || '';\n    }\n    /**\n   * Closes the form view. Decides whether the balloon should be hidden completely or if the action view should be shown. This is\n   * decided upon the link command value (which has a value if the document selection is in the link).\n   *\n   * Additionally, if any {@link module:link/link~LinkConfig#decorators} are defined in the editor configuration, the state of\n   * switch buttons responsible for manual decorator handling is restored.\n   *\n   * @private\n   */\n    _closeFormView() {\n        const linkCommand = this.editor.commands.get('link');\n        // Restore manual decorator states to represent the current model state. This case is important to reset the switch buttons\n        // when the user cancels the editing form.\n        linkCommand.restoreManualDecoratorStates();\n        if (linkCommand.value !== undefined) {\n            this._removeFormView();\n        } else {\n            this._hideUI();\n        }\n    }\n    /**\n   * Removes the {@link #formView} from the {@link #_balloon}.\n   *\n   * @protected\n   */\n    _removeFormView() {\n        if (this._isFormInPanel) {\n            // Blur the input element before removing it from DOM to prevent issues in some browsers.\n            // See https://github.com/ckeditor/ckeditor5/issues/1501.\n            this.formView.saveButtonView.focus();\n            this._balloon.remove(this.formView);\n            // Because the form has an input which has focus, the focus must be brought back\n            // to the editor. Otherwise, it would be lost.\n            this.editor.editing.view.focus();\n        }\n    }\n    /**\n   * Shows the correct UI type for the current state of the command. It is either\n   * {@link #formView} or {@link #actionsView}.\n   *\n   * @param {Boolean} forceVisible\n   * @private\n   */\n    _showUI(forceVisible = false) {\n        const editor = this.editor;\n        const linkCommand = editor.commands.get('link');\n        if (!linkCommand.isEnabled) {\n            return;\n        }\n        // When there's no link under the selection, go straight to the editing UI.\n        if (!this._getSelectedLinkElement()) {\n            this._addActionsView();\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n            this._addFormView();\n        }    // If there's a link under the selection...\n        else {\n            // Go to the editing UI if actions are already visible.\n            if (this._areActionsVisible) {\n                this._addFormView();\n            }    // Otherwise display just the actions UI.\n            else {\n                this._addActionsView();\n            }\n            // Be sure panel with link is visible.\n            if (forceVisible) {\n                this._balloon.showStack('main');\n            }\n        }\n        // Begin responding to ui#update once the UI is added.\n        this._startUpdatingUI();\n    }\n    /**\n   * Removes the {@link #formView} from the {@link #_balloon}.\n   *\n   * See {@link #_addFormView}, {@link #_addActionsView}.\n   *\n   * @protected\n   */\n    _hideUI() {\n        if (!this._isUIInPanel) {\n            return;\n        }\n        const editor = this.editor;\n        this.stopListening(editor.ui, 'update');\n        this.stopListening(this._balloon, 'change:visibleView');\n        // Make sure the focus always gets back to the editable _before_ removing the focused form view.\n        // Doing otherwise causes issues in some browsers. See https://github.com/ckeditor/ckeditor5-link/issues/193.\n        editor.editing.view.focus();\n        // Remove form first because it's on top of the stack.\n        this._removeFormView();\n        // Then remove the actions view because it's beneath the form.\n        this._balloon.remove(this.actionsView);\n    }\n    /**\n   * Makes the UI react to the {@link module:core/editor/editorui~EditorUI#event:update} event to\n   * reposition itself when the editor UI should be refreshed.\n   *\n   * See: {@link #_hideUI} to learn when the UI stops reacting to the `update` event.\n   *\n   * @protected\n   */\n    _startUpdatingUI() {\n        const editor = this.editor;\n        const viewDocument = editor.editing.view.document;\n        let prevSelectedLink = this._getSelectedLinkElement();\n        let prevSelectionParent = getSelectionParent();\n        const update = () => {\n            const selectedLink = this._getSelectedLinkElement();\n            const selectionParent = getSelectionParent();\n            // Hide the panel if:\n            //\n            // * the selection went out of the EXISTING link element. E.g. user moved the caret out\n            //   of the link,\n            // * the selection went to a different parent when creating a NEW link. E.g. someone\n            //   else modified the document.\n            // * the selection has expanded (e.g. displaying link actions then pressing SHIFT+Right arrow).\n            //\n            // Note: #_getSelectedLinkElement will return a link for a non-collapsed selection only\n            // when fully selected.\n            if (prevSelectedLink && !selectedLink || !prevSelectedLink && selectionParent !== prevSelectionParent) {\n                this._hideUI();\n            }    // Update the position of the panel when:\n                 //  * link panel is in the visible stack\n                 //  * the selection remains in the original link element,\n                 //  * there was no link element in the first place, i.e. creating a new link\n            else if (this._isUIVisible) {\n                // If still in a link element, simply update the position of the balloon.\n                // If there was no link (e.g. inserting one), the balloon must be moved\n                // to the new position in the editing view (a new native DOM range).\n                this._balloon.updatePosition(this._getBalloonPositionData());\n            }\n            prevSelectedLink = selectedLink;\n            prevSelectionParent = selectionParent;\n        };\n        function getSelectionParent() {\n            return viewDocument.selection.focus.getAncestors().reverse().find(node => node.is('element'));\n        }\n        this.listenTo(editor.ui, 'update', update);\n        this.listenTo(this._balloon, 'change:visibleView', update);\n    }\n    /**\n   * Returns `true` when {@link #formView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n    get _isFormInPanel() {\n        return this._balloon.hasView(this.formView);\n    }\n    /**\n   * Returns `true` when {@link #actionsView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n    get _areActionsInPanel() {\n        return this._balloon.hasView(this.actionsView);\n    }\n    /**\n   * Returns `true` when {@link #actionsView} is in the {@link #_balloon} and it is\n   * currently visible.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n    get _areActionsVisible() {\n        return this._balloon.visibleView === this.actionsView;\n    }\n    /**\n   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon}.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n    get _isUIInPanel() {\n        return this._isFormInPanel || this._areActionsInPanel;\n    }\n    /**\n   * Returns `true` when {@link #actionsView} or {@link #formView} is in the {@link #_balloon} and it is\n   * currently visible.\n   *\n   * @readonly\n   * @protected\n   * @type {Boolean}\n   */\n    get _isUIVisible() {\n        const visibleView = this._balloon.visibleView;\n        return visibleView == this.formView || this._areActionsVisible;\n    }\n    /**\n   * Returns positioning options for the {@link #_balloon}. They control the way the balloon is attached\n   * to the target element or selection.\n   *\n   * If the selection is collapsed and inside a link element, the panel will be attached to the\n   * entire link element. Otherwise, it will be attached to the selection.\n   *\n   * @private\n   * @returns {module:utils/dom/position~Options}\n   */\n    _getBalloonPositionData() {\n        const view = this.editor.editing.view;\n        const viewDocument = view.document;\n        const targetLink = this._getSelectedLinkElement();\n        const target = targetLink ? // When selection is inside link element, then attach panel to this element.\n        view.domConverter.mapViewToDom(targetLink) : // Otherwise attach panel to the selection.\n        view.domConverter.viewRangeToDom(viewDocument.selection.getFirstRange());\n        return { target };\n    }\n    /**\n   * Returns the link {@link module:engine/view/attributeelement~AttributeElement} under\n   * the {@link module:engine/view/document~Document editing view's} selection or `null`\n   * if there is none.\n   *\n   * **Note**: For a non–collapsed selection, the link element is only returned when **fully**\n   * selected and the **only** element within the selection boundaries.\n   *\n   * @private\n   * @returns {module:engine/view/attributeelement~AttributeElement|null}\n   */\n    _getSelectedLinkElement() {\n        const view = this.editor.editing.view;\n        const selection = view.document.selection;\n        if (selection.isCollapsed) {\n            return findLinkElementAncestor(selection.getFirstPosition());\n        } else {\n            // The range for fully selected link is usually anchored in adjacent text nodes.\n            // Trim it to get closer to the actual link element.\n            const range = selection.getFirstRange().getTrimmed();\n            const startLink = findLinkElementAncestor(range.start);\n            const endLink = findLinkElementAncestor(range.end);\n            if (!startLink || startLink != endLink) {\n                return null;\n            }\n            // Check if the link element is fully selected.\n            if (view.createRangeIn(startLink).getTrimmed().isEqual(range)) {\n                return startLink;\n            } else {\n                return null;\n            }\n        }\n    }\n}\n// Returns a link element if there's one among the ancestors of the provided `Position`.\n//\n// @private\n// @param {module:engine/view/position~Position} View position to analyze.\n// @returns {module:engine/view/attributeelement~AttributeElement|null} Link element at the position or null.\nfunction findLinkElementAncestor(position) {\n    return position.getAncestors().find(ancestor => isLinkElement(ancestor));\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The list command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class ListCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {'numbered'|'bulleted'} type List type that will be handled by this command.\n   */\n  constructor(editor, type) {\n    super(editor);\n    /**\n     * The type of the list created by the command.\n     *\n     * @readonly\n     * @member {'numbered'|'bulleted'|'todo'}\n     */\n\n    this.type = type;\n    /**\n     * A flag indicating whether the command is active, which means that the selection starts in a list of the same type.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.value = this._getValue();\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Executes the command.\n   *\n   * @protected\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const document = model.document;\n    const blocks = Array.from(document.selection.getSelectedBlocks()).filter(block => checkCanBecomeListItem(block, model.schema)); // Whether we are turning off some items.\n\n    const turnOff = this.value === true; // If we are turning off items, we are going to rename them to paragraphs.\n\n    model.change(writer => {\n      // If part of a list got turned off, we need to handle (outdent) all of sub-items of the last turned-off item.\n      // To be sure that model is all the time in a good state, we first fix items below turned-off item.\n      if (turnOff) {\n        // Start from the model item that is just after the last turned-off item.\n        let next = blocks[blocks.length - 1].nextSibling;\n        let currentIndent = Number.POSITIVE_INFINITY;\n        let changes = []; // Correct indent of all items after the last turned off item.\n        // Rules that should be followed:\n        // 1. All direct sub-items of turned-off item should become indent 0, because the first item after it\n        //    will be the first item of a new list. Other items are at the same level, so should have same 0 index.\n        // 2. All items with indent lower than indent of turned-off item should become indent 0, because they\n        //    should not end up as a child of any of list items that they were not children of before.\n        // 3. All other items should have their indent changed relatively to it's parent.\n        //\n        // For example:\n        // 1  * --------\n        // 2     * --------\n        // 3        * --------\t\t\t<-- this is turned off.\n        // 4           * --------\t\t<-- this has to become indent = 0, because it will be first item on a new list.\n        // 5              * --------\t<-- this should be still be a child of item above, so indent = 1.\n        // 6        * --------\t\t\t<-- this has to become indent = 0, because it should not be a child of any of items above.\n        // 7           * --------\t\t<-- this should be still be a child of item above, so indent = 1.\n        // 8     * --------\t\t\t\t<-- this has to become indent = 0.\n        // 9        * --------\t\t\t<-- this should still be a child of item above, so indent = 1.\n        // 10          * --------\t\t<-- this should still be a child of item above, so indent = 2.\n        // 11          * --------\t\t<-- this should still be at the same level as item above, so indent = 2.\n        // 12 * --------\t\t\t\t<-- this and all below are left unchanged.\n        // 13    * --------\n        // 14       * --------\n        //\n        // After turning off 3 the list becomes:\n        //\n        // 1  * --------\n        // 2     * --------\n        //\n        // 3  --------\n        //\n        // 4  * --------\n        // 5     * --------\n        // 6  * --------\n        // 7     * --------\n        // 8  * --------\n        // 9     * --------\n        // 10       * --------\n        // 11       * --------\n        // 12 * --------\n        // 13    * --------\n        // 14       * --------\n        //\n        // Thanks to this algorithm no lists are mismatched and no items get unexpected children/parent, while\n        // those parent-child connection which are possible to maintain are still maintained. It's worth noting\n        // that this is the same effect that we would be get by multiple use of outdent command. However doing\n        // it like this is much more efficient because it's less operation (less memory usage, easier OT) and\n        // less conversion (faster).\n\n        while (next && next.name == 'listItem' && next.getAttribute('listIndent') !== 0) {\n          // Check each next list item, as long as its indent is bigger than 0.\n          // If the indent is 0 we are not going to change anything anyway.\n          const indent = next.getAttribute('listIndent'); // We check if that's item indent is lower as current relative indent.\n\n          if (indent < currentIndent) {\n            // If it is, current relative indent becomes that indent.\n            currentIndent = indent;\n          } // Fix indent relatively to current relative indent.\n          // Note, that if we just changed the current relative indent, the newIndent will be equal to 0.\n\n\n          const newIndent = indent - currentIndent; // Save the entry in changes array. We do not apply it at the moment, because we will need to\n          // reverse the changes so the last item is changed first.\n          // This is to keep model in correct state all the time.\n\n          changes.push({\n            element: next,\n            listIndent: newIndent\n          }); // Find next item.\n\n          next = next.nextSibling;\n        }\n\n        changes = changes.reverse();\n\n        for (const item of changes) {\n          writer.setAttribute('listIndent', item.listIndent, item.element);\n        }\n      } // If we are turning on, we might change some items that are already `listItem`s but with different type.\n      // Changing one nested list item to other type should also trigger changing all its siblings so the\n      // whole nested list is of the same type.\n      // Example (assume changing to numbered list):\n      // * ------\t\t\t\t<-- do not fix, top level item\n      //   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n      //      * ------\t\t<-- do not fix, item is not affected (different list)\n      //   * ------\t\t\t<-- fix, because latter list item of this item's list is changed\n      //      * ------\t\t<-- fix, because latter list item of this item's list is changed\n      //      * ---[--\t\t<-- already in selection\n      //   * ------\t\t\t<-- already in selection\n      //   * ------\t\t\t<-- already in selection\n      // * ------\t\t\t\t<-- already in selection, but does not cause other list items to change because is top-level\n      //   * ---]--\t\t\t<-- already in selection\n      //   * ------\t\t\t<-- fix, because preceding list item of this item's list is changed\n      //      * ------\t\t<-- do not fix, item is not affected (different list)\n      // * ------\t\t\t\t<-- do not fix, top level item\n\n\n      if (!turnOff) {\n        // Find lowest indent among selected items. This will be indicator what is the indent of\n        // top-most list affected by the command.\n        let lowestIndent = Number.POSITIVE_INFINITY;\n\n        for (const item of blocks) {\n          if (item.is('listItem') && item.getAttribute('listIndent') < lowestIndent) {\n            lowestIndent = item.getAttribute('listIndent');\n          }\n        } // Do not execute the fix for top-level lists.\n\n\n        lowestIndent = lowestIndent === 0 ? 1 : lowestIndent; // Fix types of list items that are \"before\" the selected blocks.\n\n        _fixType(blocks, true, lowestIndent); // Fix types of list items that are \"after\" the selected blocks.\n\n\n        _fixType(blocks, false, lowestIndent);\n      } // Phew! Now it will be easier :).\n      // For each block element that was in the selection, we will either: turn it to list item,\n      // turn it to paragraph, or change it's type. Or leave it as it is.\n      // Do it in reverse as there might be multiple blocks (same as with changing indents).\n\n\n      for (const element of blocks.reverse()) {\n        if (turnOff && element.name == 'listItem') {\n          // We are turning off and the element is a `listItem` - it should be converted to `paragraph`.\n          // List item specific attributes are removed by post fixer.\n          writer.rename(element, 'paragraph');\n        } else if (!turnOff && element.name != 'listItem') {\n          // We are turning on and the element is not a `listItem` - it should be converted to `listItem`.\n          // The order of operations is important to keep model in correct state.\n          writer.setAttributes({\n            listType: this.type,\n            listIndent: 0\n          }, element);\n          writer.rename(element, 'listItem');\n        } else if (!turnOff && element.name == 'listItem' && element.getAttribute('listType') != this.type) {\n          // We are turning on and the element is a `listItem` but has different type - change it's type and\n          // type of it's all siblings that have same indent.\n          writer.setAttribute('listType', this.type, element);\n        }\n      }\n    });\n  }\n  /**\n   * Checks the command's {@link #value}.\n   *\n   * @private\n   * @returns {Boolean} The current value.\n   */\n\n\n  _getValue() {\n    // Check whether closest `listItem` ancestor of the position has a correct type.\n    const listItem = first(this.editor.model.document.selection.getSelectedBlocks());\n    return !!listItem && listItem.is('listItem') && listItem.getAttribute('listType') == this.type;\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    // If command value is true it means that we are in list item, so the command should be enabled.\n    if (this.value) {\n      return true;\n    }\n\n    const selection = this.editor.model.document.selection;\n    const schema = this.editor.model.schema;\n    const firstBlock = first(selection.getSelectedBlocks());\n\n    if (!firstBlock) {\n      return false;\n    } // Otherwise, check if list item can be inserted at the position start.\n\n\n    return checkCanBecomeListItem(firstBlock, schema);\n  }\n\n} // Helper function used when one or more list item have their type changed. Fixes type of other list items\n// that are affected by the change (are in same lists) but are not directly in selection. The function got extracted\n// not to duplicated code, as same fix has to be performed before and after selection.\n//\n// @param {Array.<module:engine/model/node~Node>} blocks Blocks that are in selection.\n// @param {Boolean} isBackward Specified whether fix will be applied for blocks before first selected block (`true`)\n// or blocks after last selected block (`false`).\n// @param {Number} lowestIndent Lowest indent among selected blocks.\n\nfunction _fixType(blocks, isBackward, lowestIndent) {\n  // We need to check previous sibling of first changed item and next siblings of last changed item.\n  const startingItem = isBackward ? blocks[0] : blocks[blocks.length - 1];\n\n  if (startingItem.is('listItem')) {\n    let item = startingItem[isBackward ? 'previousSibling' : 'nextSibling']; // During processing items, keeps the lowest indent of already processed items.\n    // This saves us from changing too many items.\n    // Following example is for going forward as it is easier to read, however same applies to going backward.\n    // * ------\n    //   * ------\n    //     * --[---\n    //   * ------\t\t<-- `lowestIndent` should be 1\n    //     * --]---\t\t<-- `startingItem`, `currentIndent` = 2, `lowestIndent` == 1\n    //     * ------\t\t<-- should be fixed, `indent` == 2 == `currentIndent`\n    //   * ------\t\t<-- should be fixed, set `currentIndent` to 1, `indent` == 1 == `currentIndent`\n    //     * ------\t\t<-- should not be fixed, item is in different list, `indent` = 2, `indent` != `currentIndent`\n    //   * ------\t\t<-- should be fixed, `indent` == 1 == `currentIndent`\n    // * ------\t\t\t<-- break loop (`indent` < `lowestIndent`)\n\n    let currentIndent = startingItem.getAttribute('listIndent'); // Look back until a list item with indent lower than reference `lowestIndent`.\n    // That would be the parent of nested sublist which contains item having `lowestIndent`.\n\n    while (item && item.is('listItem') && item.getAttribute('listIndent') >= lowestIndent) {\n      if (currentIndent > item.getAttribute('listIndent')) {\n        currentIndent = item.getAttribute('listIndent');\n      } // Found an item that is in the same nested sublist.\n\n\n      if (item.getAttribute('listIndent') == currentIndent) {\n        // Just add the item to selected blocks like it was selected by the user.\n        blocks[isBackward ? 'unshift' : 'push'](item);\n      }\n\n      item = item[isBackward ? 'previousSibling' : 'nextSibling'];\n    }\n  }\n} // Checks whether the given block can be replaced by a listItem.\n//\n// @private\n// @param {module:engine/model/element~Element} block A block to be tested.\n// @param {module:engine/model/schema~Schema} schema The schema of the document.\n// @returns {Boolean}\n\n\nfunction checkCanBecomeListItem(block, schema) {\n  return schema.checkChild(block.parent, 'listItem') && !schema.isObject(block);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/indentcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport first from '@ckeditor/ckeditor5-utils/src/first';\n/**\n * The list indent command. It is used by the {@link module:list/list~List list feature}.\n *\n * @extends module:core/command~Command\n */\n\nexport default class IndentCommand extends Command {\n  /**\n   * Creates an instance of the command.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor instance.\n   * @param {'forward'|'backward'} indentDirection The direction of indent. If it is equal to `backward`, the command\n   * will outdent a list item.\n   */\n  constructor(editor, indentDirection) {\n    super(editor);\n    /**\n     * Determines by how much the command will change the list item's indent attribute.\n     *\n     * @readonly\n     * @private\n     * @member {Number}\n     */\n\n    this._indentBy = indentDirection == 'forward' ? 1 : -1;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    this.isEnabled = this._checkEnabled();\n  }\n  /**\n   * Indents or outdents (depending on the {@link #constructor}'s `indentDirection` parameter) selected list items.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    let itemsToChange = Array.from(doc.selection.getSelectedBlocks());\n    model.change(writer => {\n      const lastItem = itemsToChange[itemsToChange.length - 1]; // Indenting a list item should also indent all the items that are already sub-items of indented item.\n\n      let next = lastItem.nextSibling; // Check all items after last indented item, as long as their indent is bigger than indent of that item.\n\n      while (next && next.name == 'listItem' && next.getAttribute('listIndent') > lastItem.getAttribute('listIndent')) {\n        itemsToChange.push(next);\n        next = next.nextSibling;\n      } // We need to be sure to keep model in correct state after each small change, because converters\n      // bases on that state and assumes that model is correct.\n      // Because of that, if the command outdents items, we will outdent them starting from the last item, as\n      // it is safer.\n\n\n      if (this._indentBy < 0) {\n        itemsToChange = itemsToChange.reverse();\n      }\n\n      for (const item of itemsToChange) {\n        const indent = item.getAttribute('listIndent') + this._indentBy; // If indent is lower than 0, it means that the item got outdented when it was not indented.\n        // This means that we need to convert that list item to paragraph.\n\n\n        if (indent < 0) {\n          // To keep the model as correct as possible, first rename listItem, then remove attributes,\n          // as listItem without attributes is very incorrect and will cause problems in converters.\n          // No need to remove attributes, will be removed by post fixer.\n          writer.rename(item, 'paragraph');\n        } // If indent is >= 0, change the attribute value.\n        else {\n            writer.setAttribute('listIndent', indent, item);\n          }\n      }\n    });\n  }\n  /**\n   * Checks whether the command can be enabled in the current context.\n   *\n   * @private\n   * @returns {Boolean} Whether the command should be enabled.\n   */\n\n\n  _checkEnabled() {\n    // Check whether any of position's ancestor is a list item.\n    const listItem = first(this.editor.model.document.selection.getSelectedBlocks()); // If selection is not in a list item, the command is disabled.\n\n    if (!listItem || !listItem.is('listItem')) {\n      return false;\n    }\n\n    if (this._indentBy > 0) {\n      // Cannot indent first item in it's list. Check if before `listItem` is a list item that is in same list.\n      // To be in the same list, the item has to have same attributes and cannot be \"split\" by an item with lower indent.\n      const indent = listItem.getAttribute('listIndent');\n      const type = listItem.getAttribute('listType');\n      let prev = listItem.previousSibling;\n\n      while (prev && prev.is('listItem') && prev.getAttribute('listIndent') >= indent) {\n        if (prev.getAttribute('listIndent') == indent) {\n          // The item is on the same level.\n          // If it has same type, it means that we found a preceding sibling from the same list.\n          // If it does not have same type, it means that `listItem` is on different list (this can happen only\n          // on top level lists, though).\n          return prev.getAttribute('listType') == type;\n        }\n\n        prev = prev.previousSibling;\n      } // Could not find similar list item, this means that `listItem` is first in its list.\n\n\n      return false;\n    } // If we are outdenting it is enough to be in list item. Every list item can always be outdented.\n\n\n    return true;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/utils\n */\nimport { getFillerOffset } from '@ckeditor/ckeditor5-engine/src/view/containerelement';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\n/**\n * Creates a list item {@link module:engine/view/containerelement~ContainerElement}.\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer The writer instance.\n * @returns {module:engine/view/containerelement~ContainerElement}\n */\n\nexport function createViewListItemElement(writer) {\n  const viewItem = writer.createContainerElement('li');\n  viewItem.getFillerOffset = getListItemFillerOffset;\n  return viewItem;\n}\n/**\n * Helper function that creates a `<ul><li></li></ul>` or (`<ol>`) structure out of the given `modelItem` model `listItem` element.\n * Then, it binds the created view list item (<li>) with the model `listItem` element.\n * The function then returns the created view list item (<li>).\n *\n * @param {module:engine/model/item~Item} modelItem Model list item.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @returns {module:engine/view/containerelement~ContainerElement} View list element.\n */\n\nexport function generateLiInUl(modelItem, conversionApi) {\n  const mapper = conversionApi.mapper;\n  const viewWriter = conversionApi.writer;\n  const listType = modelItem.getAttribute('listType') == 'numbered' ? 'ol' : 'ul';\n  const viewItem = createViewListItemElement(viewWriter);\n  const viewList = viewWriter.createContainerElement(listType, null);\n  viewWriter.insert(viewWriter.createPositionAt(viewList, 0), viewItem);\n  mapper.bindElements(modelItem, viewItem);\n  return viewItem;\n}\n/**\n * Helper function that inserts a view list at a correct place and merges it with its siblings.\n * It takes a model list item element (`modelItem`) and a corresponding view list item element (`injectedItem`). The view list item\n * should be in a view list element (`<ul>` or `<ol>`) and should be its only child.\n * See comments below to better understand the algorithm.\n *\n * @param {module:engine/view/item~Item} modelItem Model list item.\n * @param {module:engine/view/containerelement~ContainerElement} injectedItem\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface.\n * @param {module:engine/model/model~Model} model The model instance.\n */\n\nexport function injectViewList(modelItem, injectedItem, conversionApi, model) {\n  const injectedList = injectedItem.parent;\n  const mapper = conversionApi.mapper;\n  const viewWriter = conversionApi.writer; // The position where the view list will be inserted.\n\n  let insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem)); // 1. Find the previous list item that has the same or smaller indent. Basically we are looking for the first model item\n  // that is a \"parent\" or \"sibling\" of the injected model item.\n  // If there is no such list item, it means that the injected list item is the first item in \"its list\".\n\n  const refItem = getSiblingListItem(modelItem.previousSibling, {\n    sameIndent: true,\n    smallerIndent: true,\n    listIndent: modelItem.getAttribute('listIndent')\n  });\n  const prevItem = modelItem.previousSibling;\n\n  if (refItem && refItem.getAttribute('listIndent') == modelItem.getAttribute('listIndent')) {\n    // There is a list item with the same indent - we found the same-level sibling.\n    // Break the list after it. The inserted view item will be added in the broken space.\n    const viewItem = mapper.toViewElement(refItem);\n    insertPosition = viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem));\n  } else {\n    // There is no list item with the same indent. Check the previous model item.\n    if (prevItem && prevItem.name == 'listItem') {\n      // If it is a list item, it has to have a lower indent.\n      // It means that the inserted item should be added to it as its nested item.\n      insertPosition = mapper.toViewPosition(model.createPositionAt(prevItem, 'end'));\n    } else {\n      // The previous item is not a list item (or does not exist at all).\n      // Just map the position and insert the view item at the mapped position.\n      insertPosition = mapper.toViewPosition(model.createPositionBefore(modelItem));\n    }\n  }\n\n  insertPosition = positionAfterUiElements(insertPosition); // Insert the view item.\n\n  viewWriter.insert(insertPosition, injectedList); // 2. Handle possible children of the injected model item.\n\n  if (prevItem && prevItem.name == 'listItem') {\n    const prevView = mapper.toViewElement(prevItem);\n    const walkerBoundaries = viewWriter.createRange(viewWriter.createPositionAt(prevView, 0), insertPosition);\n    const walker = walkerBoundaries.getWalker({\n      ignoreElementEnd: true\n    });\n\n    for (const value of walker) {\n      if (value.item.is('li')) {\n        const breakPosition = viewWriter.breakContainer(viewWriter.createPositionBefore(value.item));\n        const viewList = value.item.parent;\n        const targetPosition = viewWriter.createPositionAt(injectedItem, 'end');\n        mergeViewLists(viewWriter, targetPosition.nodeBefore, targetPosition.nodeAfter);\n        viewWriter.move(viewWriter.createRangeOn(viewList), targetPosition);\n        walker.position = breakPosition;\n      }\n    }\n  } else {\n    const nextViewList = injectedList.nextSibling;\n\n    if (nextViewList && (nextViewList.is('ul') || nextViewList.is('ol'))) {\n      let lastSubChild = null;\n\n      for (const child of nextViewList.getChildren()) {\n        const modelChild = mapper.toModelElement(child);\n\n        if (modelChild && modelChild.getAttribute('listIndent') > modelItem.getAttribute('listIndent')) {\n          lastSubChild = child;\n        } else {\n          break;\n        }\n      }\n\n      if (lastSubChild) {\n        viewWriter.breakContainer(viewWriter.createPositionAfter(lastSubChild));\n        viewWriter.move(viewWriter.createRangeOn(lastSubChild.parent), viewWriter.createPositionAt(injectedItem, 'end'));\n      }\n    }\n  } // Merge the inserted view list with its possible neighbor lists.\n\n\n  mergeViewLists(viewWriter, injectedList, injectedList.nextSibling);\n  mergeViewLists(viewWriter, injectedList.previousSibling, injectedList);\n}\n/**\n * Helper function that takes two parameters that are expected to be view list elements, and merges them.\n * The merge happens only if both parameters are list elements of the same type (the same element name and the same class attributes).\n *\n * @param {module:engine/view/downcastwriter~DowncastWriter} viewWriter The writer instance.\n * @param {module:engine/view/item~Item} firstList The first element to compare.\n * @param {module:engine/view/item~Item} secondList The second element to compare.\n * @returns {module:engine/view/position~Position|null} The position after merge or `null` when there was no merge.\n */\n\nexport function mergeViewLists(viewWriter, firstList, secondList) {\n  // Check if two lists are going to be merged.\n  if (!firstList || !secondList || firstList.name != 'ul' && firstList.name != 'ol') {\n    return null;\n  } // Both parameters are list elements, so compare types now.\n\n\n  if (firstList.name != secondList.name || firstList.getAttribute('class') !== secondList.getAttribute('class')) {\n    return null;\n  }\n\n  return viewWriter.mergeContainers(viewWriter.createPositionAfter(firstList));\n}\n/**\n * Helper function that for a given `view.Position`, returns a `view.Position` that is after all `view.UIElement`s that\n * are after the given position.\n *\n * For example:\n * `<container:p>foo^<ui:span></ui:span><ui:span></ui:span>bar</container:p>`\n * For position ^, the position before \"bar\" will be returned.\n *\n * @param {module:engine/view/position~Position} viewPosition\n * @returns {module:engine/view/position~Position}\n */\n\nexport function positionAfterUiElements(viewPosition) {\n  return viewPosition.getLastMatchingPosition(value => value.item.is('uiElement'));\n}\n/**\n * Helper function that searches for a previous list item sibling of a given model item that meets the given criteria\n * passed by the options object.\n *\n * @param {module:engine/model/item~Item} modelItem\n * @param {Object} options Search criteria.\n * @param {Boolean} [options.sameIndent=false] Whether the sought sibling should have the same indentation.\n * @param {Boolean} [options.smallerIndent=false] Whether the sought sibling should have a smaller indentation.\n * @param {Number} [options.listIndent] The reference indentation.\n * @returns {module:engine/model/item~Item|null}\n */\n\nexport function getSiblingListItem(modelItem, options) {\n  const sameIndent = !!options.sameIndent;\n  const smallerIndent = !!options.smallerIndent;\n  const indent = options.listIndent;\n  let item = modelItem;\n\n  while (item && item.name == 'listItem') {\n    const itemIndent = item.getAttribute('listIndent');\n\n    if (sameIndent && indent == itemIndent || smallerIndent && indent > itemIndent) {\n      return item;\n    }\n\n    item = item.previousSibling;\n  }\n\n  return null;\n}\n/**\n * Helper method for creating a UI button and linking it with an appropriate command.\n *\n * @private\n * @param {module:core/editor/editor~Editor} editor The editor instance to which the UI component will be added.\n * @param {String} commandName The name of the command.\n * @param {Object} label The button label.\n * @param {String} icon The source of the icon.\n */\n\nexport function createUIComponent(editor, commandName, label, icon) {\n  editor.ui.componentFactory.add(commandName, locale => {\n    const command = editor.commands.get(commandName);\n    const buttonView = new ButtonView(locale);\n    buttonView.set({\n      label,\n      icon,\n      tooltip: true,\n      isToggleable: true\n    }); // Bind button model to command.\n\n    buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled'); // Execute command.\n\n    buttonView.on('execute', () => editor.execute(commandName));\n    return buttonView;\n  });\n} // Implementation of getFillerOffset for view list item element.\n//\n// @returns {Number|null} Block filler offset or `null` if block filler is not needed.\n\nfunction getListItemFillerOffset() {\n  const hasOnlyLists = !this.isEmpty && (this.getChild(0).name == 'ul' || this.getChild(0).name == 'ol');\n\n  if (this.isEmpty || hasOnlyLists) {\n    return 0;\n  }\n\n  return getFillerOffset.call(this);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/converters\n */\nimport { generateLiInUl, injectViewList, mergeViewLists, getSiblingListItem, positionAfterUiElements } from './utils';\nimport TreeWalker from '@ckeditor/ckeditor5-engine/src/model/treewalker';\n/**\n * A model-to-view converter for the `listItem` model element insertion.\n *\n * It creates a `<ul><li></li><ul>` (or `<ol>`) view structure out of a `listItem` model element, inserts it at the correct\n * position, and merges the list with surrounding lists (if available).\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelViewInsertion(model) {\n  return (evt, data, conversionApi) => {\n    const consumable = conversionApi.consumable;\n\n    if (!consumable.test(data.item, 'insert') || !consumable.test(data.item, 'attribute:listType') || !consumable.test(data.item, 'attribute:listIndent')) {\n      return;\n    }\n\n    consumable.consume(data.item, 'insert');\n    consumable.consume(data.item, 'attribute:listType');\n    consumable.consume(data.item, 'attribute:listIndent');\n    const modelItem = data.item;\n    const viewItem = generateLiInUl(modelItem, conversionApi);\n    injectViewList(modelItem, viewItem, conversionApi, model);\n  };\n}\n/**\n * A model-to-view converter for the `listItem` model element removal.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelViewRemove(model) {\n  return (evt, data, conversionApi) => {\n    const viewStart = conversionApi.mapper.toViewPosition(data.position).getLastMatchingPosition(value => !value.item.is('li'));\n    const viewItem = viewStart.nodeAfter;\n    const viewWriter = conversionApi.writer; // 1. Break the container after and before the list item.\n    // This will create a view list with one view list item - the one to remove.\n\n    viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n    viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem)); // 2. Remove the list with the item to remove.\n\n    const viewList = viewItem.parent;\n    const viewListPrev = viewList.previousSibling;\n    const removeRange = viewWriter.createRangeOn(viewList);\n    const removed = viewWriter.remove(removeRange); // 3. Merge the whole created by breaking and removing the list.\n\n    if (viewListPrev && viewListPrev.nextSibling) {\n      mergeViewLists(viewWriter, viewListPrev, viewListPrev.nextSibling);\n    } // 4. Bring back nested list that was in the removed <li>.\n\n\n    const modelItem = conversionApi.mapper.toModelElement(viewItem);\n    hoistNestedLists(modelItem.getAttribute('listIndent') + 1, data.position, removeRange.start, viewItem, conversionApi, model); // 5. Unbind removed view item and all children.\n\n    for (const child of viewWriter.createRangeIn(removed).getItems()) {\n      conversionApi.mapper.unbindViewElement(child);\n    }\n\n    evt.stop();\n  };\n}\n/**\n * A model-to-view converter for the `type` attribute change on the `listItem` model element.\n *\n * This change means that the `<li>` element parent changes from `<ul>` to `<ol>` (or vice versa). This is accomplished\n * by breaking view elements and changing their name. The next {@link module:list/converters~modelViewMergeAfterChangeType}\n * converter will attempt to merge split nodes.\n *\n * Splitting this conversion into 2 steps makes it possible to add an additional conversion in the middle.\n * Check {@link module:list/todolistconverters~modelViewChangeType} to see an example of it.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\n\nexport function modelViewChangeType(evt, data, conversionApi) {\n  if (!conversionApi.consumable.consume(data.item, 'attribute:listType')) {\n    return;\n  }\n\n  const viewItem = conversionApi.mapper.toViewElement(data.item);\n  const viewWriter = conversionApi.writer; // Break the container after and before the list item.\n  // This will create a view list with one view list item -- the one that changed type.\n\n  viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n  viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem)); // Change name of the view list that holds the changed view item.\n  // We cannot just change name property, because that would not render properly.\n\n  const viewList = viewItem.parent;\n  const listName = data.attributeNewValue == 'numbered' ? 'ol' : 'ul';\n  viewWriter.rename(listName, viewList);\n}\n/**\n * A model-to-view converter that attempts to merge nodes split by {@link module:list/converters~modelViewChangeType}.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\n\nexport function modelViewMergeAfterChangeType(evt, data, conversionApi) {\n  const viewItem = conversionApi.mapper.toViewElement(data.item);\n  const viewList = viewItem.parent;\n  const viewWriter = conversionApi.writer; // Merge the changed view list with other lists, if possible.\n\n  mergeViewLists(viewWriter, viewList, viewList.nextSibling);\n  mergeViewLists(viewWriter, viewList.previousSibling, viewList); // Consumable insertion of children inside the item. They are already handled by re-building the item in view.\n\n  for (const child of data.item.getChildren()) {\n    conversionApi.consumable.consume(child, 'insert');\n  }\n}\n/**\n * A model-to-view converter for the `listIndent` attribute change on the `listItem` model element.\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:attribute\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function modelViewChangeIndent(model) {\n  return (evt, data, conversionApi) => {\n    if (!conversionApi.consumable.consume(data.item, 'attribute:listIndent')) {\n      return;\n    }\n\n    const viewItem = conversionApi.mapper.toViewElement(data.item);\n    const viewWriter = conversionApi.writer; // 1. Break the container after and before the list item.\n    // This will create a view list with one view list item -- the one that changed type.\n\n    viewWriter.breakContainer(viewWriter.createPositionBefore(viewItem));\n    viewWriter.breakContainer(viewWriter.createPositionAfter(viewItem)); // 2. Extract view list with changed view list item and merge \"hole\" possibly created by breaking and removing elements.\n\n    const viewList = viewItem.parent;\n    const viewListPrev = viewList.previousSibling;\n    const removeRange = viewWriter.createRangeOn(viewList);\n    viewWriter.remove(removeRange);\n\n    if (viewListPrev && viewListPrev.nextSibling) {\n      mergeViewLists(viewWriter, viewListPrev, viewListPrev.nextSibling);\n    } // 3. Bring back nested list that was in the removed <li>.\n\n\n    hoistNestedLists(data.attributeOldValue + 1, data.range.start, removeRange.start, viewItem, conversionApi, model); // 4. Inject view list like it is newly inserted.\n\n    injectViewList(data.item, viewItem, conversionApi, model); // 5. Consume insertion of children inside the item. They are already handled by re-building the item in view.\n\n    for (const child of data.item.getChildren()) {\n      conversionApi.consumable.consume(child, 'insert');\n    }\n  };\n}\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter is fired for\n * insert change of every model item, and should be fired before the actual converter. The converter checks whether the inserted\n * model item is a non-`listItem` element. If it is, and it is inserted inside a view list, the converter breaks the\n * list so the model element is inserted to the view parent element corresponding to its model parent element.\n *\n * The converter prevents such situations:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul><p>xxx</p><ul><li>bar</li></ul>\n *\t\t<paragraph>xxx</paragraph>       // Instead of this wrong view state:\n *\t\t<listItem>bar</listItem>         <ul><li>foo</li><p>xxx</p><li>bar</li></ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:insert\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\n\nexport function modelViewSplitOnInsert(evt, data, conversionApi) {\n  if (data.item.name != 'listItem') {\n    let viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n    const viewWriter = conversionApi.writer;\n    const lists = []; // Break multiple ULs/OLs if there are.\n    //\n    // Imagine following list:\n    //\n    // 1 --------\n    //   1.1 --------\n    //     1.1.1 --------\n    //     1.1.2 --------\n    //     1.1.3 --------\n    //       1.1.3.1 --------\n    //   1.2 --------\n    //     1.2.1 --------\n    // 2 --------\n    //\n    // Insert paragraph after item 1.1.1:\n    //\n    // 1 --------\n    //   1.1 --------\n    //     1.1.1 --------\n    //\n    // Lorem ipsum.\n    //\n    //     1.1.2 --------\n    //     1.1.3 --------\n    //       1.1.3.1 --------\n    //   1.2 --------\n    //     1.2.1 --------\n    // 2 --------\n    //\n    // In this case 1.1.2 has to become beginning of a new list.\n    // We need to break list before 1.1.2 (obvious), then we need to break list also before 1.2.\n    // Then we need to move those broken pieces one after another and merge:\n    //\n    // 1 --------\n    //   1.1 --------\n    //     1.1.1 --------\n    //\n    // Lorem ipsum.\n    //\n    // 1.1.2 --------\n    //   1.1.3 --------\n    //     1.1.3.1 --------\n    // 1.2 --------\n    //   1.2.1 --------\n    // 2 --------\n    //\n\n    while (viewPosition.parent.name == 'ul' || viewPosition.parent.name == 'ol') {\n      viewPosition = viewWriter.breakContainer(viewPosition);\n\n      if (viewPosition.parent.name != 'li') {\n        break;\n      } // Remove lists that are after inserted element.\n      // They will be brought back later, below the inserted element.\n\n\n      const removeStart = viewPosition;\n      const removeEnd = viewWriter.createPositionAt(viewPosition.parent, 'end'); // Don't remove if there is nothing to remove.\n\n      if (!removeStart.isEqual(removeEnd)) {\n        const removed = viewWriter.remove(viewWriter.createRange(removeStart, removeEnd));\n        lists.push(removed);\n      }\n\n      viewPosition = viewWriter.createPositionAfter(viewPosition.parent);\n    } // Bring back removed lists.\n\n\n    if (lists.length > 0) {\n      for (let i = 0; i < lists.length; i++) {\n        const previousList = viewPosition.nodeBefore;\n        const insertedRange = viewWriter.insert(viewPosition, lists[i]);\n        viewPosition = insertedRange.end; // Don't merge first list! We want a split in that place (this is why this converter is introduced).\n\n        if (i > 0) {\n          const mergePos = mergeViewLists(viewWriter, previousList, previousList.nextSibling); // If `mergePos` is in `previousList` it means that the lists got merged.\n          // In this case, we need to fix insert position.\n\n          if (mergePos && mergePos.parent == previousList) {\n            viewPosition.offset--;\n          }\n        }\n      } // Merge last inserted list with element after it.\n\n\n      mergeViewLists(viewWriter, viewPosition.nodeBefore, viewPosition.nodeAfter);\n    }\n  }\n}\n/**\n * A special model-to-view converter introduced by the {@link module:list/list~List list feature}. This converter takes care of\n * merging view lists after something is removed or moved from near them.\n *\n * Example:\n *\n *\t\t// Model:                        // View:\n *\t\t<listItem>foo</listItem>         <ul><li>foo</li></ul>\n *\t\t<paragraph>xxx</paragraph>       <p>xxx</p>\n *\t\t<listItem>bar</listItem>         <ul><li>bar</li></ul>\n *\n *\t\t// After change:                 // Correct view guaranteed by this converter:\n *\t\t<listItem>foo</listItem>         <ul>\n *\t\t<listItem>bar</listItem>             <li>foo</li>\n *\t\t                                     <li>bar</li>\n *\t\t                                 </ul>\n *\n * @see module:engine/conversion/downcastdispatcher~DowncastDispatcher#event:remove\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data Additional information about the change.\n * @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi Conversion interface.\n */\n\nexport function modelViewMergeAfter(evt, data, conversionApi) {\n  const viewPosition = conversionApi.mapper.toViewPosition(data.position);\n  const viewItemPrev = viewPosition.nodeBefore;\n  const viewItemNext = viewPosition.nodeAfter; // Merge lists if something (remove, move) was done from inside of list.\n  // Merging will be done only if both items are view lists of the same type.\n  // The check is done inside the helper function.\n\n  mergeViewLists(conversionApi.writer, viewItemPrev, viewItemNext);\n}\n/**\n * A view-to-model converter that converts the `<li>` view elements into the `listItem` model elements.\n *\n * To set correct values of the `listType` and `listIndent` attributes the converter:\n * * checks `<li>`'s parent,\n * * stores and increases the `conversionApi.store.indent` value when `<li>`'s sub-items are converted.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\n\nexport function viewModelConverter(evt, data, conversionApi) {\n  if (conversionApi.consumable.consume(data.viewItem, {\n    name: true\n  })) {\n    const writer = conversionApi.writer; // 1. Create `listItem` model element.\n\n    const listItem = writer.createElement('listItem'); // 2. Handle `listItem` model element attributes.\n\n    const indent = getIndent(data.viewItem);\n    writer.setAttribute('listIndent', indent, listItem); // Set 'bulleted' as default. If this item is pasted into a context,\n\n    const type = data.viewItem.parent && data.viewItem.parent.name == 'ol' ? 'numbered' : 'bulleted';\n    writer.setAttribute('listType', type, listItem); // Try to find allowed parent for list item.\n\n    const splitResult = conversionApi.splitToAllowedParent(listItem, data.modelCursor); // When there is no allowed parent it means that list item cannot be converted at current model position\n    // and in any of position ancestors.\n\n    if (!splitResult) {\n      return;\n    }\n\n    writer.insert(listItem, splitResult.position);\n    const nextPosition = viewToModelListItemChildrenConverter(listItem, data.viewItem.getChildren(), conversionApi); // Result range starts before the first item and ends after the last.\n\n    data.modelRange = writer.createRange(data.modelCursor, nextPosition); // When `data.modelCursor` parent had to be split to insert list item...\n\n    if (splitResult.cursorParent) {\n      // Continue conversion in the split element.\n      data.modelCursor = writer.createPositionAt(splitResult.cursorParent, 0);\n    } else {\n      // Otherwise continue conversion after the last list item.\n      data.modelCursor = data.modelRange.end;\n    }\n  }\n}\n/**\n * A view-to-model converter for the `<ul>` and `<ol>` view elements that cleans the input view of garbage.\n * This is mostly to clean whitespaces from between the `<li>` view elements inside the view list element, however, also\n * incorrect data can be cleared if the view was incorrect.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\n\nexport function cleanList(evt, data, conversionApi) {\n  if (conversionApi.consumable.test(data.viewItem, {\n    name: true\n  })) {\n    // Caching children because when we start removing them iterating fails.\n    const children = Array.from(data.viewItem.getChildren());\n\n    for (const child of children) {\n      const isWrongElement = !(child.is('li') || isList(child));\n\n      if (isWrongElement) {\n        child._remove();\n      }\n    }\n  }\n}\n/**\n * A view-to-model converter for the `<li>` elements that cleans whitespace formatting from the input view.\n *\n * @see module:engine/conversion/upcastdispatcher~UpcastDispatcher#event:element\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Object} data An object containing conversion input and a placeholder for conversion output and possibly other values.\n * @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n */\n\nexport function cleanListItem(evt, data, conversionApi) {\n  if (conversionApi.consumable.test(data.viewItem, {\n    name: true\n  })) {\n    if (data.viewItem.childCount === 0) {\n      return;\n    }\n\n    const children = [...data.viewItem.getChildren()];\n    let foundList = false;\n    let firstNode = true;\n\n    for (const child of children) {\n      if (foundList && !isList(child)) {\n        child._remove();\n      }\n\n      if (child.is('text')) {\n        // If this is the first node and it's a text node, left-trim it.\n        if (firstNode) {\n          child._data = child.data.replace(/^\\s+/, '');\n        } // If this is the last text node before <ul> or <ol>, right-trim it.\n\n\n        if (!child.nextSibling || isList(child.nextSibling)) {\n          child._data = child.data.replace(/\\s+$/, '');\n        }\n      } else if (isList(child)) {\n        // If this is a <ul> or <ol>, do not process it, just mark that we already visited list element.\n        foundList = true;\n      }\n\n      firstNode = false;\n    }\n  }\n}\n/**\n * Returns a callback for model position to view position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `listItem` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:modelToViewPosition\n * @param {module:engine/view/view~View} view A view instance.\n * @returns {Function}\n */\n\nexport function modelToViewPosition(view) {\n  return (evt, data) => {\n    if (data.isPhantom) {\n      return;\n    }\n\n    const modelItem = data.modelPosition.nodeBefore;\n\n    if (modelItem && modelItem.is('listItem')) {\n      const viewItem = data.mapper.toViewElement(modelItem);\n      const topmostViewList = viewItem.getAncestors().find(isList);\n      const walker = view.createPositionAt(viewItem, 0).getWalker();\n\n      for (const value of walker) {\n        if (value.type == 'elementStart' && value.item.is('li')) {\n          data.viewPosition = value.previousPosition;\n          break;\n        } else if (value.type == 'elementEnd' && value.item == topmostViewList) {\n          data.viewPosition = value.nextPosition;\n          break;\n        }\n      }\n    }\n  };\n}\n/**\n * The callback for view position to model position mapping for {@link module:engine/conversion/mapper~Mapper}. The callback fixes\n * positions between the `<li>` elements that would be incorrectly mapped because of how list items are represented in the model\n * and in the view.\n *\n * @see module:engine/conversion/mapper~Mapper#event:viewToModelPosition\n * @param {module:engine/model/model~Model} model Model instance.\n * @returns {Function} Returns a conversion callback.\n */\n\nexport function viewToModelPosition(model) {\n  return (evt, data) => {\n    const viewPos = data.viewPosition;\n    const viewParent = viewPos.parent;\n    const mapper = data.mapper;\n\n    if (viewParent.name == 'ul' || viewParent.name == 'ol') {\n      // Position is directly in <ul> or <ol>.\n      if (!viewPos.isAtEnd) {\n        // If position is not at the end, it must be before <li>.\n        // Get that <li>, map it to `listItem` and set model position before that `listItem`.\n        const modelNode = mapper.toModelElement(viewPos.nodeAfter);\n        data.modelPosition = model.createPositionBefore(modelNode);\n      } else {\n        // Position is at the end of <ul> or <ol>, so there is no <li> after it to be mapped.\n        // There is <li> before the position, but we cannot just map it to `listItem` and set model position after it,\n        // because that <li> may contain nested items.\n        // We will check \"model length\" of that <li>, in other words - how many `listItem`s are in that <li>.\n        const modelNode = mapper.toModelElement(viewPos.nodeBefore);\n        const modelLength = mapper.getModelLength(viewPos.nodeBefore); // Then we get model position before mapped `listItem` and shift it accordingly.\n\n        data.modelPosition = model.createPositionBefore(modelNode).getShiftedBy(modelLength);\n      }\n\n      evt.stop();\n    } else if (viewParent.name == 'li' && viewPos.nodeBefore && (viewPos.nodeBefore.name == 'ul' || viewPos.nodeBefore.name == 'ol')) {\n      // In most cases when view position is in <li> it is in text and this is a correct position.\n      // However, if position is after <ul> or <ol> we have to fix it -- because in model <ul>/<ol> are not in the `listItem`.\n      const modelNode = mapper.toModelElement(viewParent); // Check all <ul>s and <ol>s that are in the <li> but before mapped position.\n      // Get model length of those elements and then add it to the offset of `listItem` mapped to the original <li>.\n\n      let modelLength = 1; // Starts from 1 because the original <li> has to be counted in too.\n\n      let viewList = viewPos.nodeBefore;\n\n      while (viewList && isList(viewList)) {\n        modelLength += mapper.getModelLength(viewList);\n        viewList = viewList.previousSibling;\n      }\n\n      data.modelPosition = model.createPositionBefore(modelNode).getShiftedBy(modelLength);\n      evt.stop();\n    }\n  };\n}\n/**\n * Post-fixer that reacts to changes on document and fixes incorrect model states.\n *\n * In the example below, there is a correct list structure.\n * Then the middle element is removed so the list structure will become incorrect:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 2</listItem>   <--- this is removed.\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * The list structure after the middle element is removed:\n *\n * \t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Item 3</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>Item 1</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>Item 3</listItem>   <--- note that indent got post-fixed.\n *\n * @param {module:engine/model/model~Model} model The data model.\n * @param {module:engine/model/writer~Writer} writer The writer to do changes with.\n * @returns {Boolean} `true` if any change has been applied, `false` otherwise.\n */\n\nexport function modelChangePostFixer(model, writer) {\n  const changes = model.document.differ.getChanges();\n  const itemToListHead = new Map();\n  let applied = false;\n\n  for (const entry of changes) {\n    if (entry.type == 'insert' && entry.name == 'listItem') {\n      _addListToFix(entry.position);\n    } else if (entry.type == 'insert' && entry.name != 'listItem') {\n      if (entry.name != '$text') {\n        // In case of renamed element.\n        const item = entry.position.nodeAfter;\n\n        if (item.hasAttribute('listIndent')) {\n          writer.removeAttribute('listIndent', item);\n          applied = true;\n        }\n\n        if (item.hasAttribute('listType')) {\n          writer.removeAttribute('listType', item);\n          applied = true;\n        }\n\n        for (const innerItem of Array.from(model.createRangeIn(item)).filter(e => e.item.is('listItem'))) {\n          _addListToFix(innerItem.previousPosition);\n        }\n      }\n\n      const posAfter = entry.position.getShiftedBy(entry.length);\n\n      _addListToFix(posAfter);\n    } else if (entry.type == 'remove' && entry.name == 'listItem') {\n      _addListToFix(entry.position);\n    } else if (entry.type == 'attribute' && entry.attributeKey == 'listIndent') {\n      _addListToFix(entry.range.start);\n    } else if (entry.type == 'attribute' && entry.attributeKey == 'listType') {\n      _addListToFix(entry.range.start);\n    }\n  }\n\n  for (const listHead of itemToListHead.values()) {\n    _fixListIndents(listHead);\n\n    _fixListTypes(listHead);\n  }\n\n  return applied;\n\n  function _addListToFix(position) {\n    const prev = position.nodeBefore;\n\n    if (!prev || !prev.is('listItem')) {\n      const item = position.nodeAfter;\n\n      if (item && item.is('listItem')) {\n        itemToListHead.set(item, item);\n      }\n    } else {\n      let listHead = prev;\n\n      if (itemToListHead.has(listHead)) {\n        return;\n      }\n\n      while (listHead.previousSibling && listHead.previousSibling.is('listItem')) {\n        listHead = listHead.previousSibling;\n\n        if (itemToListHead.has(listHead)) {\n          return;\n        }\n      }\n\n      itemToListHead.set(position.nodeBefore, listHead);\n    }\n  }\n\n  function _fixListIndents(item) {\n    let maxIndent = 0;\n    let fixBy = null;\n\n    while (item && item.is('listItem')) {\n      const itemIndent = item.getAttribute('listIndent');\n\n      if (itemIndent > maxIndent) {\n        let newIndent;\n\n        if (fixBy === null) {\n          fixBy = itemIndent - maxIndent;\n          newIndent = maxIndent;\n        } else {\n          if (fixBy > itemIndent) {\n            fixBy = itemIndent;\n          }\n\n          newIndent = itemIndent - fixBy;\n        }\n\n        writer.setAttribute('listIndent', newIndent, item);\n        applied = true;\n      } else {\n        fixBy = null;\n        maxIndent = item.getAttribute('listIndent') + 1;\n      }\n\n      item = item.nextSibling;\n    }\n  }\n\n  function _fixListTypes(item) {\n    let typesStack = [];\n    let prev = null;\n\n    while (item && item.is('listItem')) {\n      const itemIndent = item.getAttribute('listIndent');\n\n      if (prev && prev.getAttribute('listIndent') > itemIndent) {\n        typesStack = typesStack.slice(0, itemIndent + 1);\n      }\n\n      if (itemIndent != 0) {\n        if (typesStack[itemIndent]) {\n          const type = typesStack[itemIndent];\n\n          if (item.getAttribute('listType') != type) {\n            writer.setAttribute('listType', type, item);\n            applied = true;\n          }\n        } else {\n          typesStack[itemIndent] = item.getAttribute('listType');\n        }\n      }\n\n      prev = item;\n      item = item.nextSibling;\n    }\n  }\n}\n/**\n * A fixer for pasted content that includes list items.\n *\n * It fixes indentation of pasted list items so the pasted items match correctly to the context they are pasted into.\n *\n * Example:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>B^</listItem>\n *\t\t// At ^ paste:  <listItem listType=\"bulleted\" listIndent=4>X</listItem>\n *\t\t//              <listItem listType=\"bulleted\" listIndent=5>Y</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * Should become:\n *\n *\t\t<listItem listType=\"bulleted\" listIndent=0>A</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=1>BX</listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>Y/listItem>\n *\t\t<listItem listType=\"bulleted\" listIndent=2>C</listItem>\n *\n * @param {module:utils/eventinfo~EventInfo} evt An object containing information about the fired event.\n * @param {Array} args Arguments of {@link module:engine/model/model~Model#insertContent}.\n */\n\nexport function modelIndentPasteFixer(evt, [content, selectable]) {\n  // Check whether inserted content starts from a `listItem`. If it does not, it means that there are some other\n  // elements before it and there is no need to fix indents, because even if we insert that content into a list,\n  // that list will be broken.\n  // Note: we also need to handle singular elements because inserting item with indent 0 into 0,1,[],2\n  // would create incorrect model.\n  let item = content.is('documentFragment') ? content.getChild(0) : content;\n  let selection;\n\n  if (!selectable) {\n    selection = this.document.selection;\n  } else {\n    selection = this.createSelection(selectable);\n  }\n\n  if (item && item.is('listItem')) {\n    // Get a reference list item. Inserted list items will be fixed according to that item.\n    const pos = selection.getFirstPosition();\n    let refItem = null;\n\n    if (pos.parent.is('listItem')) {\n      refItem = pos.parent;\n    } else if (pos.nodeBefore && pos.nodeBefore.is('listItem')) {\n      refItem = pos.nodeBefore;\n    } // If there is `refItem` it means that we do insert list items into an existing list.\n\n\n    if (refItem) {\n      // First list item in `data` has indent equal to 0 (it is a first list item). It should have indent equal\n      // to the indent of reference item. We have to fix the first item and all of it's children and following siblings.\n      // Indent of all those items has to be adjusted to reference item.\n      const indentChange = refItem.getAttribute('listIndent'); // Fix only if there is anything to fix.\n\n      if (indentChange > 0) {\n        // Adjust indent of all \"first\" list items in inserted data.\n        while (item && item.is('listItem')) {\n          item._setAttribute('listIndent', item.getAttribute('listIndent') + indentChange);\n\n          item = item.nextSibling;\n        }\n      }\n    }\n  }\n} // Helper function that converts children of a given `<li>` view element into corresponding model elements.\n// The function maintains proper order of elements if model `listItem` is split during the conversion\n// due to block children conversion.\n//\n// @param {module:engine/model/element~Element} listItemModel List item model element to which converted children will be inserted.\n// @param {Iterable.<module:engine/view/node~Node>} viewChildren View elements which will be converted.\n// @param {module:engine/conversion/upcastdispatcher~UpcastConversionApi} conversionApi Conversion interface to be used by the callback.\n// @returns {module:engine/model/position~Position} Position on which next elements should be inserted after children conversion.\n\nfunction viewToModelListItemChildrenConverter(listItemModel, viewChildren, conversionApi) {\n  const {\n    writer,\n    schema\n  } = conversionApi; // A position after the last inserted `listItem`.\n\n  let nextPosition = writer.createPositionAfter(listItemModel); // Check all children of the converted `<li>`. At this point we assume there are no \"whitespace\" view text nodes\n  // in view list, between view list items. This should be handled by `<ul>` and `<ol>` converters.\n\n  for (const child of viewChildren) {\n    if (child.name == 'ul' || child.name == 'ol') {\n      // If the children is a list, we will insert its conversion result after currently handled `listItem`.\n      // Then, next insertion position will be set after all the new list items (and maybe other elements if\n      // something split list item).\n      //\n      // If this is a list, we expect that some `listItem`s and possibly other blocks will be inserted, however `.modelCursor`\n      // should be set after last `listItem` (or block). This is why it feels safe to use it as `nextPosition`\n      nextPosition = conversionApi.convertItem(child, nextPosition).modelCursor;\n    } else {\n      // If this is not a list, try inserting content at the end of the currently handled `listItem`.\n      const result = conversionApi.convertItem(child, writer.createPositionAt(listItemModel, 'end')); // It may end up that the current `listItem` becomes split (if that content cannot be inside `listItem`). For example:\n      //\n      // <li><p>Foo</p></li>\n      //\n      // will be converted to:\n      //\n      // <listItem></listItem><paragraph>Foo</paragraph><listItem></listItem>\n      //\n\n      const convertedChild = result.modelRange.start.nodeAfter;\n      const wasSplit = convertedChild && convertedChild.is('element') && !schema.checkChild(listItemModel, convertedChild.name);\n\n      if (wasSplit) {\n        // As `lastListItem` got split, we need to update it to the second part of the split `listItem` element.\n        //\n        // `modelCursor` should be set to a position where the conversion should continue. There are multiple possible scenarios\n        // that may happen. Usually, `modelCursor` (marked as `#` below) would point to the second list item after conversion:\n        //\n        //\t\t`<li><p>Foo</p></li>` -> `<listItem></listItem><paragraph>Foo</paragraph><listItem>#</listItem>`\n        //\n        // However, in some cases, like auto-paragraphing, the position is placed at the end of the block element:\n        //\n        //\t\t`<li><div>Foo</div></li>` -> `<listItem></listItem><paragraph>Foo#</paragraph><listItem></listItem>`\n        //\n        // or after an element if another element broken auto-paragraphed element:\n        //\n        //\t\t`<li><div><h2>Foo</h2></div></li>` -> `<listItem></listItem><heading1>Foo</heading1>#<listItem></listItem>`\n        //\n        // We need to check for such cases and use proper list item and position based on it.\n        //\n        if (result.modelCursor.parent.is('listItem')) {\n          // (1).\n          listItemModel = result.modelCursor.parent;\n        } else {\n          // (2), (3).\n          listItemModel = findNextListItem(result.modelCursor);\n        }\n\n        nextPosition = writer.createPositionAfter(listItemModel);\n      }\n    }\n  }\n\n  return nextPosition;\n} // Helper function that seeks for a next list item starting from given `startPosition`.\n\n\nfunction findNextListItem(startPosition) {\n  const treeWalker = new TreeWalker({\n    startPosition\n  });\n  let value;\n\n  do {\n    value = treeWalker.next();\n  } while (!value.value.item.is('listItem'));\n\n  return value.value.item;\n} // Helper function that takes all children of given `viewRemovedItem` and moves them in a correct place, according\n// to other given parameters.\n\n\nfunction hoistNestedLists(nextIndent, modelRemoveStartPosition, viewRemoveStartPosition, viewRemovedItem, conversionApi, model) {\n  // Find correct previous model list item element.\n  // The element has to have either same or smaller indent than given reference indent.\n  // This will be the model element which will get nested items (if it has smaller indent) or sibling items (if it has same indent).\n  // Keep in mind that such element might not be found, if removed item was the first item.\n  const prevModelItem = getSiblingListItem(modelRemoveStartPosition.nodeBefore, {\n    sameIndent: true,\n    smallerIndent: true,\n    listIndent: nextIndent,\n    foo: 'b'\n  });\n  const mapper = conversionApi.mapper;\n  const viewWriter = conversionApi.writer; // Indent of found element or `null` if the element has not been found.\n\n  const prevIndent = prevModelItem ? prevModelItem.getAttribute('listIndent') : null;\n  let insertPosition;\n\n  if (!prevModelItem) {\n    // If element has not been found, simply insert lists at the position where the removed item was:\n    //\n    // Lorem ipsum.\n    // 1 --------           <--- this is removed, no previous list item, put nested items in place of removed item.\n    //   1.1 --------       <--- this is reference indent.\n    //     1.1.1 --------\n    //     1.1.2 --------\n    //   1.2 --------\n    //\n    // Becomes:\n    //\n    // Lorem ipsum.\n    // 1.1 --------\n    //   1.1.1 --------\n    //   1.1.2 --------\n    // 1.2 --------\n    insertPosition = viewRemoveStartPosition;\n  } else if (prevIndent == nextIndent) {\n    // If element has been found and has same indent as reference indent it means that nested items should\n    // become siblings of found element:\n    //\n    // 1 --------\n    //   1.1 --------\n    //   1.2 --------       <--- this is `prevModelItem`.\n    // 2 --------           <--- this is removed, previous list item has indent same as reference indent.\n    //   2.1 --------       <--- this is reference indent, this and 2.2 should become siblings of 1.2.\n    //   2.2 --------\n    //\n    // Becomes:\n    //\n    // 1 --------\n    //   1.1 --------\n    //   1.2 --------\n    //   2.1 --------\n    //   2.2 --------\n    const prevViewList = mapper.toViewElement(prevModelItem).parent;\n    insertPosition = viewWriter.createPositionAfter(prevViewList);\n  } else {\n    // If element has been found and has smaller indent as reference indent it means that nested items\n    // should become nested items of found item:\n    //\n    // 1 --------           <--- this is `prevModelItem`.\n    //   1.1 --------       <--- this is removed, previous list item has indent smaller than reference indent.\n    //     1.1.1 --------   <--- this is reference indent, this and 1.1.1 should become nested items of 1.\n    //     1.1.2 --------\n    //   1.2 --------\n    //\n    // Becomes:\n    //\n    // 1 --------\n    //   1.1.1 --------\n    //   1.1.2 --------\n    //   1.2 --------\n    //\n    // Note: in this case 1.1.1 have indent 2 while 1 have indent 0. In model that should not be possible,\n    // because following item may have indent bigger only by one. But this is fixed by postfixer.\n    const modelPosition = model.createPositionAt(prevModelItem, 'end');\n    insertPosition = mapper.toViewPosition(modelPosition);\n  }\n\n  insertPosition = positionAfterUiElements(insertPosition); // Handle multiple lists. This happens if list item has nested numbered and bulleted lists. Following lists\n  // are inserted after the first list (no need to recalculate insertion position for them).\n\n  for (const child of [...viewRemovedItem.getChildren()]) {\n    if (isList(child)) {\n      insertPosition = viewWriter.move(viewWriter.createRangeOn(child), insertPosition).end;\n      mergeViewLists(viewWriter, child, child.nextSibling);\n      mergeViewLists(viewWriter, child.previousSibling, child);\n    }\n  }\n} // Checks if view element is a list type (ul or ol).\n//\n// @param {module:engine/view/element~Element} viewElement\n// @returns {Boolean}\n\n\nfunction isList(viewElement) {\n  return viewElement.is('ol') || viewElement.is('ul');\n} // Calculates the indent value for a list item. Handles HTML compliant and non-compliant lists.\n//\n// Also, fixes non HTML compliant lists indents:\n//\n//\t\tbefore:                                     fixed list:\n//\t\tOL                                          OL\n//\t\t|-> LI (parent LIs: 0)                      |-> LI     (indent: 0)\n//\t\t    |-> OL                                  |-> OL\n//\t\t        |-> OL                                  |\n//\t\t        |   |-> OL                              |\n//\t\t        |       |-> OL                          |\n//\t\t        |           |-> LI (parent LIs: 1)      |-> LI (indent: 1)\n//\t\t        |-> LI (parent LIs: 1)                  |-> LI (indent: 1)\n//\n//\t\tbefore:                                     fixed list:\n//\t\tOL                                          OL\n//\t\t|-> OL                                      |\n//\t\t    |-> OL                                  |\n//\t\t         |-> OL                             |\n//\t\t             |-> LI (parent LIs: 0)         |-> LI        (indent: 0)\n//\n//\t\tbefore:                                     fixed list:\n//\t\tOL                                          OL\n//\t\t|-> LI (parent LIs: 0)                      |-> LI         (indent: 0)\n//\t\t|-> OL                                          |-> OL\n//\t\t    |-> LI (parent LIs: 0)                          |-> LI (indent: 1)\n//\n// @param {module:engine/view/element~Element} listItem\n// @param {Object} conversionStore\n// @returns {Number}\n\n\nfunction getIndent(listItem) {\n  let indent = 0;\n  let parent = listItem.parent;\n\n  while (parent) {\n    // Each LI in the tree will result in an increased indent for HTML compliant lists.\n    if (parent.is('li')) {\n      indent++;\n    } else {\n      // If however the list is nested in other list we should check previous sibling of any of the list elements...\n      const previousSibling = parent.previousSibling; // ...because the we might need increase its indent:\n      //\t\tbefore:                           fixed list:\n      //\t\tOL                                OL\n      //\t\t|-> LI (parent LIs: 0)            |-> LI         (indent: 0)\n      //\t\t|-> OL                                |-> OL\n      //\t\t    |-> LI (parent LIs: 0)                |-> LI (indent: 1)\n\n      if (previousSibling && previousSibling.is('li')) {\n        indent++;\n      }\n    }\n\n    parent = parent.parent;\n  }\n\n  return indent;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/listediting\n */\nimport ListCommand from './listcommand';\nimport IndentCommand from './indentcommand';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\nimport { cleanList, cleanListItem, modelViewInsertion, modelViewChangeType, modelViewMergeAfterChangeType, modelViewMergeAfter, modelViewRemove, modelViewSplitOnInsert, modelViewChangeIndent, modelChangePostFixer, modelIndentPasteFixer, viewModelConverter, modelToViewPosition, viewToModelPosition } from './converters';\n/**\n * The engine of the list feature. It handles creating, editing and removing lists and list items.\n *\n * It registers the `'numberedList'`, `'bulletedList'`, `'indentList'` and `'outdentList'` commands.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ListEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'ListEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Paragraph];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Schema.\n    // Note: in case `$block` will ever be allowed in `listItem`, keep in mind that this feature\n    // uses `Selection#getSelectedBlocks()` without any additional processing to obtain all selected list items.\n    // If there are blocks allowed inside list item, algorithms using `getSelectedBlocks()` will have to be modified.\n\n    editor.model.schema.register('listItem', {\n      inheritAllFrom: '$block',\n      allowAttributes: ['listType', 'listIndent']\n    }); // Converters.\n\n    const data = editor.data;\n    const editing = editor.editing;\n    editor.model.document.registerPostFixer(writer => modelChangePostFixer(editor.model, writer));\n    editing.mapper.registerViewToModelLength('li', getViewListItemLength);\n    data.mapper.registerViewToModelLength('li', getViewListItemLength);\n    editing.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n    editing.mapper.on('viewToModelPosition', viewToModelPosition(editor.model));\n    data.mapper.on('modelToViewPosition', modelToViewPosition(editing.view));\n    editing.downcastDispatcher.on('insert', modelViewSplitOnInsert, {\n      priority: 'high'\n    });\n    editing.downcastDispatcher.on('insert:listItem', modelViewInsertion(editor.model));\n    data.downcastDispatcher.on('insert', modelViewSplitOnInsert, {\n      priority: 'high'\n    });\n    data.downcastDispatcher.on('insert:listItem', modelViewInsertion(editor.model));\n    editing.downcastDispatcher.on('attribute:listType:listItem', modelViewChangeType, {\n      priority: 'high'\n    });\n    editing.downcastDispatcher.on('attribute:listType:listItem', modelViewMergeAfterChangeType, {\n      priority: 'low'\n    });\n    editing.downcastDispatcher.on('attribute:listIndent:listItem', modelViewChangeIndent(editor.model));\n    editing.downcastDispatcher.on('remove:listItem', modelViewRemove(editor.model));\n    editing.downcastDispatcher.on('remove', modelViewMergeAfter, {\n      priority: 'low'\n    });\n    data.upcastDispatcher.on('element:ul', cleanList, {\n      priority: 'high'\n    });\n    data.upcastDispatcher.on('element:ol', cleanList, {\n      priority: 'high'\n    });\n    data.upcastDispatcher.on('element:li', cleanListItem, {\n      priority: 'high'\n    });\n    data.upcastDispatcher.on('element:li', viewModelConverter); // Fix indentation of pasted items.\n\n    editor.model.on('insertContent', modelIndentPasteFixer, {\n      priority: 'high'\n    }); // Register commands for numbered and bulleted list.\n\n    editor.commands.add('numberedList', new ListCommand(editor, 'numbered'));\n    editor.commands.add('bulletedList', new ListCommand(editor, 'bulleted')); // Register commands for indenting.\n\n    editor.commands.add('indentList', new IndentCommand(editor, 'forward'));\n    editor.commands.add('outdentList', new IndentCommand(editor, 'backward'));\n    const viewDocument = editing.view.document; // Overwrite default Enter key behavior.\n    // If Enter key is pressed with selection collapsed in empty list item, outdent it instead of breaking it.\n\n    this.listenTo(viewDocument, 'enter', (evt, data) => {\n      const doc = this.editor.model.document;\n      const positionParent = doc.selection.getLastPosition().parent;\n\n      if (doc.selection.isCollapsed && positionParent.name == 'listItem' && positionParent.isEmpty) {\n        this.editor.execute('outdentList');\n        data.preventDefault();\n        evt.stop();\n      }\n    }); // Overwrite default Backspace key behavior.\n    // If Backspace key is pressed with selection collapsed on first position in first list item, outdent it. #83\n\n    this.listenTo(viewDocument, 'delete', (evt, data) => {\n      // Check conditions from those that require less computations like those immediately available.\n      if (data.direction !== 'backward') {\n        return;\n      }\n\n      const selection = this.editor.model.document.selection;\n\n      if (!selection.isCollapsed) {\n        return;\n      }\n\n      const firstPosition = selection.getFirstPosition();\n\n      if (!firstPosition.isAtStart) {\n        return;\n      }\n\n      const positionParent = firstPosition.parent;\n\n      if (positionParent.name !== 'listItem') {\n        return;\n      }\n\n      const previousIsAListItem = positionParent.previousSibling && positionParent.previousSibling.name === 'listItem';\n\n      if (previousIsAListItem) {\n        return;\n      }\n\n      this.editor.execute('outdentList');\n      data.preventDefault();\n      evt.stop();\n    }, {\n      priority: 'high'\n    });\n\n    const getCommandExecuter = commandName => {\n      return (data, cancel) => {\n        const command = this.editor.commands.get(commandName);\n\n        if (command.isEnabled) {\n          this.editor.execute(commandName);\n          cancel();\n        }\n      };\n    };\n\n    editor.keystrokes.set('Tab', getCommandExecuter('indentList'));\n    editor.keystrokes.set('Shift+Tab', getCommandExecuter('outdentList'));\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  afterInit() {\n    const commands = this.editor.commands;\n    const indent = commands.get('indent');\n    const outdent = commands.get('outdent');\n\n    if (indent) {\n      indent.registerChildCommand(commands.get('indentList'));\n    }\n\n    if (outdent) {\n      outdent.registerChildCommand(commands.get('outdentList'));\n    }\n  }\n\n}\n\nfunction getViewListItemLength(element) {\n  let length = 1;\n\n  for (const child of element.getChildren()) {\n    if (child.name == 'ul' || child.name == 'ol') {\n      for (const item of child.getChildren()) {\n        length += getViewListItemLength(item);\n      }\n    }\n  }\n\n  return length;\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module list/listui\n */\nimport { createUIComponent } from './utils';\nimport numberedListIcon from '../theme/icons/numberedlist.svg';\nimport bulletedListIcon from '../theme/icons/bulletedlist.svg';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The list UI feature. It introduces the `'numberedList'` and `'bulletedList'` buttons that\n * allow to convert paragraphs to and from list items and indent or outdent them.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ListUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const t = this.editor.t;\n        // Create two buttons and link them with numberedList and bulletedList commands.\n        createUIComponent(this.editor, 'numberedList', t('ad'), numberedListIcon);\n        createUIComponent(this.editor, 'bulletedList', t('ae'), bulletedListIcon);\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/list\n */\nimport Element from '@ckeditor/ckeditor5-engine/src/view/element';\nimport Matcher from '@ckeditor/ckeditor5-engine/src/view/matcher';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\n/**\n * Transforms Word specific list-like elements to the semantic HTML lists.\n *\n * Lists in Word are represented by block elements with special attributes like:\n *\n *\t\t<p class=MsoListParagraphCxSpFirst style='mso-list:l1 level1 lfo1'>...</p> // Paragraph based list.\n *\t\t<h1 style='mso-list:l0 level1 lfo1'>...</h1> // Heading 1 based list.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment The view structure which to transform.\n * @param {String} stylesString Styles from which list-like elements styling will be extracted.\n */\n\nexport function transformListItemLikeElementsIntoLists(documentFragment, stylesString) {\n  if (!documentFragment.childCount) {\n    return;\n  }\n\n  const writer = new UpcastWriter();\n  const itemLikeElements = findAllItemLikeElements(documentFragment, writer);\n\n  if (!itemLikeElements.length) {\n    return;\n  }\n\n  let currentList = null;\n  itemLikeElements.forEach((itemLikeElement, i) => {\n    if (!currentList || isNewListNeeded(itemLikeElements[i - 1], itemLikeElement)) {\n      const listStyle = detectListStyle(itemLikeElement, stylesString);\n      currentList = insertNewEmptyList(listStyle, itemLikeElement.element, writer);\n    }\n\n    const listItem = transformElementIntoListItem(itemLikeElement.element, writer);\n    writer.appendChild(listItem, currentList);\n  });\n}\n/**\n * Removes paragraph wrapping content inside a list item.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment\n * @param {module:engine/view/upcastwriter~UpcastWriter} writer\n */\n\nexport function unwrapParagraphInListItem(documentFragment, writer) {\n  for (const value of writer.createRangeIn(documentFragment)) {\n    const element = value.item;\n\n    if (element.is('li')) {\n      // Google Docs allows on single paragraph inside LI.\n      const firstChild = element.getChild(0);\n\n      if (firstChild.is('p')) {\n        writer.unwrapElement(firstChild);\n      }\n    }\n  }\n} // Finds all list-like elements in a given document fragment.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment\n// in which to look for list-like nodes.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {Array.<Object>} Array of found list-like items. Each item is an object containing:\n//\n//\t\t* {module:engine/src/view/element~Element} element List-like element.\n//\t\t* {Number} id List item id parsed from `mso-list` style (see `getListItemData()` function).\n//\t\t* {Number} order List item creation order parsed from `mso-list` style (see `getListItemData()` function).\n//\t\t* {Number} indent List item indentation level parsed from `mso-list` style (see `getListItemData()` function).\n\nfunction findAllItemLikeElements(documentFragment, writer) {\n  const range = writer.createRangeIn(documentFragment); // Matcher for finding list-like elements.\n\n  const itemLikeElementsMatcher = new Matcher({\n    name: /^p|h\\d+$/,\n    styles: {\n      'mso-list': /.*/\n    }\n  });\n  const itemLikeElements = [];\n\n  for (const value of range) {\n    if (value.type === 'elementStart' && itemLikeElementsMatcher.match(value.item)) {\n      const itemData = getListItemData(value.item);\n      itemLikeElements.push({\n        element: value.item,\n        id: itemData.id,\n        order: itemData.order,\n        indent: itemData.indent\n      });\n    }\n  }\n\n  return itemLikeElements;\n} // Extracts list item style from the provided CSS.\n//\n// List item style is extracted from CSS stylesheet. Each list with its specific style attribute\n// value (`mso-list:l1 level1 lfo1`) has its dedicated properties in a CSS stylesheet defined with a selector like:\n//\n// \t\t@list l1:level1 { ... }\n//\n// It contains `mso-level-number-format` property which defines list numbering/bullet style. If this property\n// is not defined it means default `decimal` numbering.\n//\n// Here CSS string representation is used as `mso-level-number-format` property is an invalid CSS property\n// and will be removed during CSS parsing.\n//\n// @param {Object} listLikeItem List-like item for which list style will be searched for. Usually\n// a result of `findAllItemLikeElements()` function.\n// @param {String} stylesString CSS stylesheet.\n// @returns {Object} result\n// @returns {String} result.type List type, could be `ul` or `ol`.\n// @returns {String} result.style List style, for example: `decimal`, `lower-roman`, etc. It is extracted\n// directly from Word stylesheet without further processing and may be not compatible\n// with CSS `list-style-type` property accepted values.\n\n\nfunction detectListStyle(listLikeItem, stylesString) {\n  const listStyleRegexp = new RegExp(`@list l${listLikeItem.id}:level${listLikeItem.indent}\\\\s*({[^}]*)`, 'gi');\n  const listStyleTypeRegex = /mso-level-number-format:([^;]*);/gi;\n  const listStyleMatch = listStyleRegexp.exec(stylesString);\n  let listStyleType = 'decimal'; // Decimal is default one.\n\n  if (listStyleMatch && listStyleMatch[1]) {\n    const listStyleTypeMatch = listStyleTypeRegex.exec(listStyleMatch[1]);\n\n    if (listStyleTypeMatch && listStyleTypeMatch[1]) {\n      listStyleType = listStyleTypeMatch[1].trim();\n    }\n  }\n\n  return {\n    type: listStyleType !== 'bullet' && listStyleType !== 'image' ? 'ol' : 'ul',\n    style: listStyleType\n  };\n} // Creates empty list of a given type and inserts it after a specified element.\n//\n// @param {Object} listStyle List style object which determines the type of newly created list.\n// Usually a result of `detectListStyle()` function.\n// @param {module:engine/view/element~Element} element Element before which list is inserted.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {module:engine/view/element~Element} Newly created list element.\n\n\nfunction insertNewEmptyList(listStyle, element, writer) {\n  const list = new Element(listStyle.type);\n  const position = element.parent.getChildIndex(element);\n  writer.insertChild(position, list, element.parent);\n  return list;\n} // Transforms given element into a semantic list item. As the function operates on a provided\n// {module:engine/src/view/element~Element element} it will modify the view structure to which this element belongs.\n//\n// @param {module:engine/view/element~Element} element Element which will be transformed into list item.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {module:engine/view/element~Element} New element to which the given one was transformed. It is\n// inserted in place of the old element (the reference to the old element is lost due to renaming).\n\n\nfunction transformElementIntoListItem(element, writer) {\n  removeBulletElement(element, writer);\n  return writer.rename('li', element);\n} // Extracts list item information from Word specific list-like element style:\n//\n//\t\t`style=\"mso-list:l1 level1 lfo1\"`\n//\n// where:\n//\n//\t\t* `l1` is a list id (however it does not mean this is a continuous list - see #43),\n//\t\t* `level1` is a list item indentation level,\n//\t\t* `lfo1` is a list insertion order in a document.\n//\n// @param {module:engine/view/element~Element} element Element from which style data is extracted.\n// @returns {Object} result\n// @returns {Number} result.id Parent list id.\n// @returns {Number} result.order List item creation order.\n// @returns {Number} result.indent List item indentation level.\n\n\nfunction getListItemData(element) {\n  const data = {};\n  const listStyle = element.getStyle('mso-list');\n\n  if (listStyle) {\n    data.id = parseInt(listStyle.match(/(^|\\s+)l(\\d+)/i)[2]);\n    data.order = parseInt(listStyle.match(/\\s*lfo(\\d+)/i)[1]);\n    data.indent = parseInt(listStyle.match(/\\s*level(\\d+)/i)[1]);\n  }\n\n  return data;\n} // Removes span with a numbering/bullet from a given element.\n//\n// @param {module:engine/view/element~Element} element\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n\n\nfunction removeBulletElement(element, writer) {\n  // Matcher for finding `span` elements holding lists numbering/bullets.\n  const bulletMatcher = new Matcher({\n    name: 'span',\n    styles: {\n      'mso-list': 'Ignore'\n    }\n  });\n  const range = writer.createRangeIn(element);\n\n  for (const value of range) {\n    if (value.type === 'elementStart' && bulletMatcher.match(value.item)) {\n      writer.remove(value.item);\n    }\n  }\n} // Whether previous and current item belongs to the same list. It is determined based on `item.id`\n// (extracted from `mso-list` style, see #getListItemData) and previous sibling of the current item.\n//\n// @param {Object} previousItem\n// @param {Object} currentItem\n// @returns {Boolean}\n\n\nfunction isNewListNeeded(previousItem, currentItem) {\n  if (previousItem.id !== currentItem.id) {\n    return true;\n  }\n\n  const previousSibling = currentItem.element.previousSibling;\n\n  if (!previousSibling) {\n    return true;\n  } // Even with the same id the list does not have to be continuous (#43).\n\n\n  return !isList(previousSibling);\n}\n\nfunction isList(element) {\n  return element.is('ol') || element.is('ul');\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/normalizers/googledocsnormalizer\n */\nimport removeBoldWrapper from '../filters/removeboldwrapper';\nimport { unwrapParagraphInListItem } from '../filters/list';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\nconst googleDocsMatch = /id=(\"|')docs-internal-guid-[-0-9a-f]+(\"|')/i;\n/**\n * Normalizer for the content pasted from Google Docs.\n *\n * @implements module:paste-from-office/normalizer~Normalizer\n */\n\nexport default class GoogleDocsNormalizer {\n  /**\n   * @inheritDoc\n   */\n  isActive(htmlString) {\n    return googleDocsMatch.test(htmlString);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute(data) {\n    const writer = new UpcastWriter();\n    removeBoldWrapper(data.content, writer);\n    unwrapParagraphInListItem(data.content, writer);\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/removeboldwrapper\n */\n\n/**\n * Removes `<b>` tag wrapper added by Google Docs to a copied content.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment element `data.content` obtained from clipboard\n * @param {module:engine/view/upcastwriter~UpcastWriter} writer\n */\nexport default function removeBoldWrapper(documentFragment, writer) {\n  for (const child of documentFragment.getChildren()) {\n    if (child.is('b') && child.getStyle('font-weight') === 'normal') {\n      const childIndex = documentFragment.getChildIndex(child);\n      writer.remove(child);\n      writer.insertChild(childIndex, child.getChildren(), documentFragment);\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/space\n */\n\n/**\n * Replaces last space preceding elements closing tag with `&nbsp;`. Such operation prevents spaces from being removed\n * during further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n * This method also takes into account Word specific `<o:p></o:p>` empty tags.\n * Additionally multiline sequences of spaces and new lines between tags are removed (see #39 and #40).\n *\n * @param {String} htmlString HTML string in which spacing should be normalized.\n * @returns {String} Input HTML with spaces normalized.\n */\nexport function normalizeSpacing(htmlString) {\n  // Run normalizeSafariSpaceSpans() two times to cover nested spans.\n  return normalizeSafariSpaceSpans(normalizeSafariSpaceSpans(htmlString)) // Remove all \\r\\n from \"spacerun spans\" so the last replace line doesn't strip all whitespaces.\n  .replace(/(<span style=['\"]mso-spacerun:yes['\"]>[\\s]*?)[\\r\\n]+(\\s*<\\/span>)/g, '$1$2').replace(/<span style=['\"]mso-spacerun:yes['\"]><\\/span>/g, '').replace(/ <\\//g, '\\u00A0</').replace(/ <o:p><\\/o:p>/g, '\\u00A0<o:p></o:p>') // Remove <o:p> block filler from empty paragraph. Safari uses \\u00A0 instead of &nbsp;.\n  .replace(/<o:p>(&nbsp;|\\u00A0)<\\/o:p>/g, '') // Remove all whitespaces when they contain any \\r or \\n.\n  .replace(/>(\\s*[\\r\\n]\\s*)</g, '><');\n}\n/**\n * Normalizes spacing in special Word `spacerun spans` (`<span style='mso-spacerun:yes'>\\s+</span>`) by replacing\n * all spaces with `&nbsp; ` pairs. This prevents spaces from being removed during further DOM/View processing\n * (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n *\n * @param {Document} htmlDocument Native `Document` object in which spacing should be normalized.\n */\n\nexport function normalizeSpacerunSpans(htmlDocument) {\n  htmlDocument.querySelectorAll('span[style*=spacerun]').forEach(el => {\n    // Use `el.childNodes[ 0 ].data.length` instead of `el.innerText.length`. For `el.innerText.length` which\n    // contains spaces mixed with `&nbsp;` Edge browser returns incorrect length.\n    const innerTextLength = el.childNodes[0].data.length;\n    el.innerHTML = Array(innerTextLength + 1).join('\\u00A0 ').substr(0, innerTextLength);\n  });\n} // Normalizes specific spacing generated by Safari when content pasted from Word (`<span class=\"Apple-converted-space\"> </span>`)\n// by replacing all spaces sequences longer than 1 space with `&nbsp; ` pairs. This prevents spaces from being removed during\n// further DOM/View processing (see especially {@link module:engine/view/domconverter~DomConverter#_processDataFromDomText}).\n//\n// This function is similar to {@link module:clipboard/utils/normalizeclipboarddata normalizeClipboardData util} but uses\n// regular spaces / &nbsp; sequence for replacement.\n//\n// @param {String} htmlString HTML string in which spacing should be normalized\n// @returns {String} Input HTML with spaces normalized.\n\nfunction normalizeSafariSpaceSpans(htmlString) {\n  return htmlString.replace(/<span(?: class=\"Apple-converted-space\"|)>(\\s+)<\\/span>/g, (fullMatch, spaces) => {\n    return spaces.length === 1 ? ' ' : Array(spaces.length + 1).join('\\u00A0 ').substr(0, spaces.length);\n  });\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/parse\n */\n\n/* globals DOMParser */\nimport DomConverter from '@ckeditor/ckeditor5-engine/src/view/domconverter';\nimport { normalizeSpacing, normalizeSpacerunSpans } from './space';\n/**\n * Parses provided HTML extracting contents of `<body>` and `<style>` tags.\n *\n * @param {String} htmlString HTML string to be parsed.\n * @returns {Object} result\n * @returns {module:engine/view/documentfragment~DocumentFragment} result.body Parsed body\n * content as a traversable structure.\n * @returns {String} result.bodyString Entire body content as a string.\n * @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` objects, each representing\n * separate `style` tag from the source HTML.\n * @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence into one string.\n */\n\nexport function parseHtml(htmlString) {\n  const domParser = new DOMParser(); // Remove Word specific \"if comments\" so content inside is not omitted by the parser.\n\n  htmlString = htmlString.replace(/<!--\\[if gte vml 1]>/g, '');\n  const normalizedHtml = normalizeSpacing(cleanContentAfterBody(htmlString)); // Parse htmlString as native Document object.\n\n  const htmlDocument = domParser.parseFromString(normalizedHtml, 'text/html');\n  normalizeSpacerunSpans(htmlDocument); // Get `innerHTML` first as transforming to View modifies the source document.\n\n  const bodyString = htmlDocument.body.innerHTML; // Transform document.body to View.\n\n  const bodyView = documentToView(htmlDocument); // Extract stylesheets.\n\n  const stylesObject = extractStyles(htmlDocument);\n  return {\n    body: bodyView,\n    bodyString,\n    styles: stylesObject.styles,\n    stylesString: stylesObject.stylesString\n  };\n} // Transforms native `Document` object into {@link module:engine/view/documentfragment~DocumentFragment}.\n//\n// @param {Document} htmlDocument Native `Document` object to be transformed.\n// @returns {module:engine/view/documentfragment~DocumentFragment}\n\nfunction documentToView(htmlDocument) {\n  const domConverter = new DomConverter({\n    blockFillerMode: 'nbsp'\n  });\n  const fragment = htmlDocument.createDocumentFragment();\n  const nodes = htmlDocument.body.childNodes;\n\n  while (nodes.length > 0) {\n    fragment.appendChild(nodes[0]);\n  }\n\n  return domConverter.domToView(fragment);\n} // Extracts both `CSSStyleSheet` and string representation from all `style` elements available in a provided `htmlDocument`.\n//\n// @param {Document} htmlDocument Native `Document` object from which styles will be extracted.\n// @returns {Object} result\n// @returns {Array.<CSSStyleSheet>} result.styles Array of native `CSSStyleSheet` object, each representing\n// separate `style` tag from the source object.\n// @returns {String} result.stylesString All `style` tags contents combined in the order of occurrence as one string.\n\n\nfunction extractStyles(htmlDocument) {\n  const styles = [];\n  const stylesString = [];\n  const styleTags = Array.from(htmlDocument.getElementsByTagName('style'));\n\n  for (const style of styleTags) {\n    if (style.sheet && style.sheet.cssRules && style.sheet.cssRules.length) {\n      styles.push(style.sheet);\n      stylesString.push(style.innerHTML);\n    }\n  }\n\n  return {\n    styles,\n    stylesString: stylesString.join(' ')\n  };\n} // Removes leftover content from between closing </body> and closing </html> tag:\n//\n// \t\t<html><body><p>Foo Bar</p></body><span>Fo</span></html> -> <html><body><p>Foo Bar</p></body></html>\n//\n// This function is used as specific browsers (Edge) add some random content after `body` tag when pasting from Word.\n// @param {String} htmlString The HTML string to be cleaned.\n// @returns {String} The HTML string with leftover content removed.\n\n\nfunction cleanContentAfterBody(htmlString) {\n  const regexp = /<\\/body>(.*?)(<\\/html>|$)/;\n  const match = htmlString.match(regexp);\n\n  if (match && match[1]) {\n    htmlString = htmlString.slice(0, match.index) + htmlString.slice(match.index).replace(match[1], '');\n  }\n\n  return htmlString;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/filters/image\n */\n\n/* globals btoa */\nimport ViewMatcher from '@ckeditor/ckeditor5-engine/src/view/matcher';\nimport UpcastWriter from '@ckeditor/ckeditor5-engine/src/view/upcastwriter';\n/**\n * Replaces source attribute of all `<img>` elements representing regular\n * images (not the Word shapes) with inlined base64 image representation extracted from RTF or Blob data.\n *\n * @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment on which transform images.\n * @param {String} rtfData The RTF data from which images representation will be used.\n */\n\nexport function replaceImagesSourceWithBase64(documentFragment, rtfData) {\n  if (!documentFragment.childCount) {\n    return;\n  }\n\n  const upcastWriter = new UpcastWriter();\n  const shapesIds = findAllShapesIds(documentFragment, upcastWriter);\n  removeAllImgElementsRepresentingShapes(shapesIds, documentFragment, upcastWriter);\n  removeAllShapeElements(documentFragment, upcastWriter);\n  const images = findAllImageElementsWithLocalSource(documentFragment, upcastWriter);\n\n  if (images.length) {\n    replaceImagesFileSourceWithInlineRepresentation(images, extractImageDataFromRtf(rtfData), upcastWriter);\n  }\n}\n/**\n * Converts given HEX string to base64 representation.\n *\n * @protected\n * @param {String} hexString The HEX string to be converted.\n * @returns {String} Base64 representation of a given HEX string.\n */\n\nexport function _convertHexToBase64(hexString) {\n  return btoa(hexString.match(/\\w{2}/g).map(char => {\n    return String.fromCharCode(parseInt(char, 16));\n  }).join(''));\n} // Finds all shapes (`<v:*>...</v:*>`) ids. Shapes can represent images (canvas)\n// or Word shapes (which does not have RTF or Blob representation).\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment\n// from which to extract shape ids.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {Array.<String>} Array of shape ids.\n\nfunction findAllShapesIds(documentFragment, writer) {\n  const range = writer.createRangeIn(documentFragment);\n  const shapeElementsMatcher = new ViewMatcher({\n    name: /v:(.+)/\n  });\n  const shapesIds = [];\n\n  for (const value of range) {\n    const el = value.item;\n    const prevSiblingName = el.previousSibling && el.previousSibling.name || null; // If shape element have 'o:gfxdata' attribute and is not directly before `<v:shapetype>` element it means it represent Word shape.\n\n    if (shapeElementsMatcher.match(el) && el.getAttribute('o:gfxdata') && prevSiblingName !== 'v:shapetype') {\n      shapesIds.push(value.item.getAttribute('id'));\n    }\n  }\n\n  return shapesIds;\n} // Removes all `<img>` elements which represents Word shapes and not regular images.\n//\n// @param {Array.<String>} shapesIds Shape ids which will be checked against `<img>` elements.\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment from which to remove `<img>` elements.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n\n\nfunction removeAllImgElementsRepresentingShapes(shapesIds, documentFragment, writer) {\n  const range = writer.createRangeIn(documentFragment);\n  const imageElementsMatcher = new ViewMatcher({\n    name: 'img'\n  });\n  const imgs = [];\n\n  for (const value of range) {\n    if (imageElementsMatcher.match(value.item)) {\n      const el = value.item;\n      const shapes = el.getAttribute('v:shapes') ? el.getAttribute('v:shapes').split(' ') : [];\n\n      if (shapes.length && shapes.every(shape => shapesIds.indexOf(shape) > -1)) {\n        imgs.push(el); // Shapes may also have empty source while content is paste in some browsers (Safari).\n      } else if (!el.getAttribute('src')) {\n        imgs.push(el);\n      }\n    }\n  }\n\n  for (const img of imgs) {\n    writer.remove(img);\n  }\n} // Removes all shape elements (`<v:*>...</v:*>`) so they do not pollute the output structure.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment from which to remove shape elements.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n\n\nfunction removeAllShapeElements(documentFragment, writer) {\n  const range = writer.createRangeIn(documentFragment);\n  const shapeElementsMatcher = new ViewMatcher({\n    name: /v:(.+)/\n  });\n  const shapes = [];\n\n  for (const value of range) {\n    if (shapeElementsMatcher.match(value.item)) {\n      shapes.push(value.item);\n    }\n  }\n\n  for (const shape of shapes) {\n    writer.remove(shape);\n  }\n} // Finds all `<img>` elements in a given document fragment which have source pointing to local `file://` resource.\n//\n// @param {module:engine/view/documentfragment~DocumentFragment} documentFragment Document fragment in which to look for `<img>` elements.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n// @returns {Object} result All found images grouped by source type.\n// @returns {Array.<module:engine/view/element~Element>} result.file Array of found `<img>` elements with `file://` source.\n// @returns {Array.<module:engine/view/element~Element>} result.blob Array of found `<img>` elements with `blob:` source.\n\n\nfunction findAllImageElementsWithLocalSource(documentFragment, writer) {\n  const range = writer.createRangeIn(documentFragment);\n  const imageElementsMatcher = new ViewMatcher({\n    name: 'img'\n  });\n  const imgs = [];\n\n  for (const value of range) {\n    if (imageElementsMatcher.match(value.item)) {\n      if (value.item.getAttribute('src').startsWith('file://')) {\n        imgs.push(value.item);\n      }\n    }\n  }\n\n  return imgs;\n} // Extracts all images HEX representations from a given RTF data.\n//\n// @param {String} rtfData The RTF data from which to extract images HEX representation.\n// @returns {Array.<Object>} Array of found HEX representations. Each array item is an object containing:\n//\n// \t\t* {String} hex Image representation in HEX format.\n// \t\t* {string} type Type of image, `image/png` or `image/jpeg`.\n\n\nfunction extractImageDataFromRtf(rtfData) {\n  if (!rtfData) {\n    return [];\n  }\n\n  const regexPictureHeader = /{\\\\pict[\\s\\S]+?\\\\bliptag-?\\d+(\\\\blipupi-?\\d+)?({\\\\\\*\\\\blipuid\\s?[\\da-fA-F]+)?[\\s}]*?/;\n  const regexPicture = new RegExp('(?:(' + regexPictureHeader.source + '))([\\\\da-fA-F\\\\s]+)\\\\}', 'g');\n  const images = rtfData.match(regexPicture);\n  const result = [];\n\n  if (images) {\n    for (const image of images) {\n      let imageType = false;\n\n      if (image.includes('\\\\pngblip')) {\n        imageType = 'image/png';\n      } else if (image.includes('\\\\jpegblip')) {\n        imageType = 'image/jpeg';\n      }\n\n      if (imageType) {\n        result.push({\n          hex: image.replace(regexPictureHeader, '').replace(/[^\\da-fA-F]/g, ''),\n          type: imageType\n        });\n      }\n    }\n  }\n\n  return result;\n} // Replaces `src` attribute value of all given images with the corresponding base64 image representation.\n//\n// @param {Array.<module:engine/view/element~Element>} imageElements Array of image elements which will have its source replaced.\n// @param {Array.<Object>} imagesHexSources Array of images hex sources (usually the result of `extractImageDataFromRtf()` function).\n// The array should be the same length as `imageElements` parameter.\n// @param {module:engine/view/upcastwriter~UpcastWriter} writer\n\n\nfunction replaceImagesFileSourceWithInlineRepresentation(imageElements, imagesHexSources, writer) {\n  // Assume there is an equal amount of image elements and images HEX sources so they can be matched accordingly based on existing order.\n  if (imageElements.length === imagesHexSources.length) {\n    for (let i = 0; i < imageElements.length; i++) {\n      const newSrc = `data:${imagesHexSources[i].type};base64,${_convertHexToBase64(imagesHexSources[i].hex)}`;\n      writer.setAttribute('src', newSrc, imageElements[i]);\n    }\n  }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/normalizers/mswordnormalizer\n */\nimport { parseHtml } from '../filters/parse';\nimport { transformListItemLikeElementsIntoLists } from '../filters/list';\nimport { replaceImagesSourceWithBase64 } from '../filters/image';\nconst msWordMatch1 = /<meta\\s*name=\"?generator\"?\\s*content=\"?microsoft\\s*word\\s*\\d+\"?\\/?>/i;\nconst msWordMatch2 = /xmlns:o=\"urn:schemas-microsoft-com/i;\n/**\n * Normalizer for the content pasted from Microsoft Word.\n *\n * @implements module:paste-from-office/normalizer~Normalizer\n */\n\nexport default class MSWordNormalizer {\n  /**\n   * @inheritDoc\n   */\n  isActive(htmlString) {\n    return msWordMatch1.test(htmlString) || msWordMatch2.test(htmlString);\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute(data) {\n    const {\n      body,\n      stylesString\n    } = parseHtml(data.dataTransfer.getData('text/html'));\n    transformListItemLikeElementsIntoLists(body, stylesString);\n    replaceImagesSourceWithBase64(body, data.dataTransfer.getData('text/rtf'));\n    data.content = body;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/utils\n */\n\n/**\n * Returns the parent element of given name. Returns undefined if position is not inside desired parent.\n *\n * @param {String} parentName Name of parent element to find.\n * @param {module:engine/model/position~Position|module:engine/model/position~Position} position Position to start searching.\n * @returns {module:engine/model/element~Element|module:engine/model/documentfragment~DocumentFragment}\n */\nexport function findAncestor(parentName, position) {\n  let parent = position.parent;\n\n  while (parent) {\n    if (parent.name === parentName) {\n      return parent;\n    }\n\n    parent = parent.parent;\n  }\n}\n/**\n * A common method to update the numeric value. If a value is the default one, it will be unset.\n *\n * @param {String} key Attribute key.\n * @param {*} value The new attribute value.\n * @param {module:engine/model/item~Item} item Model item on which the attribute will be set.\n * @param {module:engine/model/writer~Writer} writer\n * @param {*} defaultValue Default attribute value. If a value is lower or equal, it will be unset.\n */\n\nexport function updateNumericAttribute(key, value, item, writer, defaultValue = 1) {\n  if (value > defaultValue) {\n    writer.setAttribute(key, value, item);\n  } else {\n    writer.removeAttribute(key, item);\n  }\n}\n/**\n * Common method to create empty table cell - it will create proper model structure as table cell must have at least one block inside.\n *\n * @param {module:engine/model/writer~Writer} writer Model writer.\n * @param {module:engine/model/position~Position} insertPosition Position at which table cell should be inserted.\n * @param {Object} attributes Element's attributes.\n */\n\nexport function createEmptyTableCell(writer, insertPosition, attributes = {}) {\n  const tableCell = writer.createElement('tableCell', attributes);\n  writer.insertElement('paragraph', tableCell);\n  writer.insert(tableCell, insertPosition);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/upcasttable\n */\nimport { createEmptyTableCell } from '../commands/utils';\n/**\n * View table element to model table element conversion helper.\n *\n * This conversion helper converts the table element as well as table rows.\n *\n * @returns {Function} Conversion helper.\n */\n\nexport default function upcastTable() {\n  return dispatcher => {\n    dispatcher.on('element:table', (evt, data, conversionApi) => {\n      const viewTable = data.viewItem; // When element was already consumed then skip it.\n\n      if (!conversionApi.consumable.test(viewTable, {\n        name: true\n      })) {\n        return;\n      }\n\n      const {\n        rows,\n        headingRows,\n        headingColumns\n      } = scanTable(viewTable); // Only set attributes if values is greater then 0.\n\n      const attributes = {};\n\n      if (headingColumns) {\n        attributes.headingColumns = headingColumns;\n      }\n\n      if (headingRows) {\n        attributes.headingRows = headingRows;\n      }\n\n      const table = conversionApi.writer.createElement('table', attributes); // Insert element on allowed position.\n\n      const splitResult = conversionApi.splitToAllowedParent(table, data.modelCursor); // When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\n      if (!splitResult) {\n        return;\n      }\n\n      conversionApi.writer.insert(table, splitResult.position);\n      conversionApi.consumable.consume(viewTable, {\n        name: true\n      });\n\n      if (rows.length) {\n        // Upcast table rows in proper order (heading rows first).\n        rows.forEach(row => conversionApi.convertItem(row, conversionApi.writer.createPositionAt(table, 'end')));\n      } else {\n        // Create one row and one table cell for empty table.\n        const row = conversionApi.writer.createElement('tableRow');\n        conversionApi.writer.insert(row, conversionApi.writer.createPositionAt(table, 'end'));\n        createEmptyTableCell(conversionApi.writer, conversionApi.writer.createPositionAt(row, 'end'));\n      } // Set conversion result range.\n\n\n      data.modelRange = conversionApi.writer.createRange( // Range should start before inserted element\n      conversionApi.writer.createPositionBefore(table), // Should end after but we need to take into consideration that children could split our\n      // element, so we need to move range after parent of the last converted child.\n      // before: <allowed>[]</allowed>\n      // after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n      conversionApi.writer.createPositionAfter(table)); // Now we need to check where the modelCursor should be.\n      // If we had to split parent to insert our element then we want to continue conversion inside split parent.\n      //\n      // before: <allowed><notAllowed>[]</notAllowed></allowed>\n      // after:  <allowed><notAllowed></notAllowed><converted></converted><notAllowed>[]</notAllowed></allowed>\n\n      if (splitResult.cursorParent) {\n        data.modelCursor = conversionApi.writer.createPositionAt(splitResult.cursorParent, 0); // Otherwise just continue after inserted element.\n      } else {\n        data.modelCursor = data.modelRange.end;\n      }\n    });\n  };\n}\nexport function upcastTableCell(elementName) {\n  return dispatcher => {\n    dispatcher.on(`element:${elementName}`, (evt, data, conversionApi) => {\n      const viewTableCell = data.viewItem; // When element was already consumed then skip it.\n\n      if (!conversionApi.consumable.test(viewTableCell, {\n        name: true\n      })) {\n        return;\n      }\n\n      const tableCell = conversionApi.writer.createElement('tableCell'); // Insert element on allowed position.\n\n      const splitResult = conversionApi.splitToAllowedParent(tableCell, data.modelCursor); // When there is no split result it means that we can't insert element to model tree, so let's skip it.\n\n      if (!splitResult) {\n        return;\n      }\n\n      conversionApi.writer.insert(tableCell, splitResult.position);\n      conversionApi.consumable.consume(viewTableCell, {\n        name: true\n      });\n      const modelCursor = conversionApi.writer.createPositionAt(tableCell, 0);\n      conversionApi.convertChildren(viewTableCell, modelCursor); // Ensure a paragraph in the model for empty table cells.\n\n      if (!tableCell.childCount) {\n        conversionApi.writer.insertElement('paragraph', modelCursor);\n      } // Set conversion result range.\n\n\n      data.modelRange = conversionApi.writer.createRange( // Range should start before inserted element\n      conversionApi.writer.createPositionBefore(tableCell), // Should end after but we need to take into consideration that children could split our\n      // element, so we need to move range after parent of the last converted child.\n      // before: <allowed>[]</allowed>\n      // after: <allowed>[<converted><child></child></converted><child></child><converted>]</converted></allowed>\n      conversionApi.writer.createPositionAfter(tableCell)); // Continue after inserted element.\n\n      data.modelCursor = data.modelRange.end;\n    });\n  };\n} // Scans table rows and extracts required metadata from the table:\n//\n// headingRows    - the number of rows that goes as table header.\n// headingColumns - max number of row headings.\n// rows           - sorted `<tr>`s as they should go into the model - ie. if `<thead>` is inserted after `<tbody>` in the view.\n//\n// @param {module:engine/view/element~Element} viewTable\n// @returns {{headingRows, headingColumns, rows}}\n\nfunction scanTable(viewTable) {\n  const tableMeta = {\n    headingRows: 0,\n    headingColumns: 0\n  }; // The `<tbody>` and <thead> sections in the DOM do not have to be in order `<thead>` -> `<tbody>` and there might be more then one of\n  // them.\n  // As the model does not have those sections, rows from different sections must be sorted.\n  // For example, below is a valid HTML table:\n  //\n  //\t\t<table>\n  //\t\t\t<tbody><tr><td>2</td></tr></tbody>\n  //\t\t\t<thead><tr><td>1</td></tr></thead>\n  //\t\t\t<tbody><tr><td>3</td></tr></tbody>\n  //\t\t</table>\n  //\n  // But browsers will render rows in order as: 1 as heading and 2 and 3 as (body).\n\n  const headRows = [];\n  const bodyRows = []; // Currently the editor does not support more then one <thead> section.\n  // Only the first <thead> from the view will be used as heading rows and others will be converted to body rows.\n\n  let firstTheadElement;\n\n  for (const tableChild of Array.from(viewTable.getChildren())) {\n    // Only <thead>, <tbody> & <tfoot> from allowed table children can have <tr>s.\n    // The else is for future purposes (mainly <caption>).\n    if (tableChild.name === 'tbody' || tableChild.name === 'thead' || tableChild.name === 'tfoot') {\n      // Save the first <thead> in the table as table header - all other ones will be converted to table body rows.\n      if (tableChild.name === 'thead' && !firstTheadElement) {\n        firstTheadElement = tableChild;\n      } // There might be some extra empty text nodes between the `tr`s.\n      // Make sure further code operates on `tr`s only. (#145)\n\n\n      const trs = Array.from(tableChild.getChildren()).filter(el => el.is('element', 'tr'));\n\n      for (const tr of trs) {\n        // This <tr> is a child of a first <thead> element.\n        if (tr.parent.name === 'thead' && tr.parent === firstTheadElement) {\n          tableMeta.headingRows++;\n          headRows.push(tr);\n        } else {\n          bodyRows.push(tr); // For other rows check how many column headings this row has.\n\n          const headingCols = scanRowForHeadingColumns(tr, tableMeta, firstTheadElement);\n\n          if (headingCols > tableMeta.headingColumns) {\n            tableMeta.headingColumns = headingCols;\n          }\n        }\n      }\n    }\n  }\n\n  tableMeta.rows = [...headRows, ...bodyRows];\n  return tableMeta;\n} // Scans `<tr>` and its children for metadata:\n// - For heading row:\n//     - either adds this row to heading or body rows.\n//     - updates number of heading rows.\n// - For body rows:\n//     - calculates the number of column headings.\n//\n// @param {module:engine/view/element~Element} tr\n// @returns {Number}\n\n\nfunction scanRowForHeadingColumns(tr) {\n  let headingColumns = 0;\n  let index = 0; // Filter out empty text nodes from tr children.\n\n  const children = Array.from(tr.getChildren()).filter(child => child.name === 'th' || child.name === 'td'); // Count starting adjacent <th> elements of a <tr>.\n\n  while (index < children.length && children[index].name === 'th') {\n    const th = children[index]; // Adjust columns calculation by the number of spanned columns.\n\n    const colspan = parseInt(th.getAttribute('colspan') || 1);\n    headingColumns = headingColumns + colspan;\n    index++;\n  }\n\n  return headingColumns;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tablewalker\n */\n\n/**\n * Table iterator class. It allows to iterate over table cells. For each cell the iterator yields\n * {@link module:table/tablewalker~TableWalkerValue} with proper table cell attributes.\n */\nexport default class TableWalker {\n  /**\n   * Creates an instance of the table walker.\n   *\n   * The table walker iterates internally by traversing the table from row index = 0 and column index = 0.\n   * It walks row by row and column by column in order to output values defined in the constructor.\n   * By default it will output only those locations that are occupied by a cell. To include also spanned rows and columns,\n   * pass the `includeSpanned` option to the constructor.\n   *\n   * The most important values of the iterator are column and row indexes of a cell.\n   *\n   * See {@link module:table/tablewalker~TableWalkerValue} what values are returned by the table walker.\n   *\n   * To iterate over a given row:\n   *\n   *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 2 } );\n   *\n   *\t\tfor ( const cellInfo of tableWalker ) {\n   *\t\t\tconsole.log( 'A cell at row ' + cellInfo.row + ' and column ' + cellInfo.column );\n   *\t\t}\n   *\n   * For instance the code above for the following table:\n   *\n   *\t\t+----+----+----+----+----+----+\n   *\t\t| 00      | 02 | 03 | 04 | 05 |\n   *\t\t|         +----+----+----+----+\n   *\t\t|         | 12      | 14 | 15 |\n   *\t\t|         +----+----+----+    +\n   *\t\t|         | 22           |    |\n   *\t\t|----+----+----+----+----+    +\n   *\t\t| 30 | 31 | 32 | 33 | 34 |    |\n   *\t\t+----+----+----+----+----+----+\n   *\n   * will log in the console:\n   *\n   *\t\t'A cell at row 1 and column 2'\n   *\t\t'A cell at row 1 and column 4'\n   *\t\t'A cell at row 1 and column 5'\n   *\t\t'A cell at row 2 and column 2'\n   *\n   * To also iterate over spanned cells:\n   *\n   *\t\tconst tableWalker = new TableWalker( table, { startRow: 1, endRow: 1, includeSpanned: true } );\n   *\n   *\t\tfor ( const value of tableWalker ) {\n   *\t\t\tconsole.log( 'Cell at ' + value.row + ' x ' + value.column + ' : ' + ( value.isSpanned ? 'is spanned' : 'has data' ) );\n   *\t\t}\n   *\n   * will log in the console for the table from previous example:\n   *\n   *\t\t'Cell at 1 x 0 : is spanned'\n   *\t\t'Cell at 1 x 1 : is spanned'\n   *\t\t'Cell at 1 x 2 : has data'\n   *\t\t'Cell at 1 x 3 : is spanned'\n   *\t\t'Cell at 1 x 4 : has data'\n   *\t\t'Cell at 1 x 5 : has data'\n   *\n   * @constructor\n   * @param {module:engine/model/element~Element} table A table over which the walker iterates.\n   * @param {Object} [options={}] An object with configuration.\n   * @param {Number} [options.column] A column index for which this iterator will output cells.\n   * @param {Number} [options.startRow=0] A row index for which this iterator should start.\n   * @param {Number} [options.endRow] A row index for which this iterator should end.\n   * @param {Boolean} [options.includeSpanned=false] Also return values for spanned cells.\n   */\n  constructor(table, options = {}) {\n    /**\n     * The walker's table element.\n     *\n     * @readonly\n     * @member {module:engine/model/element~Element}\n     */\n    this.table = table;\n    /**\n     * A row index on which this iterator will start.\n     *\n     * @readonly\n     * @member {Number}\n     */\n\n    this.startRow = options.startRow || 0;\n    /**\n     * A row index on which this iterator will end.\n     *\n     * @readonly\n     * @member {Number}\n     */\n\n    this.endRow = typeof options.endRow == 'number' ? options.endRow : undefined;\n    /**\n     * Enables output of spanned cells that are normally not yielded.\n     *\n     * @readonly\n     * @member {Boolean}\n     */\n\n    this.includeSpanned = !!options.includeSpanned;\n    /**\n     * If set, the table walker will only output cells of a given column or cells that overlap it.\n     *\n     * @readonly\n     * @member {Number}\n     */\n\n    this.column = typeof options.column == 'number' ? options.column : undefined;\n    /**\n     * Row indexes to skip from the iteration.\n     *\n     * @readonly\n     * @member {Set<Number>}\n     * @private\n     */\n\n    this._skipRows = new Set();\n    /**\n     * The current row index.\n     *\n     * @readonly\n     * @member {Number}\n     * @private\n     */\n\n    this._row = 0;\n    /**\n     * The current column index.\n     *\n     * @readonly\n     * @member {Number}\n     * @private\n     */\n\n    this._column = 0;\n    /**\n     * The cell index in a parent row. For spanned cells when {@link #includeSpanned} is set to `true`,\n     * this represents the index of the next table cell.\n     *\n     * @readonly\n     * @member {Number}\n     * @private\n     */\n\n    this._cellIndex = 0;\n    /**\n     * Holds a map of spanned cells in a table.\n     *\n     * @readonly\n     * @member {Map<Number, Map.<Number, module:engine/model/element~Element>>}\n     * @private\n     */\n\n    this._spannedCells = new Map();\n    this._nextCellAtColumn = -1;\n  }\n  /**\n   * Iterable interface.\n   *\n   * @returns {Iterable.<module:table/tablewalker~TableWalkerValue>}\n   */\n\n\n  [Symbol.iterator]() {\n    return this;\n  }\n  /**\n   * Gets the next table walker's value.\n   *\n   * @returns {module:table/tablewalker~TableWalkerValue} The next table walker's value.\n   */\n\n\n  next() {\n    const row = this.table.getChild(this._row); // Iterator is done when there's no row (table ended) or the row is after `endRow` limit.\n\n    if (!row || this._isOverEndRow()) {\n      return {\n        done: true\n      };\n    }\n\n    let cell, skipCurrentValue, outValue;\n\n    if (this._isSpanned(this._row, this._column)) {\n      cell = this._getSpanned(this._row, this._column);\n      skipCurrentValue = !this.includeSpanned || this._shouldSkipRow() || this._shouldSkipColumn();\n      outValue = this._formatOutValue(cell, this._column, true);\n    } else {\n      cell = row.getChild(this._cellIndex);\n\n      if (!cell) {\n        // If there are no more cells left in row advance to the next row.\n        this._row++;\n        this._column = 0;\n        this._cellIndex = 0;\n        this._nextCellAtColumn = -1;\n        return this.next();\n      }\n\n      const colspan = parseInt(cell.getAttribute('colspan') || 1);\n      const rowspan = parseInt(cell.getAttribute('rowspan') || 1); // Record this cell spans if it's not 1x1 cell.\n\n      if (colspan > 1 || rowspan > 1) {\n        this._recordSpans(this._row, this._column, rowspan, colspan, cell);\n      }\n\n      this._nextCellAtColumn = this._column + colspan;\n      skipCurrentValue = this._shouldSkipRow() || this._shouldSkipColumn();\n      outValue = this._formatOutValue(cell, this._column, false, rowspan, colspan);\n    } // Advance to the next column before returning value.\n\n\n    this._column++;\n\n    if (this._column == this._nextCellAtColumn) {\n      this._cellIndex++;\n    } // The current value will be returned only if current row and column are not skipped.\n\n\n    return skipCurrentValue ? this.next() : outValue;\n  }\n  /**\n   * Marks a row to skip in the next iteration. It will also skip cells from the current row if there are any cells from the current row\n   * to output.\n   *\n   * @param {Number} row Row index to skip.\n   */\n\n\n  skipRow(row) {\n    this._skipRows.add(row);\n  }\n  /**\n   * Checks if the current row is over {@link #endRow}.\n   *\n   * @private\n   * @returns {Boolean}\n   */\n\n\n  _isOverEndRow() {\n    // If {@link #endRow) is defined skip all rows above it.\n    return this.endRow !== undefined && this._row > this.endRow;\n  }\n  /**\n   * A common method for formatting the iterator's output value.\n   *\n   * @private\n   * @param {module:engine/model/element~Element} cell The table cell to output.\n   * @param {Number} column Column index (use the cached value).\n   * @param {Boolean} isSpanned Whether the value is returned for a spanned cell location or actual cell.\n   * @param {Number} rowspan Rowspan of the current cell.\n   * @param {Number} colspan Colspan of the current cell.\n   * @returns {{done: boolean, value: {cell: *, row: Number, column: *, rowspan: *, colspan: *, cellIndex: Number}}}\n   */\n\n\n  _formatOutValue(cell, column, isSpanned, rowspan = 1, colspan = 1) {\n    return {\n      done: false,\n      value: {\n        cell,\n        row: this._row,\n        column,\n        isSpanned,\n        rowspan,\n        colspan,\n        cellIndex: this._cellIndex\n      }\n    };\n  }\n  /**\n   * Checks if the current row should be skipped.\n   *\n   * @private\n   * @returns {Boolean}\n   */\n\n\n  _shouldSkipRow() {\n    const rowIsBelowStartRow = this._row < this.startRow;\n\n    const rowIsMarkedAsSkipped = this._skipRows.has(this._row);\n\n    return rowIsBelowStartRow || rowIsMarkedAsSkipped;\n  }\n  /**\n   * Checks if the current column should be skipped.\n   *\n   * @private\n   * @returns {Boolean}\n   */\n\n\n  _shouldSkipColumn() {\n    if (this.column === undefined) {\n      // The {@link #column} is not defined so output all columns.\n      return false;\n    }\n\n    return this.column != this._column;\n  }\n  /**\n   * Checks if the current cell location (row x column) is spanned by another cell.\n   *\n   * @private\n   * @param {Number} row Row index of a cell location to check.\n   * @param {Number} column Column index of a cell location to check.\n   * @returns {Boolean}\n   */\n\n\n  _isSpanned(row, column) {\n    if (!this._spannedCells.has(row)) {\n      // No spans for given row.\n      return false;\n    }\n\n    const rowSpans = this._spannedCells.get(row); // If spans for given rows has entry for column it means that this location if spanned by other cell.\n\n\n    return rowSpans.has(column);\n  }\n  /**\n   * Returns the cell element that is spanned over `row` x `column` location.\n   *\n   * @private\n   * @param {Number} row Row index of the cell location.\n   * @param {Number} column Column index of the cell location.\n   * @returns {module:engine/model/element~Element}\n   */\n\n\n  _getSpanned(row, column) {\n    return this._spannedCells.get(row).get(column);\n  }\n  /**\n   * Updates spanned cells map relative to the current cell location and its span dimensions.\n   *\n   * @private\n   * @param {Number} row Row index of a cell.\n   * @param {Number} column Column index of a cell.\n   * @param {Number} rowspan Cell height.\n   * @param {Number} colspan Cell width.\n   * @param {module:engine/model/element~Element} cell Cell that is spanned.\n   */\n\n\n  _recordSpans(row, column, rowspan, colspan, cell) {\n    // This will update all cell locations after current column - ie a cell has colspan set.\n    for (let columnToUpdate = column + 1; columnToUpdate <= column + colspan - 1; columnToUpdate++) {\n      this._markSpannedCell(row, columnToUpdate, cell);\n    } // This will update all rows below current up to row's height.\n\n\n    for (let rowToUpdate = row + 1; rowToUpdate < row + rowspan; rowToUpdate++) {\n      for (let columnToUpdate = column; columnToUpdate <= column + colspan - 1; columnToUpdate++) {\n        this._markSpannedCell(rowToUpdate, columnToUpdate, cell);\n      }\n    }\n  }\n  /**\n   * Marks the cell location as spanned by another cell.\n   *\n   * @private\n   * @param {Number} row Row index of the cell location.\n   * @param {Number} column Column index of the cell location.\n   * @param {module:engine/model/element~Element} cell Cell that is spanned.\n   */\n\n\n  _markSpannedCell(row, column, cell) {\n    if (!this._spannedCells.has(row)) {\n      this._spannedCells.set(row, new Map());\n    }\n\n    const rowSpans = this._spannedCells.get(row);\n\n    rowSpans.set(column, cell);\n  }\n\n}\n/**\n * An object returned by {@link module:table/tablewalker~TableWalker} when traversing table cells.\n *\n * @typedef {Object} module:table/tablewalker~TableWalkerValue\n * @property {module:engine/model/element~Element} cell The current table cell.\n * @property {Number} row The row index of a cell.\n * @property {Number} column The column index of a cell. Column index is adjusted to widths and heights of previous cells.\n * @param {Boolean} isSpanned Whether the value is returned for a spanned cell location or actual cell.\n * @property {Number} colspan The `colspan` attribute of a cell. It the model attribute is not present, it is set to `1`. For spanned\n * table locations, it is set to `1`.\n * @property {Number} rowspan The `rowspan` attribute of a cell. It the model attribute is not present, it is set to `1`. For spanned\n * table locations, it is set to `1`.\n * @property {Number} cellIndex The index of the current cell in a parent row.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/utils\n */\nimport { isWidget, toWidget } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { findAncestor } from './commands/utils';\n/**\n * Converts a given {@link module:engine/view/element~Element} to a table widget:\n * * Adds a {@link module:engine/view/element~Element#_setCustomProperty custom property} allowing to recognize the table widget element.\n * * Calls the {@link module:widget/utils~toWidget} function with the proper element's label creator.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @param {module:engine/view/downcastwriter~DowncastWriter} writer An instance of the view writer.\n * @param {String} label The element's label. It will be concatenated with the table `alt` attribute if one is present.\n * @returns {module:engine/view/element~Element}\n */\n\nexport function toTableWidget(viewElement, writer) {\n  writer.setCustomProperty('table', true, viewElement);\n  return toWidget(viewElement, writer, {\n    hasSelectionHandle: true\n  });\n}\n/**\n * Checks if a given view element is a table widget.\n *\n * @param {module:engine/view/element~Element} viewElement\n * @returns {Boolean}\n */\n\nexport function isTableWidget(viewElement) {\n  return !!viewElement.getCustomProperty('table') && isWidget(viewElement);\n}\n/**\n * Returns a table widget editing view element if one is selected.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getSelectedTableWidget(selection) {\n  const viewElement = selection.getSelectedElement();\n\n  if (viewElement && isTableWidget(viewElement)) {\n    return viewElement;\n  }\n\n  return null;\n}\n/**\n * Returns a table widget editing view element if one is among selection's ancestors.\n *\n * @param {module:engine/view/selection~Selection|module:engine/view/documentselection~DocumentSelection} selection\n * @returns {module:engine/view/element~Element|null}\n */\n\nexport function getTableWidgetAncestor(selection) {\n  const parentTable = findAncestor('table', selection.getFirstPosition());\n\n  if (parentTable && isTableWidget(parentTable.parent)) {\n    return parentTable.parent;\n  }\n\n  return null;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/downcast\n */\nimport TableWalker from './../tablewalker';\nimport { toWidgetEditable } from '@ckeditor/ckeditor5-widget/src/utils';\nimport { toTableWidget } from '../utils';\n/**\n * Model table element to view table element conversion helper.\n *\n * This conversion helper creates the whole table element with child elements.\n *\n * @param {Object} options\n * @param {Boolean} options.asWidget If set to `true`, the downcast conversion will produce a widget.\n * @returns {Function} Conversion helper.\n */\n\nexport function downcastInsertTable(options = {}) {\n  return dispatcher => dispatcher.on('insert:table', (evt, data, conversionApi) => {\n    const table = data.item;\n\n    if (!conversionApi.consumable.consume(table, 'insert')) {\n      return;\n    } // Consume attributes if present to not fire attribute change downcast\n\n\n    conversionApi.consumable.consume(table, 'attribute:headingRows:table');\n    conversionApi.consumable.consume(table, 'attribute:headingColumns:table');\n    const asWidget = options && options.asWidget;\n    const figureElement = conversionApi.writer.createContainerElement('figure', {\n      class: 'table'\n    });\n    const tableElement = conversionApi.writer.createContainerElement('table');\n    conversionApi.writer.insert(conversionApi.writer.createPositionAt(figureElement, 0), tableElement);\n    let tableWidget;\n\n    if (asWidget) {\n      tableWidget = toTableWidget(figureElement, conversionApi.writer);\n    }\n\n    const tableWalker = new TableWalker(table);\n    const tableAttributes = {\n      headingRows: table.getAttribute('headingRows') || 0,\n      headingColumns: table.getAttribute('headingColumns') || 0\n    }; // Cache for created table rows.\n\n    const viewRows = new Map();\n\n    for (const tableWalkerValue of tableWalker) {\n      const {\n        row,\n        cell\n      } = tableWalkerValue;\n      const tableSection = getOrCreateTableSection(getSectionName(row, tableAttributes), tableElement, conversionApi);\n      const tableRow = table.getChild(row);\n      const trElement = viewRows.get(row) || createTr(tableRow, row, tableSection, conversionApi);\n      viewRows.set(row, trElement); // Consume table cell - it will be always consumed as we convert whole table at once.\n\n      conversionApi.consumable.consume(cell, 'insert');\n      const insertPosition = conversionApi.writer.createPositionAt(trElement, 'end');\n      createViewTableCellElement(tableWalkerValue, tableAttributes, insertPosition, conversionApi, options);\n    }\n\n    const viewPosition = conversionApi.mapper.toViewPosition(data.range.start);\n    conversionApi.mapper.bindElements(table, asWidget ? tableWidget : figureElement);\n    conversionApi.writer.insert(viewPosition, asWidget ? tableWidget : figureElement);\n  });\n}\n/**\n * Model row element to view `<tr>` element conversion helper.\n *\n * This conversion helper creates the whole `<tr>` element with child elements.\n *\n * @returns {Function} Conversion helper.\n */\n\nexport function downcastInsertRow(options = {}) {\n  return dispatcher => dispatcher.on('insert:tableRow', (evt, data, conversionApi) => {\n    const tableRow = data.item;\n\n    if (!conversionApi.consumable.consume(tableRow, 'insert')) {\n      return;\n    }\n\n    const table = tableRow.parent;\n    const figureElement = conversionApi.mapper.toViewElement(table);\n    const tableElement = getViewTable(figureElement);\n    const row = table.getChildIndex(tableRow);\n    const tableWalker = new TableWalker(table, {\n      startRow: row,\n      endRow: row\n    });\n    const tableAttributes = {\n      headingRows: table.getAttribute('headingRows') || 0,\n      headingColumns: table.getAttribute('headingColumns') || 0\n    }; // Cache for created table rows.\n\n    const viewRows = new Map();\n\n    for (const tableWalkerValue of tableWalker) {\n      const tableSection = getOrCreateTableSection(getSectionName(row, tableAttributes), tableElement, conversionApi);\n      const trElement = viewRows.get(row) || createTr(tableRow, row, tableSection, conversionApi);\n      viewRows.set(row, trElement); // Consume table cell - it will be always consumed as we convert whole row at once.\n\n      conversionApi.consumable.consume(tableWalkerValue.cell, 'insert');\n      const insertPosition = conversionApi.writer.createPositionAt(trElement, 'end');\n      createViewTableCellElement(tableWalkerValue, tableAttributes, insertPosition, conversionApi, options);\n    }\n  });\n}\n/**\n * Model table cell element to view `<td>` or `<th>` element conversion helper.\n *\n * This conversion helper will create proper `<th>` elements for table cells that are in the heading section (heading row or column)\n * and `<td>` otherwise.\n *\n * @returns {Function} Conversion helper.\n */\n\nexport function downcastInsertCell(options = {}) {\n  return dispatcher => dispatcher.on('insert:tableCell', (evt, data, conversionApi) => {\n    const tableCell = data.item;\n\n    if (!conversionApi.consumable.consume(tableCell, 'insert')) {\n      return;\n    }\n\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = table.getChildIndex(tableRow);\n    const tableWalker = new TableWalker(table, {\n      startRow: rowIndex,\n      endRow: rowIndex\n    });\n    const tableAttributes = {\n      headingRows: table.getAttribute('headingRows') || 0,\n      headingColumns: table.getAttribute('headingColumns') || 0\n    }; // We need to iterate over a table in order to get proper row & column values from a walker\n\n    for (const tableWalkerValue of tableWalker) {\n      if (tableWalkerValue.cell === tableCell) {\n        const trElement = conversionApi.mapper.toViewElement(tableRow);\n        const insertPosition = conversionApi.writer.createPositionAt(trElement, tableRow.getChildIndex(tableCell));\n        createViewTableCellElement(tableWalkerValue, tableAttributes, insertPosition, conversionApi, options); // No need to iterate further.\n\n        return;\n      }\n    }\n  });\n}\n/**\n * Conversion helper that acts on heading rows table attribute change.\n *\n * This converter will:\n *\n * * Rename `<td>` to `<th>` elements or vice versa depending on headings.\n * * Create `<thead>` or `<tbody>` elements if needed.\n * * Remove empty `<thead>` or `<tbody>` if needed.\n *\n * @returns {Function} Conversion helper.\n */\n\nexport function downcastTableHeadingRowsChange(options = {}) {\n  const asWidget = !!options.asWidget;\n  return dispatcher => dispatcher.on('attribute:headingRows:table', (evt, data, conversionApi) => {\n    const table = data.item;\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const figureElement = conversionApi.mapper.toViewElement(table);\n    const viewTable = getViewTable(figureElement);\n    const oldRows = data.attributeOldValue;\n    const newRows = data.attributeNewValue; // The head section has grown so move rows from <tbody> to <thead>.\n\n    if (newRows > oldRows) {\n      // Filter out only those rows that are in wrong section.\n      const rowsToMove = Array.from(table.getChildren()).filter(({\n        index\n      }) => isBetween(index, oldRows - 1, newRows));\n      const viewTableHead = getOrCreateTableSection('thead', viewTable, conversionApi);\n      moveViewRowsToTableSection(rowsToMove, viewTableHead, conversionApi, 'end'); // Rename all table cells from moved rows to 'th' as they lands in <thead>.\n\n      for (const tableRow of rowsToMove) {\n        for (const tableCell of tableRow.getChildren()) {\n          renameViewTableCell(tableCell, 'th', conversionApi, asWidget);\n        }\n      } // Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\n\n      removeTableSectionIfEmpty('tbody', viewTable, conversionApi);\n    } // The head section has shrunk so move rows from <thead> to <tbody>.\n    else {\n        // Filter out only those rows that are in wrong section.\n        const rowsToMove = Array.from(table.getChildren()).filter(({\n          index\n        }) => isBetween(index, newRows - 1, oldRows)).reverse(); // The rows will be moved from <thead> to <tbody> in reverse order at the beginning of a <tbody>.\n\n        const viewTableBody = getOrCreateTableSection('tbody', viewTable, conversionApi);\n        moveViewRowsToTableSection(rowsToMove, viewTableBody, conversionApi, 0); // Check if cells moved from <thead> to <tbody> requires renaming to <td> as this depends on current heading columns attribute.\n\n        const tableWalker = new TableWalker(table, {\n          startRow: newRows ? newRows - 1 : newRows,\n          endRow: oldRows - 1\n        });\n        const tableAttributes = {\n          headingRows: table.getAttribute('headingRows') || 0,\n          headingColumns: table.getAttribute('headingColumns') || 0\n        };\n\n        for (const tableWalkerValue of tableWalker) {\n          renameViewTableCellIfRequired(tableWalkerValue, tableAttributes, conversionApi, asWidget);\n        } // Cleanup: this will remove any empty section from the view which may happen when moving all rows from a table section.\n\n\n        removeTableSectionIfEmpty('thead', viewTable, conversionApi);\n      }\n\n    function isBetween(index, lower, upper) {\n      return index > lower && index < upper;\n    }\n  });\n}\n/**\n * Conversion helper that acts on heading columns table attribute change.\n *\n * Depending on changed attributes this converter will rename `<td` to `<th>` elements or vice versa depending of the cell column index.\n *\n * @returns {Function} Conversion helper.\n */\n\nexport function downcastTableHeadingColumnsChange(options = {}) {\n  const asWidget = !!options.asWidget;\n  return dispatcher => dispatcher.on('attribute:headingColumns:table', (evt, data, conversionApi) => {\n    const table = data.item;\n\n    if (!conversionApi.consumable.consume(data.item, evt.name)) {\n      return;\n    }\n\n    const tableAttributes = {\n      headingRows: table.getAttribute('headingRows') || 0,\n      headingColumns: table.getAttribute('headingColumns') || 0\n    };\n    const oldColumns = data.attributeOldValue;\n    const newColumns = data.attributeNewValue;\n    const lastColumnToCheck = (oldColumns > newColumns ? oldColumns : newColumns) - 1;\n\n    for (const tableWalkerValue of new TableWalker(table)) {\n      // Skip cells that were not in heading section before and after the change.\n      if (tableWalkerValue.column > lastColumnToCheck) {\n        continue;\n      }\n\n      renameViewTableCellIfRequired(tableWalkerValue, tableAttributes, conversionApi, asWidget);\n    }\n  });\n}\n/**\n * Conversion helper that acts on a removed row.\n *\n * @returns {Function} Conversion helper.\n */\n\nexport function downcastRemoveRow() {\n  return dispatcher => dispatcher.on('remove:tableRow', (evt, data, conversionApi) => {\n    // Prevent default remove converter.\n    evt.stop();\n    const viewWriter = conversionApi.writer;\n    const mapper = conversionApi.mapper;\n    const viewStart = mapper.toViewPosition(data.position).getLastMatchingPosition(value => !value.item.is('tr'));\n    const viewItem = viewStart.nodeAfter;\n    const tableSection = viewItem.parent; // Remove associated <tr> from the view.\n\n    const removeRange = viewWriter.createRangeOn(viewItem);\n    const removed = viewWriter.remove(removeRange);\n\n    for (const child of viewWriter.createRangeIn(removed).getItems()) {\n      mapper.unbindViewElement(child);\n    } // Check if table section has any children left - if not remove it from the view.\n\n\n    if (!tableSection.childCount) {\n      // No need to unbind anything as table section is not represented in the model.\n      viewWriter.remove(viewWriter.createRangeOn(tableSection));\n    }\n  }, {\n    priority: 'higher'\n  });\n} // Renames an existing table cell in the view to a given element name.\n//\n// **Note** This method will not do anything if a view table cell was not yet converted.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} desiredCellElementName\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Boolean} asWidget\n\nfunction renameViewTableCell(tableCell, desiredCellElementName, conversionApi, asWidget) {\n  const viewWriter = conversionApi.writer;\n  const viewCell = conversionApi.mapper.toViewElement(tableCell); // View cell might be not yet converted - skip it as it will be properly created by cell converter later on.\n\n  if (!viewCell) {\n    return;\n  }\n\n  let renamedCell;\n\n  if (asWidget) {\n    const editable = viewWriter.createEditableElement(desiredCellElementName, viewCell.getAttributes());\n    renamedCell = toWidgetEditable(editable, viewWriter);\n    viewWriter.insert(viewWriter.createPositionAfter(viewCell), renamedCell);\n    viewWriter.move(viewWriter.createRangeIn(viewCell), viewWriter.createPositionAt(renamedCell, 0));\n    viewWriter.remove(viewWriter.createRangeOn(viewCell));\n  } else {\n    renamedCell = viewWriter.rename(desiredCellElementName, viewCell);\n  }\n\n  conversionApi.mapper.unbindViewElement(viewCell);\n  conversionApi.mapper.bindElements(tableCell, renamedCell);\n} // Renames a table cell element in the view according to its location in the table.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Boolean} asWidget\n\n\nfunction renameViewTableCellIfRequired(tableWalkerValue, tableAttributes, conversionApi, asWidget) {\n  const {\n    cell\n  } = tableWalkerValue; // Check whether current columnIndex is overlapped by table cells from previous rows.\n\n  const desiredCellElementName = getCellElementName(tableWalkerValue, tableAttributes);\n  const viewCell = conversionApi.mapper.toViewElement(cell); // If in single change we're converting attribute changes and inserting cell the table cell might not be inserted into view\n  // because of child conversion is done after parent.\n\n  if (viewCell && viewCell.name !== desiredCellElementName) {\n    renameViewTableCell(cell, desiredCellElementName, conversionApi, asWidget);\n  }\n} // Creates a table cell element in the view.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {module:engine/view/position~Position} insertPosition\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\n\nfunction createViewTableCellElement(tableWalkerValue, tableAttributes, insertPosition, conversionApi, options) {\n  const asWidget = options && options.asWidget;\n  const cellElementName = getCellElementName(tableWalkerValue, tableAttributes);\n  const cellElement = asWidget ? toWidgetEditable(conversionApi.writer.createEditableElement(cellElementName), conversionApi.writer) : conversionApi.writer.createContainerElement(cellElementName);\n  const tableCell = tableWalkerValue.cell;\n  const firstChild = tableCell.getChild(0);\n  const isSingleParagraph = tableCell.childCount === 1 && firstChild.name === 'paragraph';\n  conversionApi.writer.insert(insertPosition, cellElement);\n\n  if (isSingleParagraph && !hasAnyAttribute(firstChild)) {\n    const innerParagraph = tableCell.getChild(0);\n    const paragraphInsertPosition = conversionApi.writer.createPositionAt(cellElement, 'end');\n    conversionApi.consumable.consume(innerParagraph, 'insert');\n\n    if (options.asWidget) {\n      const fakeParagraph = conversionApi.writer.createContainerElement('span');\n      conversionApi.mapper.bindElements(innerParagraph, fakeParagraph);\n      conversionApi.writer.insert(paragraphInsertPosition, fakeParagraph);\n      conversionApi.mapper.bindElements(tableCell, cellElement);\n    } else {\n      conversionApi.mapper.bindElements(tableCell, cellElement);\n      conversionApi.mapper.bindElements(innerParagraph, cellElement);\n    }\n  } else {\n    conversionApi.mapper.bindElements(tableCell, cellElement);\n  }\n} // Creates `<tr>` view element.\n//\n// @param {module:engine/view/element~Element} tableRow\n// @param {Number} rowIndex\n// @param {module:engine/view/element~Element} tableSection\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @returns {module:engine/view/element~Element}\n\n\nfunction createTr(tableRow, rowIndex, tableSection, conversionApi) {\n  // Will always consume since we're converting <tableRow> element from a parent <table>.\n  conversionApi.consumable.consume(tableRow, 'insert');\n  const trElement = conversionApi.writer.createContainerElement('tr');\n  conversionApi.mapper.bindElements(tableRow, trElement);\n  const headingRows = tableRow.parent.getAttribute('headingRows') || 0;\n  const offset = headingRows > 0 && rowIndex >= headingRows ? rowIndex - headingRows : rowIndex;\n  const position = conversionApi.writer.createPositionAt(tableSection, offset);\n  conversionApi.writer.insert(position, trElement);\n  return trElement;\n} // Returns `th` for heading cells and `td` for other cells for the current table walker value.\n//\n// @param {module:table/tablewalker~TableWalkerValue} tableWalkerValue\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\n\n\nfunction getCellElementName(tableWalkerValue, tableAttributes) {\n  const {\n    row,\n    column\n  } = tableWalkerValue;\n  const {\n    headingColumns,\n    headingRows\n  } = tableAttributes; // Column heading are all tableCells in the first `columnHeading` rows.\n\n  const isColumnHeading = headingRows && headingRows > row; // So a whole row gets <th> element.\n\n  if (isColumnHeading) {\n    return 'th';\n  } // Row heading are tableCells which columnIndex is lower then headingColumns.\n\n\n  const isRowHeading = headingColumns && headingColumns > column;\n  return isRowHeading ? 'th' : 'td';\n} // Returns the table section name for the current table walker value.\n//\n// @param {Number} row\n// @param {{headingColumns, headingRows}} tableAttributes\n// @returns {String}\n\n\nfunction getSectionName(row, tableAttributes) {\n  return row < tableAttributes.headingRows ? 'thead' : 'tbody';\n} // Creates or returns an existing `<tbody>` or `<thead>` element witch caching.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} viewTable\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Object} cachedTableSection An object that stores cached elements.\n// @returns {module:engine/view/containerelement~ContainerElement}\n\n\nfunction getOrCreateTableSection(sectionName, viewTable, conversionApi) {\n  const viewTableSection = getExistingTableSectionElement(sectionName, viewTable);\n  return viewTableSection ? viewTableSection : createTableSection(sectionName, viewTable, conversionApi);\n} // Finds an existing `<tbody>` or `<thead>` element or returns undefined.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\n\nfunction getExistingTableSectionElement(sectionName, tableElement) {\n  for (const tableSection of tableElement.getChildren()) {\n    if (tableSection.name == sectionName) {\n      return tableSection;\n    }\n  }\n} // Creates a table section at the end of the table.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @returns {module:engine/view/containerelement~ContainerElement}\n\n\nfunction createTableSection(sectionName, tableElement, conversionApi) {\n  const tableChildElement = conversionApi.writer.createContainerElement(sectionName);\n  const insertPosition = conversionApi.writer.createPositionAt(tableElement, sectionName == 'tbody' ? 'end' : 0);\n  conversionApi.writer.insert(insertPosition, tableChildElement);\n  return tableChildElement;\n} // Removes an existing `<tbody>` or `<thead>` element if it is empty.\n//\n// @param {String} sectionName\n// @param {module:engine/view/element~Element} tableElement\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n\n\nfunction removeTableSectionIfEmpty(sectionName, tableElement, conversionApi) {\n  const tableSection = getExistingTableSectionElement(sectionName, tableElement);\n\n  if (tableSection && tableSection.childCount === 0) {\n    conversionApi.writer.remove(conversionApi.writer.createRangeOn(tableSection));\n  }\n} // Moves view table rows associated with passed model rows to the provided table section element.\n//\n// **Note** This method will skip not converted table rows.\n//\n// @param {Array.<module:engine/model/element~Element>} rowsToMove\n// @param {module:engine/view/element~Element} viewTableSection\n// @param {module:engine/conversion/downcastdispatcher~DowncastConversionApi} conversionApi\n// @param {Number|'end'|'before'|'after'} offset Offset or one of the flags.\n\n\nfunction moveViewRowsToTableSection(rowsToMove, viewTableSection, conversionApi, offset) {\n  for (const tableRow of rowsToMove) {\n    const viewTableRow = conversionApi.mapper.toViewElement(tableRow); // View table row might be not yet converted - skip it as it will be properly created by cell converter later on.\n\n    if (viewTableRow) {\n      conversionApi.writer.move(conversionApi.writer.createRangeOn(viewTableRow), conversionApi.writer.createPositionAt(viewTableSection, offset));\n    }\n  }\n} // Properly finds '<table>' element inside `<figure>` widget.\n//\n// @param {module:engine/view/element~Element} viewFigure\n\n\nfunction getViewTable(viewFigure) {\n  for (const child of viewFigure.getChildren()) {\n    if (child.name === 'table') {\n      return child;\n    }\n  }\n} // Checks if element has any attribute set.\n//\n// @param {module:engine/model/element~Element element\n// @returns {Boolean}\n\n\nfunction hasAnyAttribute(element) {\n  return !![...element.getAttributeKeys()].length;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/inserttablecommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findOptimalInsertionPosition } from '@ckeditor/ckeditor5-widget/src/utils';\n/**\n * The insert table command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTable'` editor command.\n *\n * To insert a table at the current selection, execute the command and specify the dimensions:\n *\n *\t\teditor.execute( 'insertTable', { rows: 20, columns: 5 } );\n *\n * @extends module:core/command~Command\n */\n\nexport default class InsertTableCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const schema = model.schema;\n    const validParent = getInsertTableParent(selection.getFirstPosition());\n    this.isEnabled = schema.checkChild(validParent, 'table');\n  }\n  /**\n   * Executes the command.\n   *\n   * Inserts a table with the given number of rows and columns into the editor.\n   *\n   * @param {Object} options\n   * @param {Number} [options.rows=2] The number of rows to create in the inserted table.\n   * @param {Number} [options.columns=2] The number of columns to create in the inserted table.\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const rows = parseInt(options.rows) || 2;\n    const columns = parseInt(options.columns) || 2;\n    const insertPosition = findOptimalInsertionPosition(selection, model);\n    model.change(writer => {\n      const table = tableUtils.createTable(writer, rows, columns);\n      model.insertContent(table, insertPosition);\n      writer.setSelection(writer.createPositionAt(table.getNodeByPath([0, 0, 0]), 0));\n    });\n  }\n\n} // Returns valid parent to insert table\n//\n// @param {module:engine/model/position} position\n\nfunction getInsertTableParent(position) {\n  const parent = position.parent;\n  return parent === parent.root ? parent : parent.parent;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/insertrowcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n/**\n * The insert row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableRowBelow'` and\n * `'insertTableRowAbove'` editor commands.\n *\n * To insert a row below the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowBelow' );\n *\n * To insert a row above the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableRowAbove' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class InsertRowCommand extends Command {\n  /**\n   * Creates a new `InsertRowCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n   * @param {Object} options\n   * @param {String} [options.order=\"below\"] The order of insertion relative to the row in which the caret is located.\n   * Possible values: `\"above\"` and `\"below\"`.\n   */\n  constructor(editor, options = {}) {\n    super(editor);\n    /**\n     * The order of insertion relative to the row in which the caret is located.\n     *\n     * @readonly\n     * @member {String} module:table/commands/insertrowcommand~InsertRowCommand#order\n     */\n\n    this.order = options.order || 'below';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const selection = this.editor.model.document.selection;\n    const tableParent = findAncestor('table', selection.getFirstPosition());\n    this.isEnabled = !!tableParent;\n  }\n  /**\n   * Executes the command.\n   *\n   * Depending on the command's {@link #order} value, it inserts a row `'below'` or `'above'` the row in which selection is set.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n    const tableUtils = editor.plugins.get('TableUtils');\n    const tableCell = findAncestor('tableCell', selection.getFirstPosition());\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const row = table.getChildIndex(tableRow);\n    const insertAt = this.order === 'below' ? row + 1 : row;\n    tableUtils.insertRows(table, {\n      rows: 1,\n      at: insertAt\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/insertcolumncommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n/**\n * The insert column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'insertTableColumnLeft'` and\n * `'insertTableColumnRight'` editor commands.\n *\n * To insert a column to the left of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnLeft' );\n *\n * To insert a column to the right of the selected cell, execute the following command:\n *\n *\t\teditor.execute( 'insertTableColumnRight' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class InsertColumnCommand extends Command {\n  /**\n   * Creates a new `InsertColumnCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor An editor on which this command will be used.\n   * @param {Object} options\n   * @param {String} [options.order=\"right\"] The order of insertion relative to the column in which the caret is located.\n   * Possible values: `\"left\"` and `\"right\"`.\n   */\n  constructor(editor, options = {}) {\n    super(editor);\n    /**\n     * The order of insertion relative to the column in which the caret is located.\n     *\n     * @readonly\n     * @member {String} module:table/commands/insertcolumncommand~InsertColumnCommand#order\n     */\n\n    this.order = options.order || 'right';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const selection = this.editor.model.document.selection;\n    const tableParent = findAncestor('table', selection.getFirstPosition());\n    this.isEnabled = !!tableParent;\n  }\n  /**\n   * Executes the command.\n   *\n   * Depending on the command's {@link #order} value, it inserts a column to the `'left'` or `'right'` of the column\n   * in which the selection is set.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n    const tableUtils = editor.plugins.get('TableUtils');\n    const firstPosition = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', firstPosition);\n    const table = tableCell.parent.parent;\n    const {\n      column\n    } = tableUtils.getCellLocation(tableCell);\n    const insertAt = this.order === 'right' ? column + 1 : column;\n    tableUtils.insertColumns(table, {\n      columns: 1,\n      at: insertAt\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/splitcellcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor } from './utils';\n/**\n * The split cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'splitTableCellVertically'`\n * and `'splitTableCellHorizontally'`  editor commands.\n *\n * You can split any cell vertically or horizontally by executing this command. For example, to split the selected table cell vertically:\n *\n *\t\teditor.execute( 'splitTableCellVertically' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class SplitCellCommand extends Command {\n  /**\n   * Creates a new `SplitCellCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n   * @param {Object} options\n   * @param {String} options.direction Indicates whether the command should split cells `'horizontally'` or `'vertically'`.\n   */\n  constructor(editor, options = {}) {\n    super(editor);\n    /**\n     * The direction that indicates which cell will be split.\n     *\n     * @readonly\n     * @member {String} #direction\n     */\n\n    this.direction = options.direction || 'horizontally';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const tableCell = findAncestor('tableCell', doc.selection.getFirstPosition());\n    this.isEnabled = !!tableCell;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const document = model.document;\n    const selection = document.selection;\n    const firstPosition = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', firstPosition);\n    const isHorizontally = this.direction === 'horizontally';\n    const tableUtils = this.editor.plugins.get('TableUtils');\n\n    if (isHorizontally) {\n      tableUtils.splitCellHorizontally(tableCell, 2);\n    } else {\n      tableUtils.splitCellVertically(tableCell, 2);\n    }\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/mergecellcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n/**\n * The merge cell command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'mergeTableCellRight'`, `'mergeTableCellLeft'`,\n * `'mergeTableCellUp'` and `'mergeTableCellDown'` editor commands.\n *\n * To merge a table cell at the current selection with another cell, execute the command corresponding with the preferred direction.\n *\n * For example, to merge with a cell to the right:\n *\n *\t\teditor.execute( 'mergeTableCellRight' );\n *\n * **Note**: If a table cell has a different [`rowspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-rowspan)\n * (for `'mergeTableCellRight'` and `'mergeTableCellLeft'`) or [`colspan`](https://www.w3.org/TR/html50/tabular-data.html#attr-tdth-colspan)\n * (for `'mergeTableCellUp'` and `'mergeTableCellDown'`), the command will be disabled.\n *\n * @extends module:core/command~Command\n */\n\nexport default class MergeCellCommand extends Command {\n  /**\n   * Creates a new `MergeCellCommand` instance.\n   *\n   * @param {module:core/editor/editor~Editor} editor The editor on which this command will be used.\n   * @param {Object} options\n   * @param {String} options.direction Indicates which cell to merge with the currently selected one.\n   * Possible values are: `'left'`, `'right'`, `'up'` and `'down'`.\n   */\n  constructor(editor, options) {\n    super(editor);\n    /**\n     * The direction that indicates which cell will be merged with the currently selected one.\n     *\n     * @readonly\n     * @member {String} #direction\n     */\n\n    this.direction = options.direction;\n    /**\n     * Whether the merge is horizontal (left/right) or vertical (up/down).\n     *\n     * @readonly\n     * @member {Boolean} #isHorizontal\n     */\n\n    this.isHorizontal = this.direction == 'right' || this.direction == 'left';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  refresh() {\n    const cellToMerge = this._getMergeableCell();\n\n    this.value = cellToMerge;\n    this.isEnabled = !!cellToMerge;\n  }\n  /**\n   * Executes the command.\n   *\n   * Depending on the command's {@link #direction} value, it will merge the cell that is to the `'left'`, `'right'`, `'up'` or `'down'`.\n   *\n   * @fires execute\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const tableCell = findAncestor('tableCell', doc.selection.getFirstPosition());\n    const cellToMerge = this.value;\n    const direction = this.direction;\n    model.change(writer => {\n      const isMergeNext = direction == 'right' || direction == 'down'; // The merge mechanism is always the same so sort cells to be merged.\n\n      const cellToExpand = isMergeNext ? tableCell : cellToMerge;\n      const cellToRemove = isMergeNext ? cellToMerge : tableCell; // Cache the parent of cell to remove for later check.\n\n      const removedTableCellRow = cellToRemove.parent;\n      mergeTableCells(cellToRemove, cellToExpand, writer);\n      const spanAttribute = this.isHorizontal ? 'colspan' : 'rowspan';\n      const cellSpan = parseInt(tableCell.getAttribute(spanAttribute) || 1);\n      const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || 1); // Update table cell span attribute and merge set selection on merged contents.\n\n      writer.setAttribute(spanAttribute, cellSpan + cellToMergeSpan, cellToExpand);\n      writer.setSelection(writer.createRangeIn(cellToExpand)); // Remove empty row after merging.\n\n      if (!removedTableCellRow.childCount) {\n        removeEmptyRow(removedTableCellRow, writer);\n      }\n    });\n  }\n  /**\n   * Returns a cell that can be merged with the current cell depending on the command's direction.\n   *\n   * @returns {module:engine/model/element~Element|undefined}\n   * @private\n   */\n\n\n  _getMergeableCell() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const tableCell = findAncestor('tableCell', doc.selection.getFirstPosition());\n\n    if (!tableCell) {\n      return;\n    }\n\n    const tableUtils = this.editor.plugins.get('TableUtils'); // First get the cell on proper direction.\n\n    const cellToMerge = this.isHorizontal ? getHorizontalCell(tableCell, this.direction, tableUtils) : getVerticalCell(tableCell, this.direction);\n\n    if (!cellToMerge) {\n      return;\n    } // If found check if the span perpendicular to merge direction is equal on both cells.\n\n\n    const spanAttribute = this.isHorizontal ? 'rowspan' : 'colspan';\n    const span = parseInt(tableCell.getAttribute(spanAttribute) || 1);\n    const cellToMergeSpan = parseInt(cellToMerge.getAttribute(spanAttribute) || 1);\n\n    if (cellToMergeSpan === span) {\n      return cellToMerge;\n    }\n  }\n\n} // Returns the cell that can be merged horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\n\nfunction getHorizontalCell(tableCell, direction, tableUtils) {\n  const horizontalCell = direction == 'right' ? tableCell.nextSibling : tableCell.previousSibling;\n\n  if (!horizontalCell) {\n    return;\n  } // Sort cells:\n\n\n  const cellOnLeft = direction == 'right' ? tableCell : horizontalCell;\n  const cellOnRight = direction == 'right' ? horizontalCell : tableCell; // Get their column indexes:\n\n  const {\n    column: leftCellColumn\n  } = tableUtils.getCellLocation(cellOnLeft);\n  const {\n    column: rightCellColumn\n  } = tableUtils.getCellLocation(cellOnRight);\n  const leftCellSpan = parseInt(cellOnLeft.getAttribute('colspan') || 1); // The cell on the right must have index that is distant to the cell on the left by the left cell's width (colspan).\n\n  const cellsAreTouching = leftCellColumn + leftCellSpan === rightCellColumn; // If the right cell's column index is different it means that there are rowspanned cells between them.\n\n  return cellsAreTouching ? horizontalCell : undefined;\n} // Returns the cell that can be merged vertically.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {String} direction\n// @returns {module:engine/model/node~Node|null}\n\n\nfunction getVerticalCell(tableCell, direction) {\n  const tableRow = tableCell.parent;\n  const table = tableRow.parent;\n  const rowIndex = table.getChildIndex(tableRow); // Don't search for mergeable cell if direction points out of the table.\n\n  if (direction == 'down' && rowIndex === table.childCount - 1 || direction == 'up' && rowIndex === 0) {\n    return;\n  }\n\n  const rowspan = parseInt(tableCell.getAttribute('rowspan') || 1);\n  const headingRows = table.getAttribute('headingRows') || 0;\n  const isMergeWithBodyCell = direction == 'down' && rowIndex + rowspan === headingRows;\n  const isMergeWithHeadCell = direction == 'up' && rowIndex === headingRows; // Don't search for mergeable cell if direction points out of the current table section.\n\n  if (headingRows && (isMergeWithBodyCell || isMergeWithHeadCell)) {\n    return;\n  }\n\n  const currentCellRowSpan = parseInt(tableCell.getAttribute('rowspan') || 1);\n  const rowOfCellToMerge = direction == 'down' ? rowIndex + currentCellRowSpan : rowIndex;\n  const tableMap = [...new TableWalker(table, {\n    endRow: rowOfCellToMerge\n  })];\n  const currentCellData = tableMap.find(value => value.cell === tableCell);\n  const mergeColumn = currentCellData.column;\n  const cellToMergeData = tableMap.find(({\n    row,\n    rowspan,\n    column\n  }) => {\n    if (column !== mergeColumn) {\n      return false;\n    }\n\n    if (direction == 'down') {\n      // If merging a cell below the mergeRow is already calculated.\n      return row === rowOfCellToMerge;\n    } else {\n      // If merging a cell above calculate if it spans to mergeRow.\n      return rowOfCellToMerge === row + rowspan;\n    }\n  });\n  return cellToMergeData && cellToMergeData.cell;\n} // Properly removes empty row from a table. Will update `rowspan` attribute of cells that overlaps removed row.\n//\n// @param {module:engine/model/element~Element} removedTableCellRow\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction removeEmptyRow(removedTableCellRow, writer) {\n  const table = removedTableCellRow.parent;\n  const removedRowIndex = table.getChildIndex(removedTableCellRow);\n\n  for (const {\n    cell,\n    row,\n    rowspan\n  } of new TableWalker(table, {\n    endRow: removedRowIndex\n  })) {\n    const overlapsRemovedRow = row + rowspan - 1 >= removedRowIndex;\n\n    if (overlapsRemovedRow) {\n      updateNumericAttribute('rowspan', rowspan - 1, cell, writer);\n    }\n  }\n\n  writer.remove(removedTableCellRow);\n} // Merges two table cells - will ensure that after merging cells with empty paragraph the result table cell will only have one paragraph.\n// If one of the merged table cell is empty the merged table cell will have contents of the non-empty table cell.\n// If both are empty the merged table cell will have only one empty paragraph.\n//\n// @param {module:engine/model/element~Element} cellToRemove\n// @param {module:engine/model/element~Element} cellToExpand\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction mergeTableCells(cellToRemove, cellToExpand, writer) {\n  if (!isEmpty(cellToRemove)) {\n    if (isEmpty(cellToExpand)) {\n      writer.remove(writer.createRangeIn(cellToExpand));\n    }\n\n    writer.move(writer.createRangeIn(cellToRemove), writer.createPositionAt(cellToExpand, 'end'));\n  } // Remove merged table cell.\n\n\n  writer.remove(cellToRemove);\n} // Checks if passed table cell contains empty paragraph.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @returns {Boolean}\n\n\nfunction isEmpty(tableCell) {\n  return tableCell.childCount == 1 && tableCell.getChild(0).is('paragraph') && tableCell.getChild(0).isEmpty;\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removerowcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n/**\n * The remove row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableRow'` editor command.\n *\n * To remove the row containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableRow' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class RemoveRowCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const tableCell = findAncestor('tableCell', doc.selection.getFirstPosition());\n    this.isEnabled = !!tableCell && tableCell.parent.parent.childCount > 1;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const firstPosition = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', firstPosition);\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const currentRow = table.getChildIndex(tableRow);\n    const headingRows = table.getAttribute('headingRows') || 0;\n    model.change(writer => {\n      if (headingRows && currentRow <= headingRows) {\n        updateNumericAttribute('headingRows', headingRows - 1, table, writer, 0);\n      }\n\n      const tableMap = [...new TableWalker(table, {\n        endRow: currentRow\n      })];\n      const cellsToMove = new Map(); // Get cells from removed row that are spanned over multiple rows.\n\n      tableMap.filter(({\n        row,\n        rowspan\n      }) => row === currentRow && rowspan > 1).forEach(({\n        column,\n        cell,\n        rowspan\n      }) => cellsToMove.set(column, {\n        cell,\n        rowspanToSet: rowspan - 1\n      })); // Reduce rowspan on cells that are above removed row and overlaps removed row.\n\n      tableMap.filter(({\n        row,\n        rowspan\n      }) => row <= currentRow - 1 && row + rowspan > currentRow).forEach(({\n        cell,\n        rowspan\n      }) => updateNumericAttribute('rowspan', rowspan - 1, cell, writer)); // Move cells to another row.\n\n      const targetRow = currentRow + 1;\n      const tableWalker = new TableWalker(table, {\n        includeSpanned: true,\n        startRow: targetRow,\n        endRow: targetRow\n      });\n      let previousCell;\n\n      for (const {\n        row,\n        column,\n        cell\n      } of [...tableWalker]) {\n        if (cellsToMove.has(column)) {\n          const {\n            cell: cellToMove,\n            rowspanToSet\n          } = cellsToMove.get(column);\n          const targetPosition = previousCell ? writer.createPositionAfter(previousCell) : writer.createPositionAt(table.getChild(row), 0);\n          writer.move(writer.createRangeOn(cellToMove), targetPosition);\n          updateNumericAttribute('rowspan', rowspanToSet, cellToMove, writer);\n          previousCell = cellToMove;\n        } else {\n          previousCell = cell;\n        }\n      }\n\n      writer.remove(tableRow);\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/removecolumncommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport TableWalker from '../tablewalker';\nimport { findAncestor, updateNumericAttribute } from './utils';\n/**\n * The remove column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'removeTableColumn'` editor command.\n *\n * To remove the column containing the selected cell, execute the command:\n *\n *\t\teditor.execute( 'removeTableColumn' );\n *\n * @extends module:core/command~Command\n */\n\nexport default class RemoveColumnCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n    const tableUtils = editor.plugins.get('TableUtils');\n    const tableCell = findAncestor('tableCell', selection.getFirstPosition());\n    this.isEnabled = !!tableCell && tableUtils.getColumns(tableCell.parent.parent) > 1;\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  execute() {\n    const model = this.editor.model;\n    const selection = model.document.selection;\n    const firstPosition = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', firstPosition);\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const headingColumns = table.getAttribute('headingColumns') || 0;\n    const row = table.getChildIndex(tableRow); // Cache the table before removing or updating colspans.\n\n    const tableMap = [...new TableWalker(table)]; // Get column index of removed column.\n\n    const cellData = tableMap.find(value => value.cell === tableCell);\n    const removedColumn = cellData.column;\n    model.change(writer => {\n      // Update heading columns attribute if removing a row from head section.\n      if (headingColumns && row <= headingColumns) {\n        writer.setAttribute('headingColumns', headingColumns - 1, table);\n      }\n\n      for (const {\n        cell,\n        column,\n        colspan\n      } of tableMap) {\n        // If colspaned cell overlaps removed column decrease it's span.\n        if (column <= removedColumn && colspan > 1 && column + colspan > removedColumn) {\n          updateNumericAttribute('colspan', colspan - 1, cell, writer);\n        } else if (column === removedColumn) {\n          // The cell in removed column has colspan of 1.\n          writer.remove(cell);\n        }\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheaderrowcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './utils';\nimport TableWalker from '../tablewalker';\n/**\n * The header row command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the row containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element) by executing:\n *\n *\t\teditor.execute( 'setTableRowHeader' );\n *\n * **Note:** All preceding rows will also become headers. If the current row is already a header, executing this command\n * will make it a regular row back again (including the following rows).\n *\n * @extends module:core/command~Command\n */\n\nexport default class SetHeaderRowCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const position = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', position);\n    const isInTable = !!tableCell;\n    this.isEnabled = isInTable;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection} is in a header row.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n\n    this.value = isInTable && this._isInHeading(tableCell, tableCell.parent.parent);\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is in a non-header row, the command will set the `headingRows` table attribute to cover that row.\n   *\n   * When the selection is already in a header row, it will set `headingRows` so the heading section will end before that row.\n   *\n   * @fires execute\n   * @param {Object} options\n   * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) header rows according to `forceValue`\n   * parameter instead of the current model state.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const position = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', position);\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const currentHeadingRows = table.getAttribute('headingRows') || 0;\n    const selectionRow = tableRow.index;\n\n    if (options.forceValue === this.value) {\n      return;\n    }\n\n    const headingRowsToSet = this.value ? selectionRow : selectionRow + 1;\n    model.change(writer => {\n      if (headingRowsToSet) {\n        // Changing heading rows requires to check if any of a heading cell is overlapping vertically the table head.\n        // Any table cell that has a rowspan attribute > 1 will not exceed the table head so we need to fix it in rows below.\n        const cellsToSplit = getOverlappingCells(table, headingRowsToSet, currentHeadingRows);\n\n        for (const cell of cellsToSplit) {\n          splitHorizontally(cell, headingRowsToSet, writer);\n        }\n      }\n\n      updateNumericAttribute('headingRows', headingRowsToSet, table, writer, 0);\n    });\n  }\n  /**\n   * Checks if a table cell is in the heading section.\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @param {module:engine/model/element~Element} table\n   * @returns {Boolean}\n   * @private\n   */\n\n\n  _isInHeading(tableCell, table) {\n    const headingRows = parseInt(table.getAttribute('headingRows') || 0);\n    return !!headingRows && tableCell.parent.index < headingRows;\n  }\n\n} // Returns cells that span beyond the new heading section.\n//\n// @param {module:engine/model/element~Element} table The table to check.\n// @param {Number} headingRowsToSet New heading rows attribute.\n// @param {Number} currentHeadingRows Current heading rows attribute.\n// @returns {Array.<module:engine/model/element~Element>}\n\nfunction getOverlappingCells(table, headingRowsToSet, currentHeadingRows) {\n  const cellsToSplit = [];\n  const startAnalysisRow = headingRowsToSet > currentHeadingRows ? currentHeadingRows : 0; // We're analyzing only when headingRowsToSet > 0.\n\n  const endAnalysisRow = headingRowsToSet - 1;\n  const tableWalker = new TableWalker(table, {\n    startRow: startAnalysisRow,\n    endRow: endAnalysisRow\n  });\n\n  for (const {\n    row,\n    rowspan,\n    cell\n  } of tableWalker) {\n    if (rowspan > 1 && row + rowspan > headingRowsToSet) {\n      cellsToSplit.push(cell);\n    }\n  }\n\n  return cellsToSplit;\n} // Splits the table cell horizontally.\n//\n// @param {module:engine/model/element~Element} tableCell\n// @param {Number} headingRows\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction splitHorizontally(tableCell, headingRows, writer) {\n  const tableRow = tableCell.parent;\n  const table = tableRow.parent;\n  const rowIndex = tableRow.index;\n  const rowspan = parseInt(tableCell.getAttribute('rowspan'));\n  const newRowspan = headingRows - rowIndex;\n  const attributes = {};\n  const spanToSet = rowspan - newRowspan;\n\n  if (spanToSet > 1) {\n    attributes.rowspan = spanToSet;\n  }\n\n  const colspan = parseInt(tableCell.getAttribute('colspan') || 1);\n\n  if (colspan > 1) {\n    attributes.colspan = colspan;\n  }\n\n  const startRow = table.getChildIndex(tableRow);\n  const endRow = startRow + newRowspan;\n  const tableMap = [...new TableWalker(table, {\n    startRow,\n    endRow,\n    includeSpanned: true\n  })];\n  let columnIndex;\n\n  for (const {\n    row,\n    column,\n    cell,\n    cellIndex\n  } of tableMap) {\n    if (cell === tableCell && columnIndex === undefined) {\n      columnIndex = column;\n    }\n\n    if (columnIndex !== undefined && columnIndex === column && row === endRow) {\n      const tableRow = table.getChild(row);\n      const tableCellPosition = writer.createPositionAt(tableRow, cellIndex);\n      createEmptyTableCell(writer, tableCellPosition, attributes);\n    }\n  } // Update the rowspan attribute after updating table.\n\n\n  updateNumericAttribute('rowspan', newRowspan, tableCell, writer);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/commands/setheadercolumncommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\nimport { findAncestor, updateNumericAttribute } from './utils';\n/**\n * The header column command.\n *\n * The command is registered by {@link module:table/tableediting~TableEditing} as `'setTableColumnHeader'` editor command.\n *\n * You can make the column containing the selected cell a [header](https://www.w3.org/TR/html50/tabular-data.html#the-th-element)\n * by executing:\n *\n *\t\teditor.execute( 'setTableColumnHeader' );\n *\n * **Note:** All preceding columns will also become headers. If the current column is already a header, executing this command\n * will make it a regular column back again (including the following columns).\n *\n * @extends module:core/command~Command\n */\n\nexport default class SetHeaderColumnCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const position = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', position);\n    const isInTable = !!tableCell;\n    this.isEnabled = isInTable;\n    /**\n     * Flag indicating whether the command is active. The command is active when the\n     * {@link module:engine/model/selection~Selection} is in a header column.\n     *\n     * @observable\n     * @readonly\n     * @member {Boolean} #value\n     */\n\n    this.value = isInTable && this._isInHeading(tableCell, tableCell.parent.parent);\n  }\n  /**\n   * Executes the command.\n   *\n   * When the selection is in a non-header column, the command will set the `headingColumns` table attribute to cover that column.\n   *\n   * When the selection is already in a header column, it will set `headingColumns` so the heading section will end before that column.\n   *\n   * @fires execute\n   * @param {Object} [options]\n   * @param {Boolean} [options.forceValue] If set, the command will set (`true`) or unset (`false`) header columns according to\n   * `forceValue` parameter instead of the current model state.\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const doc = model.document;\n    const selection = doc.selection;\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const position = selection.getFirstPosition();\n    const tableCell = findAncestor('tableCell', position);\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const {\n      column: selectionColumn\n    } = tableUtils.getCellLocation(tableCell);\n\n    if (options.forceValue === this.value) {\n      return;\n    }\n\n    const headingColumnsToSet = this.value ? selectionColumn : selectionColumn + 1;\n    model.change(writer => {\n      updateNumericAttribute('headingColumns', headingColumnsToSet, table, writer, 0);\n    });\n  }\n  /**\n   * Checks if a table cell is in the heading section.\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @param {module:engine/model/element~Element} table\n   * @returns {Boolean}\n   * @private\n   */\n\n\n  _isInHeading(tableCell, table) {\n    const headingColumns = parseInt(table.getAttribute('headingColumns') || 0);\n    const tableUtils = this.editor.plugins.get('TableUtils');\n    const {\n      column\n    } = tableUtils.getCellLocation(tableCell);\n    return !!headingColumns && column < headingColumns;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableutils\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TableWalker from './tablewalker';\nimport { createEmptyTableCell, updateNumericAttribute } from './commands/utils';\n/**\n * The table utilities plugin.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableUtils extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TableUtils';\n  }\n  /**\n   * Returns the table cell location as an object with table row and table column indexes.\n   *\n   * For instance in the table below:\n   *\n   *\t\t    0   1   2   3\n   *\t\t  +---+---+---+---+\n   *\t\t0 | a     | b | c |\n   *\t\t  +       +   +---+\n   *\t\t1 |       |   | d |\n   *\t\t  +---+---+   +---+\n   *\t\t2 | e     |   | f |\n   *\t\t  +---+---+---+---+\n   *\n   * the method will return:\n   *\n   *\t\tconst cellA = table.getNodeByPath( [ 0, 0 ] );\n   *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellA );\n   *\t\t// will return { row: 0, column: 0 }\n   *\n   *\t\tconst cellD = table.getNodeByPath( [ 1, 0 ] );\n   *\t\teditor.plugins.get( 'TableUtils' ).getCellLocation( cellD );\n   *\t\t// will return { row: 1, column: 3 }\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @returns {Object} Returns a `{row, column}` object.\n   */\n\n\n  getCellLocation(tableCell) {\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowIndex = table.getChildIndex(tableRow);\n    const tableWalker = new TableWalker(table, {\n      startRow: rowIndex,\n      endRow: rowIndex\n    });\n\n    for (const {\n      cell,\n      row,\n      column\n    } of tableWalker) {\n      if (cell === tableCell) {\n        return {\n          row,\n          column\n        };\n      }\n    }\n  }\n  /**\n   * Creates an empty table with proper structure. The table needs to be inserted into the model,\n   * ie. using {@link module:engine/model/model~Model#insertContent} function.\n   *\n   *\t\tmodel.change( ( writer ) => {\n   *\t\t\t// Create a table of 2 rows and 7 columns:\n   *\t\t\tconst table = tableUtils.createTable( writer, 2, 7);\n   *\n   *\t\t\t// Insert table to the model at the best position taking current selection:\n   *\t\t\tmodel.insertContent( table );\n   *\t\t}\n   *\n   * @param {module:engine/model/writer~Writer} writer The model writer.\n   * @param {Number} rows The number of rows to create.\n   * @param {Number} columns The number of columns to create.\n   * @returns {module:engine/model/element~Element} The created table element.\n   */\n\n\n  createTable(writer, rows, columns) {\n    const table = writer.createElement('table');\n    createEmptyRows(writer, table, 0, rows, columns);\n    return table;\n  }\n  /**\n   * Inserts rows into a table.\n   *\n   *\t\teditor.plugins.get( 'TableUtils' ).insertRows( table, { at: 1, rows: 2 } );\n   *\n   * Assuming the table on the left, the above code will transform it to the table on the right:\n   *\n   *\t\trow index\n   *\t\t  0 +---+---+---+       `at` = 1,      +---+---+---+ 0\n   *\t\t    | a | b | c |       `rows` = 2,    | a | b | c |\n   *\t\t  1 +   +---+---+   <-- insert here    +   +---+---+ 1\n   *\t\t    |   | d | e |                      |   |   |   |\n   *\t\t  2 +   +---+---+       will give:     +   +---+---+ 2\n   *\t\t    |   | f | g |                      |   |   |   |\n   *\t\t  3 +---+---+---+                      +   +---+---+ 3\n   *\t\t                                       |   | d | e |\n   *\t\t                                       +---+---+---+ 4\n   *\t\t                                       +   + f | g |\n   *\t\t                                       +---+---+---+ 5\n   *\n   * @param {module:engine/model/element~Element} table The table model element where the rows will be inserted.\n   * @param {Object} options\n   * @param {Number} [options.at=0] Row index at which the rows will be inserted.\n   * @param {Number} [options.rows=1] The number of rows to insert.\n   */\n\n\n  insertRows(table, options = {}) {\n    const model = this.editor.model;\n    const insertAt = options.at || 0;\n    const rowsToInsert = options.rows || 1;\n    model.change(writer => {\n      const headingRows = table.getAttribute('headingRows') || 0; // Inserting rows inside heading section requires to update `headingRows` attribute as the heading section will grow.\n\n      if (headingRows > insertAt) {\n        writer.setAttribute('headingRows', headingRows + rowsToInsert, table);\n      } // Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\n\n      if (insertAt === 0 || insertAt === table.childCount) {\n        createEmptyRows(writer, table, insertAt, rowsToInsert, this.getColumns(table));\n        return;\n      } // Iterate over all rows above inserted rows in order to check for rowspanned cells.\n\n\n      const tableIterator = new TableWalker(table, {\n        endRow: insertAt\n      }); // Will hold number of cells needed to insert in created rows.\n      // The number might be different then table cell width when there are rowspanned cells.\n\n      let cellsToInsert = 0;\n\n      for (const {\n        row,\n        rowspan,\n        colspan,\n        cell\n      } of tableIterator) {\n        const isBeforeInsertedRow = row < insertAt;\n        const overlapsInsertedRow = row + rowspan > insertAt;\n\n        if (isBeforeInsertedRow && overlapsInsertedRow) {\n          // This cell overlaps inserted rows so we need to expand it further.\n          writer.setAttribute('rowspan', rowspan + rowsToInsert, cell);\n        } // Calculate how many cells to insert based on the width of cells in a row at insert position.\n        // It might be lower then table width as some cells might overlaps inserted row.\n        // In the table above the cell 'a' overlaps inserted row so only two empty cells are need to be created.\n\n\n        if (row === insertAt) {\n          cellsToInsert += colspan;\n        }\n      }\n\n      createEmptyRows(writer, table, insertAt, rowsToInsert, cellsToInsert);\n    });\n  }\n  /**\n   * Inserts columns into a table.\n   *\n   *\t\teditor.plugins.get( 'TableUtils' ).insertColumns( table, { at: 1, columns: 2 } );\n   *\n   * Assuming the table on the left, the above code will transform it to the table on the right:\n   *\n   *\t\t0   1   2   3                   0   1   2   3   4   5\n   *\t\t+---+---+---+                   +---+---+---+---+---+\n   *\t\t| a     | b |                   | a             | b |\n   *\t\t+       +---+                   +               +---+\n   *\t\t|       | c |                   |               | c |\n   *\t\t+---+---+---+     will give:    +---+---+---+---+---+\n   *\t\t| d | e | f |                   | d |   |   | e | f |\n   *\t\t+---+   +---+                   +---+---+---+   +---+\n   *\t\t| g |   | h |                   | g |   |   |   | h |\n   *\t\t+---+---+---+                   +---+---+---+---+---+\n   *\t\t| i         |                   | i                 |\n   *\t\t+---+---+---+                   +---+---+---+---+---+\n   *\t\t    ^---- insert here, `at` = 1, `columns` = 2\n   *\n   * @param {module:engine/model/element~Element} table The table model element where the columns will be inserted.\n   * @param {Object} options\n   * @param {Number} [options.at=0] Column index at which the columns will be inserted.\n   * @param {Number} [options.columns=1] The number of columns to insert.\n   */\n\n\n  insertColumns(table, options = {}) {\n    const model = this.editor.model;\n    const insertAt = options.at || 0;\n    const columnsToInsert = options.columns || 1;\n    model.change(writer => {\n      const headingColumns = table.getAttribute('headingColumns'); // Inserting columns inside heading section requires to update `headingColumns` attribute as the heading section will grow.\n\n      if (insertAt < headingColumns) {\n        writer.setAttribute('headingColumns', headingColumns + columnsToInsert, table);\n      }\n\n      const tableColumns = this.getColumns(table); // Inserting at the end and at the beginning of a table doesn't require to calculate anything special.\n\n      if (insertAt === 0 || tableColumns === insertAt) {\n        for (const tableRow of table.getChildren()) {\n          createCells(columnsToInsert, writer, writer.createPositionAt(tableRow, insertAt ? 'end' : 0));\n        }\n\n        return;\n      }\n\n      const tableWalker = new TableWalker(table, {\n        column: insertAt,\n        includeSpanned: true\n      });\n\n      for (const {\n        row,\n        cell,\n        cellIndex\n      } of tableWalker) {\n        // When iterating over column the table walker outputs either:\n        // - cells at given column index (cell \"e\" from method docs),\n        // - spanned columns (spanned cell from row between cells \"g\" and \"h\" - spanned by \"e\", only if `includeSpanned: true`),\n        // - or a cell from the same row which spans over this column (cell \"a\").\n        const rowspan = parseInt(cell.getAttribute('rowspan') || 1);\n        const colspan = parseInt(cell.getAttribute('colspan') || 1);\n\n        if (cell.index !== insertAt && colspan > 1) {\n          // If column is different than `insertAt`, it is a cell that spans over an inserted column (cell \"a\" & \"i\").\n          // For such cells expand them by a number of columns inserted.\n          writer.setAttribute('colspan', colspan + columnsToInsert, cell); // The `includeSpanned` option will output the \"empty\"/spanned column so skip this row already.\n\n          tableWalker.skipRow(row); // This cell will overlap cells in rows below so skip them also (because of `includeSpanned` option) - (cell \"a\")\n\n          if (rowspan > 1) {\n            for (let i = row + 1; i < row + rowspan; i++) {\n              tableWalker.skipRow(i);\n            }\n          }\n        } else {\n          // It's either cell at this column index or spanned cell by a rowspanned cell from row above.\n          // In table above it's cell \"e\" and a spanned position from row below (empty cell between cells \"g\" and \"h\")\n          const insertPosition = writer.createPositionAt(table.getChild(row), cellIndex);\n          createCells(columnsToInsert, writer, insertPosition);\n        }\n      }\n    });\n  }\n  /**\n   * Divides a table cell vertically into several ones.\n   *\n   * The cell will be visually split into more cells by updating colspans of other cells in a column\n   * and inserting cells (columns) after that cell.\n   *\n   * In the table below, if cell \"a\" is split to 3 cells:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a | b | c |\n   *\t\t+---+---+---+\n   *\t\t| d | e | f |\n   *\t\t+---+---+---+\n   *\n   * it will result in the table below:\n   *\n   *\t\t+---+---+---+---+---+\n   *\t\t| a |   |   | b | c |\n   *\t\t+---+---+---+---+---+\n   *\t\t| d         | e | f |\n   *\t\t+---+---+---+---+---+\n   *\n   * So cell \"d\" will get its `colspan` updated to `3` and 2 cells will be added (2 columns will be created).\n   *\n   * Splitting a cell that already has a `colspan` attribute set will distribute the cell `colspan` evenly and the remainder\n   * will be left to the original cell:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a         |\n   *\t\t+---+---+---+\n   *\t\t| b | c | d |\n   *\t\t+---+---+---+\n   *\n   * Splitting cell \"a\" with `colspan=3` to 2 cells will create 1 cell with a `colspan=a` and cell \"a\" that will have `colspan=2`:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a     |   |\n   *\t\t+---+---+---+\n   *\t\t| b | c | d |\n   *\t\t+---+---+---+\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @param {Number} numberOfCells\n   */\n\n\n  splitCellVertically(tableCell, numberOfCells = 2) {\n    const model = this.editor.model;\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || 1);\n    const colspan = parseInt(tableCell.getAttribute('colspan') || 1);\n    model.change(writer => {\n      // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n      if (colspan > 1) {\n        // Get spans of new (inserted) cells and span to update of split cell.\n        const {\n          newCellsSpan,\n          updatedSpan\n        } = breakSpanEvenly(colspan, numberOfCells);\n        updateNumericAttribute('colspan', updatedSpan, tableCell, writer); // Each inserted cell will have the same attributes:\n\n        const newCellsAttributes = {}; // Do not store default value in the model.\n\n        if (newCellsSpan > 1) {\n          newCellsAttributes.colspan = newCellsSpan;\n        } // Copy rowspan of split cell.\n\n\n        if (rowspan > 1) {\n          newCellsAttributes.rowspan = rowspan;\n        }\n\n        const cellsToInsert = colspan > numberOfCells ? numberOfCells - 1 : colspan - 1;\n        createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n      } // Second check - the cell has colspan of 1 or we need to create more cells then the currently one spans over.\n\n\n      if (colspan < numberOfCells) {\n        const cellsToInsert = numberOfCells - colspan; // First step: expand cells on the same column as split cell.\n\n        const tableMap = [...new TableWalker(table)]; // Get the column index of split cell.\n\n        const {\n          column: splitCellColumn\n        } = tableMap.find(({\n          cell\n        }) => cell === tableCell); // Find cells which needs to be expanded vertically - those on the same column or those that spans over split cell's column.\n\n        const cellsToUpdate = tableMap.filter(({\n          cell,\n          colspan,\n          column\n        }) => {\n          const isOnSameColumn = cell !== tableCell && column === splitCellColumn;\n          const spansOverColumn = column < splitCellColumn && column + colspan > splitCellColumn;\n          return isOnSameColumn || spansOverColumn;\n        }); // Expand cells vertically.\n\n        for (const {\n          cell,\n          colspan\n        } of cellsToUpdate) {\n          writer.setAttribute('colspan', colspan + cellsToInsert, cell);\n        } // Second step: create columns after split cell.\n        // Each inserted cell will have the same attributes:\n\n\n        const newCellsAttributes = {}; // Do not store default value in the model.\n        // Copy rowspan of split cell.\n\n        if (rowspan > 1) {\n          newCellsAttributes.rowspan = rowspan;\n        }\n\n        createCells(cellsToInsert, writer, writer.createPositionAfter(tableCell), newCellsAttributes);\n        const headingColumns = table.getAttribute('headingColumns') || 0; // Update heading section if split cell is in heading section.\n\n        if (headingColumns > splitCellColumn) {\n          updateNumericAttribute('headingColumns', headingColumns + cellsToInsert, table, writer);\n        }\n      }\n    });\n  }\n  /**\n   * Divides a table cell horizontally into several ones.\n   *\n   * The cell will be visually split into more cells by updating rowspans of other cells in the row and inserting rows with a single cell\n   * below.\n   *\n   * If in the table below cell \"b\" is split to 3 cells:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a | b | c |\n   *\t\t+---+---+---+\n   *\t\t| d | e | f |\n   *\t\t+---+---+---+\n   *\n   * It will result in the table below:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a | b | c |\n   *\t\t+   +---+   +\n   *\t\t|   |   |   |\n   *\t\t+   +---+   +\n   *\t\t|   |   |   |\n   *\t\t+---+---+---+\n   *\t\t| d | e | f |\n   *\t\t+---+---+---+\n   *\n   * So cells \"a\" and \"b\" will get their `rowspan` updated to `3` and 2 rows with a single cell will be added.\n   *\n   * Splitting a cell that already has a `rowspan` attribute set will distribute the cell `rowspan` evenly and the remainder\n   * will be left to the original cell:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a | b | c |\n   *\t\t+   +---+---+\n   *\t\t|   | d | e |\n   *\t\t+   +---+---+\n   *\t\t|   | f | g |\n   *\t\t+   +---+---+\n   *\t\t|   | h | i |\n   *\t\t+---+---+---+\n   *\n   * Splitting cell \"a\" with `rowspan=4` to 3 cells will create 2 cells with a `rowspan=1` and cell \"a\" will have `rowspan=2`:\n   *\n   *\t\t+---+---+---+\n   *\t\t| a | b | c |\n   *\t\t+   +---+---+\n   *\t\t|   | d | e |\n   *\t\t+---+---+---+\n   *\t\t|   | f | g |\n   *\t\t+---+---+---+\n   *\t\t|   | h | i |\n   *\t\t+---+---+---+\n   *\n   * @param {module:engine/model/element~Element} tableCell\n   * @param {Number} numberOfCells\n   */\n\n\n  splitCellHorizontally(tableCell, numberOfCells = 2) {\n    const model = this.editor.model;\n    const tableRow = tableCell.parent;\n    const table = tableRow.parent;\n    const splitCellRow = table.getChildIndex(tableRow);\n    const rowspan = parseInt(tableCell.getAttribute('rowspan') || 1);\n    const colspan = parseInt(tableCell.getAttribute('colspan') || 1);\n    model.change(writer => {\n      // First check - the cell spans over multiple rows so before doing anything else just split this cell.\n      if (rowspan > 1) {\n        // Cache table map before updating table.\n        const tableMap = [...new TableWalker(table, {\n          startRow: splitCellRow,\n          endRow: splitCellRow + rowspan - 1,\n          includeSpanned: true\n        })]; // Get spans of new (inserted) cells and span to update of split cell.\n\n        const {\n          newCellsSpan,\n          updatedSpan\n        } = breakSpanEvenly(rowspan, numberOfCells);\n        updateNumericAttribute('rowspan', updatedSpan, tableCell, writer);\n        const {\n          column: cellColumn\n        } = tableMap.find(({\n          cell\n        }) => cell === tableCell); // Each inserted cell will have the same attributes:\n\n        const newCellsAttributes = {}; // Do not store default value in the model.\n\n        if (newCellsSpan > 1) {\n          newCellsAttributes.rowspan = newCellsSpan;\n        } // Copy colspan of split cell.\n\n\n        if (colspan > 1) {\n          newCellsAttributes.colspan = colspan;\n        }\n\n        for (const {\n          column,\n          row,\n          cellIndex\n        } of tableMap) {\n          // As both newly created cells and the split cell might have rowspan,\n          // the insertion of new cells must go to appropriate rows:\n          //\n          // 1. It's a row after split cell + it's height.\n          const isAfterSplitCell = row >= splitCellRow + updatedSpan; // 2. Is on the same column.\n\n          const isOnSameColumn = column === cellColumn; // 3. And it's row index is after previous cell height.\n\n          const isInEvenlySplitRow = (row + splitCellRow + updatedSpan) % newCellsSpan === 0;\n\n          if (isAfterSplitCell && isOnSameColumn && isInEvenlySplitRow) {\n            const position = writer.createPositionAt(table.getChild(row), cellIndex);\n            createCells(1, writer, position, newCellsAttributes);\n          }\n        }\n      } // Second check - the cell has rowspan of 1 or we need to create more cells than the current cell spans over.\n\n\n      if (rowspan < numberOfCells) {\n        // We already split the cell in check one so here we split to the remaining number of cells only.\n        const cellsToInsert = numberOfCells - rowspan; // This check is needed since we need to check if there are any cells from previous rows than spans over this cell's row.\n\n        const tableMap = [...new TableWalker(table, {\n          startRow: 0,\n          endRow: splitCellRow\n        })]; // First step: expand cells.\n\n        for (const {\n          cell,\n          rowspan,\n          row\n        } of tableMap) {\n          // Expand rowspan of cells that are either:\n          // - on the same row as current cell,\n          // - or are below split cell row and overlaps that row.\n          if (cell !== tableCell && row + rowspan > splitCellRow) {\n            const rowspanToSet = rowspan + cellsToInsert;\n            writer.setAttribute('rowspan', rowspanToSet, cell);\n          }\n        } // Second step: create rows with single cell below split cell.\n\n\n        const newCellsAttributes = {}; // Copy colspan of split cell.\n\n        if (colspan > 1) {\n          newCellsAttributes.colspan = colspan;\n        }\n\n        createEmptyRows(writer, table, splitCellRow + 1, cellsToInsert, 1, newCellsAttributes); // Update heading section if split cell is in heading section.\n\n        const headingRows = table.getAttribute('headingRows') || 0;\n\n        if (headingRows > splitCellRow) {\n          updateNumericAttribute('headingRows', headingRows + cellsToInsert, table, writer);\n        }\n      }\n    });\n  }\n  /**\n   * Returns the number of columns for a given table.\n   *\n   *\t\teditor.plugins.get( 'TableUtils' ).getColumns( table );\n   *\n   * @param {module:engine/model/element~Element} table The table to analyze.\n   * @returns {Number}\n   */\n\n\n  getColumns(table) {\n    // Analyze first row only as all the rows should have the same width.\n    const row = table.getChild(0);\n    return [...row.getChildren()].reduce((columns, row) => {\n      const columnWidth = parseInt(row.getAttribute('colspan') || 1);\n      return columns + columnWidth;\n    }, 0);\n  }\n\n} // Creates empty rows at the given index in an existing table.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/element~Element} table\n// @param {Number} insertAt Row index of row insertion.\n// @param {Number} rows Number of rows to create.\n// @param {Number} tableCellToInsert Number of cells to insert in each row.\n\nfunction createEmptyRows(writer, table, insertAt, rows, tableCellToInsert, attributes = {}) {\n  for (let i = 0; i < rows; i++) {\n    const tableRow = writer.createElement('tableRow');\n    writer.insert(tableRow, table, insertAt);\n    createCells(tableCellToInsert, writer, writer.createPositionAt(tableRow, 'end'), attributes);\n  }\n} // Creates cells at a given position.\n//\n// @param {Number} columns Number of columns to create\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/position~Position} insertPosition\n\n\nfunction createCells(cells, writer, insertPosition, attributes = {}) {\n  for (let i = 0; i < cells; i++) {\n    createEmptyTableCell(writer, insertPosition, attributes);\n  }\n} // Evenly distributes the span of a cell to a number of provided cells.\n// The resulting spans will always be integer values.\n//\n// For instance breaking a span of 7 into 3 cells will return:\n//\n//\t\t{ newCellsSpan: 2, updatedSpan: 3 }\n//\n// as two cells will have a span of 2 and the remainder will go the first cell so its span will change to 3.\n//\n// @param {Number} span Span value do break.\n// @param {Number} numberOfCells Number of resulting spans.\n// @returns {{newCellsSpan: Number, updatedSpan: Number}}\n\n\nfunction breakSpanEvenly(span, numberOfCells) {\n  if (span < numberOfCells) {\n    return {\n      newCellsSpan: 1,\n      updatedSpan: 1\n    };\n  }\n\n  const newCellsSpan = Math.floor(span / numberOfCells);\n  const updatedSpan = span - newCellsSpan * numberOfCells + newCellsSpan;\n  return {\n    newCellsSpan,\n    updatedSpan\n  };\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-layout-post-fixer\n */\nimport { createEmptyTableCell, findAncestor, updateNumericAttribute } from './../commands/utils';\nimport TableWalker from './../tablewalker';\n/**\n * Injects a table layout post-fixer into the model.\n *\n * The role of the table layout post-fixer is to ensure that the table rows have the correct structure\n * after a {@link module:engine/model/model~Model#change `change()`} block was executed.\n *\n * The correct structure means that:\n *\n * * All table rows have the same size.\n * * None of a table cells that extend vertically beyond their section (either header or body).\n * * A table cell has always at least one element as child.\n *\n * If the table structure is not correct, the post-fixer will automatically correct it in two steps:\n *\n * 1. It will clip table cells that extends beyond it section.\n * 2. It will add empty table cells to those rows which are narrower then the widest table row.\n *\n * ## Clipping overlapping table cells\n *\n * Such situation may occur when pasting a table (or part of a table) to the editor from external sources.\n *\n * For example, see the following table which has the cell (FOO) with the rowspan attribute (2):\n *\n *\t\t<table headingRows=\"1\">\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell rowspan=\"2\"><paragraph>FOO</paragraph></tableCell>\n *\t\t\t\t<tableCell colspan=\"2\"><paragraph>BAR</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph>BAZ</paragraph></tableCell>\n *\t\t\t\t<tableCell><paragraph>XYZ</paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * will be rendered in the view as:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * In the above example the table will be rendered as a table with two rows - one in the header and second one in the body.\n * The table cell (FOO) cannot span over multiple rows as it would expand from the header to the body section.\n * The `rowspan` attribute must be changed to (1). The value (1) is a default value of the `rowspan` attribute\n * so the `rowspan` attribute will be removed from the model.\n *\n * The table cell with BAZ contents will be in the first column of the table.\n *\n * ## Adding missing table cells\n *\n * The table post-fixer will insert empty table cells to equalize table rows sizes (number of columns).\n * The size of a table row is calculated by counting column spans of table cells - both horizontal (from the same row) and\n * vertical (from rows above).\n *\n * In the above example, the table row in the body section of the table is narrower then the row from the header - it has two cells\n * with the default colspan (1). The header row has one cell with colspan (1) and second with colspan (2).\n * The table cell (FOO) does not expand beyond the head section (and as such will be fixed in the first step of this post-fixer).\n * The post-fixer will add a missing table cell to the row in the body section of the table.\n *\n * The table from the above example will be fixed and rendered to the view as below:\n *\n *\t\t<table>\n *\t\t\t<thead>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td rowspan=\"2\">FOO</td>\n *\t\t\t\t\t<td colspan=\"2\">BAR</td>\n *\t\t\t\t</tr>\n *\t\t\t</thead>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>BAZ</td>\n *\t\t\t\t\t<td>XYZ</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * ## Collaboration & Undo - Expectations vs post-fixer results\n *\n * The table post-fixer only ensures proper structure without deeper analysis of the nature of a change. As such, it might lead\n * to a structure which was not intended by the user changes. In particular, it will also fix undo steps (in conjunction with collaboration)\n * in which editor content might not return to the original state.\n *\n * This will usually happen when one or more users changes size of the table.\n *\n * As en example see a table below:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * and user actions:\n *\n * 1. Both user have table with two rows and two columns.\n * 2. User A adds a column at the end of the table - this will insert empty table cells to two rows.\n * 3. User B adds a row at the end of the table- this will insert a row with two empty table cells.\n * 4. Both users will have a table as below:\n *\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * The last row is shorter then others so table post-fixer will add empty row to tha last row:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by A)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * Unfortunately undo doesn't know the nature of changes and depending which user will apply post-fixer changes undoing them might lead to\n * broken table. If User B will undo inserting column to a table the undo engine will undo only operations of\n * inserting empty cells to rows from initial table state (row 1 & 2) but the cell in post-fixed row will remain:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n *\n * After undo the table post-fixer will detect that two rows are shorter then other and will fix table to:\n *\n *\t\t<table>\n *\t\t\t<tbody>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>11</td>\n *\t\t\t\t\t<td>12</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>21</td>\n *\t\t\t\t\t<td>22</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer after undo)</td>\n *\t\t\t\t</tr>\n *\t\t\t\t<tr>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by B)</td>\n *\t\t\t\t\t<td>(empty, inserted by a post-fixer)</td>\n *\t\t\t\t</tr>\n *\t\t\t</tbody>\n *\t\t</table>\n * @param {module:engine/model/model~Model} model\n */\n\nexport default function injectTableLayoutPostFixer(model) {\n  model.document.registerPostFixer(writer => tableLayoutPostFixer(writer, model));\n} // The table layout post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\n\nfunction tableLayoutPostFixer(writer, model) {\n  const changes = model.document.differ.getChanges();\n  let wasFixed = false; // Do not analyze the same table more then once - may happen for multiple changes in the same table.\n\n  const analyzedTables = new Set();\n\n  for (const entry of changes) {\n    let table;\n\n    if (entry.name == 'table' && entry.type == 'insert') {\n      table = entry.position.nodeAfter;\n    } // Fix table on adding/removing table cells and rows.\n\n\n    if (entry.name == 'tableRow' || entry.name == 'tableCell') {\n      table = findAncestor('table', entry.position);\n    } // Fix table on any table's attribute change - including attributes of table cells.\n\n\n    if (isTableAttributeEntry(entry)) {\n      table = findAncestor('table', entry.range.start);\n    }\n\n    if (table && !analyzedTables.has(table)) {\n      // Step 1: correct rowspans of table cells if necessary.\n      // The wasFixed flag should be true if any of tables in batch was fixed - might be more then one.\n      wasFixed = fixTableCellsRowspan(table, writer) || wasFixed; // Step 2: fix table rows sizes.\n\n      wasFixed = fixTableRowsSizes(table, writer) || wasFixed;\n      analyzedTables.add(table);\n    }\n  }\n\n  return wasFixed;\n} // Fixes the invalid value of the rowspan attribute because a table cell cannot vertically extend beyond the table section it belongs to.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\n\n\nfunction fixTableCellsRowspan(table, writer) {\n  let wasFixed = false;\n  const cellsToTrim = findCellsToTrim(table);\n\n  if (cellsToTrim.length) {\n    wasFixed = true;\n\n    for (const data of cellsToTrim) {\n      updateNumericAttribute('rowspan', data.rowspan, data.cell, writer, 1);\n    }\n  }\n\n  return wasFixed;\n} // Makes all table rows in a table the same size.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean} Returns true if table was fixed.\n\n\nfunction fixTableRowsSizes(table, writer) {\n  let wasFixed = false;\n  const rowsLengths = getRowsLengths(table);\n  const tableSize = rowsLengths[0];\n  const isValid = Object.values(rowsLengths).every(length => length === tableSize);\n\n  if (!isValid) {\n    const maxColumns = Object.values(rowsLengths).reduce((prev, current) => current > prev ? current : prev, 0);\n\n    for (const [rowIndex, size] of Object.entries(rowsLengths)) {\n      const columnsToInsert = maxColumns - size;\n\n      if (columnsToInsert) {\n        for (let i = 0; i < columnsToInsert; i++) {\n          createEmptyTableCell(writer, writer.createPositionAt(table.getChild(rowIndex), 'end'));\n        }\n\n        wasFixed = true;\n      }\n    }\n  }\n\n  return wasFixed;\n} // Searches for the table cells that extends beyond the table section to which they belong to. It will return an array of objects\n// that holds table cells to be trimmed and correct value of a rowspan attribute to set.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Array.<{{cell, rowspan}}>}\n\n\nfunction findCellsToTrim(table) {\n  const headingRows = parseInt(table.getAttribute('headingRows') || 0);\n  const maxRows = table.childCount;\n  const cellsToTrim = [];\n\n  for (const {\n    row,\n    rowspan,\n    cell\n  } of new TableWalker(table)) {\n    // Skip cells that do not expand over its row.\n    if (rowspan < 2) {\n      continue;\n    }\n\n    const isInHeader = row < headingRows; // Row limit is either end of header section or whole table as table body is after the header.\n\n    const rowLimit = isInHeader ? headingRows : maxRows; // If table cell expands over its limit reduce it height to proper value.\n\n    if (row + rowspan > rowLimit) {\n      const newRowspan = rowLimit - row;\n      cellsToTrim.push({\n        cell,\n        rowspan: newRowspan\n      });\n    }\n  }\n\n  return cellsToTrim;\n} // Returns an object with lengths of rows assigned to the corresponding row index.\n//\n// @param {module:engine/model/element~Element} table\n// @returns {Object}\n\n\nfunction getRowsLengths(table) {\n  const lengths = {};\n\n  for (const {\n    row\n  } of new TableWalker(table, {\n    includeSpanned: true\n  })) {\n    if (!lengths[row]) {\n      lengths[row] = 0;\n    }\n\n    lengths[row] += 1;\n  }\n\n  return lengths;\n} // Checks if the differ entry for an attribute change is one of table's attributes.\n//\n// @param entry\n// @returns {Boolean}\n\n\nfunction isTableAttributeEntry(entry) {\n  const isAttributeType = entry.type === 'attribute';\n  const key = entry.attributeKey;\n  return isAttributeType && (key === 'headingRows' || key === 'colspan' || key === 'rowspan');\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-paragraph-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which inserts `paragraph` element into empty table cells.\n *\n * A table cell must contain at least one block element as a child. An empty table cell will have empty `paragraph` as a child.\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * Will be fixed to:\n *\n *\t\t<table>\n *\t\t\t<tableRow>\n *\t\t\t\t<tableCell><paragraph></paragraph></tableCell>\n *\t\t\t</tableRow>\n *\t\t</table>\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellParagraphPostFixer(model) {\n  model.document.registerPostFixer(writer => tableCellContentsPostFixer(writer, model));\n} // The table cell contents post-fixer.\n//\n// @param {module:engine/model/writer~Writer} writer\n// @param {module:engine/model/model~Model} model\n\nfunction tableCellContentsPostFixer(writer, model) {\n  const changes = model.document.differ.getChanges();\n  let wasFixed = false;\n\n  for (const entry of changes) {\n    if (entry.type == 'insert' && entry.name == 'table') {\n      wasFixed = fixTable(entry.position.nodeAfter, writer) || wasFixed;\n    }\n\n    if (entry.type == 'insert' && entry.name == 'tableRow') {\n      wasFixed = fixTableRow(entry.position.nodeAfter, writer) || wasFixed;\n    }\n\n    if (entry.type == 'insert' && entry.name == 'tableCell') {\n      wasFixed = fixTableCellContent(entry.position.nodeAfter, writer) || wasFixed;\n    }\n\n    if (checkTableCellChange(entry)) {\n      wasFixed = fixTableCellContent(entry.position.parent, writer) || wasFixed;\n    }\n  }\n\n  return wasFixed;\n} // Fixes all table cells in a table.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction fixTable(table, writer) {\n  let wasFixed = false;\n\n  for (const row of table.getChildren()) {\n    wasFixed = fixTableRow(row, writer) || wasFixed;\n  }\n\n  return wasFixed;\n} // Fixes all table cells in a table row.\n//\n// @param {module:engine/model/element~Element} tableRow\n// @param {module:engine/model/writer~Writer} writer\n\n\nfunction fixTableRow(tableRow, writer) {\n  let wasFixed = false;\n\n  for (const tableCell of tableRow.getChildren()) {\n    wasFixed = fixTableCellContent(tableCell, writer) || wasFixed;\n  }\n\n  return wasFixed;\n} // Fixes all table cell content by:\n// - adding paragraph to a table cell without any child.\n// - wrapping direct $text in <paragraph>.\n//\n// @param {module:engine/model/element~Element} table\n// @param {module:engine/model/writer~Writer} writer\n// @returns {Boolean}\n\n\nfunction fixTableCellContent(tableCell, writer) {\n  // Insert paragraph to an empty table cell.\n  if (tableCell.childCount == 0) {\n    writer.insertElement('paragraph', tableCell);\n    return true;\n  } // Check table cell children for directly placed text nodes.\n  // Temporary solution. See https://github.com/ckeditor/ckeditor5/issues/1464.\n\n\n  const textNodes = Array.from(tableCell.getChildren()).filter(child => child.is('text'));\n\n  for (const child of textNodes) {\n    writer.wrap(writer.createRangeOn(child), 'paragraph');\n  } // Return true when there were text nodes to fix.\n\n\n  return !!textNodes.length;\n} // Check if differ change should fix table cell. This happens on:\n// - removing content from table cell (ie tableCell can be left empty).\n// - adding text node directly into a table cell.\n//\n// @param {Object} differ change entry\n// @returns {Boolean}\n\n\nfunction checkTableCellChange(entry) {\n  if (!entry.position || !entry.position.parent.is('tableCell')) {\n    return false;\n  }\n\n  return entry.type == 'insert' && entry.name == '$text' || entry.type == 'remove';\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/converters/table-cell-refresh-post-fixer\n */\n\n/**\n * Injects a table cell post-fixer into the model which marks the table cell in the differ to have it re-rendered.\n *\n * Model `paragraph` inside a table cell can be rendered as `<span>` or `<p>`. It is rendered as `<span>` if this is the only block\n * element in that table cell and it doesn't have any attributes. It is rendered as `<p>` otherwise.\n *\n * When table cell content changes, for example a second `paragraph` element is added we need to ensure that the first `paragraph` is\n * re-rendered so it changes to `<p>` from `<span>`. The easiest way to do it is to re-render whole table cell.\n *\n * @param {module:engine/model/model~Model} model\n */\nexport default function injectTableCellRefreshPostFixer(model) {\n  model.document.registerPostFixer(() => tableCellRefreshPostFixer(model));\n}\n\nfunction tableCellRefreshPostFixer(model) {\n  const differ = model.document.differ; // Stores cells to be refreshed so the table cell will be refreshed once for multiple changes.\n\n  const cellsToRefresh = new Set();\n\n  for (const change of differ.getChanges()) {\n    const parent = change.type == 'insert' || change.type == 'remove' ? change.position.parent : change.range.start.parent;\n\n    if (parent.is('tableCell') && checkRefresh(parent, change.type)) {\n      cellsToRefresh.add(parent);\n    }\n  }\n\n  if (cellsToRefresh.size) {\n    for (const tableCell of cellsToRefresh.values()) {\n      differ.refreshItem(tableCell);\n    }\n\n    return true;\n  }\n\n  return false;\n} // Checks if the model table cell requires refreshing to be re-rendered to a proper state in the view.\n//\n// This methods detects changes that will require renaming <span> to <p> (or vice versa) in the view.\n//\n// This method is a simple heuristic that checks only a single change and will sometimes give a false positive result when multiple changes\n// will result in a state that does not require renaming in the view (but will be seen as requiring a refresh).\n//\n// For instance: a `<span>` should be renamed to `<p>` when adding an attribute to a `<paragraph>`.\n// But adding one attribute and removing another one will result in a false positive: the check for added attribute will see one attribute\n// on a paragraph and will falsy qualify such change as adding an attribute to a paragraph without any attribute.\n//\n// @param {module:engine/model/element~Element} tableCell Table cell to check.\n// @param {String} type Type of change.\n\n\nfunction checkRefresh(tableCell, type) {\n  const hasInnerParagraph = Array.from(tableCell.getChildren()).some(child => child.is('paragraph')); // If there is no paragraph in table cell then the view doesn't require refreshing.\n  //\n  // Why? What we really want to achieve is to make all the old paragraphs (which weren't added in this batch) to be\n  // converted once again, so that the paragraph-in-table-cell converter can correctly create a `<p>` or a `<span>` element.\n  // If there are no paragraphs in the table cell, we don't care.\n\n  if (!hasInnerParagraph) {\n    return false;\n  } // For attribute change we only refresh if there is a single paragraph as in this case we may want to change existing `<span>` to `<p>`.\n\n\n  if (type == 'attribute') {\n    const attributesCount = Array.from(tableCell.getChild(0).getAttributeKeys()).length;\n    return tableCell.childCount === 1 && attributesCount < 2;\n  } // For other changes (insert, remove) the `<span>` to `<p>` change is needed when:\n  //\n  // - another element is added to a single paragraph (childCount becomes >= 2)\n  // - another element is removed and a single paragraph is left (childCount == 1)\n\n\n  return tableCell.childCount <= (type == 'insert' ? 2 : 1);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/tableediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport upcastTable, { upcastTableCell } from './converters/upcasttable';\nimport { downcastInsertCell, downcastInsertRow, downcastInsertTable, downcastRemoveRow, downcastTableHeadingColumnsChange, downcastTableHeadingRowsChange } from './converters/downcast';\nimport InsertTableCommand from './commands/inserttablecommand';\nimport InsertRowCommand from './commands/insertrowcommand';\nimport InsertColumnCommand from './commands/insertcolumncommand';\nimport SplitCellCommand from './commands/splitcellcommand';\nimport MergeCellCommand from './commands/mergecellcommand';\nimport RemoveRowCommand from './commands/removerowcommand';\nimport RemoveColumnCommand from './commands/removecolumncommand';\nimport SetHeaderRowCommand from './commands/setheaderrowcommand';\nimport SetHeaderColumnCommand from './commands/setheadercolumncommand';\nimport { findAncestor } from './commands/utils';\nimport TableUtils from '../src/tableutils';\nimport injectTableLayoutPostFixer from './converters/table-layout-post-fixer';\nimport injectTableCellParagraphPostFixer from './converters/table-cell-paragraph-post-fixer';\nimport injectTableCellRefreshPostFixer from './converters/table-cell-refresh-post-fixer';\nimport '../theme/tableediting.css';\n/**\n * The table editing feature.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class TableEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'TableEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const model = editor.model;\n    const schema = model.schema;\n    const conversion = editor.conversion;\n    schema.register('table', {\n      allowWhere: '$block',\n      allowAttributes: ['headingRows', 'headingColumns'],\n      isLimit: true,\n      isObject: true,\n      isBlock: true\n    });\n    schema.register('tableRow', {\n      allowIn: 'table',\n      isLimit: true\n    });\n    schema.register('tableCell', {\n      allowIn: 'tableRow',\n      allowAttributes: ['colspan', 'rowspan'],\n      isLimit: true\n    }); // Allow all $block content inside table cell.\n\n    schema.extend('$block', {\n      allowIn: 'tableCell'\n    }); // Disallow table in table.\n\n    schema.addChildCheck((context, childDefinition) => {\n      if (childDefinition.name == 'table' && Array.from(context.getNames()).includes('table')) {\n        return false;\n      }\n    }); // Table conversion.\n\n    conversion.for('upcast').add(upcastTable());\n    conversion.for('editingDowncast').add(downcastInsertTable({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertTable()); // Table row conversion.\n\n    conversion.for('upcast').elementToElement({\n      model: 'tableRow',\n      view: 'tr'\n    });\n    conversion.for('editingDowncast').add(downcastInsertRow({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertRow());\n    conversion.for('downcast').add(downcastRemoveRow()); // Table cell conversion.\n\n    conversion.for('upcast').add(upcastTableCell('td'));\n    conversion.for('upcast').add(upcastTableCell('th'));\n    conversion.for('editingDowncast').add(downcastInsertCell({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastInsertCell()); // Table attributes conversion.\n\n    conversion.attributeToAttribute({\n      model: 'colspan',\n      view: 'colspan'\n    });\n    conversion.attributeToAttribute({\n      model: 'rowspan',\n      view: 'rowspan'\n    }); // Table heading rows and cols conversion.\n\n    conversion.for('editingDowncast').add(downcastTableHeadingColumnsChange({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastTableHeadingColumnsChange());\n    conversion.for('editingDowncast').add(downcastTableHeadingRowsChange({\n      asWidget: true\n    }));\n    conversion.for('dataDowncast').add(downcastTableHeadingRowsChange()); // Define all the commands.\n\n    editor.commands.add('insertTable', new InsertTableCommand(editor));\n    editor.commands.add('insertTableRowAbove', new InsertRowCommand(editor, {\n      order: 'above'\n    }));\n    editor.commands.add('insertTableRowBelow', new InsertRowCommand(editor, {\n      order: 'below'\n    }));\n    editor.commands.add('insertTableColumnLeft', new InsertColumnCommand(editor, {\n      order: 'left'\n    }));\n    editor.commands.add('insertTableColumnRight', new InsertColumnCommand(editor, {\n      order: 'right'\n    }));\n    editor.commands.add('removeTableRow', new RemoveRowCommand(editor));\n    editor.commands.add('removeTableColumn', new RemoveColumnCommand(editor));\n    editor.commands.add('splitTableCellVertically', new SplitCellCommand(editor, {\n      direction: 'vertically'\n    }));\n    editor.commands.add('splitTableCellHorizontally', new SplitCellCommand(editor, {\n      direction: 'horizontally'\n    }));\n    editor.commands.add('mergeTableCellRight', new MergeCellCommand(editor, {\n      direction: 'right'\n    }));\n    editor.commands.add('mergeTableCellLeft', new MergeCellCommand(editor, {\n      direction: 'left'\n    }));\n    editor.commands.add('mergeTableCellDown', new MergeCellCommand(editor, {\n      direction: 'down'\n    }));\n    editor.commands.add('mergeTableCellUp', new MergeCellCommand(editor, {\n      direction: 'up'\n    }));\n    editor.commands.add('setTableColumnHeader', new SetHeaderColumnCommand(editor));\n    editor.commands.add('setTableRowHeader', new SetHeaderRowCommand(editor));\n    injectTableLayoutPostFixer(model);\n    injectTableCellRefreshPostFixer(model);\n    injectTableCellParagraphPostFixer(model); // Handle tab key navigation.\n\n    this.editor.keystrokes.set('Tab', (...args) => this._handleTabOnSelectedTable(...args), {\n      priority: 'low'\n    });\n    this.editor.keystrokes.set('Tab', this._getTabHandler(true), {\n      priority: 'low'\n    });\n    this.editor.keystrokes.set('Shift+Tab', this._getTabHandler(false), {\n      priority: 'low'\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [TableUtils];\n  }\n  /**\n   * Handles {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n   * when the table widget is selected.\n   *\n   * @private\n   * @param {module:utils/eventinfo~EventInfo} eventInfo\n   * @param {module:engine/view/observer/domeventdata~DomEventData} domEventData\n   */\n\n\n  _handleTabOnSelectedTable(domEventData, cancel) {\n    const editor = this.editor;\n    const selection = editor.model.document.selection;\n\n    if (!selection.isCollapsed && selection.rangeCount === 1 && selection.getFirstRange().isFlat) {\n      const selectedElement = selection.getSelectedElement();\n\n      if (!selectedElement || !selectedElement.is('table')) {\n        return;\n      }\n\n      cancel();\n      editor.model.change(writer => {\n        writer.setSelection(writer.createRangeIn(selectedElement.getChild(0).getChild(0)));\n      });\n    }\n  }\n  /**\n   * Returns a handler for {@link module:engine/view/document~Document#event:keydown keydown} events for the <kbd>Tab</kbd> key executed\n   * inside table cell.\n   *\n   * @private\n   * @param {Boolean} isForward Whether this handler will move selection to the next cell or previous.\n   */\n\n\n  _getTabHandler(isForward) {\n    const editor = this.editor;\n    return (domEventData, cancel) => {\n      const selection = editor.model.document.selection;\n      const firstPosition = selection.getFirstPosition();\n      const tableCell = findAncestor('tableCell', firstPosition);\n\n      if (!tableCell) {\n        return;\n      }\n\n      cancel();\n      const tableRow = tableCell.parent;\n      const table = tableRow.parent;\n      const currentRowIndex = table.getChildIndex(tableRow);\n      const currentCellIndex = tableRow.getChildIndex(tableCell);\n      const isFirstCellInRow = currentCellIndex === 0;\n\n      if (!isForward && isFirstCellInRow && currentRowIndex === 0) {\n        // It's the first cell of a table - don't do anything (stay in current position).\n        return;\n      }\n\n      const isLastCellInRow = currentCellIndex === tableRow.childCount - 1;\n      const isLastRow = currentRowIndex === table.childCount - 1;\n\n      if (isForward && isLastRow && isLastCellInRow) {\n        editor.execute('insertTableRowBelow'); // Check if the command actually added a row. If `insertTableRowBelow` execution didn't add a row (because it was disabled\n        // or it got overwritten) do not change the selection.\n\n        if (currentRowIndex === table.childCount - 1) {\n          return;\n        }\n      }\n\n      let cellToFocus; // Move to first cell in next row.\n\n      if (isForward && isLastCellInRow) {\n        const nextRow = table.getChild(currentRowIndex + 1);\n        cellToFocus = nextRow.getChild(0);\n      } // Move to last cell in a previous row.\n      else if (!isForward && isFirstCellInRow) {\n          const previousRow = table.getChild(currentRowIndex - 1);\n          cellToFocus = previousRow.getChild(previousRow.childCount - 1);\n        } // Move to next/previous cell.\n        else {\n            cellToFocus = tableRow.getChild(currentCellIndex + (isForward ? 1 : -1));\n          }\n\n      editor.model.change(writer => {\n        writer.setSelection(writer.createRangeIn(cellToFocus));\n      });\n    };\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/ui/inserttableview\n */\nimport View from '@ckeditor/ckeditor5-ui/src/view';\nimport './../../theme/inserttable.css';\n/**\n * The table size view.\n *\n * It renders a 10x10 grid to choose the inserted table size.\n *\n * @extends module:ui/view~View\n * @implements module:ui/dropdown/dropdownpanelfocusable~DropdownPanelFocusable\n */\n\nexport default class InsertTableView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * A collection of table size box items.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.items = this.createCollection();\n    /**\n     * The currently selected number of rows of the new table.\n     *\n     * @observable\n     * @member {Number} #rows\n     */\n\n    this.set('rows', 0);\n    /**\n     * The currently selected number of columns of the new table.\n     *\n     * @observable\n     * @member {Number} #columns\n     */\n\n    this.set('columns', 0);\n    /**\n     * The label text displayed under the boxes.\n     *\n     * @observable\n     * @member {String} #label\n     */\n\n    this.bind('label').to(this, 'columns', this, 'rows', (columns, rows) => `${rows} × ${columns}`);\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck']\n      },\n      children: [{\n        tag: 'div',\n        attributes: {\n          class: ['ck-insert-table-dropdown__grid']\n        },\n        children: this.items\n      }, {\n        tag: 'div',\n        attributes: {\n          class: ['ck-insert-table-dropdown__label']\n        },\n        children: [{\n          text: bind.to('label')\n        }]\n      }],\n      on: {\n        mousedown: bind.to(evt => {\n          evt.preventDefault();\n        }),\n        click: bind.to(() => {\n          this.fire('execute');\n        })\n      }\n    }); // Add grid boxes to table selection view.\n\n    for (let index = 0; index < 100; index++) {\n      const boxView = new TableSizeGridBoxView(); // Listen to box view 'over' event which indicates that mouse is over this box.\n\n      boxView.on('over', () => {\n        // Translate box index to the row & column index.\n        const row = Math.floor(index / 10);\n        const column = index % 10; // As row & column indexes are zero-based transform it to number of selected rows & columns.\n\n        this.set('rows', row + 1);\n        this.set('columns', column + 1);\n      });\n      this.items.add(boxView);\n    }\n\n    this.on('change:columns', () => {\n      this._highlightGridBoxes();\n    });\n    this.on('change:rows', () => {\n      this._highlightGridBoxes();\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  focus() {} // The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n  // The method should be implemented while working on keyboard support for this view. See #22.\n\n  /**\n   * @inheritDoc\n   */\n\n\n  focusLast() {} // The dropdown panel expects DropdownPanelFocusable interface on views passed to dropdown panel. See #30.\n  // The method should be implemented while working on keyboard support for this view. See #22.\n\n  /**\n   * Highlights grid boxes depending on rows and columns selected.\n   *\n   * @private\n   */\n\n\n  _highlightGridBoxes() {\n    const rows = this.rows;\n    const columns = this.columns;\n    this.items.map((boxView, index) => {\n      // Translate box index to the row & column index.\n      const itemRow = Math.floor(index / 10);\n      const itemColumn = index % 10; // Grid box is highlighted when its row & column index belongs to selected number of rows & columns.\n\n      const isOn = itemRow < rows && itemColumn < columns;\n      boxView.set('isOn', isOn);\n    });\n  }\n\n}\n/**\n * A single grid box view element.\n *\n * This class is used to render the table size selection grid in {@link module:table/ui/inserttableview~InsertTableView}.\n *\n * @private\n */\n\nclass TableSizeGridBoxView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate;\n    /**\n     * Controls whether the grid box view is \"on\".\n     *\n     * @observable\n     * @member {Boolean} #isOn\n     */\n\n    this.set('isOn', false);\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck-insert-table-dropdown-grid-box', bind.if('isOn', 'ck-on')]\n      },\n      on: {\n        mouseover: bind.to('over')\n      }\n    });\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M18 7v1H2V7h16zm0 5v1H2v-1h16z\\\" opacity=\\\".6\\\"/><path d=\\\"M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v16h-1V2z\\\" opacity=\\\".6\\\"/><path d=\\\"M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z\\\" opacity=\\\".6\\\"/><path d=\\\"M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tableui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    addListToDropdown,\n    createDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport Model from '@ckeditor/ckeditor5-ui/src/model';\nimport Collection from '@ckeditor/ckeditor5-utils/src/collection';\nimport InsertTableView from './ui/inserttableview';\nimport tableIcon from './../theme/icons/table.svg';\nimport tableColumnIcon from './../theme/icons/table-column.svg';\nimport tableRowIcon from './../theme/icons/table-row.svg';\nimport tableMergeCellIcon from './../theme/icons/table-merge-cell.svg';\n/**\n * The table UI plugin. It introduces:\n *\n * * The `'insertTable'` dropdown,\n * * The `'tableColumn'` dropdown,\n * * The `'tableRow'` dropdown,\n * * The `'mergeTableCells'` dropdown.\n *\n * The `'tableColumn'`, `'tableRow'`, `'mergeTableCells'` dropdowns work best with {@link module:table/tabletoolbar~TableToolbar}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = this.editor.t;\n        const contentLanguageDirection = editor.locale.contentLanguageDirection;\n        const isContentLtr = contentLanguageDirection === 'ltr';\n        editor.ui.componentFactory.add('insertTable', locale => {\n            const command = editor.commands.get('insertTable');\n            const dropdownView = createDropdown(locale);\n            dropdownView.bind('isEnabled').to(command);\n            // Decorate dropdown's button.\n            dropdownView.buttonView.set({\n                icon: tableIcon,\n                label: t('af'),\n                tooltip: true\n            });\n            // Prepare custom view for dropdown's panel.\n            const insertTableView = new InsertTableView(locale);\n            dropdownView.panelView.children.add(insertTableView);\n            insertTableView.delegate('execute').to(dropdownView);\n            dropdownView.buttonView.on('open', () => {\n                // Reset the chooser before showing it to the user.\n                insertTableView.rows = 0;\n                insertTableView.columns = 0;\n            });\n            dropdownView.on('execute', () => {\n                editor.execute('insertTable', {\n                    rows: insertTableView.rows,\n                    columns: insertTableView.columns\n                });\n                editor.editing.view.focus();\n            });\n            return dropdownView;\n        });\n        editor.ui.componentFactory.add('tableColumn', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableColumnHeader',\n                        label: t('ag'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnLeft' : 'insertTableColumnRight',\n                        label: t('ah')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'insertTableColumnRight' : 'insertTableColumnLeft',\n                        label: t('ai')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableColumn',\n                        label: t('aj')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('ak'), tableColumnIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('tableRow', locale => {\n            const options = [\n                {\n                    type: 'switchbutton',\n                    model: {\n                        commandName: 'setTableRowHeader',\n                        label: t('al'),\n                        bindIsOn: true\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowBelow',\n                        label: t('am')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'insertTableRowAbove',\n                        label: t('an')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'removeTableRow',\n                        label: t('ao')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('ap'), tableRowIcon, options, locale);\n        });\n        editor.ui.componentFactory.add('mergeTableCells', locale => {\n            const options = [\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellUp',\n                        label: t('aq')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellRight' : 'mergeTableCellLeft',\n                        label: t('ar')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'mergeTableCellDown',\n                        label: t('as')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: isContentLtr ? 'mergeTableCellLeft' : 'mergeTableCellRight',\n                        label: t('at')\n                    }\n                },\n                { type: 'separator' },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellVertically',\n                        label: t('au')\n                    }\n                },\n                {\n                    type: 'button',\n                    model: {\n                        commandName: 'splitTableCellHorizontally',\n                        label: t('av')\n                    }\n                }\n            ];\n            return this._prepareDropdown(t('aw'), tableMergeCellIcon, options, locale);\n        });\n    }\n    /**\n   * Creates a dropdown view from the set of options.\n   *\n   * @private\n   * @param {String} label The dropdown button label.\n   * @param {String} icon An icon for the dropdown button.\n   * @param {Array.<module:ui/dropdown/utils~ListDropdownItemDefinition>} options The list of options for the dropdown.\n   * @param {module:utils/locale~Locale} locale\n   * @returns {module:ui/dropdown/dropdownview~DropdownView}\n   */\n    _prepareDropdown(label, icon, options, locale) {\n        const editor = this.editor;\n        const dropdownView = createDropdown(locale);\n        const commands = [];\n        // Prepare dropdown list items for list dropdown.\n        const itemDefinitions = new Collection();\n        for (const option of options) {\n            addListOption(option, editor, commands, itemDefinitions);\n        }\n        addListToDropdown(dropdownView, itemDefinitions);\n        // Decorate dropdown's button.\n        dropdownView.buttonView.set({\n            label,\n            icon,\n            tooltip: true\n        });\n        // Make dropdown button disabled when all options are disabled.\n        dropdownView.bind('isEnabled').toMany(commands, 'isEnabled', (...areEnabled) => {\n            return areEnabled.some(isEnabled => isEnabled);\n        });\n        this.listenTo(dropdownView, 'execute', evt => {\n            editor.execute(evt.source.commandName);\n            editor.editing.view.focus();\n        });\n        return dropdownView;\n    }\n}\n// Adds an option to a list view.\n//\n// @param {module:table/tableui~DropdownOption} option Configuration option.\n// @param {module:core/editor/editor~Editor} editor\n// @param {Array.<module:core/command~Command>} commands List of commands to update.\n// @param {Iterable.<module:ui/dropdown/utils~ListDropdownItemDefinition>} itemDefinitions\n// Collection of dropdown items to update with given option.\nfunction addListOption(option, editor, commands, itemDefinitions) {\n    const model = option.model = new Model(option.model);\n    const {commandName, bindIsOn} = option.model;\n    if (option.type !== 'separator') {\n        const command = editor.commands.get(commandName);\n        commands.push(command);\n        model.set({ commandName });\n        model.bind('isEnabled').to(command);\n        if (bindIsOn) {\n            model.bind('isOn').to(command, 'value');\n        }\n    }\n    model.set({ withText: true });\n    itemDefinitions.add(option);\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/underline/underlineediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\nconst UNDERLINE = 'underline';\n/**\n * The underline editing feature.\n *\n * It registers the `'underline'` command, the <kbd>Ctrl+U</kbd> keystroke\n * and introduces the `underline` attribute in the model which renders to the view as an `<u>` element.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class UnderlineEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'UnderlineEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow strikethrough attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: UNDERLINE\n    });\n    editor.model.schema.setAttributeProperties(UNDERLINE, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n    editor.conversion.attributeToElement({\n      model: UNDERLINE,\n      view: 'u',\n      upcastAlso: {\n        styles: {\n          'text-decoration': 'underline'\n        }\n      }\n    }); // Create underline command.\n\n    editor.commands.add(UNDERLINE, new AttributeCommand(editor, UNDERLINE)); // Set the Ctrl+U keystroke.\n\n    editor.keystrokes.set('CTRL+U', 'underline');\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M3 18v-1.5h14V18zM5.2 10V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/underline/underlineui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport underlineIcon from '../../theme/icons/underline.svg';\nconst UNDERLINE = 'underline';\n/**\n * The underline UI feature. It introduces the Underline button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class UnderlineUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add bold button to feature components.\n        editor.ui.componentFactory.add(UNDERLINE, locale => {\n            const command = editor.commands.get(UNDERLINE);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('j'),\n                icon: underlineIcon,\n                keystroke: 'CTRL+U',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(UNDERLINE));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/strikethrough/strikethroughediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AttributeCommand from '../attributecommand';\nconst STRIKETHROUGH = 'strikethrough';\n/**\n * The strikethrough editing feature.\n *\n * It registers the `'strikethrough'` command, the <kbd>Ctrl+Shift+X</kbd> keystroke and introduces the\n * `strikethroughsthrough` attribute in the model which renders to the view\n * as a `<s>` element.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class StrikethroughEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'StrikethroughEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow strikethrough attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: STRIKETHROUGH\n    });\n    editor.model.schema.setAttributeProperties(STRIKETHROUGH, {\n      isFormatting: true,\n      copyOnEnter: true\n    });\n    editor.conversion.attributeToElement({\n      model: STRIKETHROUGH,\n      view: 's',\n      upcastAlso: ['del', 'strike', {\n        styles: {\n          'text-decoration': 'line-through'\n        }\n      }]\n    }); // Create strikethrough command.\n\n    editor.commands.add(STRIKETHROUGH, new AttributeCommand(editor, STRIKETHROUGH)); // Set the Ctrl+Shift+X keystroke.\n\n    editor.keystrokes.set('CTRL+SHIFT+X', 'strikethrough');\n  }\n\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path d=\\\"M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9L6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z\\\"/><path d=\\\"M3 10.5V9h14v1.5z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module basic-styles/strikethrough/strikethroughui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport strikethroughIcon from '../../theme/icons/strikethrough.svg';\nconst STRIKETHROUGH = 'strikethrough';\n/**\n * The strikethrough UI feature. It introduces the Strikethrough button.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class StrikethroughUI extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const editor = this.editor;\n        const t = editor.t;\n        // Add strikethrough button to feature components.\n        editor.ui.componentFactory.add(STRIKETHROUGH, locale => {\n            const command = editor.commands.get(STRIKETHROUGH);\n            const view = new ButtonView(locale);\n            view.set({\n                label: t('m'),\n                icon: strikethroughIcon,\n                keystroke: 'CTRL+SHIFT+X',\n                tooltip: true,\n                isToggleable: true\n            });\n            view.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n            // Execute command.\n            this.listenTo(view, 'execute', () => editor.execute(STRIKETHROUGH));\n            return view;\n        });\n    }\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module highlight/highlightcommand\n */\nimport Command from '@ckeditor/ckeditor5-core/src/command';\n/**\n * The highlight command. It is used by the {@link module:highlight/highlightediting~HighlightEditing highlight feature}\n * to apply the text highlighting.\n *\n *\t\teditor.execute( 'highlight', { value: 'greenMarker' } );\n *\n * **Note**: Executing the command without a value removes the attribute from the model. If the selection is collapsed\n * inside a text with the highlight attribute, the command will remove the attribute from the entire range\n * of that text.\n *\n * @extends module:core/command~Command\n */\n\nexport default class HighlightCommand extends Command {\n  /**\n   * @inheritDoc\n   */\n  refresh() {\n    const model = this.editor.model;\n    const doc = model.document;\n    /**\n     * A value indicating whether the command is active. If the selection has some highlight attribute,\n     * it corresponds to the value of that attribute.\n     *\n     * @observable\n     * @readonly\n     * @member {undefined|String} module:highlight/highlightcommand~HighlightCommand#value\n     */\n\n    this.value = doc.selection.getAttribute('highlight');\n    this.isEnabled = model.schema.checkAttributeInSelection(doc.selection, 'highlight');\n  }\n  /**\n   * Executes the command.\n   *\n   * @protected\n   * @param {Object} [options] Options for the executed command.\n   * @param {String} [options.value] The value to apply.\n   *\n   * @fires execute\n   */\n\n\n  execute(options = {}) {\n    const model = this.editor.model;\n    const document = model.document;\n    const selection = document.selection;\n    const highlighter = options.value;\n    model.change(writer => {\n      const ranges = model.schema.getValidRanges(selection.getRanges(), 'highlight');\n\n      if (selection.isCollapsed) {\n        const position = selection.getFirstPosition(); // When selection is inside text with `highlight` attribute.\n\n        if (selection.hasAttribute('highlight')) {\n          // Find the full highlighted range.\n          const isSameHighlight = value => {\n            return value.item.hasAttribute('highlight') && value.item.getAttribute('highlight') === this.value;\n          };\n\n          const highlightStart = position.getLastMatchingPosition(isSameHighlight, {\n            direction: 'backward'\n          });\n          const highlightEnd = position.getLastMatchingPosition(isSameHighlight);\n          const highlightRange = writer.createRange(highlightStart, highlightEnd); // Then depending on current value...\n\n          if (!highlighter || this.value === highlighter) {\n            // ...remove attribute when passing highlighter different then current or executing \"eraser\".\n            writer.removeAttribute('highlight', highlightRange);\n            writer.removeSelectionAttribute('highlight');\n          } else {\n            // ...update `highlight` value.\n            writer.setAttribute('highlight', highlighter, highlightRange);\n            writer.setSelectionAttribute('highlight', highlighter);\n          }\n        } else if (highlighter) {\n          writer.setSelectionAttribute('highlight', highlighter);\n        }\n      } else {\n        for (const range of ranges) {\n          if (highlighter) {\n            writer.setAttribute('highlight', highlighter, range);\n          } else {\n            writer.removeAttribute('highlight', range);\n          }\n        }\n      }\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module highlight/highlightediting\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport HighlightCommand from './highlightcommand';\n/**\n * The highlight editing feature. It introduces the {@link module:highlight/highlightcommand~HighlightCommand command} and the `highlight`\n * attribute in the {@link module:engine/model/model~Model model} which renders in the {@link module:engine/view/view view}\n * as a `<mark>` element with a `class` attribute (`<mark class=\"marker-green\">...</mark>`) depending\n * on the {@link module:highlight/highlight~HighlightConfig configuration}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class HighlightEditing extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'HighlightEditing';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  constructor(editor) {\n    super(editor);\n    editor.config.define('highlight', {\n      options: [{\n        model: 'yellowMarker',\n        class: 'marker-yellow',\n        title: 'Yellow marker',\n        color: 'var(--ck-highlight-marker-yellow)',\n        type: 'marker'\n      }, {\n        model: 'greenMarker',\n        class: 'marker-green',\n        title: 'Green marker',\n        color: 'var(--ck-highlight-marker-green)',\n        type: 'marker'\n      }, {\n        model: 'pinkMarker',\n        class: 'marker-pink',\n        title: 'Pink marker',\n        color: 'var(--ck-highlight-marker-pink)',\n        type: 'marker'\n      }, {\n        model: 'blueMarker',\n        class: 'marker-blue',\n        title: 'Blue marker',\n        color: 'var(--ck-highlight-marker-blue)',\n        type: 'marker'\n      }, {\n        model: 'redPen',\n        class: 'pen-red',\n        title: 'Red pen',\n        color: 'var(--ck-highlight-pen-red)',\n        type: 'pen'\n      }, {\n        model: 'greenPen',\n        class: 'pen-green',\n        title: 'Green pen',\n        color: 'var(--ck-highlight-pen-green)',\n        type: 'pen'\n      }]\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor; // Allow highlight attribute on text nodes.\n\n    editor.model.schema.extend('$text', {\n      allowAttributes: 'highlight'\n    });\n    const options = editor.config.get('highlight.options'); // Set-up the two-way conversion.\n\n    editor.conversion.attributeToElement(_buildDefinition(options));\n    editor.commands.add('highlight', new HighlightCommand(editor));\n  }\n\n} // Converts the options array to a converter definition.\n//\n// @param {Array.<module:highlight/highlight~HighlightOption>} options An array with configured options.\n// @returns {module:engine/conversion/conversion~ConverterDefinition}\n\nfunction _buildDefinition(options) {\n  const definition = {\n    model: {\n      key: 'highlight',\n      values: []\n    },\n    view: {}\n  };\n\n  for (const option of options) {\n    definition.model.values.push(option.model);\n    definition.view[option.model] = {\n      name: 'mark',\n      classes: option.class\n    };\n  }\n\n  return definition;\n}","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path class=\\\"ck-icon__fill\\\" d=\\\"M10.798 1.59L3.002 12.875l1.895 1.852 2.521 1.402 6.997-12.194z\\\"/><path d=\\\"M2.556 16.727l.234-.348c-.297-.151-.462-.293-.498-.426-.036-.137.002-.416.115-.837.094-.25.15-.449.169-.595a4.495 4.495 0 0 0 0-.725c-.209-.621-.303-1.041-.284-1.26.02-.218.178-.506.475-.862l6.77-9.414c.539-.91 1.605-.85 3.199.18 1.594 1.032 2.188 1.928 1.784 2.686l-5.877 10.36c-.158.412-.333.673-.526.782-.193.108-.604.179-1.232.21-.362.131-.608.237-.738.318-.13.081-.305.238-.526.47-.293.265-.504.397-.632.397-.096 0-.27-.075-.524-.226l-.31.41-1.6-1.12zm-.279.415l1.575 1.103-.392.515H1.19l1.087-1.618zm8.1-13.656l-4.953 6.9L8.75 12.57l4.247-7.574c.175-.25-.188-.647-1.092-1.192-.903-.546-1.412-.652-1.528-.32zM8.244 18.5L9.59 17h9.406v1.5H8.245z\\\"/></svg>\"","export default \"<svg viewBox=\\\"0 0 20 20\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><path class=\\\"ck-icon__fill\\\" d=\\\"M10.126 2.268L2.002 13.874l1.895 1.852 2.521 1.402L14.47 5.481l-1.543-2.568-2.801-.645z\\\"/><path d=\\\"M4.5 18.088l-2.645-1.852-.04-2.95-.006-.005.006-.008v-.025l.011.008L8.73 2.97c.165-.233.356-.417.567-.557l-1.212.308L4.604 7.9l-.83-.558 3.694-5.495 2.708-.69 1.65 1.145.046.018.85-1.216 2.16 1.512-.856 1.222c.828.967 1.144 2.141.432 3.158L7.55 17.286l.006.005-3.055.797H4.5zm-.634.166l-1.976.516-.026-1.918 2.002 1.402zM9.968 3.817l-.006-.004-6.123 9.184 3.277 2.294 6.108-9.162.005.003c.317-.452-.16-1.332-1.064-1.966-.891-.624-1.865-.776-2.197-.349zM8.245 18.5L9.59 17h9.406v1.5H8.245z\\\"/></svg>\"","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ui/dropdown/button/splitbuttonview\n */\nimport View from '../../view';\nimport ButtonView from '../../button/buttonview';\nimport KeystrokeHandler from '@ckeditor/ckeditor5-utils/src/keystrokehandler';\nimport FocusTracker from '@ckeditor/ckeditor5-utils/src/focustracker';\nimport dropdownArrowIcon from '../../../theme/icons/dropdown-arrow.svg';\nimport '../../../theme/components/dropdown/splitbutton.css';\n/**\n * The split button view class.\n *\n *\t\tconst view = new SplitButtonView();\n *\n *\t\tview.set( {\n *\t\t\tlabel: 'A button',\n *\t\t\tkeystroke: 'Ctrl+B',\n *\t\t\ttooltip: true\n *\t\t} );\n *\n *\t\tview.render();\n *\n *\t\tdocument.body.append( view.element );\n *\n * Also see the {@link module:ui/dropdown/utils~createDropdown `createDropdown()` util}.\n *\n * @implements module:ui/dropdown/button/dropdownbutton~DropdownButton\n * @extends module:ui/view~View\n */\n\nexport default class SplitButtonView extends View {\n  /**\n   * @inheritDoc\n   */\n  constructor(locale) {\n    super(locale);\n    const bind = this.bindTemplate; // Implement the Button interface.\n\n    this.set('icon');\n    this.set('isEnabled', true);\n    this.set('isOn', false);\n    this.set('isToggleable', false);\n    this.set('isVisible', true);\n    this.set('keystroke');\n    this.set('label');\n    this.set('tabindex', -1);\n    this.set('tooltip');\n    this.set('tooltipPosition', 's');\n    this.set('type', 'button');\n    this.set('withText', false);\n    /**\n     * Collection of the child views inside of the split button {@link #element}.\n     *\n     * @readonly\n     * @member {module:ui/viewcollection~ViewCollection}\n     */\n\n    this.children = this.createCollection();\n    /**\n     * A main button of split button.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.actionView = this._createActionView();\n    /**\n     * A secondary button of split button that opens dropdown.\n     *\n     * @readonly\n     * @member {module:ui/button/buttonview~ButtonView}\n     */\n\n    this.arrowView = this._createArrowView();\n    /**\n     * Instance of the {@link module:utils/keystrokehandler~KeystrokeHandler}. It manages\n     * keystrokes of the split button:\n     *\n     * * <kbd>▶</kbd> moves focus to arrow view when action view is focused,\n     * * <kbd>◀</kbd> moves focus to action view when arrow view is focused.\n     *\n     * @readonly\n     * @member {module:utils/keystrokehandler~KeystrokeHandler}\n     */\n\n    this.keystrokes = new KeystrokeHandler();\n    /**\n     * Tracks information about DOM focus in the dropdown.\n     *\n     * @readonly\n     * @member {module:utils/focustracker~FocusTracker}\n     */\n\n    this.focusTracker = new FocusTracker();\n    this.setTemplate({\n      tag: 'div',\n      attributes: {\n        class: ['ck', 'ck-splitbutton', bind.if('isVisible', 'ck-hidden', value => !value), this.arrowView.bindTemplate.if('isOn', 'ck-splitbutton_open')]\n      },\n      children: this.children\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  render() {\n    super.render();\n    this.children.add(this.actionView);\n    this.children.add(this.arrowView);\n    this.focusTracker.add(this.actionView.element);\n    this.focusTracker.add(this.arrowView.element);\n    this.keystrokes.listenTo(this.element); // Overrides toolbar focus cycling behavior.\n\n    this.keystrokes.set('arrowright', (evt, cancel) => {\n      if (this.focusTracker.focusedElement === this.actionView.element) {\n        this.arrowView.focus();\n        cancel();\n      }\n    }); // Overrides toolbar focus cycling behavior.\n\n    this.keystrokes.set('arrowleft', (evt, cancel) => {\n      if (this.focusTracker.focusedElement === this.arrowView.element) {\n        this.actionView.focus();\n        cancel();\n      }\n    });\n  }\n  /**\n   * Focuses the {@link #actionView#element} of the action part of split button.\n   */\n\n\n  focus() {\n    this.actionView.focus();\n  }\n  /**\n   * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #actionView} and binds it with main split button\n   * attributes.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _createActionView() {\n    const actionView = new ButtonView();\n    actionView.bind('icon', 'isEnabled', 'isOn', 'isToggleable', 'keystroke', 'label', 'tabindex', 'tooltip', 'tooltipPosition', 'type', 'withText').to(this);\n    actionView.extendTemplate({\n      attributes: {\n        class: 'ck-splitbutton__action'\n      }\n    });\n    actionView.delegate('execute').to(this);\n    return actionView;\n  }\n  /**\n   * Creates a {@link module:ui/button/buttonview~ButtonView} instance as {@link #arrowView} and binds it with main split button\n   * attributes.\n   *\n   * @private\n   * @returns {module:ui/button/buttonview~ButtonView}\n   */\n\n\n  _createArrowView() {\n    const arrowView = new ButtonView();\n    const bind = arrowView.bindTemplate;\n    arrowView.icon = dropdownArrowIcon;\n    arrowView.extendTemplate({\n      attributes: {\n        class: 'ck-splitbutton__arrow',\n        'aria-haspopup': true,\n        'aria-expanded': bind.to('isOn', value => String(value))\n      }\n    });\n    arrowView.bind('isEnabled').to(this);\n    arrowView.delegate('execute').to(this, 'open');\n    return arrowView;\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module highlight/highlightui\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ButtonView from '@ckeditor/ckeditor5-ui/src/button/buttonview';\nimport markerIcon from './../theme/icons/marker.svg';\nimport penIcon from './../theme/icons/pen.svg';\nimport eraserIcon from '@ckeditor/ckeditor5-core/theme/icons/eraser.svg';\nimport ToolbarSeparatorView from '@ckeditor/ckeditor5-ui/src/toolbar/toolbarseparatorview';\nimport SplitButtonView from '@ckeditor/ckeditor5-ui/src/dropdown/button/splitbuttonview';\nimport {\n    createDropdown,\n    addToolbarToDropdown\n} from '@ckeditor/ckeditor5-ui/src/dropdown/utils';\nimport './../theme/highlight.css';\n/**\n * The default highlight UI plugin. It introduces:\n *\n * * The `'highlight'` dropdown,\n * * The `'removeHighlight'` and `'highlight:*'` buttons.\n *\n * The default configuration includes the following buttons:\n *\n * * `'highlight:yellowMarker'`\n * * `'highlight:greenMarker'`\n * * `'highlight:pinkMarker'`\n * * `'highlight:blueMarker'`\n * * `'highlight:redPen'`\n * * `'highlight:greenPen'`\n *\n * See the {@link module:highlight/highlight~HighlightConfig#options configuration} to learn more\n * about the defaults.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class HighlightUI extends Plugin {\n    /**\n   * Returns the localized option titles provided by the plugin.\n   *\n   * The following localized titles corresponding with default\n   * {@link module:highlight/highlight~HighlightConfig#options} are available:\n   *\n   * * `'Yellow marker'`,\n   * * `'Green marker'`,\n   * * `'Pink marker'`,\n   * * `'Blue marker'`,\n   * * `'Red pen'`,\n   * * `'Green pen'`.\n   *\n   * @readonly\n   * @type {Object.<String,String>}\n   */\n    get localizedOptionTitles() {\n        const t = this.editor.t;\n        return {\n            'Yellow marker': t('az'),\n            'Green marker': t('ba'),\n            'Pink marker': t('bb'),\n            'Blue marker': t('bc'),\n            'Red pen': t('bd'),\n            'Green pen': t('be')\n        };\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'HighlightUI';\n    }\n    /**\n   * @inheritDoc\n   */\n    init() {\n        const options = this.editor.config.get('highlight.options');\n        for (const option of options) {\n            this._addHighlighterButton(option);\n        }\n        this._addRemoveHighlightButton();\n        this._addDropdown(options);\n    }\n    /**\n   * Creates the \"Remove highlight\" button.\n   *\n   * @private\n   */\n    _addRemoveHighlightButton() {\n        const t = this.editor.t;\n        this._addButton('removeHighlight', t('bf'), eraserIcon);\n    }\n    /**\n   * Creates a toolbar button from the provided highlight option.\n   *\n   * @param {module:highlight/highlight~HighlightOption} option\n   * @private\n   */\n    _addHighlighterButton(option) {\n        const command = this.editor.commands.get('highlight');\n        // TODO: change naming\n        this._addButton('highlight:' + option.model, option.title, getIconForType(option.type), option.model, decorateHighlightButton);\n        function decorateHighlightButton(button) {\n            button.bind('isEnabled').to(command, 'isEnabled');\n            button.bind('isOn').to(command, 'value', value => value === option.model);\n            button.iconView.fillColor = option.color;\n            button.isToggleable = true;\n        }\n    }\n    /**\n   * Internal method for creating highlight buttons.\n   *\n   * @param {String} name The name of the button.\n   * @param {String} label The label for the button.\n   * @param {String} icon The button icon.\n   * @param {Function} [decorateButton=()=>{}] Additional method for extending the button.\n   * @private\n   */\n    _addButton(name, label, icon, value, decorateButton = () => {\n    }) {\n        const editor = this.editor;\n        editor.ui.componentFactory.add(name, locale => {\n            const buttonView = new ButtonView(locale);\n            const localized = this.localizedOptionTitles[label] ? this.localizedOptionTitles[label] : label;\n            buttonView.set({\n                label: localized,\n                icon,\n                tooltip: true\n            });\n            buttonView.on('execute', () => {\n                editor.execute('highlight', { value });\n                editor.editing.view.focus();\n            });\n            // Add additional behavior for buttonView.\n            decorateButton(buttonView);\n            return buttonView;\n        });\n    }\n    /**\n   * Creates the split button dropdown UI from the provided highlight options.\n   *\n   * @param {Array.<module:highlight/highlight~HighlightOption>} options\n   * @private\n   */\n    _addDropdown(options) {\n        const editor = this.editor;\n        const t = editor.t;\n        const componentFactory = editor.ui.componentFactory;\n        const startingHighlighter = options[0];\n        const optionsMap = options.reduce((retVal, option) => {\n            retVal[option.model] = option;\n            return retVal;\n        }, {});\n        componentFactory.add('highlight', locale => {\n            const command = editor.commands.get('highlight');\n            const dropdownView = createDropdown(locale, SplitButtonView);\n            const splitButtonView = dropdownView.buttonView;\n            splitButtonView.set({\n                tooltip: t('bg'),\n                // Holds last executed highlighter.\n                lastExecuted: startingHighlighter.model,\n                // Holds current highlighter to execute (might be different then last used).\n                commandValue: startingHighlighter.model,\n                isToggleable: true\n            });\n            // Dropdown button changes to selection (command.value):\n            // - If selection is in highlight it get active highlight appearance (icon, color) and is activated.\n            // - Otherwise it gets appearance (icon, color) of last executed highlight.\n            splitButtonView.bind('icon').to(command, 'value', value => getIconForType(getActiveOption(value, 'type')));\n            splitButtonView.bind('color').to(command, 'value', value => getActiveOption(value, 'color'));\n            splitButtonView.bind('commandValue').to(command, 'value', value => getActiveOption(value, 'model'));\n            splitButtonView.bind('isOn').to(command, 'value', value => !!value);\n            splitButtonView.delegate('execute').to(dropdownView);\n            // Create buttons array.\n            const buttons = options.map(option => {\n                // Get existing highlighter button.\n                const buttonView = componentFactory.create('highlight:' + option.model);\n                // Update lastExecutedHighlight on execute.\n                this.listenTo(buttonView, 'execute', () => dropdownView.buttonView.set({ lastExecuted: option.model }));\n                return buttonView;\n            });\n            // Make toolbar button enabled when any button in dropdown is enabled before adding separator and eraser.\n            dropdownView.bind('isEnabled').toMany(buttons, 'isEnabled', (...areEnabled) => areEnabled.some(isEnabled => isEnabled));\n            // Add separator and eraser buttons to dropdown.\n            buttons.push(new ToolbarSeparatorView());\n            buttons.push(componentFactory.create('removeHighlight'));\n            addToolbarToDropdown(dropdownView, buttons);\n            bindToolbarIconStyleToActiveColor(dropdownView);\n            dropdownView.toolbarView.ariaLabel = t('bh');\n            // Execute current action from dropdown's split button action button.\n            splitButtonView.on('execute', () => {\n                editor.execute('highlight', { value: splitButtonView.commandValue });\n                editor.editing.view.focus();\n            });\n            // Returns active highlighter option depending on current command value.\n            // If current is not set or it is the same as last execute this method will return the option key (like icon or color)\n            // of last executed highlighter. Otherwise it will return option key for current one.\n            function getActiveOption(current, key) {\n                const whichHighlighter = !current || current === splitButtonView.lastExecuted ? splitButtonView.lastExecuted : current;\n                return optionsMap[whichHighlighter][key];\n            }\n            return dropdownView;\n        });\n    }\n}\n// Extends split button icon style to reflect last used button style.\nfunction bindToolbarIconStyleToActiveColor(dropdownView) {\n    const actionView = dropdownView.buttonView.actionView;\n    actionView.iconView.bind('fillColor').to(dropdownView.buttonView, 'color');\n}\n// Returns icon for given highlighter type.\nfunction getIconForType(type) {\n    return type === 'marker' ? markerIcon : penIcon;\n}","/**\r\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\r\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\r\n */\r\n\r\n// The editor creator to use.\r\nimport DecoupledEditorBase from '@ckeditor/ckeditor5-editor-decoupled/src/decouplededitor';\r\n\r\nimport Essentials from '@ckeditor/ckeditor5-essentials/src/essentials';\r\nimport UploadAdapter from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\r\nimport Autoformat from '@ckeditor/ckeditor5-autoformat/src/autoformat';\r\nimport Alignment from '@ckeditor/ckeditor5-alignment/src/alignment';\r\nimport Font from '@ckeditor/ckeditor5-font/src/font';\r\nimport Bold from '@ckeditor/ckeditor5-basic-styles/src/bold';\r\nimport Italic from '@ckeditor/ckeditor5-basic-styles/src/italic';\r\nimport BlockQuote from '@ckeditor/ckeditor5-block-quote/src/blockquote';\r\nimport CKFinder from '@ckeditor/ckeditor5-ckfinder/src/ckfinder';\r\nimport EasyImage from '@ckeditor/ckeditor5-easy-image/src/easyimage';\r\nimport Heading from '@ckeditor/ckeditor5-heading/src/heading';\r\nimport Image from '@ckeditor/ckeditor5-image/src/image';\r\nimport ImageCaption from '@ckeditor/ckeditor5-image/src/imagecaption';\r\nimport ImageStyle from '@ckeditor/ckeditor5-image/src/imagestyle';\r\nimport ImageToolbar from '@ckeditor/ckeditor5-image/src/imagetoolbar';\r\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\r\nimport ImageResize from '@ckeditor/ckeditor5-image/src/imageresize';\r\nimport Indent from '@ckeditor/ckeditor5-indent/src/indent';\r\nimport Link from '@ckeditor/ckeditor5-link/src/link';\r\nimport List from '@ckeditor/ckeditor5-list/src/list';\r\nimport Paragraph from '@ckeditor/ckeditor5-paragraph/src/paragraph';\r\nimport PasteFromOffice from '@ckeditor/ckeditor5-paste-from-office/src/pastefromoffice';\r\nimport Table from '@ckeditor/ckeditor5-table/src/table';\r\nimport TableToolbar from '@ckeditor/ckeditor5-table/src/tabletoolbar';\r\n// import Base64UploadAdapter from '@ckeditor/ckeditor5-upload/src/adapters/base64uploadadapter'\r\nimport Underline from '@ckeditor/ckeditor5-basic-styles/src/underline';\r\nimport StrikeThrough from '@ckeditor/ckeditor5-basic-styles/src/strikethrough';\r\nimport Highlight from '@ckeditor/ckeditor5-highlight/src/highlight';\r\nexport default class DecoupledEditor extends DecoupledEditorBase { }\r\n\r\n// Plugins to include in the build.\r\nDecoupledEditor.builtinPlugins = [\r\n\tEssentials,\r\n\tUploadAdapter,\r\n\tAutoformat,\r\n\tBold,\r\n\tItalic,\r\n\tBlockQuote,\r\n\tCKFinder,\r\n\tEasyImage,\r\n\tHeading,\r\n\tImage,\r\n\tImageCaption,\r\n\tImageStyle,\r\n\tImageToolbar,\r\n\tImageUpload,\r\n\tIndent,\r\n\tLink,\r\n\tList,\r\n\tParagraph,\r\n\tPasteFromOffice,\r\n\tTable,\r\n\tTableToolbar,\r\n\t// Base64UploadAdapter,\r\n\tImageResize,\r\n\tFont,\r\n\tAlignment,\r\n\tUnderline,\r\n\tStrikeThrough,\r\n\tHighlight\r\n];\r\n\r\n// Editor configuration.\r\nDecoupledEditor.defaultConfig = {\r\n\ttoolbar: {\r\n\t\tplaceholder: \"请输入内容...\",\r\n\t\titems: [\r\n\t\t\t'heading',\r\n\t\t\t'|',\r\n\t\t\t'fontsize',\r\n\t\t\t'fontfamily',\r\n\t\t\t'fontColor',\r\n\t\t\t'fontBackgroundColor',\r\n\t\t\t'|',\r\n\t\t\t'bold',\r\n\t\t\t'italic',\r\n\t\t\t'underline',\r\n\t\t\t'strikethrough',\r\n\t\t\t'highlight',\r\n\t\t\t'|',\r\n\t\t\t'alignment',\r\n\t\t\t'|',\r\n\t\t\t'numberedList',\r\n\t\t\t'bulletedList',\r\n\t\t\t'|',\r\n\t\t\t'indent',\r\n\t\t\t'outdent',\r\n\t\t\t'|',\r\n\t\t\t'link',\r\n\t\t\t'blockquote',\r\n\t\t\t'imageUpload',\r\n\t\t\t'insertTable',\r\n\t\t\t'|',\r\n\t\t\t'undo',\r\n\t\t\t'redo'\r\n\t\t]\r\n\t},\r\n\timage: {\r\n\t\tstyles: [\r\n\t\t\t'full',\r\n\t\t\t'alignLeft',\r\n\t\t\t'alignRight'\r\n\t\t],\r\n\t\ttoolbar: [\r\n\t\t\t'imageStyle:alignLeft',\r\n\t\t\t'imageStyle:full',\r\n\t\t\t'imageStyle:alignRight',\r\n\t\t\t'|',\r\n\t\t\t'imageTextAlternative'\r\n\t\t]\r\n\t},\r\n\ttable: {\r\n\t\tcontentToolbar: [\r\n\t\t\t'tableColumn',\r\n\t\t\t'tableRow',\r\n\t\t\t'mergeTableCells'\r\n\t\t]\r\n\t},\r\n\t// This value must be kept in sync with the language defined in webpack.config.js.\r\n\tlanguage: 'zh-cn'\r\n};\r\n","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module essentials/essentials\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\nimport Enter from '@ckeditor/ckeditor5-enter/src/enter';\nimport ShiftEnter from '@ckeditor/ckeditor5-enter/src/shiftenter';\nimport Typing from '@ckeditor/ckeditor5-typing/src/typing';\nimport Undo from '@ckeditor/ckeditor5-undo/src/undo';\n/**\n * A plugin including all essential editing features. It represents a set of features that enables similar functionalities\n * to a `<textarea>` element.\n *\n * It includes:\n *\n * * {@link module:clipboard/clipboard~Clipboard},\n * * {@link module:enter/enter~Enter},\n * * {@link module:enter/shiftenter~ShiftEnter},\n * * {@link module:typing/typing~Typing},\n * * {@link module:undo/undo~Undo}.\n *\n * This plugin set does not define any block-level containers (such as {@link module:paragraph/paragraph~Paragraph}).\n * If your editor is supposed to handle block content, make sure to include it.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Essentials extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [Clipboard, Enter, ShiftEnter, Typing, Undo];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Essentials';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/bold\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BoldEditing from './bold/boldediting';\nimport BoldUI from './bold/boldui';\n/**\n * The bold feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/bold/boldediting~BoldEditing bold editing feature}\n * and {@link module:basic-styles/bold/boldui~BoldUI bold UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Bold extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [BoldEditing, BoldUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Bold';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/italic\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ItalicEditing from './italic/italicediting';\nimport ItalicUI from './italic/italicui';\n/**\n * The italic feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/italic/italicediting~ItalicEditing} and\n * {@link module:basic-styles/italic/italicui~ItalicUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Italic extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ItalicEditing, ItalicUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Italic';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module block-quote/blockquote\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport BlockQuoteEditing from './blockquoteediting';\nimport BlockQuoteUI from './blockquoteui';\n/**\n * The block quote plugin.\n *\n * For more information about this feature check the {@glink api/block-quote package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:block-quote/blockquoteediting~BlockQuoteEditing block quote editing feature}\n * and {@link module:block-quote/blockquoteui~BlockQuoteUI block quote UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class BlockQuote extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [BlockQuoteEditing, BlockQuoteUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'BlockQuote';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module ckfinder/ckfinder\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport CKFinderUI from './ckfinderui';\nimport CKFinderEditing from './ckfinderediting';\nimport CKFinderUploadAdapter from '@ckeditor/ckeditor5-adapter-ckfinder/src/uploadadapter';\n/**\n * The CKFinder feature, a bridge between the CKEditor 5 WYSIWYG editor and the\n * [CKFinder](https://ckeditor.com/ckfinder) file manager and uploader.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:ckfinder/ckfinderediting~CKFinderEditing},\n * * {@link module:ckfinder/ckfinderui~CKFinderUI},\n * * {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter}.\n *\n * See the {@glink features/image-upload/ckfinder \"CKFinder integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class CKFinder extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'CKFinder';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [CKFinderEditing, CKFinderUI, CKFinderUploadAdapter];\n  }\n\n}\n/**\n * The configuration of the {@link module:ckfinder/ckfinder~CKFinder CKFinder feature}.\n *\n * Read more in {@link module:ckfinder/ckfinder~CKFinderConfig}.\n *\n * @member {module:ckfinder/ckfinder~CKFinderConfig} module:core/editor/editorconfig~EditorConfig#ckfinder\n */\n\n/**\n * The configuration of the {@link module:ckfinder/ckfinder~CKFinder CKFinder feature}\n * and its {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter upload adapter}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tckfinder: {\n *\t\t\t\t\toptions: {\n *\t\t\t\t\t\tresourceType: 'Images'\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface CKFinderConfig\n */\n\n/**\n * The configuration options passed to the CKFinder file manager instance.\n *\n * Check the file manager [documentation](https://ckeditor.com/docs/ckfinder/ckfinder3/#!/api/CKFinder.Config-cfg-language)\n * for the complete list of options.\n *\n * @member {Object} module:ckfinder/ckfinder~CKFinderConfig#options\n */\n\n/**\n * The type of the CKFinder opener method.\n *\n * Supported types are:\n *\n * * `'modal'` &ndash; Opens CKFinder in a modal,\n * * `'popup'` &ndash; Opens CKFinder in a new \"pop-up\" window.\n *\n * Defaults to `'modal'`.\n *\n * @member {String} module:ckfinder/ckfinder~CKFinderConfig#openerMethod\n */\n\n/**\n * The path (URL) to the connector which handles the file upload in CKFinder file manager.\n * When specified, it enables the automatic upload of resources such as images inserted into the content.\n *\n * For instance, to use CKFinder's\n * [quick upload](https://ckeditor.com/docs/ckfinder/ckfinder3-php/commands.html#command_quick_upload)\n * command, your can use the following (or similar) path:\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tckfinder: {\n *\t\t\t\t\tuploadUrl: '/ckfinder/core/connector/php/connector.php?command=QuickUpload&type=Files&responseType=json'\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Used by the {@link module:adapter-ckfinder/uploadadapter~CKFinderUploadAdapter upload adapter}.\n *\n * @member {String} module:ckfinder/ckfinder~CKFinderConfig#uploadUrl\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module easy-image/easyimage\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport CloudServicesUploadAdapter from './cloudservicesuploadadapter';\nimport Image from '@ckeditor/ckeditor5-image/src/image';\nimport ImageUpload from '@ckeditor/ckeditor5-image/src/imageupload';\n/**\n * The Easy Image feature, which makes the image upload in CKEditor 5 possible with virtually zero\n * server setup. A part of the [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/)\n * family.\n *\n * This is a \"glue\" plugin which enables:\n *\n * * {@link module:image/image~Image},\n * * {@link module:image/imageupload~ImageUpload},\n * * {@link module:easy-image/cloudservicesuploadadapter~CloudServicesUploadAdapter}.\n *\n * See the {@glink features/image-upload/easy-image \"Easy Image integration\" guide} to learn how to configure\n * and use this feature.\n *\n * Check out the {@glink features/image-upload/image-upload comprehensive \"Image upload\" guide} to learn about\n * other ways to upload images into CKEditor 5.\n *\n * **Note**: After enabling the Easy Image plugin you need to configure the\n * [CKEditor Cloud Services](https://ckeditor.com/ckeditor-cloud-services/)\n * integration through {@link module:cloud-services/cloudservices~CloudServicesConfig `config.cloudServices`}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class EasyImage extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [CloudServicesUploadAdapter, Image, ImageUpload];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'EasyImage';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module heading/heading\n */\nimport HeadingEditing from './headingediting';\nimport HeadingUI from './headingui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport '../theme/heading.css';\n/**\n * The headings feature.\n *\n * For a detailed overview, check the {@glink features/headings Headings feature documentation}\n * and the {@glink api/heading package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:heading/headingediting~HeadingEditing heading editing feature}\n * and {@link module:heading/headingui~HeadingUI heading UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Heading extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [HeadingEditing, HeadingUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Heading';\n  }\n\n}\n/**\n * The configuration of the heading feature. Introduced by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n * Read more in {@link module:heading/heading~HeadingConfig}.\n *\n * @member {module:heading/heading~HeadingConfig} module:core/editor/editorconfig~EditorConfig#heading\n */\n\n/**\n * The configuration of the heading feature.\n * The option is used by the {@link module:heading/headingediting~HeadingEditing} feature.\n *\n *\t\tClassicEditor\n *\t\t\t.create( {\n * \t\t\t\theading: ... // Heading feature config.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HeadingConfig\n */\n\n/**\n * The available heading options.\n *\n * The default value is:\n *\n *\t\tconst headingConfig = {\n *\t\t\toptions: [\n *\t\t\t\t{ model: 'paragraph', title: 'Paragraph', class: 'ck-heading_paragraph' },\n *\t\t\t\t{ model: 'heading1', view: 'h2', title: 'Heading 1', class: 'ck-heading_heading1' },\n *\t\t\t\t{ model: 'heading2', view: 'h3', title: 'Heading 2', class: 'ck-heading_heading2' },\n *\t\t\t\t{ model: 'heading3', view: 'h4', title: 'Heading 3', class: 'ck-heading_heading3' }\n *\t\t\t]\n *\t\t};\n *\n * It defines 3 levels of headings. In the editor model they will use `heading1`, `heading2`, and `heading3` elements.\n * Their respective view elements (so the elements output by the editor) will be: `h2`, `h3`, and `h4`. This means that\n * if you choose \"Heading 1\" in the headings dropdown the editor will turn the current block to `<heading1>` in the model\n * which will result in rendering (and outputting to data) the `<h2>` element.\n *\n * The `title` and `class` properties will be used by the `headings` dropdown to render available options.\n * Usually, the first option in the headings dropdown is the \"Paragraph\" option, hence it's also defined on the list.\n * However, you don't need to define its view representation because it's handled by\n * the {@link module:paragraph/paragraph~Paragraph} feature (which is required by\n * the {@link module:heading/headingediting~HeadingEditing} feature).\n *\n * You can **read more** about configuring heading levels and **see more examples** in\n * the {@glink features/headings Headings} guide.\n *\n * Note: In the model you should always start from `heading1`, regardless of how the headings are represented in the view.\n * That's assumption is used by features like {@link module:autoformat/autoformat~Autoformat} to know which element\n * they should use when applying the first level heading.\n *\n * The defined headings are also available as values passed to the `'heading'` command under their model names.\n * For example, the below code will apply `<heading1>` to the current selection:\n *\n *\t\teditor.execute( 'heading', { value: 'heading1' } );\n *\n * @member {Array.<module:heading/heading~HeadingOption>} module:heading/heading~HeadingConfig#options\n */\n\n/**\n * Heading option descriptor.\n *\n * @typedef {Object} module:heading/heading~HeadingOption\n * @property {String} model Name of the model element to convert.\n * @property {module:engine/view/elementdefinition~ElementDefinition} view Definition of a view element to convert from/to.\n * @property {String} title The user-readable title of the option.\n * @property {String} class The class which will be added to the dropdown item representing this option.\n * @property {String} [icon] Icon used by {@link module:heading/headingbuttonsui~HeadingButtonsUI}. It can be omitted when using\n * the default configuration.\n * @extends module:engine/conversion/conversion~ConverterDefinition\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagecaption\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageCaptionEditing from './imagecaption/imagecaptionediting';\nimport '../theme/imagecaption.css';\n/**\n * The image caption plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-captions image caption} documentation.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageCaption extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageCaptionEditing];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageCaption';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imagestyle\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport ImageStyleEditing from './imagestyle/imagestyleediting';\nimport ImageStyleUI from './imagestyle/imagestyleui';\n/**\n * The image style plugin.\n *\n * For a detailed overview, check the {@glink features/image#image-styles image styles} documentation.\n *\n * This is a \"glue\" plugin which loads the {@link module:image/imagestyle/imagestyleediting~ImageStyleEditing}\n * and {@link module:image/imagestyle/imagestyleui~ImageStyleUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageStyle extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ImageStyleEditing, ImageStyleUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageStyle';\n  }\n\n}\n/**\n * Available image styles.\n *\n * The default value is:\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [ 'full', 'side' ]\n *\t\t};\n *\n * which configures two default styles:\n *\n *  * the \"full\" style which does not apply any class, e.g. for images styled to span 100% width of the content,\n *  * the \"side\" style with the `.image-style-side` CSS class.\n *\n * See {@link module:image/imagestyle/utils~defaultStyles} to learn more about default\n * styles provided by the image feature.\n *\n * The {@link module:image/imagestyle/utils~defaultStyles default styles} can be customized,\n * e.g. to change the icon, title or CSS class of the style. The feature also provides several\n * {@link module:image/imagestyle/utils~defaultIcons default icons} to choose from.\n *\n *\t\timport customIcon from 'custom-icon.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// This will only customize the icon of the \"full\" style.\n *\t\t\t\t// Note: 'right' is one of default icons provided by the feature.\n *\t\t\t\t{ name: 'full', icon: 'right' },\n *\n *\t\t\t\t// This will customize the icon, title and CSS class of the default \"side\" style.\n *\t\t\t\t{ name: 'side', icon: customIcon, title: 'My side style', className: 'custom-side-image' }\n *\t\t\t]\n *\t\t};\n *\n * If none of the default styles is good enough, it is possible to define independent custom styles, too:\n *\n *\t\timport fullSizeIcon from '@ckeditor/ckeditor5-core/theme/icons/object-center.svg';\n *\t\timport sideIcon from '@ckeditor/ckeditor5-core/theme/icons/object-right.svg';\n *\n *\t\t// ...\n *\n *\t\tconst imageConfig = {\n *\t\t\tstyles: [\n *\t\t\t\t// A completely custom full size style with no class, used as a default.\n *\t\t\t\t{ name: 'fullSize', title: 'Full size', icon: fullSizeIcon, isDefault: true },\n *\n *\t\t\t\t{ name: 'side', title: 'To the side', icon: sideIcon, className: 'side-image' }\n *\t\t\t]\n *\t\t};\n *\n * Note: Setting `title` to one of {@link module:image/imagestyle/imagestyleui~ImageStyleUI#localizedDefaultStylesTitles}\n * will automatically translate it to the language of the editor.\n *\n * Read more about styling images in the {@glink features/image#image-styles Image styles guide}.\n *\n * The feature creates commands based on defined styles, so you can change the style of a selected image by executing\n * the following command:\n *\n *\t\teditor.execute( 'imageStyle' { value: 'side' } );\n *\n * The feature also creates buttons that execute the commands. So, assuming that you use the\n * default image styles setting, you can {@link module:image/image~ImageConfig#toolbar configure the image toolbar}\n * (or any other toolbar) to contain these options:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyle:full', 'imageStyle:side' ]\n *\t\t};\n *\n * @member {Array.<module:image/imagestyle/imagestyleediting~ImageStyleFormat>} module:image/image~ImageConfig#styles\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module image/imagetoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport { getSelectedImageWidget } from './image/utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n/**\n * The image toolbar plugin. It creates and manages the image toolbar (the toolbar displayed when an image is selected).\n *\n * For a detailed overview, check the {@glink features/image#image-contextual-toolbar image contextual toolbar} documentation.\n *\n * Instances of toolbar components (e.g. buttons) are created using the editor's\n * {@link module:ui/componentfactory~ComponentFactory component factory}\n * based on the {@link module:image/image~ImageConfig#toolbar `image.toolbar` configuration option}.\n *\n * The toolbar uses the {@link module:ui/panel/balloon/contextualballoon~ContextualBalloon}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class ImageToolbar extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'ImageToolbar';\n    }\n    /**\n   * @inheritDoc\n   */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        widgetToolbarRepository.register('image', {\n            ariaLabel: t('b'),\n            items: editor.config.get('image.toolbar') || [],\n            getRelatedElement: getSelectedImageWidget\n        });\n    }\n}    /**\n * Items to be placed in the image toolbar.\n * This option is used by the {@link module:image/imagetoolbar~ImageToolbar} feature.\n *\n * Assuming that you use the following features:\n *\n * * {@link module:image/imagestyle~ImageStyle} (with a default configuration),\n * * {@link module:image/imagetextalternative~ImageTextAlternative},\n *\n * three toolbar items will be available in {@link module:ui/componentfactory~ComponentFactory}:\n * `'imageStyle:full'`, `'imageStyle:side'`, and `'imageTextAlternative'` so you can configure the toolbar like this:\n *\n *\t\tconst imageConfig = {\n *\t\t\ttoolbar: [ 'imageStyle:full', 'imageStyle:side', '|', 'imageTextAlternative' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:image/image~ImageConfig#toolbar\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module indent/indent\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport IndentEditing from './indentediting';\nimport IndentUI from './indentui';\n/**\n * The indent feature.\n *\n * This plugin acts as a single entry point plugin for other features that implement indentation of elements like lists or paragraphs.\n *\n * The compatible features are:\n *\n * * The {@link module:list/list~List} or {@link module:list/listediting~ListEditing} feature for list indentation.\n * * The {@link module:indent/indentblock~IndentBlock} feature for block indentation.\n *\n * This is a \"glue\" plugin that loads the following plugins:\n *\n * * The {@link module:indent/indentediting~IndentEditing indent editing feature}.\n * * The {@link module:indent/indentui~IndentUI indent UI feature}.\n *\n * The dependent plugins register the `'indent'` and `'outdent'` commands and introduce the `'indent'` and `'outdent'` buttons\n * that allow to increase or decrease text indentation of supported elements.\n *\n * **Note**: In order for the commands and buttons to work, at least one of compatible features is required.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Indent extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'Indent';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [IndentEditing, IndentUI];\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module link/link\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport LinkEditing from './linkediting';\nimport LinkUI from './linkui';\n/**\n * The link plugin.\n *\n * This is a \"glue\" plugin that loads the {@link module:link/linkediting~LinkEditing link editing feature}\n * and {@link module:link/linkui~LinkUI link UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Link extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [LinkEditing, LinkUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Link';\n  }\n\n}\n/**\n * The configuration of the {@link module:link/link~Link} feature.\n *\n * Read more in {@link module:link/link~LinkConfig}.\n *\n * @member {module:link/link~LinkConfig} module:core/editor/editorconfig~EditorConfig#link\n */\n\n/**\n * The configuration of the {@link module:link/link~Link link feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\tlink:  ... // Link feature configuration.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n * @interface LinkConfig\n */\n\n/**\n * When set to `true`, the `target=\"blank\"` and `rel=\"noopener noreferrer\"` attributes are automatically added to all external links\n * in the editor. \"External links\" are all links in the editor content starting with `http`, `https`, or `//`.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tlink: {\n *\t\t\t\t\taddTargetToExternalLinks: true\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * Internally, this option activates a predefined {@link module:link/link~LinkConfig#decorators automatic link decorator}\n * that extends all external links with the `target` and `rel` attributes.\n *\n * **Note**: To control the `target` and `rel` attributes of specific links in the edited content, a dedicated\n * {@link module:link/link~LinkDecoratorManualDefinition manual} decorator must be defined in the\n * {@link module:link/link~LinkConfig#decorators `config.link.decorators`} array. In such scenario,\n * the `config.link.addTargetToExternalLinks` option should remain `undefined` or `false` to not interfere with the manual decorator.\n *\n * It is possible to add other {@link module:link/link~LinkDecoratorAutomaticDefinition automatic}\n * or {@link module:link/link~LinkDecoratorManualDefinition manual} link decorators when this option is active.\n *\n * More information about decorators can be found in the {@link module:link/link~LinkConfig#decorators decorators configuration}\n * reference.\n *\n * @default false\n * @member {Boolean} module:link/link~LinkConfig#addTargetToExternalLinks\n */\n\n/**\n * Decorators provide an easy way to configure and manage additional link attributes in the editor content. There are\n * two types of link decorators:\n *\n * * {@link module:link/link~LinkDecoratorAutomaticDefinition Automatic} &ndash; They match links against pre–defined rules and\n * manage their attributes based on the results.\n * * {@link module:link/link~LinkDecoratorManualDefinition Manual} &ndash; They allow users to control link attributes individually,\n *  using the editor UI.\n *\n * Link decorators are defined as objects with key-value pairs, where the key is the name provided for a given decorator and the\n * value is the decorator definition.\n *\n * The name of the decorator also corresponds to the {@glink framework/guides/architecture/editing-engine#text-attributes text attribute}\n * in the model. For instance, the `isExternal` decorator below is represented as a `linkIsExternal` attribute in the model.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\tlink: {\n *\t\t\t\t\tdecorators: {\n *\t\t\t\t\t\tisExternal: {\n *\t\t\t\t\t\t\tmode: 'automatic',\n *\t\t\t\t\t\t\tcallback: url => url.startsWith( 'http://' ),\n *\t\t\t\t\t\t\tattributes: {\n *\t\t\t\t\t\t\t\ttarget: '_blank',\n *\t\t\t\t\t\t\t\trel: 'noopener noreferrer'\n *\t\t\t\t\t\t\t}\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\tisDownloadable: {\n *\t\t\t\t\t\t\tmode: 'manual',\n *\t\t\t\t\t\t\tlabel: 'Downloadable',\n *\t\t\t\t\t\t\tattributes: {\n *\t\t\t\t\t\t\t\tdownload: 'file.png',\n *\t\t\t\t\t\t\t}\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t// ...\n *\t\t\t\t\t}\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * To learn more about the configuration syntax, check out the {@link module:link/link~LinkDecoratorAutomaticDefinition automatic}\n * and {@link module:link/link~LinkDecoratorManualDefinition manual} decorator option reference.\n *\n * **Warning:** Currently, link decorators work independently of one another and no conflict resolution mechanism exists.\n * For example, configuring the `target` attribute using both an automatic and a manual decorator at the same time could end up with\n * quirky results. The same applies if multiple manual or automatic decorators were defined for the same attribute.\n *\n * **Note**: Since the `target` attribute management for external links is a common use case, there is a predefined automatic decorator\n * dedicated for that purpose which can be enabled by turning a single option on. Check out the\n * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}\n * configuration description to learn more.\n *\n * See also the {@glink features/link#custom-link-attributes-decorators link feature guide} for more information.\n *\n * @member {Object.<String, module:link/link~LinkDecoratorDefinition>} module:link/link~LinkConfig#decorators\n */\n\n/**\n * Represents a link decorator definition ({@link module:link/link~LinkDecoratorManualDefinition `'manual'`}\n * or {@link module:link/link~LinkDecoratorAutomaticDefinition `'automatic'`}).\n *\n * @interface LinkDecoratorDefinition\n */\n\n/**\n * Link decorator type.\n *\n * Check out the {@glink features/link#custom-link-attributes-decorators link feature guide} for more information.\n *\n * @member {'manual'|'automatic'} module:link/link~LinkDecoratorDefinition#mode\n */\n\n/**\n * Describes an automatic {@link module:link/link~LinkConfig#decorators link decorator}. This decorator type matches\n * all links in the editor content against a function that decides whether the link should receive a pre–defined set of attributes.\n *\n * It takes an object with key-value pairs of attributes and a callback function that must return a Boolean value based on the link's\n * `href` (URL). When the callback returns `true`, attributes are applied to the link.\n *\n * For example, to add the `target=\"_blank\"` attribute to all links in the editor starting with `http://`, the\n * configuration could look like this:\n *\n *\t\t{\n *\t\t\tmode: 'automatic',\n *\t\t\tcallback: url => url.startsWith( 'http://' ),\n *\t\t\tattributes: {\n *\t\t\t\ttarget: '_blank'\n *\t\t\t}\n *\t\t}\n *\n * **Note**: Since the `target` attribute management for external links is a common use case, there is a predefined automatic decorator\n * dedicated for that purpose that can be enabled by turning a single option on. Check out the\n * {@link module:link/link~LinkConfig#addTargetToExternalLinks `config.link.addTargetToExternalLinks`}\n * configuration description to learn more.\n *\n * @typedef {Object} module:link/link~LinkDecoratorAutomaticDefinition\n * @property {'automatic'} mode Link decorator type. It is `'automatic'` for all automatic decorators.\n * @property {Function} callback Takes a `url` as a parameter and returns `true` if the `attributes` should be applied to the link.\n * @property {Object} attributes Key-value pairs used as link attributes added to the output during the\n * {@glink framework/guides/architecture/editing-engine#conversion downcasting}.\n * Attributes should follow the {@link module:engine/view/elementdefinition~ElementDefinition} syntax.\n */\n\n/**\n * Describes a manual {@link module:link/link~LinkConfig#decorators link decorator}. This decorator type is represented in\n * the link feature's {@link module:link/linkui user interface} as a switch that the user can use to control the presence\n * of a predefined set of attributes.\n *\n * For instance, to allow the users to manually control the presence of the `target=\"_blank\"` and\n * `rel=\"noopener noreferrer\"` attributes on specific links, the decorator could look as follows:\n *\n *\t\t{\n *\t\t\tmode: 'manual',\n *\t\t\tlabel: 'Open in a new tab',\n *\t\t\tattributes: {\n *\t\t\t\ttarget: '_blank',\n *\t\t\t\trel: 'noopener noreferrer'\n *\t\t\t}\n *\t\t}\n *\n * @typedef {Object} module:link/link~LinkDecoratorManualDefinition\n * @property {'manual'} mode Link decorator type. It is `'manual'` for all manual decorators.\n * @property {String} label The label of the UI button that the user can use to control the presence of link attributes.\n * @property {Object} attributes Key-value pairs used as link attributes added to the output during the\n * {@glink framework/guides/architecture/editing-engine#conversion downcasting}.\n * Attributes should follow the {@link module:engine/view/elementdefinition~ElementDefinition} syntax.\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module list/list\n */\nimport ListEditing from './listediting';\nimport ListUI from './listui';\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\n/**\n * The list feature.\n *\n * This is a \"glue\" plugin that loads the {@link module:list/listediting~ListEditing list editing feature}\n * and {@link module:list/listui~ListUI list UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class List extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [ListEditing, ListUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'List';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module paste-from-office/pastefromoffice\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport GoogleDocsNormalizer from './normalizers/googledocsnormalizer';\nimport MSWordNormalizer from './normalizers/mswordnormalizer';\nimport Clipboard from '@ckeditor/ckeditor5-clipboard/src/clipboard';\n/**\n * The Paste from Office plugin.\n *\n * This plugin handles content pasted from Office apps and transforms it (if necessary)\n * to a valid structure which can then be understood by the editor features.\n *\n * Transformation is made by a set of predefined {@link module:paste-from-office/normalizer~Normalizer normalizers}.\n * This plugin includes following normalizers:\n *   * {@link module:paste-from-office/normalizers/mswordnormalizer~MSWordNormalizer Microsoft Word normalizer}\n *   * {@link module:paste-from-office/normalizers/googledocsnormalizer~GoogleDocsNormalizer Google Docs normalizer}\n *\n * For more information about this feature check the {@glink api/paste-from-office package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class PasteFromOffice extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get pluginName() {\n    return 'PasteFromOffice';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get requires() {\n    return [Clipboard];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const normalizers = [];\n    normalizers.push(new MSWordNormalizer());\n    normalizers.push(new GoogleDocsNormalizer());\n    editor.plugins.get('Clipboard').on('inputTransformation', (evt, data) => {\n      if (data.isTransformedWithPasteFromOffice) {\n        return;\n      }\n\n      const htmlString = data.dataTransfer.getData('text/html');\n      const activeNormalizer = normalizers.find(normalizer => normalizer.isActive(htmlString));\n\n      if (activeNormalizer) {\n        activeNormalizer.execute(data);\n        data.isTransformedWithPasteFromOffice = true;\n      }\n    }, {\n      priority: 'high'\n    });\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module table/table\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport TableEditing from './tableediting';\nimport TableUI from './tableui';\nimport Widget from '@ckeditor/ckeditor5-widget/src/widget';\nimport '../theme/table.css';\n/**\n * The table plugin.\n *\n * For a detailed overview, check the {@glink features/table Table feature documentation}.\n *\n * This is a \"glue\" plugin which loads the {@link module:table/tableediting~TableEditing table editing feature}\n * and {@link module:table/tableui~TableUI table UI feature}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Table extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [TableEditing, TableUI, Widget];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Table';\n  }\n\n}\n/**\n * The configuration of the table features. Used by the table features in the `@ckeditor/ckeditor5-table` package.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\ttable: ... // Table feature options.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface TableConfig\n */\n\n/**\n * The configuration of the {@link module:table/table~Table} feature.\n *\n * Read more in {@link module:table/table~TableConfig}.\n *\n * @member {module:table/table~TableConfig} module:core/editor/editorconfig~EditorConfig#table\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n/**\n * @module table/tabletoolbar\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport {\n    getSelectedTableWidget,\n    getTableWidgetAncestor\n} from './utils';\nimport WidgetToolbarRepository from '@ckeditor/ckeditor5-widget/src/widgettoolbarrepository';\n/**\n * The table toolbar class. It creates toolbars for the table feature and its content (for now only for a table cell content).\n *\n * Table toolbar shows up when a table widget is selected. Its components (e.g. buttons) are created based on the\n * {@link module:table/table~TableConfig#tableToolbar `table.tableToolbar` configuration option}.\n *\n * Table content toolbar shows up when the selection is inside the content of a table. It creates its component based on the\n * {@link module:table/table~TableConfig#contentToolbar `table.contentToolbar` configuration option}.\n *\n * @extends module:core/plugin~Plugin\n */\nexport default class TableToolbar extends Plugin {\n    /**\n   * @inheritDoc\n   */\n    static get requires() {\n        return [WidgetToolbarRepository];\n    }\n    /**\n   * @inheritDoc\n   */\n    static get pluginName() {\n        return 'TableToolbar';\n    }\n    /**\n   * @inheritDoc\n   */\n    afterInit() {\n        const editor = this.editor;\n        const t = editor.t;\n        const widgetToolbarRepository = editor.plugins.get(WidgetToolbarRepository);\n        const tableContentToolbarItems = editor.config.get('table.contentToolbar');\n        const tableToolbarItems = editor.config.get('table.tableToolbar');\n        if (tableContentToolbarItems) {\n            widgetToolbarRepository.register('tableContent', {\n                ariaLabel: t('c'),\n                items: tableContentToolbarItems,\n                getRelatedElement: getTableWidgetAncestor\n            });\n        }\n        if (tableToolbarItems) {\n            widgetToolbarRepository.register('table', {\n                ariaLabel: t('c'),\n                items: tableToolbarItems,\n                getRelatedElement: getSelectedTableWidget\n            });\n        }\n    }\n}    /**\n * Items to be placed in the table content toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * Assuming that you use the {@link module:table/tableui~TableUI} feature, the following toolbar items will be available\n * in {@link module:ui/componentfactory~ComponentFactory}:\n *\n * * `'tableRow'`,\n * * `'tableColumn'`,\n * * `'mergeTableCells'`.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\tcontentToolbar: [ 'tableRow', 'tableColumn', 'mergeTableCells' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#contentToolbar\n */\n     /**\n * Items to be placed in the table toolbar.\n * The {@link module:table/tabletoolbar~TableToolbar} plugin is required to make this toolbar working.\n *\n * You can thus configure the toolbar like this:\n *\n *\t\tconst tableConfig = {\n *\t\t\ttableToolbar: [ 'blockQuote' ]\n *\t\t};\n *\n * Of course, the same buttons can also be used in the\n * {@link module:core/editor/editorconfig~EditorConfig#toolbar main editor toolbar}.\n *\n * Read more about configuring toolbar in {@link module:core/editor/editorconfig~EditorConfig#toolbar}.\n *\n * @member {Array.<String>} module:table/table~TableConfig#tableToolbar\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module image/imageresize\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport WidgetResize from '@ckeditor/ckeditor5-widget/src/widgetresize';\nimport ImageResizeCommand from './imageresize/imageresizecommand';\nimport '../theme/imageresize.css';\n/**\n * The image resize plugin.\n *\n * It adds a possibility to resize each image using handles.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class ImageResize extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [WidgetResize];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'ImageResize';\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  init() {\n    const editor = this.editor;\n    const command = new ImageResizeCommand(editor);\n\n    this._registerSchema();\n\n    this._registerConverters();\n\n    editor.commands.add('imageResize', command);\n    editor.editing.downcastDispatcher.on('insert:image', (evt, data, conversionApi) => {\n      const widget = conversionApi.mapper.toViewElement(data.item);\n      const resizer = editor.plugins.get(WidgetResize).attachTo({\n        unit: editor.config.get('image.resizeUnit') || '%',\n        modelElement: data.item,\n        viewElement: widget,\n        downcastWriter: conversionApi.writer,\n\n        getHandleHost(domWidgetElement) {\n          return domWidgetElement.querySelector('img');\n        },\n\n        getResizeHost(domWidgetElement) {\n          return domWidgetElement;\n        },\n\n        // TODO consider other positions.\n        isCentered() {\n          const imageStyle = data.item.getAttribute('imageStyle');\n          return !imageStyle || imageStyle == 'full' || imageStyle == 'alignCenter';\n        },\n\n        onCommit(newValue) {\n          editor.execute('imageResize', {\n            width: newValue\n          });\n        }\n\n      });\n      resizer.on('updateSize', () => {\n        if (!widget.hasClass('image_resized')) {\n          editor.editing.view.change(writer => {\n            writer.addClass('image_resized', widget);\n          });\n        }\n      });\n      resizer.bind('isEnabled').to(command);\n    }, {\n      priority: 'low'\n    });\n  }\n  /**\n   * @private\n   */\n\n\n  _registerSchema() {\n    this.editor.model.schema.extend('image', {\n      allowAttributes: 'width'\n    });\n  }\n  /**\n   * Registers image resize converters.\n   *\n   * @private\n   */\n\n\n  _registerConverters() {\n    const editor = this.editor; // Dedicated converter to propagate image's attribute to the img tag.\n\n    editor.conversion.for('downcast').add(dispatcher => dispatcher.on('attribute:width:image', (evt, data, conversionApi) => {\n      if (!conversionApi.consumable.consume(data.item, evt.name)) {\n        return;\n      }\n\n      const viewWriter = conversionApi.writer;\n      const figure = conversionApi.mapper.toViewElement(data.item);\n\n      if (data.attributeNewValue !== null) {\n        viewWriter.setStyle('width', data.attributeNewValue, figure);\n        viewWriter.addClass('image_resized', figure);\n      } else {\n        viewWriter.removeStyle('width', figure);\n        viewWriter.removeClass('image_resized', figure);\n      }\n    }));\n    editor.conversion.for('upcast').attributeToAttribute({\n      view: {\n        name: 'figure',\n        styles: {\n          width: /.+/\n        }\n      },\n      model: {\n        key: 'width',\n        value: viewElement => viewElement.getStyle('width')\n      }\n    });\n  }\n\n}\n/**\n * The available options are `'px'` or `'%'`.\n *\n * Determines the size unit applied to the resized image.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\timage: {\n *\t\t\t\t\tresizeUnit: 'px'\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n *\n * This option is used by the {@link module:image/imageresize~ImageResize} feature.\n *\n * @default '%'\n * @member {String} module:image/image~ImageConfig#resizeUnit\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module font/font\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport FontFamily from './fontfamily';\nimport FontSize from './fontsize';\nimport FontColor from './fontcolor';\nimport FontBackgroundColor from './fontbackgroundcolor';\n/**\n * A plugin that enables a set of text styling features:\n *\n * * {@link module:font/fontsize~FontSize},\n * * {@link module:font/fontfamily~FontFamily}.\n * * {@link module:font/fontcolor~FontColor},\n * * {@link module:font/fontbackgroundcolor~FontBackgroundColor}.\n *\n * For a detailed overview, check the {@glink features/font Font feature} documentation\n * and the {@glink api/font package page}.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Font extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [FontFamily, FontSize, FontColor, FontBackgroundColor];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Font';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module alignment/alignment\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport AlignmentEditing from './alignmentediting';\nimport AlignmentUI from './alignmentui';\n/**\n * The text alignment plugin.\n *\n * For a detailed overview, check the {@glink features/text-alignment Text alignment feature documentation}\n * and the {@glink api/alignment package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:alignment/alignmentediting~AlignmentEditing} and\n * {@link module:alignment/alignmentui~AlignmentUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Alignment extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [AlignmentEditing, AlignmentUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Alignment';\n  }\n\n}\n/**\n * The configuration of the {@link module:alignment/alignment~Alignment alignment feature}.\n *\n * Read more in {@link module:alignment/alignment~AlignmentConfig}.\n *\n * @member {module:alignment/alignment~AlignmentConfig} module:core/editor/editorconfig~EditorConfig#alignment\n */\n\n/**\n * The configuration of the {@link module:alignment/alignment~Alignment alignment feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\talignment: {\n *\t\t\t\t\toptions: [ 'left', 'right' ]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor configuration options}.\n *\n * @interface AlignmentConfig\n */\n\n/**\n * Available alignment options.\n *\n * The available options are: `'left'`, `'right'`, `'center'` and `'justify'`. Other values are ignored.\n *\n * **Note:** It is recommended to always use `'left'` or `'right'` as these are default values which the user should\n * normally be able to choose depending on the\n * {@glink features/ui-language#setting-the-language-of-the-content language of the editor content}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\talignment: {\n *\t\t\t\t\toptions: [ 'left', 'right' ]\n *\t\t\t\t}\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See the demo of {@glink features/text-alignment#configuring-alignment-options custom alignment options}.\n *\n * @member {Array.<String>} module:alignment/alignment~AlignmentConfig#options\n */","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/underline\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport UnderlineEditing from './underline/underlineediting';\nimport UnderlineUI from './underline/underlineui';\n/**\n * The underline feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/underline/underlineediting~UnderlineEditing} and\n * {@link module:basic-styles/underline/underlineui~UnderlineUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Underline extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [UnderlineEditing, UnderlineUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Underline';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module basic-styles/strikethrough\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport StrikethroughEditing from './strikethrough/strikethroughediting';\nimport StrikethroughUI from './strikethrough/strikethroughui';\n/**\n * The strikethrough feature.\n *\n * For a detailed overview check the {@glink features/basic-styles Basic styles feature documentation}\n * and the {@glink api/basic-styles package page}.\n *\n * This is a \"glue\" plugin which loads the {@link module:basic-styles/strikethrough/strikethroughediting~StrikethroughEditing} and\n * {@link module:basic-styles/strikethrough/strikethroughui~StrikethroughUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Strikethrough extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [StrikethroughEditing, StrikethroughUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Strikethrough';\n  }\n\n}","/**\n * @license Copyright (c) 2003-2019, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md or https://ckeditor.com/legal/ckeditor-oss-license\n */\n\n/**\n * @module highlight/highlight\n */\nimport Plugin from '@ckeditor/ckeditor5-core/src/plugin';\nimport HighlightEditing from './highlightediting';\nimport HighlightUI from './highlightui';\n/**\n * The highlight plugin.\n *\n * For a detailed overview, check the {@glink features/highlight Highlight feature} documentation.\n *\n * This is a \"glue\" plugin which loads the {@link module:highlight/highlightediting~HighlightEditing} and\n * {@link module:highlight/highlightui~HighlightUI} plugins.\n *\n * @extends module:core/plugin~Plugin\n */\n\nexport default class Highlight extends Plugin {\n  /**\n   * @inheritDoc\n   */\n  static get requires() {\n    return [HighlightEditing, HighlightUI];\n  }\n  /**\n   * @inheritDoc\n   */\n\n\n  static get pluginName() {\n    return 'Highlight';\n  }\n\n}\n/**\n * The highlight option descriptor. See {@link module:highlight/highlight~HighlightConfig} to learn more.\n *\n *\t\t{\n *\t\t\tmodel: 'pinkMarker',\n *\t\t\tclass: 'marker-pink',\n *\t\t\ttitle: 'Pink Marker',\n *\t\t\tcolor: 'var(--ck-highlight-marker-pink)',\n *\t\t\ttype: 'marker'\n *\t\t}\n *\n * @typedef {Object} module:highlight/highlight~HighlightOption\n * @property {String} title The user-readable title of the option.\n * @property {String} model The unique attribute value in the model.\n * @property {String} color The CSS `var()` used for the highlighter. The color is used in the user interface to represent the highlighter.\n * There is a possibility to use the default color format like rgb, hex or hsl, but you need to care about the color of `<mark>`\n * by adding CSS classes definition.\n * @property {String} class The CSS class used on the `<mark>` element in the view. It should match the `color` setting.\n * @property {'marker'|'pen'} type The type of highlighter:\n *\n * * `'marker'` &ndash; Uses the `color` as the `background-color` style,\n * * `'pen'` &ndash; Uses the `color` as the font `color` style.\n */\n\n/**\n * The configuration of the {@link module:highlight/highlight~Highlight} feature.\n *\n * Read more in {@link module:highlight/highlight~HighlightConfig}.\n *\n * @member {module:highlight/highlight~HighlightConfig} module:core/editor/editorconfig~EditorConfig#highlight\n */\n\n/**\n * The configuration of the {@link module:highlight/highlight~Highlight highlight feature}.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n * \t\t\t\thighlight:  ... // Highlight feature configuration.\n *\t\t\t} )\n *\t\t\t.then( ... )\n *\t\t\t.catch( ... );\n *\n * See {@link module:core/editor/editorconfig~EditorConfig all editor options}.\n *\n * @interface HighlightConfig\n */\n\n/**\n * The available highlight options. The default value is:\n *\n *\t\toptions: [\n *\t\t\t{\n *\t\t\t\tmodel: 'yellowMarker',\n *\t\t\t\tclass: 'marker-yellow',\n *\t\t\t\ttitle: 'Yellow marker',\n *\t\t\t\tcolor: 'var(--ck-highlight-marker-yellow)',\n *\t\t\t\ttype: 'marker'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tmodel: 'greenMarker',\n *\t\t\t\tclass: 'marker-green',\n *\t\t\t\ttitle: 'Green marker',\n *\t\t\t\tcolor: 'var(--ck-highlight-marker-green)',\n *\t\t\t\ttype: 'marker'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tmodel: 'pinkMarker',\n *\t\t\t\tclass: 'marker-pink',\n *\t\t\t\ttitle: 'Pink marker',\n *\t\t\t\tcolor: 'var(--ck-highlight-marker-pink)',\n *\t\t\t\ttype: 'marker'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tmodel: 'blueMarker',\n *\t\t\t\tclass: 'marker-blue',\n *\t\t\t\ttitle: 'Blue marker',\n *\t\t\t\tcolor: 'var(--ck-highlight-marker-blue)',\n *\t\t\t\ttype: 'marker'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tmodel: 'redPen',\n *\t\t\t\tclass: 'pen-red',\n *\t\t\t\ttitle: 'Red pen',\n *\t\t\t\tcolor: 'var(--ck-highlight-pen-red)',\n *\t\t\t\ttype: 'pen'\n *\t\t\t},\n *\t\t\t{\n *\t\t\t\tmodel: 'greenPen',\n *\t\t\t\tclass: 'pen-green',\n *\t\t\t\ttitle: 'Green pen',\n *\t\t\t\tcolor: 'var(--ck-highlight-pen-green)',\n *\t\t\t\ttype: 'pen'\n *\t\t\t}\n *\t\t]\n *\n * There are two types of highlighters available:\n *\n * * `'marker'` &ndash; Rendered as a `<mark>` element, styled with the `background-color`.\n * * `'pen'` &ndash; Rendered as a `<mark>` element, styled with the font `color`.\n *\n * **Note**: The highlight feature provides a stylesheet with the CSS classes and corresponding colors defined\n * as CSS variables.\n *\n *\t\t:root {\n *\t\t\t--ck-highlight-marker-yellow: #fdfd77;\n *\t\t\t--ck-highlight-marker-green: #63f963;\n *\t\t\t--ck-highlight-marker-pink: #fc7999;\n *\t\t\t--ck-highlight-marker-blue: #72cdfd;\n *\t\t\t--ck-highlight-pen-red: #e91313;\n *\t\t\t--ck-highlight-pen-green: #118800;\n *\t\t}\n *\n *\t\t.marker-yellow { ... }\n *\t\t.marker-green { ... }\n *\t\t.marker-pink { ... }\n *\t\t.marker-blue { ... }\n *\t\t.pen-red { ... }\n *\t\t.pen-green { ... }\n *\n * It is possible to define the `color` property directly as `rgba(R, G, B, A)`,\n * `#RRGGBB[AA]` or `hsla(H, S, L, A)`. In such situation, the color will **only** apply to the UI of\n * the editor and the `<mark>` elements in the content must be styled by custom classes provided by\n * a dedicated stylesheet.\n *\n * **Note**: It is recommended for the `color` property to correspond to the class in the content\n * stylesheet because it represents the highlighter in the user interface of the editor.\n *\n *\t\tClassicEditor\n *\t\t\t.create( editorElement, {\n *\t\t\t\thighlight: {\n *\t\t\t\t\toptions: [\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\tmodel: 'pinkMarker',\n *\t\t\t\t\t\t\tclass: 'marker-pink',\n *\t\t\t\t\t\t\ttitle: 'Pink Marker',\n *\t\t\t\t\t\t\tcolor: 'var(--ck-highlight-marker-pink)',\n *\t\t\t\t\t\t\ttype: 'marker'\n *\t\t\t\t\t\t},\n *\t\t\t\t\t\t{\n *\t\t\t\t\t\t\tmodel: 'redPen',\n *\t\t\t\t\t\t\tclass: 'pen-red',\n *\t\t\t\t\t\t\ttitle: 'Red Pen',\n *\t\t\t\t\t\t\tcolor: 'var(--ck-highlight-pen-red)',\n *\t\t\t\t\t\t\ttype: 'pen'\n *\t\t\t\t\t\t},\n *\t\t\t\t\t]\n *\t\t\t\t}\n *\t\t} )\n *\t\t.then( ... )\n *\t\t.catch( ... );\n *\n * @member {Array.<module:highlight/highlight~HighlightOption>} module:highlight/highlight~HighlightConfig#options\n */"],"sourceRoot":""}